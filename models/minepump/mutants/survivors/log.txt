pump_safe_methane_starting		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness_light		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

high_water_evolution_consistency		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopping		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_state_consistency		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_synch_on		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_effectiveness		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_activation		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

user_cmd_consistency		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopped		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness_light		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

medium_water_evolution_consistency		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_weak_synch_off		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

read_msg_consistency		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

water_level_consistency		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_strong_synch_off		o		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_safe_methane_starting		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness_light		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

high_water_evolution_consistency		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopping		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_state_consistency		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_synch_on		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_effectiveness		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_activation		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

user_cmd_consistency		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopped		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness_light		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

medium_water_evolution_consistency		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_weak_synch_off		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

read_msg_consistency		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

water_level_consistency		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_strong_synch_off		r		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_safe_methane_starting		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness_light		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

high_water_evolution_consistency		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopping		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_state_consistency		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_synch_on		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_effectiveness		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_activation		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

user_cmd_consistency		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopped		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness_light		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

medium_water_evolution_consistency		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_weak_synch_off		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

read_msg_consistency		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

water_level_consistency		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_strong_synch_off		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_safe_methane_starting		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness_light		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

high_water_evolution_consistency		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopping		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_state_consistency		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_synch_on		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_effectiveness		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_activation		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

user_cmd_consistency		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopped		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness_light		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

medium_water_evolution_consistency		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_weak_synch_off		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

read_msg_consistency		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

water_level_consistency		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_strong_synch_off		g		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_safe_methane_starting		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness_light		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

high_water_evolution_consistency		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopping		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_state_consistency		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_synch_on		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_effectiveness		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_activation		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

user_cmd_consistency		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopped		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness_light		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

medium_water_evolution_consistency		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_weak_synch_off		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

read_msg_consistency		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

water_level_consistency		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_strong_synch_off		i		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_safe_methane_starting		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness_light		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

high_water_evolution_consistency		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopping		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_state_consistency		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_synch_on		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_effectiveness		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_activation		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

user_cmd_consistency		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopped		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness_light		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

medium_water_evolution_consistency		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_weak_synch_off		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

read_msg_consistency		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

water_level_consistency		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_strong_synch_off		n		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_safe_methane_starting		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness_light		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

high_water_evolution_consistency		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopping		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_state_consistency		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_synch_on		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_effectiveness		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_activation		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

user_cmd_consistency		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopped		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness_light		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

medium_water_evolution_consistency		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_weak_synch_off		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

read_msg_consistency		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

water_level_consistency		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_strong_synch_off		a		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_safe_methane_starting		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness_light		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

high_water_evolution_consistency		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopping		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_state_consistency		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_synch_on		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_effectiveness		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_activation		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

user_cmd_consistency		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopped		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness_light		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

medium_water_evolution_consistency		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_weak_synch_off		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

read_msg_consistency		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

water_level_consistency		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_strong_synch_off		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_safe_methane_starting		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness_light		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

high_water_evolution_consistency		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopping		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_state_consistency		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_synch_on		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_effectiveness		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_activation		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

user_cmd_consistency		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopped		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness_light		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

medium_water_evolution_consistency		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_weak_synch_off		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

read_msg_consistency		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

water_level_consistency		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_strong_synch_off		.		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_safe_methane_starting		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness_light		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

high_water_evolution_consistency		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopping		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_state_consistency		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_synch_on		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_effectiveness		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_activation		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

user_cmd_consistency		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopped		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness_light		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

medium_water_evolution_consistency		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_weak_synch_off		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

read_msg_consistency		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

water_level_consistency		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_strong_synch_off		p		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_safe_methane_starting		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness_light		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

high_water_evolution_consistency		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopping		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_state_consistency		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_synch_on		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_effectiveness		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_activation		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

user_cmd_consistency		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopped		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness_light		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

medium_water_evolution_consistency		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_weak_synch_off		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

read_msg_consistency		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

water_level_consistency		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_strong_synch_off		m		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_safe_methane_starting		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness_light		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

high_water_evolution_consistency		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopping		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_state_consistency		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_synch_on		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_effectiveness		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_activation		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

user_cmd_consistency		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_stopped		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

methane_sensor_liveness_light		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

medium_water_evolution_consistency		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_weak_synch_off		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

read_msg_consistency		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

water_level_consistency		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_methane_safetyness		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

pump_strong_synch_off		l		 satisfied
Error: The fPromela file does not exist or is not readable!
 --
Usage: ./provelines [options] model.pml

 Options for model checking:
  (none)   Does nothing.
  -check   Verifies the model.  When a problem (assert, deadlock or pro-
           perty violation) is found, an error trace (counterexample) is
           printed and execution stops. 
  -exhaustive 
           Determines also which products have *no* problems. The normal
           check will stop at the first problem,  and does not determine
           whether there are products that have no problems  (e.g. those
           that satisfy a property).
  -bfs 
           Performs a breadth-first search instead of a depth-first search.
  -fdlc    Search for trivially invalid end states (more costly).
  -ltl <property> 
           Checks whether the specified property is satisfied (when used
           with -check). Never claims can be specified manually, too.
  -sim <model.pml>
           Checks whether the specified model refines the input model
			according to the specified properties.
  -stutter
           Executes non stutter steps. When combined with -sim, 
           checks stutter simulation instead of standard simulation.
  -props  <props.pml> 
           Parses the file containing the relevant properties. Required
           by -sim and -stutter.

 Options for output control:
  (none)   Prints a full trace for every counterexample.
  -st      Only prints states when there are no changed variables.
  -nt      Does not print any traces, only information  about  violating
           (or satisfying) products.

 Options for features and feature model:
  (none)   Will attempt to load a TVL feature model that is named as the
           .pml file but with extension .tvl
  -fm <file.tvl> 
           Load the specified TVL file (only used in verification). This
           parameter can be omitted if the TVL file is named as the .pml
           file but with extension .tvl.
  -fmdimacs <dimacsClauseFile.txt> <mappingFile.txt>
           As before, but load the dimacs of the feature model directly.
  -filter <expression> 
           Limit the verification to a subset of the products  specified
           in the TVL file.  The TVL syntax has to be used for this.
  -spin    Treat features like normal variables (as SPIN would do).
  -ospin   Similar to -spin, but statements with a bad guard are removed
           from the  model before model checking.  The input is thus in-
           terpreted as fPromela (not exactly as SPIN would do). This is
           normally more efficient than -spin.

 Options for debugging:
  -exec    Execute the model (does not print states, only model output).
  -l <integer> 
           Stop when the given number of states were explored. (This op-
           tion can also be used for model checking.)
  -s       Parse and print static info (symbol table, FSMs, MTypes, ..).
  -t       Do not delete the generated temporary files.

 --

=====================================================

********** MUTATION SCORE : 0.0% **********

SURVIVORS : 
{
	o
	r
	i
	g
	i
	n
	a
	l
	.
	p
	m
	l
}

ltl fsm_ready: ((((states[0]==0)) U (([] ((states[0]==READY))) || (((states[0]==READY)) U ((states[0]==STARTING))))) && (((states[1]==0)) U (([] ((states[1]==READY))) || (((states[1]==READY)) U ((states[1]==STARTING)))))) && (((states[2]==0)) U (([] ((states[2]==READY))) || (((states[2]==READY)) U ((states[2]==STARTING)))))

ltl fsm_starting: [] ((((! ((states[0]==STARTING))) || (((states[0]==STARTING)) U (((((states[0]==RUNNING)) || ((states[0]==PAUSED))) || ((states[0]==STOPPING))) || ((states[0]==ABORTING))))) && ((! ((states[1]==STARTING))) || (((states[1]==STARTING)) U (((((states[1]==RUNNING)) || ((states[1]==PAUSED))) || ((states[1]==STOPPING))) || ((states[1]==ABORTING)))))) && ((! ((states[2]==STARTING))) || (((states[2]==STARTING)) U (((((states[2]==RUNNING)) || ((states[2]==PAUSED))) || ((states[2]==STOPPING))) || ((states[2]==ABORTING))))))

ltl fsm_running: [] ((((! ((states[0]==RUNNING))) || (([] ((states[0]==RUNNING))) || (((states[0]==RUNNING)) U ((((states[0]==PAUSED)) || ((states[0]==STOPPING))) || ((states[0]==ABORTING)))))) && ((! ((states[1]==RUNNING))) || (([] ((states[1]==RUNNING))) || (((states[1]==RUNNING)) U ((((states[1]==PAUSED)) || ((states[1]==STOPPING))) || ((states[1]==ABORTING))))))) && ((! ((states[2]==RUNNING))) || (([] ((states[2]==RUNNING))) || (((states[2]==RUNNING)) U ((((states[2]==PAUSED)) || ((states[2]==STOPPING))) || ((states[2]==ABORTING)))))))

ltl fsm_paused: [] ((((! ((states[0]==PAUSED))) || (([] ((states[0]==PAUSED))) || (((states[0]==PAUSED)) U (((states[0]==RUNNING)) || ((states[0]==STOPPING)))))) && ((! ((states[1]==PAUSED))) || (([] ((states[1]==PAUSED))) || (((states[1]==PAUSED)) U (((states[1]==RUNNING)) || ((states[1]==STOPPING))))))) && ((! ((states[2]==PAUSED))) || (([] ((states[2]==PAUSED))) || (((states[2]==PAUSED)) U (((states[2]==RUNNING)) || ((states[2]==STOPPING)))))))

ltl fsm_stopping: [] ((([] ((! ((states[0]==STOPPING))) || (((states[0]==STOPPING)) U (((states[0]==STOPPED)) || ((states[0]==ABORTING)))))) && ([] ((! ((states[1]==STOPPING))) || (((states[1]==STOPPING)) U (((states[1]==STOPPED)) || ((states[1]==ABORTING))))))) && ([] ((! ((states[2]==STOPPING))) || (((states[2]==STOPPING)) U (((states[2]==STOPPED)) || ((states[2]==ABORTING)))))))

ltl fsm_stopped: [] ((((! ((states[0]==STOPPED))) || (([] ((states[0]==STOPPED))) || (((states[0]==STOPPED)) U ([] ((states[0]==0)))))) && ((! ((states[1]==STOPPED))) || (([] ((states[1]==STOPPED))) || (((states[1]==STOPPED)) U ([] ((states[1]==0))))))) && ((! ((states[2]==STOPPED))) || (([] ((states[2]==STOPPED))) || (((states[2]==STOPPED)) U ([] ((states[2]==0)))))))

ltl fsm_aborting: [] ((([] ((! ((states[0]==ABORTING))) || (((states[0]==ABORTING)) U ((states[0]==ABORTED))))) && ([] ((! ((states[1]==ABORTING))) || (((states[1]==ABORTING)) U ((states[1]==ABORTED)))))) && ([] ((! ((states[2]==ABORTING))) || (((states[2]==ABORTING)) U ((states[2]==ABORTED))))))

ltl fsm_aborted: [] ((((! ((states[0]==ABORTED))) || (([] ((states[0]==ABORTED))) || (((states[0]==ABORTED)) U ([] ((states[0]==0)))))) && ((! ((states[1]==ABORTED))) || (([] ((states[1]==ABORTED))) || (((states[1]==ABORTED)) U ([] ((states[1]==0))))))) && ((! ((states[2]==ABORTED))) || (([] ((states[2]==ABORTED))) || (((states[2]==ABORTED)) U ([] ((states[2]==0)))))))

ltl abort_is_undoable: [] ((((! ((commands[0]==ABORT))) || (([] ((commands[0]==ABORT))) || (((commands[0]==ABORT)) U ([] ((commands[0]==0)))))) && ((! ((commands[1]==ABORT))) || (([] ((commands[1]==ABORT))) || (((commands[1]==ABORT)) U ([] ((commands[1]==0))))))) && ((! ((commands[2]==ABORT))) || (([] ((commands[2]==ABORT))) || (((commands[2]==ABORT)) U ([] ((commands[2]==0)))))))

ltl supervisor_is_the_first_thread: [] ((! ((states[0]==0))) || (((states[1]==0)) && ((states[2]==0))))

ltl supervisor_constructs_workers: [] ((! (((states[1]==READY)) || ((states[2]==READY)))) || (! ((states[0]==0))))

ltl supervisor_stops_after_all_workers_stop: [] ((! (((states[1]==STOPPED)) && ((states[2]==STOPPED)))) || (([] (<> ((states[0]==PAUSED)))) || (<> ((states[0]==STOPPED)))))

ltl supervisor_stops_after_some_workers_abort: [] ((! (((states[1]==ABORTED)) || ((states[2]==ABORTED)))) || (([] (<> ((states[0]==PAUSED)))) || (<> ((states[0]==STOPPED)))))

ltl supervisor_never_aborts: ! (<> (((states[0]==ABORTED)) || ((commands[0]==ABORT))))

ltl supervisor_halts_last: [] ((! (((states[0]==STOPPING)) || ((states[0]==ABORTING)))) || (<> (((((states[1]==STOPPED)) || ((states[1]==ABORTED))) || ((states[1]==0))) && ((((states[2]==STOPPED)) || ((states[2]==ABORTED))) || ((states[2]==0))))))

ltl liveness: ([] ((([] (<> ((! (((states[0]==RUNNING)) && ((commands[0]==CONTINUE)))) || (executing[0])))) && ([] (<> ((! (((states[1]==RUNNING)) && ((commands[1]==CONTINUE)))) || (executing[1]))))) && ([] (<> ((! (((states[2]==RUNNING)) && ((commands[2]==CONTINUE)))) || (executing[2])))))) || (((([] (<> ((! (((states[0]==RUNNING)) && ((commands[0]==CONTINUE)))) || (executing[0])))) && ([] (<> ((! (((states[1]==RUNNING)) && ((commands[1]==CONTINUE)))) || (executing[1]))))) && ([] (<> ((! (((states[2]==RUNNING)) && ((commands[2]==CONTINUE)))) || (executing[2]))))) U (((states[0]==STOPPING)) || ((states[0]==ABORTING))))

ltl fairness: (((! ([] (<> (((states[0]==RUNNING)) && ((commands[0]==CONTINUE)))))) || ([] (<> (executing[0])))) && ((! ([] (<> (((states[1]==RUNNING)) && ((commands[1]==CONTINUE)))))) || ([] (<> (executing[1]))))) && ((! ([] (<> (((states[2]==RUNNING)) && ((commands[2]==CONTINUE)))))) || ([] (<> (executing[2]))))

proctype Thread()
{
   ((commands[k]==START));
    {
       {
         if
         ::
            (((k==0)&&(13==0)));
            printf('Supervisor: (%e, _) -> %e\\n',8,7);

         ::
            (((k==0)&&(13>0)));
            printf('Supervisor: (%e, %e) -> %e\\n',8,13,7);

         ::
            (((k>0)&&(13==0)));
            printf('Worker %d: (%e, _) -> %e\\n',k,8,7);

         ::
            (((k>0)&&(13>0)));
            printf('Worker %d: (%e, %e) -> %e\\n',k,8,13,7);

         fi;
       };
      states[k] = 7;
    };
   atomic {
      if
      ::
         (((CONTINUE==START)&&(commands[k]==CONTINUE)));
         assert((states[k]==READY));
         commands[k] = START;

      ::
         (((CONTINUE==PAUSE)&&(commands[k]==CONTINUE)));
         assert(((states[k]==STARTING)||(states[k]==RUNNING)));
         commands[k] = PAUSE;

      ::
         (((CONTINUE==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))));
         assert(((states[k]==STARTING)||(states[k]==PAUSED)));
         commands[k] = CONTINUE;

      ::
         (((CONTINUE==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))));
         assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)));
         commands[k] = STOP;

      ::
         ((CONTINUE==ABORT));
         assert((states[k]!=READY));
         commands[k] = ABORT;

      ::
         else;
         printf('Thread %d ignores command %e.\\n',k,commands[k]);

      fi;
    };
    {
      if
      ::
         (1);
          {
            assert((_pid!=1));
            atomic {
               if
               ::
                  (((ABORT==START)&&(commands[k]==CONTINUE)));
                  assert((states[k]==READY));
                  commands[k] = START;

               ::
                  (((ABORT==PAUSE)&&(commands[k]==CONTINUE)));
                  assert(((states[k]==STARTING)||(states[k]==RUNNING)));
                  commands[k] = PAUSE;

               ::
                  (((ABORT==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))));
                  assert(((states[k]==STARTING)||(states[k]==PAUSED)));
                  commands[k] = CONTINUE;

               ::
                  (((ABORT==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))));
                  assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)));
                  commands[k] = STOP;

               ::
                  ((ABORT==ABORT));
                  assert((states[k]!=READY));
                  commands[k] = ABORT;

               ::
                  else;
                  printf('Thread %d ignores command %e.\\n',k,commands[k]);

               fi;
             };
          };

      ::
         (1);
         atomic {
            if
            ::
               (((PAUSE==START)&&(commands[k]==CONTINUE)));
               assert((states[k]==READY));
               commands[k] = START;

            ::
               (((PAUSE==PAUSE)&&(commands[k]==CONTINUE)));
               assert(((states[k]==STARTING)||(states[k]==RUNNING)));
               commands[k] = PAUSE;

            ::
               (((PAUSE==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))));
               assert(((states[k]==STARTING)||(states[k]==PAUSED)));
               commands[k] = CONTINUE;

            ::
               (((PAUSE==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))));
               assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)));
               commands[k] = STOP;

            ::
               ((PAUSE==ABORT));
               assert((states[k]!=READY));
               commands[k] = ABORT;

            ::
               else;
               printf('Thread %d ignores command %e.\\n',k,commands[k]);

            fi;
          };

      ::
         (1);
         atomic {
            if
            ::
               (((STOP==START)&&(commands[k]==CONTINUE)));
               assert((states[k]==READY));
               commands[k] = START;

            ::
               (((STOP==PAUSE)&&(commands[k]==CONTINUE)));
               assert(((states[k]==STARTING)||(states[k]==RUNNING)));
               commands[k] = PAUSE;

            ::
               (((STOP==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))));
               assert(((states[k]==STARTING)||(states[k]==PAUSED)));
               commands[k] = CONTINUE;

            ::
               (((STOP==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))));
               assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)));
               commands[k] = STOP;

            ::
               ((STOP==ABORT));
               assert((states[k]!=READY));
               commands[k] = ABORT;

            ::
               else;
               printf('Thread %d ignores command %e.\\n',k,commands[k]);

            fi;
          };

      ::
         (1);
         (1);

      fi;
    };
   do
   ::
      ((commands[k]==CONTINUE));
      assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)));
      if
      ::
         ((states[k]==STARTING));
          {
             {
               if
               ::
                  (((k==0)&&(12==0)));
                  printf('Supervisor: (%e, _) -> %e\\n',7,6);

               ::
                  (((k==0)&&(12>0)));
                  printf('Supervisor: (%e, %e) -> %e\\n',7,12,6);

               ::
                  (((k>0)&&(12==0)));
                  printf('Worker %d: (%e, _) -> %e\\n',k,7,6);

               ::
                  (((k>0)&&(12>0)));
                  printf('Worker %d: (%e, %e) -> %e\\n',k,7,12,6);

               fi;
             };
            states[k] = 6;
          };

      ::
         ((states[k]==PAUSED));
          {
             {
               if
               ::
                  (((k==0)&&(12==0)));
                  printf('Supervisor: (%e, _) -> %e\\n',5,6);

               ::
                  (((k==0)&&(12>0)));
                  printf('Supervisor: (%e, %e) -> %e\\n',5,12,6);

               ::
                  (((k>0)&&(12==0)));
                  printf('Worker %d: (%e, _) -> %e\\n',k,5,6);

               ::
                  (((k>0)&&(12>0)));
                  printf('Worker %d: (%e, %e) -> %e\\n',k,5,12,6);

               fi;
             };
            states[k] = 6;
          };

      ::
         else;
         (1);

      fi;
       {
         executing[k] = 1;
         if
         ::
            (1);
             {
               assert((_pid!=1));
               atomic {
                  if
                  ::
                     (((ABORT==START)&&(commands[k]==CONTINUE)));
                     assert((states[k]==READY));
                     commands[k] = START;

                  ::
                     (((ABORT==PAUSE)&&(commands[k]==CONTINUE)));
                     assert(((states[k]==STARTING)||(states[k]==RUNNING)));
                     commands[k] = PAUSE;

                  ::
                     (((ABORT==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))));
                     assert(((states[k]==STARTING)||(states[k]==PAUSED)));
                     commands[k] = CONTINUE;

                  ::
                     (((ABORT==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))));
                     assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)));
                     commands[k] = STOP;

                  ::
                     ((ABORT==ABORT));
                     assert((states[k]!=READY));
                     commands[k] = ABORT;

                  ::
                     else;
                     printf('Thread %d ignores command %e.\\n',k,commands[k]);

                  fi;
                };
             };

         ::
            (1);
            atomic {
               if
               ::
                  (((STOP==START)&&(commands[k]==CONTINUE)));
                  assert((states[k]==READY));
                  commands[k] = START;

               ::
                  (((STOP==PAUSE)&&(commands[k]==CONTINUE)));
                  assert(((states[k]==STARTING)||(states[k]==RUNNING)));
                  commands[k] = PAUSE;

               ::
                  (((STOP==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))));
                  assert(((states[k]==STARTING)||(states[k]==PAUSED)));
                  commands[k] = CONTINUE;

               ::
                  (((STOP==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))));
                  assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)));
                  commands[k] = STOP;

               ::
                  ((STOP==ABORT));
                  assert((states[k]!=READY));
                  commands[k] = ABORT;

               ::
                  else;
                  printf('Thread %d ignores command %e.\\n',k,commands[k]);

               fi;
             };

         ::
            (1);
            (1);

         fi;
         executing[k] = 0;
       };

   ::
      ((commands[k]==PAUSE));
      if
      ::
         ((states[k]==PAUSED));
         ((commands[k]!=PAUSED));

      ::
         else;
         assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==STARTING)));
         if
         ::
            (((states[k]==STARTING)||(states[k]==RUNNING)));
             {
                {
                  if
                  ::
                     (((k==0)&&(11==0)));
                     printf('Supervisor: (%e, _) -> %e\\n',6,5);

                  ::
                     (((k==0)&&(11>0)));
                     printf('Supervisor: (%e, %e) -> %e\\n',6,11,5);

                  ::
                     (((k>0)&&(11==0)));
                     printf('Worker %d: (%e, _) -> %e\\n',k,6,5);

                  ::
                     (((k>0)&&(11>0)));
                     printf('Worker %d: (%e, %e) -> %e\\n',k,6,11,5);

                  fi;
                };
               states[k] = 5;
             };

         ::
            else;
            (1);

         fi;

      fi;

   ::
      (((commands[k]==STOP)||(commands[k]==ABORT)));
      goto :b0;

   od;
:b0:
   if
   ::
      ((commands[k]==STOP));
      assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)));
       {
          {
            if
            ::
               (((k==0)&&(10==0)));
               printf('Supervisor: (%e, _) -> %e\\n',states[k],4);

            ::
               (((k==0)&&(10>0)));
               printf('Supervisor: (%e, %e) -> %e\\n',states[k],10,4);

            ::
               (((k>0)&&(10==0)));
               printf('Worker %d: (%e, _) -> %e\\n',k,states[k],4);

            ::
               (((k>0)&&(10>0)));
               printf('Worker %d: (%e, %e) -> %e\\n',k,states[k],10,4);

            fi;
          };
         states[k] = 4;
       };
       {
         if
         ::
            (1);
             {
               assert((_pid!=1));
               atomic {
                  if
                  ::
                     (((ABORT==START)&&(commands[k]==CONTINUE)));
                     assert((states[k]==READY));
                     commands[k] = START;

                  ::
                     (((ABORT==PAUSE)&&(commands[k]==CONTINUE)));
                     assert(((states[k]==STARTING)||(states[k]==RUNNING)));
                     commands[k] = PAUSE;

                  ::
                     (((ABORT==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))));
                     assert(((states[k]==STARTING)||(states[k]==PAUSED)));
                     commands[k] = CONTINUE;

                  ::
                     (((ABORT==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))));
                     assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)));
                     commands[k] = STOP;

                  ::
                     ((ABORT==ABORT));
                     assert((states[k]!=READY));
                     commands[k] = ABORT;

                  ::
                     else;
                     printf('Thread %d ignores command %e.\\n',k,commands[k]);

                  fi;
                };
             };

         ::
            (1);
            (1);

         fi;
       };
       {
          {
            if
            ::
               (((k==0)&&(10==0)));
               printf('Supervisor: (%e, _) -> %e\\n',4,3);

            ::
               (((k==0)&&(10>0)));
               printf('Supervisor: (%e, %e) -> %e\\n',4,10,3);

            ::
               (((k>0)&&(10==0)));
               printf('Worker %d: (%e, _) -> %e\\n',k,4,3);

            ::
               (((k>0)&&(10>0)));
               printf('Worker %d: (%e, %e) -> %e\\n',k,4,10,3);

            fi;
          };
         states[k] = 3;
       };

   ::
      ((commands[k]==ABORT));
      assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==STOPPING)));
       {
          {
            if
            ::
               (((k==0)&&(9==0)));
               printf('Supervisor: (%e, _) -> %e\\n',states[k],2);

            ::
               (((k==0)&&(9>0)));
               printf('Supervisor: (%e, %e) -> %e\\n',states[k],9,2);

            ::
               (((k>0)&&(9==0)));
               printf('Worker %d: (%e, _) -> %e\\n',k,states[k],2);

            ::
               (((k>0)&&(9>0)));
               printf('Worker %d: (%e, %e) -> %e\\n',k,states[k],9,2);

            fi;
          };
         states[k] = 2;
       };
       {
          {
            if
            ::
               (((k==0)&&(9==0)));
               printf('Supervisor: (%e, _) -> %e\\n',2,1);

            ::
               (((k==0)&&(9>0)));
               printf('Supervisor: (%e, %e) -> %e\\n',2,9,1);

            ::
               (((k>0)&&(9==0)));
               printf('Worker %d: (%e, _) -> %e\\n',k,2,1);

            ::
               (((k>0)&&(9>0)));
               printf('Worker %d: (%e, %e) -> %e\\n',k,2,9,1);

            fi;
          };
         states[k] = 1;
       };

   ::
      else;
      assert(0);

   fi;
}
proctype Supervisor()
{
   ((commands[0]==START));
    {
       {
         if
         ::
            (((0==0)&&(13==0)));
            printf('Supervisor: (%e, _) -> %e\\n',8,7);

         ::
            (((0==0)&&(13>0)));
            printf('Supervisor: (%e, %e) -> %e\\n',8,13,7);

         ::
            (((0>0)&&(13==0)));
            printf('Worker %d: (%e, _) -> %e\\n',0,8,7);

         ::
            (((0>0)&&(13>0)));
            printf('Worker %d: (%e, %e) -> %e\\n',0,8,13,7);

         fi;
       };
      states[0] = 7;
       {
         if
         ::
            ((7==RUNNING));
             {
               if
               ::
                  (((12==CONTINUE)&&!(supervisor_started)));
                  printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                  supervisor_started = 1;

               ::
                  else;
                  if
                  ::
                     (serialize_commands);
                      {
                        if
                        ::
                           (((12==START)||(12==PAUSED)));
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((12==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((12==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((12==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((12==STOP)||(12==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b1;

                              od;
:b1:
                            };

                        ::
                           else;
                            {
                              j = (3-1);
                              do
                              ::
                                 ((j>0));
                                  {
                                    if
                                    ::
                                       ((12==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((12==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((12==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((12==STOP)||(12==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j-1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b2;

                              od;
:b2:
                            };

                        fi;
                      };

                  ::
                     else;
                      {
                        printf('Supervisor propagating command %e...\\n',12);
                         {
                           do
                           ::
                              ((j<3));
                               {
                                 if
                                 ::
                                    ((12==START));
                                     {
                                       atomic {
                                          if
                                          ::
                                             (((START==START)&&(commands[j]==CONTINUE)));
                                             assert((states[j]==READY));
                                             commands[j] = START;

                                          ::
                                             (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                             assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                             commands[j] = PAUSE;

                                          ::
                                             (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                             assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                             commands[j] = CONTINUE;

                                          ::
                                             (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                             assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                             commands[j] = STOP;

                                          ::
                                             ((START==ABORT));
                                             assert((states[j]!=READY));
                                             commands[j] = ABORT;

                                          ::
                                             else;
                                             printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                          fi;
                                        };
                                       (run Thread(j));
                                       if
                                       ::
                                          (0);
                                           {
                                             if
                                             ::
                                                ((_pid==0));
                                                printf('Init is waiting for START mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid==1));
                                                printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid>1));
                                                printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                             fi;
                                             (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                             printf('Waiting ended.\\n');
                                           };

                                       ::
                                          else;
                                          (1);

                                       fi;
                                     };

                                 ::
                                    ((12==PAUSE));
                                     {
                                       atomic {
                                          if
                                          ::
                                             (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                             assert((states[j]==READY));
                                             commands[j] = START;

                                          ::
                                             (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                             assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                             commands[j] = PAUSE;

                                          ::
                                             (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                             assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                             commands[j] = CONTINUE;

                                          ::
                                             (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                             assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                             commands[j] = STOP;

                                          ::
                                             ((PAUSE==ABORT));
                                             assert((states[j]!=READY));
                                             commands[j] = ABORT;

                                          ::
                                             else;
                                             printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                          fi;
                                        };
                                       if
                                       ::
                                          (0);
                                           {
                                             if
                                             ::
                                                ((_pid==0));
                                                printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid==1));
                                                printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid>1));
                                                printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                             fi;
                                             ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                             printf('Waiting ended.\\n');
                                           };

                                       ::
                                          else;
                                          (1);

                                       fi;
                                     };

                                 ::
                                    ((12==CONTINUE));
                                     {
                                       atomic {
                                          if
                                          ::
                                             (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                             assert((states[j]==READY));
                                             commands[j] = START;

                                          ::
                                             (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                             assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                             commands[j] = PAUSE;

                                          ::
                                             (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                             assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                             commands[j] = CONTINUE;

                                          ::
                                             (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                             assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                             commands[j] = STOP;

                                          ::
                                             ((CONTINUE==ABORT));
                                             assert((states[j]!=READY));
                                             commands[j] = ABORT;

                                          ::
                                             else;
                                             printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                          fi;
                                        };
                                       if
                                       ::
                                          (0);
                                           {
                                             if
                                             ::
                                                ((_pid==0));
                                                printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid==1));
                                                printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid>1));
                                                printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                             fi;
                                             ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                             printf('Waiting ended.\\n');
                                           };

                                       ::
                                          else;
                                          (1);

                                       fi;
                                     };

                                 ::
                                    (((12==STOP)||(12==ABORT)));
                                     {
                                       atomic {
                                          if
                                          ::
                                             (((STOP==START)&&(commands[j]==CONTINUE)));
                                             assert((states[j]==READY));
                                             commands[j] = START;

                                          ::
                                             (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                             assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                             commands[j] = PAUSE;

                                          ::
                                             (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                             assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                             commands[j] = CONTINUE;

                                          ::
                                             (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                             assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                             commands[j] = STOP;

                                          ::
                                             ((STOP==ABORT));
                                             assert((states[j]!=READY));
                                             commands[j] = ABORT;

                                          ::
                                             else;
                                             printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                          fi;
                                        };
                                       if
                                       ::
                                          (0);
                                           {
                                             if
                                             ::
                                                ((_pid==0));
                                                printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid==1));
                                                printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid>1));
                                                printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                             fi;
                                             (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                             printf('Waiting ended.\\n');
                                           };

                                       ::
                                          else;
                                          (1);

                                       fi;
                                     };

                                 fi;
                               };
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b3;

                           od;
:b3:
                         };
                        do
                        ::
                           ((j<3));
                           if
                           ::
                              ((12==START));
                               {
                                 if
                                 ::
                                    ((_pid==0));
                                    printf('Init is waiting for START mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid==1));
                                    printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid>1));
                                    printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                 fi;
                                 (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                 printf('Waiting ended.\\n');
                               };

                           ::
                              ((12==CONTINUE));
                               {
                                 if
                                 ::
                                    ((_pid==0));
                                    printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid==1));
                                    printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid>1));
                                    printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                 fi;
                                 ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                 printf('Waiting ended.\\n');
                               };

                           ::
                              ((12==PAUSE));
                               {
                                 if
                                 ::
                                    ((_pid==0));
                                    printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid==1));
                                    printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid>1));
                                    printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                 fi;
                                 ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                 printf('Waiting ended.\\n');
                               };

                           ::
                              ((12==STOP));
                               {
                                 if
                                 ::
                                    ((_pid==0));
                                    printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid==1));
                                    printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid>1));
                                    printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                 fi;
                                 (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                 printf('Waiting ended.\\n');
                               };

                           fi;
                           j = (j+1);

                        ::
                           else;
                           j = 1;
                           goto :b4;

                        od;
:b4:
                      };

                  fi;

               fi;
             };

         ::
            ((7==PAUSED));
             {
               if
               ::
                  (((11==CONTINUE)&&!(supervisor_started)));
                  printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                  supervisor_started = 1;

               ::
                  else;
                  if
                  ::
                     (serialize_commands);
                      {
                        if
                        ::
                           (((11==START)||(11==PAUSED)));
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((11==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((11==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((11==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((11==STOP)||(11==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b5;

                              od;
:b5:
                            };

                        ::
                           else;
                            {
                              j = (3-1);
                              do
                              ::
                                 ((j>0));
                                  {
                                    if
                                    ::
                                       ((11==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((11==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((11==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((11==STOP)||(11==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j-1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b6;

                              od;
:b6:
                            };

                        fi;
                      };

                  ::
                     else;
                      {
                        printf('Supervisor propagating command %e...\\n',11);
                         {
                           do
                           ::
                              ((j<3));
                               {
                                 if
                                 ::
                                    ((11==START));
                                     {
                                       atomic {
                                          if
                                          ::
                                             (((START==START)&&(commands[j]==CONTINUE)));
                                             assert((states[j]==READY));
                                             commands[j] = START;

                                          ::
                                             (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                             assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                             commands[j] = PAUSE;

                                          ::
                                             (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                             assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                             commands[j] = CONTINUE;

                                          ::
                                             (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                             assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                             commands[j] = STOP;

                                          ::
                                             ((START==ABORT));
                                             assert((states[j]!=READY));
                                             commands[j] = ABORT;

                                          ::
                                             else;
                                             printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                          fi;
                                        };
                                       (run Thread(j));
                                       if
                                       ::
                                          (0);
                                           {
                                             if
                                             ::
                                                ((_pid==0));
                                                printf('Init is waiting for START mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid==1));
                                                printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid>1));
                                                printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                             fi;
                                             (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                             printf('Waiting ended.\\n');
                                           };

                                       ::
                                          else;
                                          (1);

                                       fi;
                                     };

                                 ::
                                    ((11==PAUSE));
                                     {
                                       atomic {
                                          if
                                          ::
                                             (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                             assert((states[j]==READY));
                                             commands[j] = START;

                                          ::
                                             (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                             assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                             commands[j] = PAUSE;

                                          ::
                                             (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                             assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                             commands[j] = CONTINUE;

                                          ::
                                             (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                             assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                             commands[j] = STOP;

                                          ::
                                             ((PAUSE==ABORT));
                                             assert((states[j]!=READY));
                                             commands[j] = ABORT;

                                          ::
                                             else;
                                             printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                          fi;
                                        };
                                       if
                                       ::
                                          (0);
                                           {
                                             if
                                             ::
                                                ((_pid==0));
                                                printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid==1));
                                                printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid>1));
                                                printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                             fi;
                                             ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                             printf('Waiting ended.\\n');
                                           };

                                       ::
                                          else;
                                          (1);

                                       fi;
                                     };

                                 ::
                                    ((11==CONTINUE));
                                     {
                                       atomic {
                                          if
                                          ::
                                             (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                             assert((states[j]==READY));
                                             commands[j] = START;

                                          ::
                                             (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                             assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                             commands[j] = PAUSE;

                                          ::
                                             (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                             assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                             commands[j] = CONTINUE;

                                          ::
                                             (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                             assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                             commands[j] = STOP;

                                          ::
                                             ((CONTINUE==ABORT));
                                             assert((states[j]!=READY));
                                             commands[j] = ABORT;

                                          ::
                                             else;
                                             printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                          fi;
                                        };
                                       if
                                       ::
                                          (0);
                                           {
                                             if
                                             ::
                                                ((_pid==0));
                                                printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid==1));
                                                printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid>1));
                                                printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                             fi;
                                             ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                             printf('Waiting ended.\\n');
                                           };

                                       ::
                                          else;
                                          (1);

                                       fi;
                                     };

                                 ::
                                    (((11==STOP)||(11==ABORT)));
                                     {
                                       atomic {
                                          if
                                          ::
                                             (((STOP==START)&&(commands[j]==CONTINUE)));
                                             assert((states[j]==READY));
                                             commands[j] = START;

                                          ::
                                             (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                             assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                             commands[j] = PAUSE;

                                          ::
                                             (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                             assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                             commands[j] = CONTINUE;

                                          ::
                                             (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                             assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                             commands[j] = STOP;

                                          ::
                                             ((STOP==ABORT));
                                             assert((states[j]!=READY));
                                             commands[j] = ABORT;

                                          ::
                                             else;
                                             printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                          fi;
                                        };
                                       if
                                       ::
                                          (0);
                                           {
                                             if
                                             ::
                                                ((_pid==0));
                                                printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid==1));
                                                printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid>1));
                                                printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                             fi;
                                             (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                             printf('Waiting ended.\\n');
                                           };

                                       ::
                                          else;
                                          (1);

                                       fi;
                                     };

                                 fi;
                               };
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b7;

                           od;
:b7:
                         };
                        do
                        ::
                           ((j<3));
                           if
                           ::
                              ((11==START));
                               {
                                 if
                                 ::
                                    ((_pid==0));
                                    printf('Init is waiting for START mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid==1));
                                    printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid>1));
                                    printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                 fi;
                                 (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                 printf('Waiting ended.\\n');
                               };

                           ::
                              ((11==CONTINUE));
                               {
                                 if
                                 ::
                                    ((_pid==0));
                                    printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid==1));
                                    printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid>1));
                                    printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                 fi;
                                 ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                 printf('Waiting ended.\\n');
                               };

                           ::
                              ((11==PAUSE));
                               {
                                 if
                                 ::
                                    ((_pid==0));
                                    printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid==1));
                                    printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid>1));
                                    printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                 fi;
                                 ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                 printf('Waiting ended.\\n');
                               };

                           ::
                              ((11==STOP));
                               {
                                 if
                                 ::
                                    ((_pid==0));
                                    printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid==1));
                                    printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid>1));
                                    printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                 fi;
                                 (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                 printf('Waiting ended.\\n');
                               };

                           fi;
                           j = (j+1);

                        ::
                           else;
                           j = 1;
                           goto :b8;

                        od;
:b8:
                      };

                  fi;

               fi;
             };

         ::
            (((7==ABORTING)||(7==STOPPING)));
             {
               if
               ::
                  (((10==CONTINUE)&&!(supervisor_started)));
                  printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                  supervisor_started = 1;

               ::
                  else;
                  if
                  ::
                     (serialize_commands);
                      {
                        if
                        ::
                           (((10==START)||(10==PAUSED)));
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((10==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((10==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((10==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((10==STOP)||(10==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b9;

                              od;
:b9:
                            };

                        ::
                           else;
                            {
                              j = (3-1);
                              do
                              ::
                                 ((j>0));
                                  {
                                    if
                                    ::
                                       ((10==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((10==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((10==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((10==STOP)||(10==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (1);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j-1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b10;

                              od;
:b10:
                            };

                        fi;
                      };

                  ::
                     else;
                      {
                        printf('Supervisor propagating command %e...\\n',10);
                         {
                           do
                           ::
                              ((j<3));
                               {
                                 if
                                 ::
                                    ((10==START));
                                     {
                                       atomic {
                                          if
                                          ::
                                             (((START==START)&&(commands[j]==CONTINUE)));
                                             assert((states[j]==READY));
                                             commands[j] = START;

                                          ::
                                             (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                             assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                             commands[j] = PAUSE;

                                          ::
                                             (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                             assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                             commands[j] = CONTINUE;

                                          ::
                                             (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                             assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                             commands[j] = STOP;

                                          ::
                                             ((START==ABORT));
                                             assert((states[j]!=READY));
                                             commands[j] = ABORT;

                                          ::
                                             else;
                                             printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                          fi;
                                        };
                                       (run Thread(j));
                                       if
                                       ::
                                          (0);
                                           {
                                             if
                                             ::
                                                ((_pid==0));
                                                printf('Init is waiting for START mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid==1));
                                                printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid>1));
                                                printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                             fi;
                                             (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                             printf('Waiting ended.\\n');
                                           };

                                       ::
                                          else;
                                          (1);

                                       fi;
                                     };

                                 ::
                                    ((10==PAUSE));
                                     {
                                       atomic {
                                          if
                                          ::
                                             (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                             assert((states[j]==READY));
                                             commands[j] = START;

                                          ::
                                             (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                             assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                             commands[j] = PAUSE;

                                          ::
                                             (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                             assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                             commands[j] = CONTINUE;

                                          ::
                                             (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                             assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                             commands[j] = STOP;

                                          ::
                                             ((PAUSE==ABORT));
                                             assert((states[j]!=READY));
                                             commands[j] = ABORT;

                                          ::
                                             else;
                                             printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                          fi;
                                        };
                                       if
                                       ::
                                          (0);
                                           {
                                             if
                                             ::
                                                ((_pid==0));
                                                printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid==1));
                                                printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid>1));
                                                printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                             fi;
                                             ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                             printf('Waiting ended.\\n');
                                           };

                                       ::
                                          else;
                                          (1);

                                       fi;
                                     };

                                 ::
                                    ((10==CONTINUE));
                                     {
                                       atomic {
                                          if
                                          ::
                                             (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                             assert((states[j]==READY));
                                             commands[j] = START;

                                          ::
                                             (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                             assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                             commands[j] = PAUSE;

                                          ::
                                             (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                             assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                             commands[j] = CONTINUE;

                                          ::
                                             (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                             assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                             commands[j] = STOP;

                                          ::
                                             ((CONTINUE==ABORT));
                                             assert((states[j]!=READY));
                                             commands[j] = ABORT;

                                          ::
                                             else;
                                             printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                          fi;
                                        };
                                       if
                                       ::
                                          (0);
                                           {
                                             if
                                             ::
                                                ((_pid==0));
                                                printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid==1));
                                                printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid>1));
                                                printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                             fi;
                                             ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                             printf('Waiting ended.\\n');
                                           };

                                       ::
                                          else;
                                          (1);

                                       fi;
                                     };

                                 ::
                                    (((10==STOP)||(10==ABORT)));
                                     {
                                       atomic {
                                          if
                                          ::
                                             (((STOP==START)&&(commands[j]==CONTINUE)));
                                             assert((states[j]==READY));
                                             commands[j] = START;

                                          ::
                                             (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                             assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                             commands[j] = PAUSE;

                                          ::
                                             (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                             assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                             commands[j] = CONTINUE;

                                          ::
                                             (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                             assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                             commands[j] = STOP;

                                          ::
                                             ((STOP==ABORT));
                                             assert((states[j]!=READY));
                                             commands[j] = ABORT;

                                          ::
                                             else;
                                             printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                          fi;
                                        };
                                       if
                                       ::
                                          (0);
                                           {
                                             if
                                             ::
                                                ((_pid==0));
                                                printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid==1));
                                                printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                             ::
                                                ((_pid>1));
                                                printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                             fi;
                                             (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                             printf('Waiting ended.\\n');
                                           };

                                       ::
                                          else;
                                          (1);

                                       fi;
                                     };

                                 fi;
                               };
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b11;

                           od;
:b11:
                         };
                        do
                        ::
                           ((j<3));
                           if
                           ::
                              ((10==START));
                               {
                                 if
                                 ::
                                    ((_pid==0));
                                    printf('Init is waiting for START mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid==1));
                                    printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid>1));
                                    printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                 fi;
                                 (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                 printf('Waiting ended.\\n');
                               };

                           ::
                              ((10==CONTINUE));
                               {
                                 if
                                 ::
                                    ((_pid==0));
                                    printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid==1));
                                    printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid>1));
                                    printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                 fi;
                                 ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                 printf('Waiting ended.\\n');
                               };

                           ::
                              ((10==PAUSE));
                               {
                                 if
                                 ::
                                    ((_pid==0));
                                    printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid==1));
                                    printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid>1));
                                    printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                 fi;
                                 ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                 printf('Waiting ended.\\n');
                               };

                           ::
                              ((10==STOP));
                               {
                                 if
                                 ::
                                    ((_pid==0));
                                    printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid==1));
                                    printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                 ::
                                    ((_pid>1));
                                    printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                 fi;
                                 (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                 printf('Waiting ended.\\n');
                               };

                           fi;
                           j = (j+1);

                        ::
                           else;
                           j = 1;
                           goto :b12;

                        od;
:b12:
                      };

                  fi;

               fi;
             };

         ::
            else;
            (1);

         fi;
       };
    };
   atomic {
      if
      ::
         (((CONTINUE==START)&&(commands[0]==CONTINUE)));
         assert((states[0]==READY));
         commands[0] = START;

      ::
         (((CONTINUE==PAUSE)&&(commands[0]==CONTINUE)));
         assert(((states[0]==STARTING)||(states[0]==RUNNING)));
         commands[0] = PAUSE;

      ::
         (((CONTINUE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))));
         assert(((states[0]==STARTING)||(states[0]==PAUSED)));
         commands[0] = CONTINUE;

      ::
         (((CONTINUE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))));
         assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)));
         commands[0] = STOP;

      ::
         ((CONTINUE==ABORT));
         assert((states[0]!=READY));
         commands[0] = ABORT;

      ::
         else;
         printf('Thread %d ignores command %e.\\n',0,commands[0]);

      fi;
    };
    {
       {
         if
         ::
            (((13==CONTINUE)&&!(supervisor_started)));
            printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
            supervisor_started = 1;

         ::
            else;
            if
            ::
               (serialize_commands);
                {
                  if
                  ::
                     (((13==START)||(13==PAUSED)));
                      {
                        do
                        ::
                           ((j<3));
                            {
                              if
                              ::
                                 ((13==START));
                                  {
                                    atomic {
                                       if
                                       ::
                                          (((START==START)&&(commands[j]==CONTINUE)));
                                          assert((states[j]==READY));
                                          commands[j] = START;

                                       ::
                                          (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                          assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                          commands[j] = PAUSE;

                                       ::
                                          (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                          assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                          commands[j] = CONTINUE;

                                       ::
                                          (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                          assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                          commands[j] = STOP;

                                       ::
                                          ((START==ABORT));
                                          assert((states[j]!=READY));
                                          commands[j] = ABORT;

                                       ::
                                          else;
                                          printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                       fi;
                                     };
                                    (run Thread(j));
                                    if
                                    ::
                                       (1);
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for START mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       else;
                                       (1);

                                    fi;
                                  };

                              ::
                                 ((13==PAUSE));
                                  {
                                    atomic {
                                       if
                                       ::
                                          (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                          assert((states[j]==READY));
                                          commands[j] = START;

                                       ::
                                          (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                          assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                          commands[j] = PAUSE;

                                       ::
                                          (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                          assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                          commands[j] = CONTINUE;

                                       ::
                                          (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                          assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                          commands[j] = STOP;

                                       ::
                                          ((PAUSE==ABORT));
                                          assert((states[j]!=READY));
                                          commands[j] = ABORT;

                                       ::
                                          else;
                                          printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                       fi;
                                     };
                                    if
                                    ::
                                       (1);
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       else;
                                       (1);

                                    fi;
                                  };

                              ::
                                 ((13==CONTINUE));
                                  {
                                    atomic {
                                       if
                                       ::
                                          (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                          assert((states[j]==READY));
                                          commands[j] = START;

                                       ::
                                          (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                          assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                          commands[j] = PAUSE;

                                       ::
                                          (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                          assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                          commands[j] = CONTINUE;

                                       ::
                                          (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                          assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                          commands[j] = STOP;

                                       ::
                                          ((CONTINUE==ABORT));
                                          assert((states[j]!=READY));
                                          commands[j] = ABORT;

                                       ::
                                          else;
                                          printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                       fi;
                                     };
                                    if
                                    ::
                                       (1);
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       else;
                                       (1);

                                    fi;
                                  };

                              ::
                                 (((13==STOP)||(13==ABORT)));
                                  {
                                    atomic {
                                       if
                                       ::
                                          (((STOP==START)&&(commands[j]==CONTINUE)));
                                          assert((states[j]==READY));
                                          commands[j] = START;

                                       ::
                                          (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                          assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                          commands[j] = PAUSE;

                                       ::
                                          (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                          assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                          commands[j] = CONTINUE;

                                       ::
                                          (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                          assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                          commands[j] = STOP;

                                       ::
                                          ((STOP==ABORT));
                                          assert((states[j]!=READY));
                                          commands[j] = ABORT;

                                       ::
                                          else;
                                          printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                       fi;
                                     };
                                    if
                                    ::
                                       (1);
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       else;
                                       (1);

                                    fi;
                                  };

                              fi;
                            };
                           j = (j+1);

                        ::
                           else;
                           j = 1;
                           goto :b13;

                        od;
:b13:
                      };

                  ::
                     else;
                      {
                        j = (3-1);
                        do
                        ::
                           ((j>0));
                            {
                              if
                              ::
                                 ((13==START));
                                  {
                                    atomic {
                                       if
                                       ::
                                          (((START==START)&&(commands[j]==CONTINUE)));
                                          assert((states[j]==READY));
                                          commands[j] = START;

                                       ::
                                          (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                          assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                          commands[j] = PAUSE;

                                       ::
                                          (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                          assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                          commands[j] = CONTINUE;

                                       ::
                                          (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                          assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                          commands[j] = STOP;

                                       ::
                                          ((START==ABORT));
                                          assert((states[j]!=READY));
                                          commands[j] = ABORT;

                                       ::
                                          else;
                                          printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                       fi;
                                     };
                                    (run Thread(j));
                                    if
                                    ::
                                       (1);
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for START mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       else;
                                       (1);

                                    fi;
                                  };

                              ::
                                 ((13==PAUSE));
                                  {
                                    atomic {
                                       if
                                       ::
                                          (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                          assert((states[j]==READY));
                                          commands[j] = START;

                                       ::
                                          (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                          assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                          commands[j] = PAUSE;

                                       ::
                                          (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                          assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                          commands[j] = CONTINUE;

                                       ::
                                          (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                          assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                          commands[j] = STOP;

                                       ::
                                          ((PAUSE==ABORT));
                                          assert((states[j]!=READY));
                                          commands[j] = ABORT;

                                       ::
                                          else;
                                          printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                       fi;
                                     };
                                    if
                                    ::
                                       (1);
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       else;
                                       (1);

                                    fi;
                                  };

                              ::
                                 ((13==CONTINUE));
                                  {
                                    atomic {
                                       if
                                       ::
                                          (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                          assert((states[j]==READY));
                                          commands[j] = START;

                                       ::
                                          (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                          assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                          commands[j] = PAUSE;

                                       ::
                                          (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                          assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                          commands[j] = CONTINUE;

                                       ::
                                          (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                          assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                          commands[j] = STOP;

                                       ::
                                          ((CONTINUE==ABORT));
                                          assert((states[j]!=READY));
                                          commands[j] = ABORT;

                                       ::
                                          else;
                                          printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                       fi;
                                     };
                                    if
                                    ::
                                       (1);
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       else;
                                       (1);

                                    fi;
                                  };

                              ::
                                 (((13==STOP)||(13==ABORT)));
                                  {
                                    atomic {
                                       if
                                       ::
                                          (((STOP==START)&&(commands[j]==CONTINUE)));
                                          assert((states[j]==READY));
                                          commands[j] = START;

                                       ::
                                          (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                          assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                          commands[j] = PAUSE;

                                       ::
                                          (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                          assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                          commands[j] = CONTINUE;

                                       ::
                                          (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                          assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                          commands[j] = STOP;

                                       ::
                                          ((STOP==ABORT));
                                          assert((states[j]!=READY));
                                          commands[j] = ABORT;

                                       ::
                                          else;
                                          printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                       fi;
                                     };
                                    if
                                    ::
                                       (1);
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       else;
                                       (1);

                                    fi;
                                  };

                              fi;
                            };
                           j = (j-1);

                        ::
                           else;
                           j = 1;
                           goto :b14;

                        od;
:b14:
                      };

                  fi;
                };

            ::
               else;
                {
                  printf('Supervisor propagating command %e...\\n',13);
                   {
                     do
                     ::
                        ((j<3));
                         {
                           if
                           ::
                              ((13==START));
                               {
                                 atomic {
                                    if
                                    ::
                                       (((START==START)&&(commands[j]==CONTINUE)));
                                       assert((states[j]==READY));
                                       commands[j] = START;

                                    ::
                                       (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                       assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                       commands[j] = PAUSE;

                                    ::
                                       (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                       assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                       commands[j] = CONTINUE;

                                    ::
                                       (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                       assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                       commands[j] = STOP;

                                    ::
                                       ((START==ABORT));
                                       assert((states[j]!=READY));
                                       commands[j] = ABORT;

                                    ::
                                       else;
                                       printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                    fi;
                                  };
                                 (run Thread(j));
                                 if
                                 ::
                                    (0);
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    else;
                                    (1);

                                 fi;
                               };

                           ::
                              ((13==PAUSE));
                               {
                                 atomic {
                                    if
                                    ::
                                       (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                       assert((states[j]==READY));
                                       commands[j] = START;

                                    ::
                                       (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                       assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                       commands[j] = PAUSE;

                                    ::
                                       (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                       assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                       commands[j] = CONTINUE;

                                    ::
                                       (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                       assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                       commands[j] = STOP;

                                    ::
                                       ((PAUSE==ABORT));
                                       assert((states[j]!=READY));
                                       commands[j] = ABORT;

                                    ::
                                       else;
                                       printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                    fi;
                                  };
                                 if
                                 ::
                                    (0);
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    else;
                                    (1);

                                 fi;
                               };

                           ::
                              ((13==CONTINUE));
                               {
                                 atomic {
                                    if
                                    ::
                                       (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                       assert((states[j]==READY));
                                       commands[j] = START;

                                    ::
                                       (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                       assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                       commands[j] = PAUSE;

                                    ::
                                       (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                       assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                       commands[j] = CONTINUE;

                                    ::
                                       (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                       assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                       commands[j] = STOP;

                                    ::
                                       ((CONTINUE==ABORT));
                                       assert((states[j]!=READY));
                                       commands[j] = ABORT;

                                    ::
                                       else;
                                       printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                    fi;
                                  };
                                 if
                                 ::
                                    (0);
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    else;
                                    (1);

                                 fi;
                               };

                           ::
                              (((13==STOP)||(13==ABORT)));
                               {
                                 atomic {
                                    if
                                    ::
                                       (((STOP==START)&&(commands[j]==CONTINUE)));
                                       assert((states[j]==READY));
                                       commands[j] = START;

                                    ::
                                       (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                       assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                       commands[j] = PAUSE;

                                    ::
                                       (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                       assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                       commands[j] = CONTINUE;

                                    ::
                                       (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                       assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                       commands[j] = STOP;

                                    ::
                                       ((STOP==ABORT));
                                       assert((states[j]!=READY));
                                       commands[j] = ABORT;

                                    ::
                                       else;
                                       printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                    fi;
                                  };
                                 if
                                 ::
                                    (0);
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    else;
                                    (1);

                                 fi;
                               };

                           fi;
                         };
                        j = (j+1);

                     ::
                        else;
                        j = 1;
                        goto :b15;

                     od;
:b15:
                   };
                  do
                  ::
                     ((j<3));
                     if
                     ::
                        ((13==START));
                         {
                           if
                           ::
                              ((_pid==0));
                              printf('Init is waiting for START mask on Thread %d...\\n',j);

                           ::
                              ((_pid==1));
                              printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                           ::
                              ((_pid>1));
                              printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                           fi;
                           (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                           printf('Waiting ended.\\n');
                         };

                     ::
                        ((13==CONTINUE));
                         {
                           if
                           ::
                              ((_pid==0));
                              printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                           ::
                              ((_pid==1));
                              printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                           ::
                              ((_pid>1));
                              printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                           fi;
                           ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                           printf('Waiting ended.\\n');
                         };

                     ::
                        ((13==PAUSE));
                         {
                           if
                           ::
                              ((_pid==0));
                              printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                           ::
                              ((_pid==1));
                              printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                           ::
                              ((_pid>1));
                              printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                           fi;
                           ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                           printf('Waiting ended.\\n');
                         };

                     ::
                        ((13==STOP));
                         {
                           if
                           ::
                              ((_pid==0));
                              printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                           ::
                              ((_pid==1));
                              printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                           ::
                              ((_pid>1));
                              printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                           fi;
                           (((states[j]==STOPPED)||(states[j]==ABORTED)));
                           printf('Waiting ended.\\n');
                         };

                     fi;
                     j = (j+1);

                  ::
                     else;
                     j = 1;
                     goto :b16;

                  od;
:b16:
                };

            fi;

         fi;
       };
    };
   do
   ::
      ((commands[0]==CONTINUE));
      assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)));
      if
      ::
         ((states[0]==STARTING));
          {
             {
               if
               ::
                  (((0==0)&&(12==0)));
                  printf('Supervisor: (%e, _) -> %e\\n',7,6);

               ::
                  (((0==0)&&(12>0)));
                  printf('Supervisor: (%e, %e) -> %e\\n',7,12,6);

               ::
                  (((0>0)&&(12==0)));
                  printf('Worker %d: (%e, _) -> %e\\n',0,7,6);

               ::
                  (((0>0)&&(12>0)));
                  printf('Worker %d: (%e, %e) -> %e\\n',0,7,12,6);

               fi;
             };
            states[0] = 6;
             {
               if
               ::
                  ((6==RUNNING));
                   {
                     if
                     ::
                        (((12==CONTINUE)&&!(supervisor_started)));
                        printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                        supervisor_started = 1;

                     ::
                        else;
                        if
                        ::
                           (serialize_commands);
                            {
                              if
                              ::
                                 (((12==START)||(12==PAUSED)));
                                  {
                                    do
                                    ::
                                       ((j<3));
                                        {
                                          if
                                          ::
                                             ((12==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((12==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((12==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((12==STOP)||(12==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j+1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b18;

                                    od;
:b18:
                                  };

                              ::
                                 else;
                                  {
                                    j = (3-1);
                                    do
                                    ::
                                       ((j>0));
                                        {
                                          if
                                          ::
                                             ((12==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((12==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((12==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((12==STOP)||(12==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j-1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b19;

                                    od;
:b19:
                                  };

                              fi;
                            };

                        ::
                           else;
                            {
                              printf('Supervisor propagating command %e...\\n',12);
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((12==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((12==STOP)||(12==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b20;

                                 od;
:b20:
                               };
                              do
                              ::
                                 ((j<3));
                                 if
                                 ::
                                    ((12==START));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((12==CONTINUE));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((12==PAUSE));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((12==STOP));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 fi;
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b21;

                              od;
:b21:
                            };

                        fi;

                     fi;
                   };

               ::
                  ((6==PAUSED));
                   {
                     if
                     ::
                        (((11==CONTINUE)&&!(supervisor_started)));
                        printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                        supervisor_started = 1;

                     ::
                        else;
                        if
                        ::
                           (serialize_commands);
                            {
                              if
                              ::
                                 (((11==START)||(11==PAUSED)));
                                  {
                                    do
                                    ::
                                       ((j<3));
                                        {
                                          if
                                          ::
                                             ((11==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((11==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((11==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((11==STOP)||(11==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j+1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b22;

                                    od;
:b22:
                                  };

                              ::
                                 else;
                                  {
                                    j = (3-1);
                                    do
                                    ::
                                       ((j>0));
                                        {
                                          if
                                          ::
                                             ((11==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((11==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((11==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((11==STOP)||(11==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j-1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b23;

                                    od;
:b23:
                                  };

                              fi;
                            };

                        ::
                           else;
                            {
                              printf('Supervisor propagating command %e...\\n',11);
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((11==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((11==STOP)||(11==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b24;

                                 od;
:b24:
                               };
                              do
                              ::
                                 ((j<3));
                                 if
                                 ::
                                    ((11==START));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((11==CONTINUE));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((11==PAUSE));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((11==STOP));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 fi;
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b25;

                              od;
:b25:
                            };

                        fi;

                     fi;
                   };

               ::
                  (((6==ABORTING)||(6==STOPPING)));
                   {
                     if
                     ::
                        (((10==CONTINUE)&&!(supervisor_started)));
                        printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                        supervisor_started = 1;

                     ::
                        else;
                        if
                        ::
                           (serialize_commands);
                            {
                              if
                              ::
                                 (((10==START)||(10==PAUSED)));
                                  {
                                    do
                                    ::
                                       ((j<3));
                                        {
                                          if
                                          ::
                                             ((10==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((10==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((10==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((10==STOP)||(10==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j+1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b26;

                                    od;
:b26:
                                  };

                              ::
                                 else;
                                  {
                                    j = (3-1);
                                    do
                                    ::
                                       ((j>0));
                                        {
                                          if
                                          ::
                                             ((10==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((10==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((10==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((10==STOP)||(10==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j-1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b27;

                                    od;
:b27:
                                  };

                              fi;
                            };

                        ::
                           else;
                            {
                              printf('Supervisor propagating command %e...\\n',10);
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((10==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((10==STOP)||(10==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b28;

                                 od;
:b28:
                               };
                              do
                              ::
                                 ((j<3));
                                 if
                                 ::
                                    ((10==START));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((10==CONTINUE));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((10==PAUSE));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((10==STOP));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 fi;
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b29;

                              od;
:b29:
                            };

                        fi;

                     fi;
                   };

               ::
                  else;
                  (1);

               fi;
             };
          };

      ::
         ((states[0]==PAUSED));
          {
             {
               if
               ::
                  (((0==0)&&(12==0)));
                  printf('Supervisor: (%e, _) -> %e\\n',5,6);

               ::
                  (((0==0)&&(12>0)));
                  printf('Supervisor: (%e, %e) -> %e\\n',5,12,6);

               ::
                  (((0>0)&&(12==0)));
                  printf('Worker %d: (%e, _) -> %e\\n',0,5,6);

               ::
                  (((0>0)&&(12>0)));
                  printf('Worker %d: (%e, %e) -> %e\\n',0,5,12,6);

               fi;
             };
            states[0] = 6;
             {
               if
               ::
                  ((6==RUNNING));
                   {
                     if
                     ::
                        (((12==CONTINUE)&&!(supervisor_started)));
                        printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                        supervisor_started = 1;

                     ::
                        else;
                        if
                        ::
                           (serialize_commands);
                            {
                              if
                              ::
                                 (((12==START)||(12==PAUSED)));
                                  {
                                    do
                                    ::
                                       ((j<3));
                                        {
                                          if
                                          ::
                                             ((12==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((12==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((12==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((12==STOP)||(12==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j+1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b30;

                                    od;
:b30:
                                  };

                              ::
                                 else;
                                  {
                                    j = (3-1);
                                    do
                                    ::
                                       ((j>0));
                                        {
                                          if
                                          ::
                                             ((12==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((12==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((12==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((12==STOP)||(12==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j-1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b31;

                                    od;
:b31:
                                  };

                              fi;
                            };

                        ::
                           else;
                            {
                              printf('Supervisor propagating command %e...\\n',12);
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((12==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((12==STOP)||(12==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b32;

                                 od;
:b32:
                               };
                              do
                              ::
                                 ((j<3));
                                 if
                                 ::
                                    ((12==START));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((12==CONTINUE));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((12==PAUSE));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((12==STOP));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 fi;
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b33;

                              od;
:b33:
                            };

                        fi;

                     fi;
                   };

               ::
                  ((6==PAUSED));
                   {
                     if
                     ::
                        (((11==CONTINUE)&&!(supervisor_started)));
                        printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                        supervisor_started = 1;

                     ::
                        else;
                        if
                        ::
                           (serialize_commands);
                            {
                              if
                              ::
                                 (((11==START)||(11==PAUSED)));
                                  {
                                    do
                                    ::
                                       ((j<3));
                                        {
                                          if
                                          ::
                                             ((11==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((11==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((11==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((11==STOP)||(11==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j+1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b34;

                                    od;
:b34:
                                  };

                              ::
                                 else;
                                  {
                                    j = (3-1);
                                    do
                                    ::
                                       ((j>0));
                                        {
                                          if
                                          ::
                                             ((11==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((11==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((11==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((11==STOP)||(11==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j-1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b35;

                                    od;
:b35:
                                  };

                              fi;
                            };

                        ::
                           else;
                            {
                              printf('Supervisor propagating command %e...\\n',11);
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((11==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((11==STOP)||(11==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b36;

                                 od;
:b36:
                               };
                              do
                              ::
                                 ((j<3));
                                 if
                                 ::
                                    ((11==START));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((11==CONTINUE));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((11==PAUSE));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((11==STOP));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 fi;
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b37;

                              od;
:b37:
                            };

                        fi;

                     fi;
                   };

               ::
                  (((6==ABORTING)||(6==STOPPING)));
                   {
                     if
                     ::
                        (((10==CONTINUE)&&!(supervisor_started)));
                        printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                        supervisor_started = 1;

                     ::
                        else;
                        if
                        ::
                           (serialize_commands);
                            {
                              if
                              ::
                                 (((10==START)||(10==PAUSED)));
                                  {
                                    do
                                    ::
                                       ((j<3));
                                        {
                                          if
                                          ::
                                             ((10==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((10==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((10==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((10==STOP)||(10==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j+1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b38;

                                    od;
:b38:
                                  };

                              ::
                                 else;
                                  {
                                    j = (3-1);
                                    do
                                    ::
                                       ((j>0));
                                        {
                                          if
                                          ::
                                             ((10==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((10==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((10==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((10==STOP)||(10==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (1);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j-1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b39;

                                    od;
:b39:
                                  };

                              fi;
                            };

                        ::
                           else;
                            {
                              printf('Supervisor propagating command %e...\\n',10);
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((10==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((10==STOP)||(10==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (0);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b40;

                                 od;
:b40:
                               };
                              do
                              ::
                                 ((j<3));
                                 if
                                 ::
                                    ((10==START));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((10==CONTINUE));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((10==PAUSE));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 ::
                                    ((10==STOP));
                                     {
                                       if
                                       ::
                                          ((_pid==0));
                                          printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid==1));
                                          printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                       ::
                                          ((_pid>1));
                                          printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                       fi;
                                       (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                       printf('Waiting ended.\\n');
                                     };

                                 fi;
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b41;

                              od;
:b41:
                            };

                        fi;

                     fi;
                   };

               ::
                  else;
                  (1);

               fi;
             };
          };

      ::
         else;
         (1);

      fi;
       {
         executing[0] = 1;
          {
            all_workers_stopped = 1;
            do
            ::
               ((j<3));
               all_workers_stopped = (all_workers_stopped&&(states[j]==STOPPED));
               exists_aborted_worker = (exists_aborted_worker||(states[j]==ABORTED));
               j = (j+1);

            ::
               else;
               j = 1;
               goto :b42;

            od;
:b42:
          };
         if
         ::
            (all_workers_stopped);
            printf('Supervisor will stop because all Workers have stopped...\\n');
             {
               atomic {
                  if
                  ::
                     (((STOP==START)&&(commands[0]==CONTINUE)));
                     assert((states[0]==READY));
                     commands[0] = START;

                  ::
                     (((STOP==PAUSE)&&(commands[0]==CONTINUE)));
                     assert(((states[0]==STARTING)||(states[0]==RUNNING)));
                     commands[0] = PAUSE;

                  ::
                     (((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))));
                     assert(((states[0]==STARTING)||(states[0]==PAUSED)));
                     commands[0] = CONTINUE;

                  ::
                     (((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))));
                     assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)));
                     commands[0] = STOP;

                  ::
                     ((STOP==ABORT));
                     assert((states[0]!=READY));
                     commands[0] = ABORT;

                  ::
                     else;
                     printf('Thread %d ignores command %e.\\n',0,commands[0]);

                  fi;
                };
               if
               ::
                  (0);
                   {
                     if
                     ::
                        ((_pid==0));
                        printf('Init is waiting for HALT mask on Thread %d...\\n',0);

                     ::
                        ((_pid==1));
                        printf('Supervisor is waiting for HALT mask on Thread %d...\\n',0);

                     ::
                        ((_pid>1));
                        printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),0);

                     fi;
                     (((states[0]==STOPPED)||(states[0]==ABORTED)));
                     printf('Waiting ended.\\n');
                   };

               ::
                  else;
                  (1);

               fi;
             };

         ::
            (exists_aborted_worker);
            printf('Supervisor will stop because some Workers have aborted...\\n');
             {
               atomic {
                  if
                  ::
                     (((STOP==START)&&(commands[0]==CONTINUE)));
                     assert((states[0]==READY));
                     commands[0] = START;

                  ::
                     (((STOP==PAUSE)&&(commands[0]==CONTINUE)));
                     assert(((states[0]==STARTING)||(states[0]==RUNNING)));
                     commands[0] = PAUSE;

                  ::
                     (((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))));
                     assert(((states[0]==STARTING)||(states[0]==PAUSED)));
                     commands[0] = CONTINUE;

                  ::
                     (((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))));
                     assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)));
                     commands[0] = STOP;

                  ::
                     ((STOP==ABORT));
                     assert((states[0]!=READY));
                     commands[0] = ABORT;

                  ::
                     else;
                     printf('Thread %d ignores command %e.\\n',0,commands[0]);

                  fi;
                };
               if
               ::
                  (0);
                   {
                     if
                     ::
                        ((_pid==0));
                        printf('Init is waiting for HALT mask on Thread %d...\\n',0);

                     ::
                        ((_pid==1));
                        printf('Supervisor is waiting for HALT mask on Thread %d...\\n',0);

                     ::
                        ((_pid>1));
                        printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),0);

                     fi;
                     (((states[0]==STOPPED)||(states[0]==ABORTED)));
                     printf('Waiting ended.\\n');
                   };

               ::
                  else;
                  (1);

               fi;
             };

         ::
            else;
            (1);

         fi;
         executing[0] = 0;
       };

   ::
      ((commands[0]==PAUSE));
      if
      ::
         ((states[0]==PAUSED));
         ((commands[0]!=PAUSED));

      ::
         else;
         assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==STARTING)));
         if
         ::
            (((states[0]==STARTING)||(states[0]==RUNNING)));
             {
                {
                  if
                  ::
                     ((5==RUNNING));
                      {
                        if
                        ::
                           (((12==CONTINUE)&&!(supervisor_started)));
                           printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                           supervisor_started = 1;

                        ::
                           else;
                           if
                           ::
                              (serialize_commands);
                               {
                                 if
                                 ::
                                    (((12==START)||(12==PAUSED)));
                                     {
                                       do
                                       ::
                                          ((j<3));
                                           {
                                             if
                                             ::
                                                ((12==START));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((START==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((START==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   (run Thread(j));
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                ((12==PAUSE));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((PAUSE==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                ((12==CONTINUE));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((CONTINUE==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                (((12==STOP)||(12==ABORT)));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((STOP==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((STOP==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             fi;
                                           };
                                          j = (j+1);

                                       ::
                                          else;
                                          j = 1;
                                          goto :b43;

                                       od;
:b43:
                                     };

                                 ::
                                    else;
                                     {
                                       j = (3-1);
                                       do
                                       ::
                                          ((j>0));
                                           {
                                             if
                                             ::
                                                ((12==START));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((START==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((START==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   (run Thread(j));
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                ((12==PAUSE));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((PAUSE==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                ((12==CONTINUE));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((CONTINUE==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                (((12==STOP)||(12==ABORT)));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((STOP==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((STOP==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             fi;
                                           };
                                          j = (j-1);

                                       ::
                                          else;
                                          j = 1;
                                          goto :b44;

                                       od;
:b44:
                                     };

                                 fi;
                               };

                           ::
                              else;
                               {
                                 printf('Supervisor propagating command %e...\\n',12);
                                  {
                                    do
                                    ::
                                       ((j<3));
                                        {
                                          if
                                          ::
                                             ((12==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (0);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((12==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (0);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((12==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (0);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((12==STOP)||(12==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (0);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j+1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b45;

                                    od;
:b45:
                                  };
                                 do
                                 ::
                                    ((j<3));
                                    if
                                    ::
                                       ((12==START));
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for START mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       ((12==CONTINUE));
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       ((12==PAUSE));
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       ((12==STOP));
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    fi;
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b46;

                                 od;
:b46:
                               };

                           fi;

                        fi;
                      };

                  ::
                     ((5==PAUSED));
                      {
                        if
                        ::
                           (((11==CONTINUE)&&!(supervisor_started)));
                           printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                           supervisor_started = 1;

                        ::
                           else;
                           if
                           ::
                              (serialize_commands);
                               {
                                 if
                                 ::
                                    (((11==START)||(11==PAUSED)));
                                     {
                                       do
                                       ::
                                          ((j<3));
                                           {
                                             if
                                             ::
                                                ((11==START));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((START==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((START==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   (run Thread(j));
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                ((11==PAUSE));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((PAUSE==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                ((11==CONTINUE));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((CONTINUE==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                (((11==STOP)||(11==ABORT)));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((STOP==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((STOP==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             fi;
                                           };
                                          j = (j+1);

                                       ::
                                          else;
                                          j = 1;
                                          goto :b47;

                                       od;
:b47:
                                     };

                                 ::
                                    else;
                                     {
                                       j = (3-1);
                                       do
                                       ::
                                          ((j>0));
                                           {
                                             if
                                             ::
                                                ((11==START));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((START==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((START==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   (run Thread(j));
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                ((11==PAUSE));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((PAUSE==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                ((11==CONTINUE));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((CONTINUE==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                (((11==STOP)||(11==ABORT)));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((STOP==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((STOP==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             fi;
                                           };
                                          j = (j-1);

                                       ::
                                          else;
                                          j = 1;
                                          goto :b48;

                                       od;
:b48:
                                     };

                                 fi;
                               };

                           ::
                              else;
                               {
                                 printf('Supervisor propagating command %e...\\n',11);
                                  {
                                    do
                                    ::
                                       ((j<3));
                                        {
                                          if
                                          ::
                                             ((11==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (0);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((11==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (0);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((11==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (0);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((11==STOP)||(11==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (0);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j+1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b49;

                                    od;
:b49:
                                  };
                                 do
                                 ::
                                    ((j<3));
                                    if
                                    ::
                                       ((11==START));
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for START mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       ((11==CONTINUE));
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       ((11==PAUSE));
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       ((11==STOP));
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    fi;
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b50;

                                 od;
:b50:
                               };

                           fi;

                        fi;
                      };

                  ::
                     (((5==ABORTING)||(5==STOPPING)));
                      {
                        if
                        ::
                           (((10==CONTINUE)&&!(supervisor_started)));
                           printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                           supervisor_started = 1;

                        ::
                           else;
                           if
                           ::
                              (serialize_commands);
                               {
                                 if
                                 ::
                                    (((10==START)||(10==PAUSED)));
                                     {
                                       do
                                       ::
                                          ((j<3));
                                           {
                                             if
                                             ::
                                                ((10==START));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((START==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((START==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   (run Thread(j));
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                ((10==PAUSE));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((PAUSE==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                ((10==CONTINUE));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((CONTINUE==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                (((10==STOP)||(10==ABORT)));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((STOP==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((STOP==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             fi;
                                           };
                                          j = (j+1);

                                       ::
                                          else;
                                          j = 1;
                                          goto :b51;

                                       od;
:b51:
                                     };

                                 ::
                                    else;
                                     {
                                       j = (3-1);
                                       do
                                       ::
                                          ((j>0));
                                           {
                                             if
                                             ::
                                                ((10==START));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((START==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((START==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   (run Thread(j));
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                ((10==PAUSE));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((PAUSE==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                ((10==CONTINUE));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((CONTINUE==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             ::
                                                (((10==STOP)||(10==ABORT)));
                                                 {
                                                   atomic {
                                                      if
                                                      ::
                                                         (((STOP==START)&&(commands[j]==CONTINUE)));
                                                         assert((states[j]==READY));
                                                         commands[j] = START;

                                                      ::
                                                         (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                         assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                         commands[j] = PAUSE;

                                                      ::
                                                         (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                         assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                         commands[j] = CONTINUE;

                                                      ::
                                                         (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                         assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                         commands[j] = STOP;

                                                      ::
                                                         ((STOP==ABORT));
                                                         assert((states[j]!=READY));
                                                         commands[j] = ABORT;

                                                      ::
                                                         else;
                                                         printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                      fi;
                                                    };
                                                   if
                                                   ::
                                                      (1);
                                                       {
                                                         if
                                                         ::
                                                            ((_pid==0));
                                                            printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid==1));
                                                            printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                         ::
                                                            ((_pid>1));
                                                            printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                         fi;
                                                         (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                         printf('Waiting ended.\\n');
                                                       };

                                                   ::
                                                      else;
                                                      (1);

                                                   fi;
                                                 };

                                             fi;
                                           };
                                          j = (j-1);

                                       ::
                                          else;
                                          j = 1;
                                          goto :b52;

                                       od;
:b52:
                                     };

                                 fi;
                               };

                           ::
                              else;
                               {
                                 printf('Supervisor propagating command %e...\\n',10);
                                  {
                                    do
                                    ::
                                       ((j<3));
                                        {
                                          if
                                          ::
                                             ((10==START));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((START==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((START==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                (run Thread(j));
                                                if
                                                ::
                                                   (0);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((10==PAUSE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((PAUSE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (0);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             ((10==CONTINUE));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((CONTINUE==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (0);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          ::
                                             (((10==STOP)||(10==ABORT)));
                                              {
                                                atomic {
                                                   if
                                                   ::
                                                      (((STOP==START)&&(commands[j]==CONTINUE)));
                                                      assert((states[j]==READY));
                                                      commands[j] = START;

                                                   ::
                                                      (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                      assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                      commands[j] = PAUSE;

                                                   ::
                                                      (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                      assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                      commands[j] = CONTINUE;

                                                   ::
                                                      (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                      assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                      commands[j] = STOP;

                                                   ::
                                                      ((STOP==ABORT));
                                                      assert((states[j]!=READY));
                                                      commands[j] = ABORT;

                                                   ::
                                                      else;
                                                      printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                   fi;
                                                 };
                                                if
                                                ::
                                                   (0);
                                                    {
                                                      if
                                                      ::
                                                         ((_pid==0));
                                                         printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid==1));
                                                         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                      ::
                                                         ((_pid>1));
                                                         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                      fi;
                                                      (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                      printf('Waiting ended.\\n');
                                                    };

                                                ::
                                                   else;
                                                   (1);

                                                fi;
                                              };

                                          fi;
                                        };
                                       j = (j+1);

                                    ::
                                       else;
                                       j = 1;
                                       goto :b53;

                                    od;
:b53:
                                  };
                                 do
                                 ::
                                    ((j<3));
                                    if
                                    ::
                                       ((10==START));
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for START mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       ((10==CONTINUE));
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       ((10==PAUSE));
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    ::
                                       ((10==STOP));
                                        {
                                          if
                                          ::
                                             ((_pid==0));
                                             printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid==1));
                                             printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                          ::
                                             ((_pid>1));
                                             printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                          fi;
                                          (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                          printf('Waiting ended.\\n');
                                        };

                                    fi;
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b54;

                                 od;
:b54:
                               };

                           fi;

                        fi;
                      };

                  ::
                     else;
                     (1);

                  fi;
                };
                {
                  if
                  ::
                     (((0==0)&&(11==0)));
                     printf('Supervisor: (%e, _) -> %e\\n',6,5);

                  ::
                     (((0==0)&&(11>0)));
                     printf('Supervisor: (%e, %e) -> %e\\n',6,11,5);

                  ::
                     (((0>0)&&(11==0)));
                     printf('Worker %d: (%e, _) -> %e\\n',0,6,5);

                  ::
                     (((0>0)&&(11>0)));
                     printf('Worker %d: (%e, %e) -> %e\\n',0,6,11,5);

                  fi;
                };
               states[0] = 5;
             };

         ::
            else;
            (1);

         fi;

      fi;

   ::
      (((commands[0]==STOP)||(commands[0]==ABORT)));
      goto :b17;

   od;
:b17:
   if
   ::
      ((commands[0]==STOP));
      assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)));
       {
          {
            if
            ::
               (((0==0)&&(10==0)));
               printf('Supervisor: (%e, _) -> %e\\n',states[0],4);

            ::
               (((0==0)&&(10>0)));
               printf('Supervisor: (%e, %e) -> %e\\n',states[0],10,4);

            ::
               (((0>0)&&(10==0)));
               printf('Worker %d: (%e, _) -> %e\\n',0,states[0],4);

            ::
               (((0>0)&&(10>0)));
               printf('Worker %d: (%e, %e) -> %e\\n',0,states[0],10,4);

            fi;
          };
         states[0] = 4;
          {
            if
            ::
               ((4==RUNNING));
                {
                  if
                  ::
                     (((12==CONTINUE)&&!(supervisor_started)));
                     printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                     supervisor_started = 1;

                  ::
                     else;
                     if
                     ::
                        (serialize_commands);
                         {
                           if
                           ::
                              (((12==START)||(12==PAUSED)));
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((12==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((12==STOP)||(12==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b55;

                                 od;
:b55:
                               };

                           ::
                              else;
                               {
                                 j = (3-1);
                                 do
                                 ::
                                    ((j>0));
                                     {
                                       if
                                       ::
                                          ((12==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((12==STOP)||(12==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j-1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b56;

                                 od;
:b56:
                               };

                           fi;
                         };

                     ::
                        else;
                         {
                           printf('Supervisor propagating command %e...\\n',12);
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((12==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((12==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((12==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((12==STOP)||(12==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b57;

                              od;
:b57:
                            };
                           do
                           ::
                              ((j<3));
                              if
                              ::
                                 ((12==START));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((12==CONTINUE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((12==PAUSE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((12==STOP));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              fi;
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b58;

                           od;
:b58:
                         };

                     fi;

                  fi;
                };

            ::
               ((4==PAUSED));
                {
                  if
                  ::
                     (((11==CONTINUE)&&!(supervisor_started)));
                     printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                     supervisor_started = 1;

                  ::
                     else;
                     if
                     ::
                        (serialize_commands);
                         {
                           if
                           ::
                              (((11==START)||(11==PAUSED)));
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((11==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((11==STOP)||(11==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b59;

                                 od;
:b59:
                               };

                           ::
                              else;
                               {
                                 j = (3-1);
                                 do
                                 ::
                                    ((j>0));
                                     {
                                       if
                                       ::
                                          ((11==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((11==STOP)||(11==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j-1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b60;

                                 od;
:b60:
                               };

                           fi;
                         };

                     ::
                        else;
                         {
                           printf('Supervisor propagating command %e...\\n',11);
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((11==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((11==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((11==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((11==STOP)||(11==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b61;

                              od;
:b61:
                            };
                           do
                           ::
                              ((j<3));
                              if
                              ::
                                 ((11==START));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((11==CONTINUE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((11==PAUSE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((11==STOP));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              fi;
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b62;

                           od;
:b62:
                         };

                     fi;

                  fi;
                };

            ::
               (((4==ABORTING)||(4==STOPPING)));
                {
                  if
                  ::
                     (((10==CONTINUE)&&!(supervisor_started)));
                     printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                     supervisor_started = 1;

                  ::
                     else;
                     if
                     ::
                        (serialize_commands);
                         {
                           if
                           ::
                              (((10==START)||(10==PAUSED)));
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((10==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((10==STOP)||(10==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b63;

                                 od;
:b63:
                               };

                           ::
                              else;
                               {
                                 j = (3-1);
                                 do
                                 ::
                                    ((j>0));
                                     {
                                       if
                                       ::
                                          ((10==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((10==STOP)||(10==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j-1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b64;

                                 od;
:b64:
                               };

                           fi;
                         };

                     ::
                        else;
                         {
                           printf('Supervisor propagating command %e...\\n',10);
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((10==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((10==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((10==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((10==STOP)||(10==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b65;

                              od;
:b65:
                            };
                           do
                           ::
                              ((j<3));
                              if
                              ::
                                 ((10==START));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((10==CONTINUE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((10==PAUSE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((10==STOP));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              fi;
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b66;

                           od;
:b66:
                         };

                     fi;

                  fi;
                };

            ::
               else;
               (1);

            fi;
          };
       };
       {
          {
            if
            ::
               ((3==RUNNING));
                {
                  if
                  ::
                     (((12==CONTINUE)&&!(supervisor_started)));
                     printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                     supervisor_started = 1;

                  ::
                     else;
                     if
                     ::
                        (serialize_commands);
                         {
                           if
                           ::
                              (((12==START)||(12==PAUSED)));
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((12==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((12==STOP)||(12==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b67;

                                 od;
:b67:
                               };

                           ::
                              else;
                               {
                                 j = (3-1);
                                 do
                                 ::
                                    ((j>0));
                                     {
                                       if
                                       ::
                                          ((12==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((12==STOP)||(12==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j-1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b68;

                                 od;
:b68:
                               };

                           fi;
                         };

                     ::
                        else;
                         {
                           printf('Supervisor propagating command %e...\\n',12);
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((12==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((12==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((12==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((12==STOP)||(12==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b69;

                              od;
:b69:
                            };
                           do
                           ::
                              ((j<3));
                              if
                              ::
                                 ((12==START));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((12==CONTINUE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((12==PAUSE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((12==STOP));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              fi;
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b70;

                           od;
:b70:
                         };

                     fi;

                  fi;
                };

            ::
               ((3==PAUSED));
                {
                  if
                  ::
                     (((11==CONTINUE)&&!(supervisor_started)));
                     printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                     supervisor_started = 1;

                  ::
                     else;
                     if
                     ::
                        (serialize_commands);
                         {
                           if
                           ::
                              (((11==START)||(11==PAUSED)));
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((11==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((11==STOP)||(11==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b71;

                                 od;
:b71:
                               };

                           ::
                              else;
                               {
                                 j = (3-1);
                                 do
                                 ::
                                    ((j>0));
                                     {
                                       if
                                       ::
                                          ((11==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((11==STOP)||(11==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j-1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b72;

                                 od;
:b72:
                               };

                           fi;
                         };

                     ::
                        else;
                         {
                           printf('Supervisor propagating command %e...\\n',11);
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((11==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((11==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((11==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((11==STOP)||(11==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b73;

                              od;
:b73:
                            };
                           do
                           ::
                              ((j<3));
                              if
                              ::
                                 ((11==START));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((11==CONTINUE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((11==PAUSE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((11==STOP));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              fi;
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b74;

                           od;
:b74:
                         };

                     fi;

                  fi;
                };

            ::
               (((3==ABORTING)||(3==STOPPING)));
                {
                  if
                  ::
                     (((10==CONTINUE)&&!(supervisor_started)));
                     printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                     supervisor_started = 1;

                  ::
                     else;
                     if
                     ::
                        (serialize_commands);
                         {
                           if
                           ::
                              (((10==START)||(10==PAUSED)));
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((10==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((10==STOP)||(10==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b75;

                                 od;
:b75:
                               };

                           ::
                              else;
                               {
                                 j = (3-1);
                                 do
                                 ::
                                    ((j>0));
                                     {
                                       if
                                       ::
                                          ((10==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((10==STOP)||(10==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j-1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b76;

                                 od;
:b76:
                               };

                           fi;
                         };

                     ::
                        else;
                         {
                           printf('Supervisor propagating command %e...\\n',10);
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((10==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((10==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((10==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((10==STOP)||(10==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b77;

                              od;
:b77:
                            };
                           do
                           ::
                              ((j<3));
                              if
                              ::
                                 ((10==START));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((10==CONTINUE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((10==PAUSE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((10==STOP));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              fi;
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b78;

                           od;
:b78:
                         };

                     fi;

                  fi;
                };

            ::
               else;
               (1);

            fi;
          };
          {
            if
            ::
               (((0==0)&&(10==0)));
               printf('Supervisor: (%e, _) -> %e\\n',4,3);

            ::
               (((0==0)&&(10>0)));
               printf('Supervisor: (%e, %e) -> %e\\n',4,10,3);

            ::
               (((0>0)&&(10==0)));
               printf('Worker %d: (%e, _) -> %e\\n',0,4,3);

            ::
               (((0>0)&&(10>0)));
               printf('Worker %d: (%e, %e) -> %e\\n',0,4,10,3);

            fi;
          };
         states[0] = 3;
       };

   ::
      ((commands[0]==ABORT));
      assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==STOPPING)));
       {
          {
            if
            ::
               (((0==0)&&(9==0)));
               printf('Supervisor: (%e, _) -> %e\\n',states[0],2);

            ::
               (((0==0)&&(9>0)));
               printf('Supervisor: (%e, %e) -> %e\\n',states[0],9,2);

            ::
               (((0>0)&&(9==0)));
               printf('Worker %d: (%e, _) -> %e\\n',0,states[0],2);

            ::
               (((0>0)&&(9>0)));
               printf('Worker %d: (%e, %e) -> %e\\n',0,states[0],9,2);

            fi;
          };
         states[0] = 2;
          {
            if
            ::
               ((2==RUNNING));
                {
                  if
                  ::
                     (((12==CONTINUE)&&!(supervisor_started)));
                     printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                     supervisor_started = 1;

                  ::
                     else;
                     if
                     ::
                        (serialize_commands);
                         {
                           if
                           ::
                              (((12==START)||(12==PAUSED)));
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((12==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((12==STOP)||(12==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b79;

                                 od;
:b79:
                               };

                           ::
                              else;
                               {
                                 j = (3-1);
                                 do
                                 ::
                                    ((j>0));
                                     {
                                       if
                                       ::
                                          ((12==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((12==STOP)||(12==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j-1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b80;

                                 od;
:b80:
                               };

                           fi;
                         };

                     ::
                        else;
                         {
                           printf('Supervisor propagating command %e...\\n',12);
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((12==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((12==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((12==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((12==STOP)||(12==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b81;

                              od;
:b81:
                            };
                           do
                           ::
                              ((j<3));
                              if
                              ::
                                 ((12==START));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((12==CONTINUE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((12==PAUSE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((12==STOP));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              fi;
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b82;

                           od;
:b82:
                         };

                     fi;

                  fi;
                };

            ::
               ((2==PAUSED));
                {
                  if
                  ::
                     (((11==CONTINUE)&&!(supervisor_started)));
                     printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                     supervisor_started = 1;

                  ::
                     else;
                     if
                     ::
                        (serialize_commands);
                         {
                           if
                           ::
                              (((11==START)||(11==PAUSED)));
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((11==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((11==STOP)||(11==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b83;

                                 od;
:b83:
                               };

                           ::
                              else;
                               {
                                 j = (3-1);
                                 do
                                 ::
                                    ((j>0));
                                     {
                                       if
                                       ::
                                          ((11==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((11==STOP)||(11==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j-1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b84;

                                 od;
:b84:
                               };

                           fi;
                         };

                     ::
                        else;
                         {
                           printf('Supervisor propagating command %e...\\n',11);
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((11==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((11==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((11==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((11==STOP)||(11==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b85;

                              od;
:b85:
                            };
                           do
                           ::
                              ((j<3));
                              if
                              ::
                                 ((11==START));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((11==CONTINUE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((11==PAUSE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((11==STOP));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              fi;
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b86;

                           od;
:b86:
                         };

                     fi;

                  fi;
                };

            ::
               (((2==ABORTING)||(2==STOPPING)));
                {
                  if
                  ::
                     (((10==CONTINUE)&&!(supervisor_started)));
                     printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                     supervisor_started = 1;

                  ::
                     else;
                     if
                     ::
                        (serialize_commands);
                         {
                           if
                           ::
                              (((10==START)||(10==PAUSED)));
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((10==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((10==STOP)||(10==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b87;

                                 od;
:b87:
                               };

                           ::
                              else;
                               {
                                 j = (3-1);
                                 do
                                 ::
                                    ((j>0));
                                     {
                                       if
                                       ::
                                          ((10==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((10==STOP)||(10==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j-1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b88;

                                 od;
:b88:
                               };

                           fi;
                         };

                     ::
                        else;
                         {
                           printf('Supervisor propagating command %e...\\n',10);
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((10==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((10==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((10==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((10==STOP)||(10==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b89;

                              od;
:b89:
                            };
                           do
                           ::
                              ((j<3));
                              if
                              ::
                                 ((10==START));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((10==CONTINUE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((10==PAUSE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((10==STOP));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              fi;
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b90;

                           od;
:b90:
                         };

                     fi;

                  fi;
                };

            ::
               else;
               (1);

            fi;
          };
       };
       {
          {
            if
            ::
               ((1==RUNNING));
                {
                  if
                  ::
                     (((12==CONTINUE)&&!(supervisor_started)));
                     printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                     supervisor_started = 1;

                  ::
                     else;
                     if
                     ::
                        (serialize_commands);
                         {
                           if
                           ::
                              (((12==START)||(12==PAUSED)));
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((12==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((12==STOP)||(12==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b91;

                                 od;
:b91:
                               };

                           ::
                              else;
                               {
                                 j = (3-1);
                                 do
                                 ::
                                    ((j>0));
                                     {
                                       if
                                       ::
                                          ((12==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((12==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((12==STOP)||(12==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j-1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b92;

                                 od;
:b92:
                               };

                           fi;
                         };

                     ::
                        else;
                         {
                           printf('Supervisor propagating command %e...\\n',12);
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((12==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((12==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((12==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((12==STOP)||(12==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b93;

                              od;
:b93:
                            };
                           do
                           ::
                              ((j<3));
                              if
                              ::
                                 ((12==START));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((12==CONTINUE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((12==PAUSE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((12==STOP));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              fi;
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b94;

                           od;
:b94:
                         };

                     fi;

                  fi;
                };

            ::
               ((1==PAUSED));
                {
                  if
                  ::
                     (((11==CONTINUE)&&!(supervisor_started)));
                     printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                     supervisor_started = 1;

                  ::
                     else;
                     if
                     ::
                        (serialize_commands);
                         {
                           if
                           ::
                              (((11==START)||(11==PAUSED)));
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((11==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((11==STOP)||(11==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b95;

                                 od;
:b95:
                               };

                           ::
                              else;
                               {
                                 j = (3-1);
                                 do
                                 ::
                                    ((j>0));
                                     {
                                       if
                                       ::
                                          ((11==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((11==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((11==STOP)||(11==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j-1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b96;

                                 od;
:b96:
                               };

                           fi;
                         };

                     ::
                        else;
                         {
                           printf('Supervisor propagating command %e...\\n',11);
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((11==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((11==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((11==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((11==STOP)||(11==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b97;

                              od;
:b97:
                            };
                           do
                           ::
                              ((j<3));
                              if
                              ::
                                 ((11==START));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((11==CONTINUE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((11==PAUSE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((11==STOP));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              fi;
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b98;

                           od;
:b98:
                         };

                     fi;

                  fi;
                };

            ::
               (((1==ABORTING)||(1==STOPPING)));
                {
                  if
                  ::
                     (((10==CONTINUE)&&!(supervisor_started)));
                     printf('Supervisor doesn't propagate the first CONTINUE command.\\n');
                     supervisor_started = 1;

                  ::
                     else;
                     if
                     ::
                        (serialize_commands);
                         {
                           if
                           ::
                              (((10==START)||(10==PAUSED)));
                               {
                                 do
                                 ::
                                    ((j<3));
                                     {
                                       if
                                       ::
                                          ((10==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((10==STOP)||(10==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j+1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b99;

                                 od;
:b99:
                               };

                           ::
                              else;
                               {
                                 j = (3-1);
                                 do
                                 ::
                                    ((j>0));
                                     {
                                       if
                                       ::
                                          ((10==START));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((START==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((START==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             (run Thread(j));
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==PAUSE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((PAUSE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          ((10==CONTINUE));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((CONTINUE==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       ::
                                          (((10==STOP)||(10==ABORT)));
                                           {
                                             atomic {
                                                if
                                                ::
                                                   (((STOP==START)&&(commands[j]==CONTINUE)));
                                                   assert((states[j]==READY));
                                                   commands[j] = START;

                                                ::
                                                   (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                   assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                   commands[j] = PAUSE;

                                                ::
                                                   (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                   assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                   commands[j] = CONTINUE;

                                                ::
                                                   (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                   assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                   commands[j] = STOP;

                                                ::
                                                   ((STOP==ABORT));
                                                   assert((states[j]!=READY));
                                                   commands[j] = ABORT;

                                                ::
                                                   else;
                                                   printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                                fi;
                                              };
                                             if
                                             ::
                                                (1);
                                                 {
                                                   if
                                                   ::
                                                      ((_pid==0));
                                                      printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid==1));
                                                      printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                   ::
                                                      ((_pid>1));
                                                      printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                   fi;
                                                   (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                   printf('Waiting ended.\\n');
                                                 };

                                             ::
                                                else;
                                                (1);

                                             fi;
                                           };

                                       fi;
                                     };
                                    j = (j-1);

                                 ::
                                    else;
                                    j = 1;
                                    goto :b100;

                                 od;
:b100:
                               };

                           fi;
                         };

                     ::
                        else;
                         {
                           printf('Supervisor propagating command %e...\\n',10);
                            {
                              do
                              ::
                                 ((j<3));
                                  {
                                    if
                                    ::
                                       ((10==START));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((START==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((START==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((START==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          (run Thread(j));
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((10==PAUSE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((PAUSE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((PAUSE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((PAUSE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       ((10==CONTINUE));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((CONTINUE==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((CONTINUE==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    ::
                                       (((10==STOP)||(10==ABORT)));
                                        {
                                          atomic {
                                             if
                                             ::
                                                (((STOP==START)&&(commands[j]==CONTINUE)));
                                                assert((states[j]==READY));
                                                commands[j] = START;

                                             ::
                                                (((STOP==PAUSE)&&(commands[j]==CONTINUE)));
                                                assert(((states[j]==STARTING)||(states[j]==RUNNING)));
                                                commands[j] = PAUSE;

                                             ::
                                                (((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))));
                                                assert(((states[j]==STARTING)||(states[j]==PAUSED)));
                                                commands[j] = CONTINUE;

                                             ::
                                                (((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))));
                                                assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)));
                                                commands[j] = STOP;

                                             ::
                                                ((STOP==ABORT));
                                                assert((states[j]!=READY));
                                                commands[j] = ABORT;

                                             ::
                                                else;
                                                printf('Thread %d ignores command %e.\\n',j,commands[j]);

                                             fi;
                                           };
                                          if
                                          ::
                                             (0);
                                              {
                                                if
                                                ::
                                                   ((_pid==0));
                                                   printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid==1));
                                                   printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                                ::
                                                   ((_pid>1));
                                                   printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                                fi;
                                                (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                                printf('Waiting ended.\\n');
                                              };

                                          ::
                                             else;
                                             (1);

                                          fi;
                                        };

                                    fi;
                                  };
                                 j = (j+1);

                              ::
                                 else;
                                 j = 1;
                                 goto :b101;

                              od;
:b101:
                            };
                           do
                           ::
                              ((j<3));
                              if
                              ::
                                 ((10==START));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for START mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((10==CONTINUE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((10==PAUSE));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    ((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              ::
                                 ((10==STOP));
                                  {
                                    if
                                    ::
                                       ((_pid==0));
                                       printf('Init is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid==1));
                                       printf('Supervisor is waiting for HALT mask on Thread %d...\\n',j);

                                    ::
                                       ((_pid>1));
                                       printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),j);

                                    fi;
                                    (((states[j]==STOPPED)||(states[j]==ABORTED)));
                                    printf('Waiting ended.\\n');
                                  };

                              fi;
                              j = (j+1);

                           ::
                              else;
                              j = 1;
                              goto :b102;

                           od;
:b102:
                         };

                     fi;

                  fi;
                };

            ::
               else;
               (1);

            fi;
          };
          {
            if
            ::
               (((0==0)&&(9==0)));
               printf('Supervisor: (%e, _) -> %e\\n',2,1);

            ::
               (((0==0)&&(9>0)));
               printf('Supervisor: (%e, %e) -> %e\\n',2,9,1);

            ::
               (((0>0)&&(9==0)));
               printf('Worker %d: (%e, _) -> %e\\n',0,2,1);

            ::
               (((0>0)&&(9>0)));
               printf('Worker %d: (%e, %e) -> %e\\n',0,2,9,1);

            fi;
          };
         states[0] = 1;
       };

   ::
      else;
      assert(0);

   fi;
}
proctype :init:()
{
    {
      d_step {
         do
         ::
            ((i<3));
            assert((states[i]==0));
            assert((commands[i]==0));
            i = (i+1);

         ::
            else;
            goto :b103;

         od;
:b103:
         i = 0;
       };
    };
    {
      d_step {
         if
         ::
            (1);
            serialize_commands = 1;

         ::
            (1);
            serialize_commands = 0;

         fi;
         all_workers_stopped = 0;
         exists_aborted_worker = 0;
         supervisor_started = 0;
         do
         ::
            ((i<3));
             {
                {
                  states[i] = READY;
                  commands[i] = CONTINUE;
                };
             };
            i = (i+1);

         ::
            else;
            goto :b104;

         od;
:b104:
       };
    };
   i = 0;
    {
      d_step {
         do
         ::
            ((i<3));
            assert((states[i]==8));
            assert((commands[i]==12));
            i = (i+1);

         ::
            else;
            goto :b105;

         od;
:b105:
         i = 0;
       };
    };
   printf('Init starts Supervisor...\\n');
    {
      atomic {
         if
         ::
            (((START==START)&&(commands[0]==CONTINUE)));
            assert((states[0]==READY));
            commands[0] = START;

         ::
            (((START==PAUSE)&&(commands[0]==CONTINUE)));
            assert(((states[0]==STARTING)||(states[0]==RUNNING)));
            commands[0] = PAUSE;

         ::
            (((START==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))));
            assert(((states[0]==STARTING)||(states[0]==PAUSED)));
            commands[0] = CONTINUE;

         ::
            (((START==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))));
            assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)));
            commands[0] = STOP;

         ::
            ((START==ABORT));
            assert((states[0]!=READY));
            commands[0] = ABORT;

         ::
            else;
            printf('Thread %d ignores command %e.\\n',0,commands[0]);

         fi;
       };
      (run Supervisor());
       {
         if
         ::
            ((_pid==0));
            printf('Init is waiting for START mask on Thread %d...\\n',0);

         ::
            ((_pid==1));
            printf('Supervisor is waiting for START mask on Thread %d...\\n',0);

         ::
            ((_pid>1));
            printf('Worker %d is waiting for START mask on Thread %d...\\n',(_pid-1),0);

         fi;
         (((((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)));
         printf('Waiting ended.\\n');
       };
    };
   do
   ::
      if
      ::
         ((states[0]==RUNNING));
         printf('Init pauses Supervisor...\\n');
         if
         ::
            (1);
             {
               atomic {
                  if
                  ::
                     (((PAUSE==START)&&(commands[0]==CONTINUE)));
                     assert((states[0]==READY));
                     commands[0] = START;

                  ::
                     (((PAUSE==PAUSE)&&(commands[0]==CONTINUE)));
                     assert(((states[0]==STARTING)||(states[0]==RUNNING)));
                     commands[0] = PAUSE;

                  ::
                     (((PAUSE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))));
                     assert(((states[0]==STARTING)||(states[0]==PAUSED)));
                     commands[0] = CONTINUE;

                  ::
                     (((PAUSE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))));
                     assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)));
                     commands[0] = STOP;

                  ::
                     ((PAUSE==ABORT));
                     assert((states[0]!=READY));
                     commands[0] = ABORT;

                  ::
                     else;
                     printf('Thread %d ignores command %e.\\n',0,commands[0]);

                  fi;
                };
               if
               ::
                  (1);
                   {
                     if
                     ::
                        ((_pid==0));
                        printf('Init is waiting for PAUSED mask on Thread %d...\\n',0);

                     ::
                        ((_pid==1));
                        printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',0);

                     ::
                        ((_pid>1));
                        printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),0);

                     fi;
                     ((((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)));
                     printf('Waiting ended.\\n');
                   };

               ::
                  else;
                  (1);

               fi;
             };

         ::
            (1);
             {
               atomic {
                  if
                  ::
                     (((PAUSE==START)&&(commands[0]==CONTINUE)));
                     assert((states[0]==READY));
                     commands[0] = START;

                  ::
                     (((PAUSE==PAUSE)&&(commands[0]==CONTINUE)));
                     assert(((states[0]==STARTING)||(states[0]==RUNNING)));
                     commands[0] = PAUSE;

                  ::
                     (((PAUSE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))));
                     assert(((states[0]==STARTING)||(states[0]==PAUSED)));
                     commands[0] = CONTINUE;

                  ::
                     (((PAUSE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))));
                     assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)));
                     commands[0] = STOP;

                  ::
                     ((PAUSE==ABORT));
                     assert((states[0]!=READY));
                     commands[0] = ABORT;

                  ::
                     else;
                     printf('Thread %d ignores command %e.\\n',0,commands[0]);

                  fi;
                };
               if
               ::
                  (0);
                   {
                     if
                     ::
                        ((_pid==0));
                        printf('Init is waiting for PAUSED mask on Thread %d...\\n',0);

                     ::
                        ((_pid==1));
                        printf('Supervisor is waiting for PAUSED mask on Thread %d...\\n',0);

                     ::
                        ((_pid>1));
                        printf('Worker %d is waiting for PAUSED mask on Thread %d...\\n',(_pid-1),0);

                     fi;
                     ((((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)));
                     printf('Waiting ended.\\n');
                   };

               ::
                  else;
                  (1);

               fi;
             };

         fi;

      ::
         ((states[0]==PAUSED));
         printf('Init resumes Supervisor...\\n');
         if
         ::
            (1);
             {
               atomic {
                  if
                  ::
                     (((CONTINUE==START)&&(commands[0]==CONTINUE)));
                     assert((states[0]==READY));
                     commands[0] = START;

                  ::
                     (((CONTINUE==PAUSE)&&(commands[0]==CONTINUE)));
                     assert(((states[0]==STARTING)||(states[0]==RUNNING)));
                     commands[0] = PAUSE;

                  ::
                     (((CONTINUE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))));
                     assert(((states[0]==STARTING)||(states[0]==PAUSED)));
                     commands[0] = CONTINUE;

                  ::
                     (((CONTINUE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))));
                     assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)));
                     commands[0] = STOP;

                  ::
                     ((CONTINUE==ABORT));
                     assert((states[0]!=READY));
                     commands[0] = ABORT;

                  ::
                     else;
                     printf('Thread %d ignores command %e.\\n',0,commands[0]);

                  fi;
                };
               if
               ::
                  (1);
                   {
                     if
                     ::
                        ((_pid==0));
                        printf('Init is waiting for RESUME mask on Thread %d...\\n',0);

                     ::
                        ((_pid==1));
                        printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',0);

                     ::
                        ((_pid>1));
                        printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),0);

                     fi;
                     ((((((states[0]==RUNNING)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)));
                     printf('Waiting ended.\\n');
                   };

               ::
                  else;
                  (1);

               fi;
             };

         ::
            (1);
             {
               atomic {
                  if
                  ::
                     (((CONTINUE==START)&&(commands[0]==CONTINUE)));
                     assert((states[0]==READY));
                     commands[0] = START;

                  ::
                     (((CONTINUE==PAUSE)&&(commands[0]==CONTINUE)));
                     assert(((states[0]==STARTING)||(states[0]==RUNNING)));
                     commands[0] = PAUSE;

                  ::
                     (((CONTINUE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))));
                     assert(((states[0]==STARTING)||(states[0]==PAUSED)));
                     commands[0] = CONTINUE;

                  ::
                     (((CONTINUE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))));
                     assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)));
                     commands[0] = STOP;

                  ::
                     ((CONTINUE==ABORT));
                     assert((states[0]!=READY));
                     commands[0] = ABORT;

                  ::
                     else;
                     printf('Thread %d ignores command %e.\\n',0,commands[0]);

                  fi;
                };
               if
               ::
                  (0);
                   {
                     if
                     ::
                        ((_pid==0));
                        printf('Init is waiting for RESUME mask on Thread %d...\\n',0);

                     ::
                        ((_pid==1));
                        printf('Supervisor is waiting for RESUME mask on Thread %d...\\n',0);

                     ::
                        ((_pid>1));
                        printf('Worker %d is waiting for RESUME mask on Thread %d...\\n',(_pid-1),0);

                     fi;
                     ((((((states[0]==RUNNING)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)));
                     printf('Waiting ended.\\n');
                   };

               ::
                  else;
                  (1);

               fi;
             };

         fi;

      ::
         (1);
         (1);

      fi;

   ::
      goto :b106;

   od;
:b106:
   if
   ::
      printf('Init stops Supervisor...\\n');
      if
      ::
         (1);
          {
            atomic {
               if
               ::
                  (((STOP==START)&&(commands[0]==CONTINUE)));
                  assert((states[0]==READY));
                  commands[0] = START;

               ::
                  (((STOP==PAUSE)&&(commands[0]==CONTINUE)));
                  assert(((states[0]==STARTING)||(states[0]==RUNNING)));
                  commands[0] = PAUSE;

               ::
                  (((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))));
                  assert(((states[0]==STARTING)||(states[0]==PAUSED)));
                  commands[0] = CONTINUE;

               ::
                  (((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))));
                  assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)));
                  commands[0] = STOP;

               ::
                  ((STOP==ABORT));
                  assert((states[0]!=READY));
                  commands[0] = ABORT;

               ::
                  else;
                  printf('Thread %d ignores command %e.\\n',0,commands[0]);

               fi;
             };
            if
            ::
               (1);
                {
                  if
                  ::
                     ((_pid==0));
                     printf('Init is waiting for HALT mask on Thread %d...\\n',0);

                  ::
                     ((_pid==1));
                     printf('Supervisor is waiting for HALT mask on Thread %d...\\n',0);

                  ::
                     ((_pid>1));
                     printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),0);

                  fi;
                  (((states[0]==STOPPED)||(states[0]==ABORTED)));
                  printf('Waiting ended.\\n');
                };

            ::
               else;
               (1);

            fi;
          };

      ::
         (1);
          {
            atomic {
               if
               ::
                  (((STOP==START)&&(commands[0]==CONTINUE)));
                  assert((states[0]==READY));
                  commands[0] = START;

               ::
                  (((STOP==PAUSE)&&(commands[0]==CONTINUE)));
                  assert(((states[0]==STARTING)||(states[0]==RUNNING)));
                  commands[0] = PAUSE;

               ::
                  (((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))));
                  assert(((states[0]==STARTING)||(states[0]==PAUSED)));
                  commands[0] = CONTINUE;

               ::
                  (((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))));
                  assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)));
                  commands[0] = STOP;

               ::
                  ((STOP==ABORT));
                  assert((states[0]!=READY));
                  commands[0] = ABORT;

               ::
                  else;
                  printf('Thread %d ignores command %e.\\n',0,commands[0]);

               fi;
             };
            if
            ::
               (0);
                {
                  if
                  ::
                     ((_pid==0));
                     printf('Init is waiting for HALT mask on Thread %d...\\n',0);

                  ::
                     ((_pid==1));
                     printf('Supervisor is waiting for HALT mask on Thread %d...\\n',0);

                  ::
                     ((_pid>1));
                     printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),0);

                  fi;
                  (((states[0]==STOPPED)||(states[0]==ABORTED)));
                  printf('Waiting ended.\\n');
                };

            ::
               else;
               (1);

            fi;
          };

      fi;

   ::
      (1);
      (1);

   fi;
    {
      if
      ::
         ((_pid==0));
         printf('Init is waiting for HALT mask on Thread %d...\\n',0);

      ::
         ((_pid==1));
         printf('Supervisor is waiting for HALT mask on Thread %d...\\n',0);

      ::
         ((_pid>1));
         printf('Worker %d is waiting for HALT mask on Thread %d...\\n',(_pid-1),0);

      fi;
      (((states[0]==STOPPED)||(states[0]==ABORTED)));
      printf('Waiting ended.\\n');
    };
   i = 0;
    {
      d_step {
         do
         ::
            ((i<3));
             {
                {
                  states[i] = 0;
                  commands[i] = 0;
                  executing[i] = 0;
                };
             };
            i = (i+1);

         ::
            else;
            goto :b107;

         od;
:b107:
       };
    };
   i = 0;
    {
      d_step {
         do
         ::
            ((i<3));
            assert((states[i]==0));
            assert((commands[i]==0));
            i = (i+1);

         ::
            else;
            goto :b108;

         od;
:b108:
         i = 0;
       };
    };
}

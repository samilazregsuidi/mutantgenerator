#ifdef PEG
struct T_SRC {
	char *fl; int ln;
} T_SRC[NTRANS];

void
tr_2_src(int m, char *file, int ln)
{	T_SRC[m].fl = file;
	T_SRC[m].ln = ln;
}

void
putpeg(int n, int m)
{	printf("%5d	trans %4d ", m, n);
	printf("%s:%d\n",
		T_SRC[n].fl, T_SRC[n].ln);
}
#endif

void
settable(void)
{	Trans *T;
	Trans *settr(int, int, int, int, int, char *, int, int, int);

	trans = (Trans ***) emalloc(21*sizeof(Trans **));

	/* proctype 19: fairness */

	trans[19] = (Trans **) emalloc(128*sizeof(Trans *));

	trans[19][20]	= settr(17824,0,19,1,0,".(goto)", 0, 2, 0);
	T = trans[19][19] = settr(17823,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17823,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17823,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17823,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17823,0,7,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17823,0,9,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17823,0,11,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17823,0,13,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17823,0,15,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17823,0,17,0,0,"DO", 0, 2, 0);
	trans[19][1]	= settr(17805,0,26,3,0,"((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))", 1, 2, 0);
	trans[19][2]	= settr(17806,0,26,1,0,"goto accept_S9", 0, 2, 0);
	trans[19][3]	= settr(17807,0,69,4,0,"(!(executing[2]))", 1, 2, 0);
	trans[19][4]	= settr(17808,0,69,1,0,"goto T0_S94", 0, 2, 0);
	trans[19][5]	= settr(17809,0,78,1,0,"(1)", 0, 2, 0);
	trans[19][6]	= settr(17810,0,78,1,0,"goto T0_S62", 0, 2, 0);
	trans[19][7]	= settr(17811,0,38,5,0,"((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))", 1, 2, 0);
	trans[19][8]	= settr(17812,0,38,1,0,"goto accept_S178", 0, 2, 0);
	trans[19][9]	= settr(17813,0,92,6,0,"(!(executing[1]))", 1, 2, 0);
	trans[19][10]	= settr(17814,0,92,1,0,"goto T0_S263", 0, 2, 0);
	trans[19][11]	= settr(17815,0,101,1,0,"(1)", 0, 2, 0);
	trans[19][12]	= settr(17816,0,101,1,0,"goto T0_S231", 0, 2, 0);
	trans[19][13]	= settr(17817,0,50,7,0,"((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))", 1, 2, 0);
	trans[19][14]	= settr(17818,0,50,1,0,"goto accept_S347", 0, 2, 0);
	trans[19][15]	= settr(17819,0,115,8,0,"(!(executing[0]))", 1, 2, 0);
	trans[19][16]	= settr(17820,0,115,1,0,"goto T0_S432", 0, 2, 0);
	trans[19][17]	= settr(17821,0,124,1,0,"(1)", 0, 2, 0);
	trans[19][18]	= settr(17822,0,124,1,0,"goto T0_S400", 0, 2, 0);
	trans[19][21]	= settr(17825,0,26,1,0,"break", 0, 2, 0);
	trans[19][27]	= settr(17831,0,26,1,0,".(goto)", 0, 2, 0);
	T = trans[19][26] = settr(17830,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17830,0,22,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17830,0,24,0,0,"DO", 0, 2, 0);
	trans[19][22]	= settr(17826,0,62,9,0,"((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))", 1, 2, 0);
	trans[19][23]	= settr(17827,0,62,1,0,"goto T0_S9", 0, 2, 0);
	trans[19][24]	= settr(17828,0,69,10,0,"(!(executing[2]))", 1, 2, 0);
	trans[19][25]	= settr(17829,0,69,1,0,"goto T0_S94", 0, 2, 0);
	trans[19][28]	= settr(17832,0,31,1,0,"break", 0, 2, 0);
	trans[19][32]	= settr(17836,0,31,1,0,".(goto)", 0, 2, 0);
	T = trans[19][31] = settr(17835,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17835,0,29,0,0,"DO", 0, 2, 0);
	trans[19][29]	= settr(17833,0,69,11,0,"(!(executing[2]))", 1, 2, 0);
	trans[19][30]	= settr(17834,0,69,1,0,"goto T0_S94", 0, 2, 0);
	trans[19][33]	= settr(17837,0,38,1,0,"break", 0, 2, 0);
	trans[19][39]	= settr(17843,0,38,1,0,".(goto)", 0, 2, 0);
	T = trans[19][38] = settr(17842,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17842,0,34,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17842,0,36,0,0,"DO", 0, 2, 0);
	trans[19][34]	= settr(17838,0,85,12,0,"((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))", 1, 2, 0);
	trans[19][35]	= settr(17839,0,85,1,0,"goto T0_S178", 0, 2, 0);
	trans[19][36]	= settr(17840,0,92,13,0,"(!(executing[1]))", 1, 2, 0);
	trans[19][37]	= settr(17841,0,92,1,0,"goto T0_S263", 0, 2, 0);
	trans[19][40]	= settr(17844,0,43,1,0,"break", 0, 2, 0);
	trans[19][44]	= settr(17848,0,43,1,0,".(goto)", 0, 2, 0);
	T = trans[19][43] = settr(17847,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17847,0,41,0,0,"DO", 0, 2, 0);
	trans[19][41]	= settr(17845,0,92,14,0,"(!(executing[1]))", 1, 2, 0);
	trans[19][42]	= settr(17846,0,92,1,0,"goto T0_S263", 0, 2, 0);
	trans[19][45]	= settr(17849,0,50,1,0,"break", 0, 2, 0);
	trans[19][51]	= settr(17855,0,50,1,0,".(goto)", 0, 2, 0);
	T = trans[19][50] = settr(17854,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17854,0,46,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17854,0,48,0,0,"DO", 0, 2, 0);
	trans[19][46]	= settr(17850,0,108,15,0,"((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))", 1, 2, 0);
	trans[19][47]	= settr(17851,0,108,1,0,"goto T0_S347", 0, 2, 0);
	trans[19][48]	= settr(17852,0,115,16,0,"(!(executing[0]))", 1, 2, 0);
	trans[19][49]	= settr(17853,0,115,1,0,"goto T0_S432", 0, 2, 0);
	trans[19][52]	= settr(17856,0,55,1,0,"break", 0, 2, 0);
	trans[19][56]	= settr(17860,0,55,1,0,".(goto)", 0, 2, 0);
	T = trans[19][55] = settr(17859,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17859,0,53,0,0,"DO", 0, 2, 0);
	trans[19][53]	= settr(17857,0,115,17,0,"(!(executing[0]))", 1, 2, 0);
	trans[19][54]	= settr(17858,0,115,1,0,"goto T0_S432", 0, 2, 0);
	trans[19][57]	= settr(17861,0,62,1,0,"break", 0, 2, 0);
	trans[19][63]	= settr(17867,0,62,1,0,".(goto)", 0, 2, 0);
	T = trans[19][62] = settr(17866,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17866,0,58,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17866,0,60,0,0,"DO", 0, 2, 0);
	trans[19][58]	= settr(17862,0,26,18,0,"((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))", 1, 2, 0);
	trans[19][59]	= settr(17863,0,26,1,0,"goto accept_S9", 0, 2, 0);
	trans[19][60]	= settr(17864,0,69,19,0,"(!(executing[2]))", 1, 2, 0);
	trans[19][61]	= settr(17865,0,69,1,0,"goto T0_S94", 0, 2, 0);
	trans[19][64]	= settr(17868,0,69,1,0,"break", 0, 2, 0);
	trans[19][70]	= settr(17874,0,69,1,0,".(goto)", 0, 2, 0);
	T = trans[19][69] = settr(17873,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17873,0,65,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17873,0,67,0,0,"DO", 0, 2, 0);
	trans[19][65]	= settr(17869,0,69,20,0,"(!(executing[2]))", 1, 2, 0);
	trans[19][66]	= settr(17870,0,69,1,0,"goto T0_S94", 0, 2, 0);
	trans[19][67]	= settr(17871,0,31,21,0,"((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))", 1, 2, 0);
	trans[19][68]	= settr(17872,0,31,1,0,"goto accept_S94", 0, 2, 0);
	trans[19][71]	= settr(17875,0,78,1,0,"break", 0, 2, 0);
	trans[19][79]	= settr(17883,0,78,1,0,".(goto)", 0, 2, 0);
	T = trans[19][78] = settr(17882,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17882,0,72,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17882,0,74,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17882,0,76,0,0,"DO", 0, 2, 0);
	trans[19][72]	= settr(17876,0,69,22,0,"(!(executing[2]))", 1, 2, 0);
	trans[19][73]	= settr(17877,0,69,1,0,"goto T0_S94", 0, 2, 0);
	trans[19][74]	= settr(17878,0,78,1,0,"(1)", 0, 2, 0);
	trans[19][75]	= settr(17879,0,78,1,0,"goto T0_S62", 0, 2, 0);
	trans[19][76]	= settr(17880,0,31,23,0,"((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))", 1, 2, 0);
	trans[19][77]	= settr(17881,0,31,1,0,"goto accept_S94", 0, 2, 0);
	trans[19][80]	= settr(17884,0,85,1,0,"break", 0, 2, 0);
	trans[19][86]	= settr(17890,0,85,1,0,".(goto)", 0, 2, 0);
	T = trans[19][85] = settr(17889,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17889,0,81,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17889,0,83,0,0,"DO", 0, 2, 0);
	trans[19][81]	= settr(17885,0,38,24,0,"((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))", 1, 2, 0);
	trans[19][82]	= settr(17886,0,38,1,0,"goto accept_S178", 0, 2, 0);
	trans[19][83]	= settr(17887,0,92,25,0,"(!(executing[1]))", 1, 2, 0);
	trans[19][84]	= settr(17888,0,92,1,0,"goto T0_S263", 0, 2, 0);
	trans[19][87]	= settr(17891,0,92,1,0,"break", 0, 2, 0);
	trans[19][93]	= settr(17897,0,92,1,0,".(goto)", 0, 2, 0);
	T = trans[19][92] = settr(17896,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17896,0,88,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17896,0,90,0,0,"DO", 0, 2, 0);
	trans[19][88]	= settr(17892,0,92,26,0,"(!(executing[1]))", 1, 2, 0);
	trans[19][89]	= settr(17893,0,92,1,0,"goto T0_S263", 0, 2, 0);
	trans[19][90]	= settr(17894,0,43,27,0,"((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))", 1, 2, 0);
	trans[19][91]	= settr(17895,0,43,1,0,"goto accept_S263", 0, 2, 0);
	trans[19][94]	= settr(17898,0,101,1,0,"break", 0, 2, 0);
	trans[19][102]	= settr(17906,0,101,1,0,".(goto)", 0, 2, 0);
	T = trans[19][101] = settr(17905,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17905,0,95,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17905,0,97,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17905,0,99,0,0,"DO", 0, 2, 0);
	trans[19][95]	= settr(17899,0,92,28,0,"(!(executing[1]))", 1, 2, 0);
	trans[19][96]	= settr(17900,0,92,1,0,"goto T0_S263", 0, 2, 0);
	trans[19][97]	= settr(17901,0,101,1,0,"(1)", 0, 2, 0);
	trans[19][98]	= settr(17902,0,101,1,0,"goto T0_S231", 0, 2, 0);
	trans[19][99]	= settr(17903,0,43,29,0,"((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))", 1, 2, 0);
	trans[19][100]	= settr(17904,0,43,1,0,"goto accept_S263", 0, 2, 0);
	trans[19][103]	= settr(17907,0,108,1,0,"break", 0, 2, 0);
	trans[19][109]	= settr(17913,0,108,1,0,".(goto)", 0, 2, 0);
	T = trans[19][108] = settr(17912,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17912,0,104,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17912,0,106,0,0,"DO", 0, 2, 0);
	trans[19][104]	= settr(17908,0,50,30,0,"((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))", 1, 2, 0);
	trans[19][105]	= settr(17909,0,50,1,0,"goto accept_S347", 0, 2, 0);
	trans[19][106]	= settr(17910,0,115,31,0,"(!(executing[0]))", 1, 2, 0);
	trans[19][107]	= settr(17911,0,115,1,0,"goto T0_S432", 0, 2, 0);
	trans[19][110]	= settr(17914,0,115,1,0,"break", 0, 2, 0);
	trans[19][116]	= settr(17920,0,115,1,0,".(goto)", 0, 2, 0);
	T = trans[19][115] = settr(17919,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17919,0,111,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17919,0,113,0,0,"DO", 0, 2, 0);
	trans[19][111]	= settr(17915,0,115,32,0,"(!(executing[0]))", 1, 2, 0);
	trans[19][112]	= settr(17916,0,115,1,0,"goto T0_S432", 0, 2, 0);
	trans[19][113]	= settr(17917,0,55,33,0,"((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))", 1, 2, 0);
	trans[19][114]	= settr(17918,0,55,1,0,"goto accept_S432", 0, 2, 0);
	trans[19][117]	= settr(17921,0,124,1,0,"break", 0, 2, 0);
	trans[19][125]	= settr(17929,0,124,1,0,".(goto)", 0, 2, 0);
	T = trans[19][124] = settr(17928,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17928,0,118,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17928,0,120,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17928,0,122,0,0,"DO", 0, 2, 0);
	trans[19][118]	= settr(17922,0,115,34,0,"(!(executing[0]))", 1, 2, 0);
	trans[19][119]	= settr(17923,0,115,1,0,"goto T0_S432", 0, 2, 0);
	trans[19][120]	= settr(17924,0,124,1,0,"(1)", 0, 2, 0);
	trans[19][121]	= settr(17925,0,124,1,0,"goto T0_S400", 0, 2, 0);
	trans[19][122]	= settr(17926,0,55,35,0,"((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))", 1, 2, 0);
	trans[19][123]	= settr(17927,0,55,1,0,"goto accept_S432", 0, 2, 0);
	trans[19][126]	= settr(17930,0,127,1,0,"break", 0, 2, 0);
	trans[19][127]	= settr(17931,0,0,36,36,"-end-", 0, 3500, 0);

	/* proctype 18: liveness */

	trans[18] = (Trans **) emalloc(188*sizeof(Trans *));

	trans[18][24]	= settr(17641,0,23,1,0,".(goto)", 0, 2, 0);
	T = trans[18][23] = settr(17640,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17640,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17640,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17640,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17640,0,7,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17640,0,9,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17640,0,11,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17640,0,13,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17640,0,15,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17640,0,17,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17640,0,19,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17640,0,21,0,0,"DO", 0, 2, 0);
	trans[18][1]	= settr(17618,0,36,37,0,"((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][2]	= settr(17619,0,36,1,0,"goto accept_S8", 0, 2, 0);
	trans[18][3]	= settr(17620,0,51,38,0,"((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][4]	= settr(17621,0,51,1,0,"goto accept_S87", 0, 2, 0);
	trans[18][5]	= settr(17622,0,79,39,0,"((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][6]	= settr(17623,0,79,1,0,"goto accept_S132", 0, 2, 0);
	trans[18][7]	= settr(17624,0,56,40,0,"((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][8]	= settr(17625,0,56,1,0,"goto accept_S93", 0, 2, 0);
	trans[18][9]	= settr(17626,0,137,41,0,"(!(((states[0]==STOPPING)||(states[0]==ABORTING))))", 1, 2, 0);
	trans[18][10]	= settr(17627,0,137,1,0,"goto T0_S84", 0, 2, 0);
	trans[18][11]	= settr(17628,0,69,42,0,"((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][12]	= settr(17629,0,69,1,0,"goto accept_S112", 0, 2, 0);
	trans[18][13]	= settr(17630,0,92,43,0,"((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][14]	= settr(17631,0,92,1,0,"goto accept_S149", 0, 2, 0);
	trans[18][15]	= settr(17632,0,99,44,0,"((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][16]	= settr(17633,0,99,1,0,"goto accept_S181", 0, 2, 0);
	trans[18][17]	= settr(17634,0,106,45,0,"((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][18]	= settr(17635,0,106,1,0,"goto accept_S186", 0, 2, 0);
	trans[18][19]	= settr(17636,0,113,46,0,"((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][20]	= settr(17637,0,113,1,0,"goto accept_S191", 0, 2, 0);
	trans[18][21]	= settr(17638,0,23,47,0,"(!(((states[0]==STOPPING)||(states[0]==ABORTING))))", 1, 2, 0);
	trans[18][22]	= settr(17639,0,23,1,0,"goto T0_init", 0, 2, 0);
	trans[18][25]	= settr(17642,0,36,1,0,"break", 0, 2, 0);
	trans[18][37]	= settr(17654,0,36,1,0,".(goto)", 0, 2, 0);
	T = trans[18][36] = settr(17653,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17653,0,26,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17653,0,28,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17653,0,30,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17653,0,32,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17653,0,34,0,0,"DO", 0, 2, 0);
	trans[18][26]	= settr(17643,0,126,48,0,"((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][27]	= settr(17644,0,126,1,0,"goto T0_S8", 0, 2, 0);
	trans[18][28]	= settr(17645,0,51,49,0,"((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][29]	= settr(17646,0,51,1,0,"goto accept_S87", 0, 2, 0);
	trans[18][30]	= settr(17647,0,41,50,0,"(((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][31]	= settr(17648,0,41,1,0,"goto accept_S25", 0, 2, 0);
	trans[18][32]	= settr(17649,0,46,51,0,"(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][33]	= settr(17650,0,46,1,0,"goto accept_S36", 0, 2, 0);
	trans[18][34]	= settr(17651,0,170,52,0,"((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][35]	= settr(17652,0,170,1,0,"goto T0_S181", 0, 2, 0);
	trans[18][38]	= settr(17655,0,41,1,0,"break", 0, 2, 0);
	trans[18][42]	= settr(17659,0,41,1,0,".(goto)", 0, 2, 0);
	T = trans[18][41] = settr(17658,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17658,0,39,0,0,"DO", 0, 2, 0);
	trans[18][39]	= settr(17656,0,41,53,0,"((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))))", 1, 2, 0);
	trans[18][40]	= settr(17657,0,41,1,0,"goto accept_S25", 0, 2, 0);
	trans[18][43]	= settr(17660,0,46,1,0,"break", 0, 2, 0);
	trans[18][47]	= settr(17664,0,46,1,0,".(goto)", 0, 2, 0);
	T = trans[18][46] = settr(17663,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17663,0,44,0,0,"DO", 0, 2, 0);
	trans[18][44]	= settr(17661,0,46,54,0,"((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))))", 1, 2, 0);
	trans[18][45]	= settr(17662,0,46,1,0,"goto accept_S36", 0, 2, 0);
	trans[18][48]	= settr(17665,0,51,1,0,"break", 0, 2, 0);
	trans[18][52]	= settr(17669,0,51,1,0,".(goto)", 0, 2, 0);
	T = trans[18][51] = settr(17668,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17668,0,49,0,0,"DO", 0, 2, 0);
	trans[18][49]	= settr(17666,0,51,55,0,"(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))", 1, 2, 0);
	trans[18][50]	= settr(17667,0,51,1,0,"goto accept_S87", 0, 2, 0);
	trans[18][53]	= settr(17670,0,56,1,0,"break", 0, 2, 0);
	trans[18][57]	= settr(17674,0,56,1,0,".(goto)", 0, 2, 0);
	T = trans[18][56] = settr(17673,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17673,0,54,0,0,"DO", 0, 2, 0);
	trans[18][54]	= settr(17671,0,56,56,0,"(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))", 1, 2, 0);
	trans[18][55]	= settr(17672,0,56,1,0,"goto accept_S93", 0, 2, 0);
	trans[18][58]	= settr(17675,0,69,1,0,"break", 0, 2, 0);
	trans[18][70]	= settr(17687,0,69,1,0,".(goto)", 0, 2, 0);
	T = trans[18][69] = settr(17686,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17686,0,59,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17686,0,61,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17686,0,63,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17686,0,65,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17686,0,67,0,0,"DO", 0, 2, 0);
	trans[18][59]	= settr(17676,0,41,57,0,"(((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][60]	= settr(17677,0,41,1,0,"goto accept_S25", 0, 2, 0);
	trans[18][61]	= settr(17678,0,150,58,0,"((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][62]	= settr(17679,0,150,1,0,"goto T0_S112", 0, 2, 0);
	trans[18][63]	= settr(17680,0,79,59,0,"((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][64]	= settr(17681,0,79,1,0,"goto accept_S132", 0, 2, 0);
	trans[18][65]	= settr(17682,0,74,60,0,"(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][66]	= settr(17683,0,74,1,0,"goto accept_S126", 0, 2, 0);
	trans[18][67]	= settr(17684,0,177,61,0,"((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][68]	= settr(17685,0,177,1,0,"goto T0_S186", 0, 2, 0);
	trans[18][71]	= settr(17688,0,74,1,0,"break", 0, 2, 0);
	trans[18][75]	= settr(17692,0,74,1,0,".(goto)", 0, 2, 0);
	T = trans[18][74] = settr(17691,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17691,0,72,0,0,"DO", 0, 2, 0);
	trans[18][72]	= settr(17689,0,74,62,0,"((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))))", 1, 2, 0);
	trans[18][73]	= settr(17690,0,74,1,0,"goto accept_S126", 0, 2, 0);
	trans[18][76]	= settr(17693,0,79,1,0,"break", 0, 2, 0);
	trans[18][80]	= settr(17697,0,79,1,0,".(goto)", 0, 2, 0);
	T = trans[18][79] = settr(17696,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17696,0,77,0,0,"DO", 0, 2, 0);
	trans[18][77]	= settr(17694,0,79,63,0,"(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))", 1, 2, 0);
	trans[18][78]	= settr(17695,0,79,1,0,"goto accept_S132", 0, 2, 0);
	trans[18][81]	= settr(17698,0,92,1,0,"break", 0, 2, 0);
	trans[18][93]	= settr(17710,0,92,1,0,".(goto)", 0, 2, 0);
	T = trans[18][92] = settr(17709,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17709,0,82,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17709,0,84,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17709,0,86,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17709,0,88,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17709,0,90,0,0,"DO", 0, 2, 0);
	trans[18][82]	= settr(17699,0,46,64,0,"(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][83]	= settr(17700,0,46,1,0,"goto accept_S36", 0, 2, 0);
	trans[18][84]	= settr(17701,0,56,65,0,"((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][85]	= settr(17702,0,56,1,0,"goto accept_S93", 0, 2, 0);
	trans[18][86]	= settr(17703,0,74,66,0,"(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][87]	= settr(17704,0,74,1,0,"goto accept_S126", 0, 2, 0);
	trans[18][88]	= settr(17705,0,163,67,0,"((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][89]	= settr(17706,0,163,1,0,"goto T0_S149", 0, 2, 0);
	trans[18][90]	= settr(17707,0,184,68,0,"((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][91]	= settr(17708,0,184,1,0,"goto T0_S191", 0, 2, 0);
	trans[18][94]	= settr(17711,0,99,1,0,"break", 0, 2, 0);
	trans[18][100]	= settr(17717,0,99,1,0,".(goto)", 0, 2, 0);
	T = trans[18][99] = settr(17716,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17716,0,95,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17716,0,97,0,0,"DO", 0, 2, 0);
	trans[18][95]	= settr(17712,0,51,69,0,"(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))", 1, 2, 0);
	trans[18][96]	= settr(17713,0,51,1,0,"goto accept_S87", 0, 2, 0);
	trans[18][97]	= settr(17714,0,170,70,0,"(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))", 1, 2, 0);
	trans[18][98]	= settr(17715,0,170,1,0,"goto T0_S181", 0, 2, 0);
	trans[18][101]	= settr(17718,0,106,1,0,"break", 0, 2, 0);
	trans[18][107]	= settr(17724,0,106,1,0,".(goto)", 0, 2, 0);
	T = trans[18][106] = settr(17723,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17723,0,102,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17723,0,104,0,0,"DO", 0, 2, 0);
	trans[18][102]	= settr(17719,0,79,71,0,"(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))", 1, 2, 0);
	trans[18][103]	= settr(17720,0,79,1,0,"goto accept_S132", 0, 2, 0);
	trans[18][104]	= settr(17721,0,177,72,0,"(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))", 1, 2, 0);
	trans[18][105]	= settr(17722,0,177,1,0,"goto T0_S186", 0, 2, 0);
	trans[18][108]	= settr(17725,0,113,1,0,"break", 0, 2, 0);
	trans[18][114]	= settr(17731,0,113,1,0,".(goto)", 0, 2, 0);
	T = trans[18][113] = settr(17730,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17730,0,109,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17730,0,111,0,0,"DO", 0, 2, 0);
	trans[18][109]	= settr(17726,0,56,73,0,"(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))", 1, 2, 0);
	trans[18][110]	= settr(17727,0,56,1,0,"goto accept_S93", 0, 2, 0);
	trans[18][111]	= settr(17728,0,184,74,0,"(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))", 1, 2, 0);
	trans[18][112]	= settr(17729,0,184,1,0,"goto T0_S191", 0, 2, 0);
	trans[18][115]	= settr(17732,0,126,1,0,"break", 0, 2, 0);
	trans[18][127]	= settr(17744,0,126,1,0,".(goto)", 0, 2, 0);
	T = trans[18][126] = settr(17743,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17743,0,116,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17743,0,118,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17743,0,120,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17743,0,122,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17743,0,124,0,0,"DO", 0, 2, 0);
	trans[18][116]	= settr(17733,0,36,75,0,"((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][117]	= settr(17734,0,36,1,0,"goto accept_S8", 0, 2, 0);
	trans[18][118]	= settr(17735,0,51,76,0,"((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][119]	= settr(17736,0,51,1,0,"goto accept_S87", 0, 2, 0);
	trans[18][120]	= settr(17737,0,41,77,0,"(((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][121]	= settr(17738,0,41,1,0,"goto accept_S25", 0, 2, 0);
	trans[18][122]	= settr(17739,0,46,78,0,"(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][123]	= settr(17740,0,46,1,0,"goto accept_S36", 0, 2, 0);
	trans[18][124]	= settr(17741,0,99,79,0,"((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][125]	= settr(17742,0,99,1,0,"goto accept_S181", 0, 2, 0);
	trans[18][128]	= settr(17745,0,137,1,0,"break", 0, 2, 0);
	trans[18][138]	= settr(17755,0,137,1,0,".(goto)", 0, 2, 0);
	T = trans[18][137] = settr(17754,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17754,0,129,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17754,0,131,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17754,0,133,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17754,0,135,0,0,"DO", 0, 2, 0);
	trans[18][129]	= settr(17746,0,51,80,0,"(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))", 1, 2, 0);
	trans[18][130]	= settr(17747,0,51,1,0,"goto accept_S87", 0, 2, 0);
	trans[18][131]	= settr(17748,0,79,81,0,"(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))", 1, 2, 0);
	trans[18][132]	= settr(17749,0,79,1,0,"goto accept_S132", 0, 2, 0);
	trans[18][133]	= settr(17750,0,56,82,0,"(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))", 1, 2, 0);
	trans[18][134]	= settr(17751,0,56,1,0,"goto accept_S93", 0, 2, 0);
	trans[18][135]	= settr(17752,0,137,1,0,"(1)", 0, 2, 0);
	trans[18][136]	= settr(17753,0,137,1,0,"goto T0_S84", 0, 2, 0);
	trans[18][139]	= settr(17756,0,150,1,0,"break", 0, 2, 0);
	trans[18][151]	= settr(17768,0,150,1,0,".(goto)", 0, 2, 0);
	T = trans[18][150] = settr(17767,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17767,0,140,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17767,0,142,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17767,0,144,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17767,0,146,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17767,0,148,0,0,"DO", 0, 2, 0);
	trans[18][140]	= settr(17757,0,41,83,0,"(((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][141]	= settr(17758,0,41,1,0,"goto accept_S25", 0, 2, 0);
	trans[18][142]	= settr(17759,0,69,84,0,"((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][143]	= settr(17760,0,69,1,0,"goto accept_S112", 0, 2, 0);
	trans[18][144]	= settr(17761,0,79,85,0,"((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][145]	= settr(17762,0,79,1,0,"goto accept_S132", 0, 2, 0);
	trans[18][146]	= settr(17763,0,74,86,0,"(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][147]	= settr(17764,0,74,1,0,"goto accept_S126", 0, 2, 0);
	trans[18][148]	= settr(17765,0,106,87,0,"((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][149]	= settr(17766,0,106,1,0,"goto accept_S186", 0, 2, 0);
	trans[18][152]	= settr(17769,0,163,1,0,"break", 0, 2, 0);
	trans[18][164]	= settr(17781,0,163,1,0,".(goto)", 0, 2, 0);
	T = trans[18][163] = settr(17780,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17780,0,153,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17780,0,155,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17780,0,157,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17780,0,159,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17780,0,161,0,0,"DO", 0, 2, 0);
	trans[18][153]	= settr(17770,0,46,88,0,"(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][154]	= settr(17771,0,46,1,0,"goto accept_S36", 0, 2, 0);
	trans[18][155]	= settr(17772,0,56,89,0,"((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][156]	= settr(17773,0,56,1,0,"goto accept_S93", 0, 2, 0);
	trans[18][157]	= settr(17774,0,74,90,0,"(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][158]	= settr(17775,0,74,1,0,"goto accept_S126", 0, 2, 0);
	trans[18][159]	= settr(17776,0,92,91,0,"((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][160]	= settr(17777,0,92,1,0,"goto accept_S149", 0, 2, 0);
	trans[18][161]	= settr(17778,0,113,92,0,"((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[18][162]	= settr(17779,0,113,1,0,"goto accept_S191", 0, 2, 0);
	trans[18][165]	= settr(17782,0,170,1,0,"break", 0, 2, 0);
	trans[18][171]	= settr(17788,0,170,1,0,".(goto)", 0, 2, 0);
	T = trans[18][170] = settr(17787,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17787,0,166,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17787,0,168,0,0,"DO", 0, 2, 0);
	trans[18][166]	= settr(17783,0,51,93,0,"(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))", 1, 2, 0);
	trans[18][167]	= settr(17784,0,51,1,0,"goto accept_S87", 0, 2, 0);
	trans[18][168]	= settr(17785,0,99,94,0,"(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))", 1, 2, 0);
	trans[18][169]	= settr(17786,0,99,1,0,"goto accept_S181", 0, 2, 0);
	trans[18][172]	= settr(17789,0,177,1,0,"break", 0, 2, 0);
	trans[18][178]	= settr(17795,0,177,1,0,".(goto)", 0, 2, 0);
	T = trans[18][177] = settr(17794,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17794,0,173,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17794,0,175,0,0,"DO", 0, 2, 0);
	trans[18][173]	= settr(17790,0,79,95,0,"(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))", 1, 2, 0);
	trans[18][174]	= settr(17791,0,79,1,0,"goto accept_S132", 0, 2, 0);
	trans[18][175]	= settr(17792,0,106,96,0,"(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))", 1, 2, 0);
	trans[18][176]	= settr(17793,0,106,1,0,"goto accept_S186", 0, 2, 0);
	trans[18][179]	= settr(17796,0,184,1,0,"break", 0, 2, 0);
	trans[18][185]	= settr(17802,0,184,1,0,".(goto)", 0, 2, 0);
	T = trans[18][184] = settr(17801,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17801,0,180,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17801,0,182,0,0,"DO", 0, 2, 0);
	trans[18][180]	= settr(17797,0,56,97,0,"(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))", 1, 2, 0);
	trans[18][181]	= settr(17798,0,56,1,0,"goto accept_S93", 0, 2, 0);
	trans[18][182]	= settr(17799,0,113,98,0,"(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))", 1, 2, 0);
	trans[18][183]	= settr(17800,0,113,1,0,"goto accept_S191", 0, 2, 0);
	trans[18][186]	= settr(17803,0,187,1,0,"break", 0, 2, 0);
	trans[18][187]	= settr(17804,0,0,99,99,"-end-", 0, 3500, 0);

	/* proctype 17: supervisor_halts_last */

	trans[17] = (Trans **) emalloc(14*sizeof(Trans *));

	trans[17][6]	= settr(17610,0,5,1,0,".(goto)", 0, 2, 0);
	T = trans[17][5] = settr(17609,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17609,0,1,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17609,0,3,0,0,"DO", 0, 2, 0);
	trans[17][1]	= settr(17605,0,10,100,0,"((!(!(((states[0]==STOPPING)||(states[0]==ABORTING))))&&!(((((states[1]==STOPPED)||(states[1]==ABORTED))||(states[1]==0))&&(((states[2]==STOPPED)||(states[2]==ABORTED))||(states[2]==0))))))", 1, 2, 0);
	trans[17][2]	= settr(17606,0,10,1,0,"goto accept_S4", 0, 2, 0);
	trans[17][3]	= settr(17607,0,5,1,0,"(1)", 0, 2, 0);
	trans[17][4]	= settr(17608,0,5,1,0,"goto T0_init", 0, 2, 0);
	trans[17][7]	= settr(17611,0,10,1,0,"break", 0, 2, 0);
	trans[17][11]	= settr(17615,0,10,1,0,".(goto)", 0, 2, 0);
	T = trans[17][10] = settr(17614,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17614,0,8,0,0,"DO", 0, 2, 0);
	trans[17][8]	= settr(17612,0,10,101,0,"(!(((((states[1]==STOPPED)||(states[1]==ABORTED))||(states[1]==0))&&(((states[2]==STOPPED)||(states[2]==ABORTED))||(states[2]==0)))))", 1, 2, 0);
	trans[17][9]	= settr(17613,0,10,1,0,"goto accept_S4", 0, 2, 0);
	trans[17][12]	= settr(17616,0,13,1,0,"break", 0, 2, 0);
	trans[17][13]	= settr(17617,0,0,102,102,"-end-", 0, 3500, 0);

	/* proctype 16: supervisor_never_aborts */

	trans[16] = (Trans **) emalloc(11*sizeof(Trans *));

	trans[16][7]	= settr(17601,0,6,1,0,".(goto)", 0, 2, 0);
	T = trans[16][6] = settr(17600,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17600,0,3,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17600,0,4,0,0,"DO", 0, 2, 0);
	T = trans[ 16][3] = settr(17597,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17597,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[16][1]	= settr(17595,0,6,103,103,"(((states[0]==ABORTED)||(commands[0]==ABORT)))", 1, 2, 0); /* m: 2 -> 6,0 */
	reached16[2] = 1;
	trans[16][2]	= settr(0,0,0,0,0,"assert(!(((states[0]==ABORTED)||(commands[0]==ABORT))))",0,0,0);
	trans[16][4]	= settr(17598,0,6,1,0,"(1)", 0, 2, 0);
	trans[16][5]	= settr(17599,0,6,1,0,"goto T0_init", 0, 2, 0);
	trans[16][8]	= settr(17602,0,9,1,0,"break", 0, 2, 0);
	trans[16][9]	= settr(17603,0,10,1,0,"(1)", 0, 2, 0);
	trans[16][10]	= settr(17604,0,0,104,104,"-end-", 0, 3500, 0);

	/* proctype 15: supervisor_stops_after_some_workers_abort */

	trans[15] = (Trans **) emalloc(23*sizeof(Trans *));

	trans[15][8]	= settr(17580,0,7,1,0,".(goto)", 0, 2, 0);
	T = trans[15][7] = settr(17579,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17579,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17579,0,3,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17579,0,5,0,0,"DO", 0, 2, 0);
	trans[15][1]	= settr(17573,0,12,105,0,"(((!(!(((states[1]==ABORTED)||(states[2]==ABORTED))))&&!((states[0]==PAUSED)))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[15][2]	= settr(17574,0,12,1,0,"goto accept_S19", 0, 2, 0);
	trans[15][3]	= settr(17575,0,19,106,0,"((!(!(((states[1]==ABORTED)||(states[2]==ABORTED))))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[15][4]	= settr(17576,0,19,1,0,"goto T0_S23", 0, 2, 0);
	trans[15][5]	= settr(17577,0,7,1,0,"(1)", 0, 2, 0);
	trans[15][6]	= settr(17578,0,7,1,0,"goto T0_init", 0, 2, 0);
	trans[15][9]	= settr(17581,0,12,1,0,"break", 0, 2, 0);
	trans[15][13]	= settr(17585,0,12,1,0,".(goto)", 0, 2, 0);
	T = trans[15][12] = settr(17584,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17584,0,10,0,0,"DO", 0, 2, 0);
	trans[15][10]	= settr(17582,0,12,107,0,"((!((states[0]==PAUSED))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[15][11]	= settr(17583,0,12,1,0,"goto accept_S19", 0, 2, 0);
	trans[15][14]	= settr(17586,0,19,1,0,"break", 0, 2, 0);
	trans[15][20]	= settr(17592,0,19,1,0,".(goto)", 0, 2, 0);
	T = trans[15][19] = settr(17591,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17591,0,15,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17591,0,17,0,0,"DO", 0, 2, 0);
	trans[15][15]	= settr(17587,0,12,108,0,"((!((states[0]==PAUSED))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[15][16]	= settr(17588,0,12,1,0,"goto accept_S19", 0, 2, 0);
	trans[15][17]	= settr(17589,0,19,109,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[15][18]	= settr(17590,0,19,1,0,"goto T0_S23", 0, 2, 0);
	trans[15][21]	= settr(17593,0,22,1,0,"break", 0, 2, 0);
	trans[15][22]	= settr(17594,0,0,110,110,"-end-", 0, 3500, 0);

	/* proctype 14: supervisor_stops_after_all_workers_stop */

	trans[14] = (Trans **) emalloc(23*sizeof(Trans *));

	trans[14][8]	= settr(17558,0,7,1,0,".(goto)", 0, 2, 0);
	T = trans[14][7] = settr(17557,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17557,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17557,0,3,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17557,0,5,0,0,"DO", 0, 2, 0);
	trans[14][1]	= settr(17551,0,12,111,0,"(((!(!(((states[1]==STOPPED)&&(states[2]==STOPPED))))&&!((states[0]==PAUSED)))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[14][2]	= settr(17552,0,12,1,0,"goto accept_S19", 0, 2, 0);
	trans[14][3]	= settr(17553,0,19,112,0,"((!(!(((states[1]==STOPPED)&&(states[2]==STOPPED))))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[14][4]	= settr(17554,0,19,1,0,"goto T0_S23", 0, 2, 0);
	trans[14][5]	= settr(17555,0,7,1,0,"(1)", 0, 2, 0);
	trans[14][6]	= settr(17556,0,7,1,0,"goto T0_init", 0, 2, 0);
	trans[14][9]	= settr(17559,0,12,1,0,"break", 0, 2, 0);
	trans[14][13]	= settr(17563,0,12,1,0,".(goto)", 0, 2, 0);
	T = trans[14][12] = settr(17562,0,0,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17562,0,10,0,0,"DO", 0, 2, 0);
	trans[14][10]	= settr(17560,0,12,113,0,"((!((states[0]==PAUSED))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[14][11]	= settr(17561,0,12,1,0,"goto accept_S19", 0, 2, 0);
	trans[14][14]	= settr(17564,0,19,1,0,"break", 0, 2, 0);
	trans[14][20]	= settr(17570,0,19,1,0,".(goto)", 0, 2, 0);
	T = trans[14][19] = settr(17569,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17569,0,15,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17569,0,17,0,0,"DO", 0, 2, 0);
	trans[14][15]	= settr(17565,0,12,114,0,"((!((states[0]==PAUSED))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[14][16]	= settr(17566,0,12,1,0,"goto accept_S19", 0, 2, 0);
	trans[14][17]	= settr(17567,0,19,115,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[14][18]	= settr(17568,0,19,1,0,"goto T0_S23", 0, 2, 0);
	trans[14][21]	= settr(17571,0,22,1,0,"break", 0, 2, 0);
	trans[14][22]	= settr(17572,0,0,116,116,"-end-", 0, 3500, 0);

	/* proctype 13: supervisor_constructs_workers */

	trans[13] = (Trans **) emalloc(11*sizeof(Trans *));

	trans[13][7]	= settr(17547,0,6,1,0,".(goto)", 0, 2, 0);
	T = trans[13][6] = settr(17546,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17546,0,3,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17546,0,4,0,0,"DO", 0, 2, 0);
	T = trans[ 13][3] = settr(17543,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17543,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[13][1]	= settr(17541,0,6,117,117,"(!((!(((states[1]==READY)||(states[2]==READY)))||!((states[0]==0)))))", 1, 2, 0); /* m: 2 -> 6,0 */
	reached13[2] = 1;
	trans[13][2]	= settr(0,0,0,0,0,"assert(!(!((!(((states[1]==READY)||(states[2]==READY)))||!((states[0]==0))))))",0,0,0);
	trans[13][4]	= settr(17544,0,6,1,0,"(1)", 0, 2, 0);
	trans[13][5]	= settr(17545,0,6,1,0,"goto T0_init", 0, 2, 0);
	trans[13][8]	= settr(17548,0,9,1,0,"break", 0, 2, 0);
	trans[13][9]	= settr(17549,0,10,1,0,"(1)", 0, 2, 0);
	trans[13][10]	= settr(17550,0,0,118,118,"-end-", 0, 3500, 0);

	/* proctype 12: supervisor_is_the_first_thread */

	trans[12] = (Trans **) emalloc(11*sizeof(Trans *));

	trans[12][7]	= settr(17537,0,6,1,0,".(goto)", 0, 2, 0);
	T = trans[12][6] = settr(17536,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17536,0,3,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17536,0,4,0,0,"DO", 0, 2, 0);
	T = trans[ 12][3] = settr(17533,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17533,2,1,0,0,"ATOMIC", 1, 2, 0);
	trans[12][1]	= settr(17531,0,6,119,119,"(!((!((states[0]==0))||((states[1]==0)&&(states[2]==0)))))", 1, 2, 0); /* m: 2 -> 6,0 */
	reached12[2] = 1;
	trans[12][2]	= settr(0,0,0,0,0,"assert(!(!((!((states[0]==0))||((states[1]==0)&&(states[2]==0))))))",0,0,0);
	trans[12][4]	= settr(17534,0,6,1,0,"(1)", 0, 2, 0);
	trans[12][5]	= settr(17535,0,6,1,0,"goto T0_init", 0, 2, 0);
	trans[12][8]	= settr(17538,0,9,1,0,"break", 0, 2, 0);
	trans[12][9]	= settr(17539,0,10,1,0,"(1)", 0, 2, 0);
	trans[12][10]	= settr(17540,0,0,120,120,"-end-", 0, 3500, 0);

	/* proctype 11: abort_is_undoable */

	trans[11] = (Trans **) emalloc(503*sizeof(Trans *));

	trans[11][49]	= settr(17077,0,48,1,0,".(goto)", 0, 2, 0);
	T = trans[11][48] = settr(17076,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,7,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,8,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,10,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,12,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,14,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,16,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,18,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,20,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,22,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,24,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,26,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,28,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,30,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,32,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,34,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,36,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,38,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,40,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,42,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17076,0,44,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17076,0,46,0,0,"DO", 0, 2, 0);
	trans[11][1]	= settr(17029,0,60,121,0,"(((!(!((commands[2]==ABORT)))&&!((commands[2]==0)))&&!((commands[2]==ABORT))))", 1, 2, 0);
	trans[11][2]	= settr(17030,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[11][3]	= settr(17031,0,250,122,0,"((!(!((commands[2]==ABORT)))&&!((commands[2]==ABORT))))", 1, 2, 0);
	trans[11][4]	= settr(17032,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 11][7] = settr(17035,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17035,2,5,0,0,"ATOMIC", 1, 2, 0);
	trans[11][5]	= settr(17033,0,48,123,123,"(((!(!((commands[0]==ABORT)))&&(!((commands[0]==0))&&!((commands[0]==ABORT))))||((!(!((commands[1]==ABORT)))&&(!((commands[1]==0))&&!((commands[1]==ABORT))))||(!(!((commands[2]==ABORT)))&&(!((commands[2]==0))&&!((commands[2]==ABORT)))))))", 1, 2, 0); /* m: 6 -> 48,0 */
	reached11[6] = 1;
	trans[11][6]	= settr(0,0,0,0,0,"assert(!(((!(!((commands[0]==ABORT)))&&(!((commands[0]==0))&&!((commands[0]==ABORT))))||((!(!((commands[1]==ABORT)))&&(!((commands[1]==0))&&!((commands[1]==ABORT))))||(!(!((commands[2]==ABORT)))&&(!((commands[2]==0))&&!((commands[2]==ABORT))))))))",0,0,0);
	trans[11][8]	= settr(17036,0,258,124,0,"((!(!((commands[2]==ABORT)))&&!((commands[2]==ABORT))))", 1, 2, 0);
	trans[11][9]	= settr(17037,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[11][10]	= settr(17038,0,236,125,0,"((!(!((commands[2]==ABORT)))&&!((commands[2]==0))))", 1, 2, 0);
	trans[11][11]	= settr(17039,0,236,1,0,"goto T0_S69", 0, 2, 0);
	trans[11][12]	= settr(17040,0,282,126,0,"(!(!((commands[2]==ABORT))))", 1, 2, 0);
	trans[11][13]	= settr(17041,0,282,1,0,"goto T0_S49", 0, 2, 0);
	trans[11][14]	= settr(17042,0,76,127,0,"(((!(!((commands[2]==ABORT)))&&!((commands[2]==0)))&&!((commands[2]==ABORT))))", 1, 2, 0);
	trans[11][15]	= settr(17043,0,76,1,0,"goto accept_S4", 0, 2, 0);
	trans[11][16]	= settr(17044,0,180,128,0,"((!(!((commands[2]==ABORT)))&&!((commands[2]==ABORT))))", 1, 2, 0);
	trans[11][17]	= settr(17045,0,180,1,0,"goto T6_S158", 0, 2, 0);
	trans[11][18]	= settr(17046,0,100,129,0,"(((!(!((commands[1]==ABORT)))&&!((commands[1]==0)))&&!((commands[1]==ABORT))))", 1, 2, 0);
	trans[11][19]	= settr(17047,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[11][20]	= settr(17048,0,348,130,0,"((!(!((commands[1]==ABORT)))&&!((commands[1]==ABORT))))", 1, 2, 0);
	trans[11][21]	= settr(17049,0,348,1,0,"goto T0_S243", 0, 2, 0);
	trans[11][22]	= settr(17050,0,356,131,0,"((!(!((commands[1]==ABORT)))&&!((commands[1]==ABORT))))", 1, 2, 0);
	trans[11][23]	= settr(17051,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[11][24]	= settr(17052,0,334,132,0,"((!(!((commands[1]==ABORT)))&&!((commands[1]==0))))", 1, 2, 0);
	trans[11][25]	= settr(17053,0,334,1,0,"goto T0_S230", 0, 2, 0);
	trans[11][26]	= settr(17054,0,380,133,0,"(!(!((commands[1]==ABORT))))", 1, 2, 0);
	trans[11][27]	= settr(17055,0,380,1,0,"goto T0_S210", 0, 2, 0);
	trans[11][28]	= settr(17056,0,116,134,0,"(((!(!((commands[1]==ABORT)))&&!((commands[1]==0)))&&!((commands[1]==ABORT))))", 1, 2, 0);
	trans[11][29]	= settr(17057,0,116,1,0,"goto accept_S165", 0, 2, 0);
	trans[11][30]	= settr(17058,0,192,135,0,"((!(!((commands[1]==ABORT)))&&!((commands[1]==ABORT))))", 1, 2, 0);
	trans[11][31]	= settr(17059,0,192,1,0,"goto T4_S319", 0, 2, 0);
	trans[11][32]	= settr(17060,0,140,136,0,"(((!(!((commands[0]==ABORT)))&&!((commands[0]==0)))&&!((commands[0]==ABORT))))", 1, 2, 0);
	trans[11][33]	= settr(17061,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[11][34]	= settr(17062,0,446,137,0,"((!(!((commands[0]==ABORT)))&&!((commands[0]==ABORT))))", 1, 2, 0);
	trans[11][35]	= settr(17063,0,446,1,0,"goto T0_S404", 0, 2, 0);
	trans[11][36]	= settr(17064,0,454,138,0,"((!(!((commands[0]==ABORT)))&&!((commands[0]==ABORT))))", 1, 2, 0);
	trans[11][37]	= settr(17065,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[11][38]	= settr(17066,0,432,139,0,"((!(!((commands[0]==ABORT)))&&!((commands[0]==0))))", 1, 2, 0);
	trans[11][39]	= settr(17067,0,432,1,0,"goto T0_S391", 0, 2, 0);
	trans[11][40]	= settr(17068,0,478,140,0,"(!(!((commands[0]==ABORT))))", 1, 2, 0);
	trans[11][41]	= settr(17069,0,478,1,0,"goto T0_S371", 0, 2, 0);
	trans[11][42]	= settr(17070,0,156,141,0,"(((!(!((commands[0]==ABORT)))&&!((commands[0]==0)))&&!((commands[0]==ABORT))))", 1, 2, 0);
	trans[11][43]	= settr(17071,0,156,1,0,"goto accept_S326", 0, 2, 0);
	trans[11][44]	= settr(17072,0,204,142,0,"((!(!((commands[0]==ABORT)))&&!((commands[0]==ABORT))))", 1, 2, 0);
	trans[11][45]	= settr(17073,0,204,1,0,"goto T2_S480", 0, 2, 0);
	trans[11][46]	= settr(17074,0,48,1,0,"(1)", 0, 2, 0);
	trans[11][47]	= settr(17075,0,48,1,0,"goto T0_init", 0, 2, 0);
	trans[11][50]	= settr(17078,0,60,1,0,"break", 0, 2, 0);
	trans[11][61]	= settr(17089,0,60,1,0,".(goto)", 0, 2, 0);
	T = trans[11][60] = settr(17088,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17088,0,51,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17088,0,53,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17088,0,57,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17088,0,58,0,0,"DO", 0, 2, 0);
	trans[11][51]	= settr(17079,0,216,143,0,"(!((commands[2]==0)))", 1, 2, 0);
	trans[11][52]	= settr(17080,0,216,1,0,"goto T0_S52", 0, 2, 0);
	trans[11][53]	= settr(17081,0,250,1,0,"(1)", 0, 2, 0);
	trans[11][54]	= settr(17082,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 11][57] = settr(17085,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17085,2,55,0,0,"ATOMIC", 1, 2, 0);
	trans[11][55]	= settr(17083,0,60,144,144,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0); /* m: 56 -> 60,0 */
	reached11[56] = 1;
	trans[11][56]	= settr(0,0,0,0,0,"assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))",0,0,0);
	trans[11][58]	= settr(17086,0,258,145,0,"(!((commands[2]==ABORT)))", 1, 2, 0);
	trans[11][59]	= settr(17087,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[11][62]	= settr(17090,0,68,1,0,"break", 0, 2, 0);
	trans[11][69]	= settr(17097,0,68,1,0,".(goto)", 0, 2, 0);
	T = trans[11][68] = settr(17096,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17096,0,65,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17096,0,66,0,0,"DO", 0, 2, 0);
	T = trans[ 11][65] = settr(17093,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17093,2,63,0,0,"ATOMIC", 1, 2, 0);
	trans[11][63]	= settr(17091,0,68,146,146,"(!((commands[2]==0)))", 1, 2, 0); /* m: 64 -> 68,0 */
	reached11[64] = 1;
	trans[11][64]	= settr(0,0,0,0,0,"assert(!(!((commands[2]==0))))",0,0,0);
	trans[11][66]	= settr(17094,0,258,1,0,"(1)", 0, 2, 0);
	trans[11][67]	= settr(17095,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[11][70]	= settr(17098,0,76,1,0,"break", 0, 2, 0);
	trans[11][77]	= settr(17105,0,76,1,0,".(goto)", 0, 2, 0);
	T = trans[11][76] = settr(17104,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17104,0,73,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17104,0,74,0,0,"DO", 0, 2, 0);
	T = trans[ 11][73] = settr(17101,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17101,2,71,0,0,"ATOMIC", 1, 2, 0);
	trans[11][71]	= settr(17099,0,76,147,147,"(!((commands[2]==ABORT)))", 1, 2, 0); /* m: 72 -> 76,0 */
	reached11[72] = 1;
	trans[11][72]	= settr(0,0,0,0,0,"assert(!(!((commands[2]==ABORT))))",0,0,0);
	trans[11][74]	= settr(17102,0,290,1,0,"(1)", 0, 2, 0);
	trans[11][75]	= settr(17103,0,290,1,0,"goto T0_S4", 0, 2, 0);
	trans[11][78]	= settr(17106,0,88,1,0,"break", 0, 2, 0);
	trans[11][89]	= settr(17117,0,88,1,0,".(goto)", 0, 2, 0);
	T = trans[11][88] = settr(17116,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17116,0,81,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17116,0,82,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17116,0,84,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17116,0,86,0,0,"DO", 0, 2, 0);
	T = trans[ 11][81] = settr(17109,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17109,2,79,0,0,"ATOMIC", 1, 2, 0);
	trans[11][79]	= settr(17107,0,88,148,148,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0); /* m: 80 -> 88,0 */
	reached11[80] = 1;
	trans[11][80]	= settr(0,0,0,0,0,"assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))",0,0,0);
	trans[11][82]	= settr(17110,0,290,149,0,"(!((commands[2]==0)))", 1, 2, 0);
	trans[11][83]	= settr(17111,0,290,1,0,"goto T0_S4", 0, 2, 0);
	trans[11][84]	= settr(17112,0,258,150,0,"(!((commands[2]==ABORT)))", 1, 2, 0);
	trans[11][85]	= settr(17113,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[11][86]	= settr(17114,0,302,1,0,"(1)", 0, 2, 0);
	trans[11][87]	= settr(17115,0,302,1,0,"goto T0_S158", 0, 2, 0);
	trans[11][90]	= settr(17118,0,100,1,0,"break", 0, 2, 0);
	trans[11][101]	= settr(17129,0,100,1,0,".(goto)", 0, 2, 0);
	T = trans[11][100] = settr(17128,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17128,0,91,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17128,0,93,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17128,0,97,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17128,0,98,0,0,"DO", 0, 2, 0);
	trans[11][91]	= settr(17119,0,314,151,0,"(!((commands[1]==0)))", 1, 2, 0);
	trans[11][92]	= settr(17120,0,314,1,0,"goto T0_S213", 0, 2, 0);
	trans[11][93]	= settr(17121,0,348,1,0,"(1)", 0, 2, 0);
	trans[11][94]	= settr(17122,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 11][97] = settr(17125,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17125,2,95,0,0,"ATOMIC", 1, 2, 0);
	trans[11][95]	= settr(17123,0,100,152,152,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0); /* m: 96 -> 100,0 */
	reached11[96] = 1;
	trans[11][96]	= settr(0,0,0,0,0,"assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))",0,0,0);
	trans[11][98]	= settr(17126,0,356,153,0,"(!((commands[1]==ABORT)))", 1, 2, 0);
	trans[11][99]	= settr(17127,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[11][102]	= settr(17130,0,108,1,0,"break", 0, 2, 0);
	trans[11][109]	= settr(17137,0,108,1,0,".(goto)", 0, 2, 0);
	T = trans[11][108] = settr(17136,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17136,0,105,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17136,0,106,0,0,"DO", 0, 2, 0);
	T = trans[ 11][105] = settr(17133,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17133,2,103,0,0,"ATOMIC", 1, 2, 0);
	trans[11][103]	= settr(17131,0,108,154,154,"(!((commands[1]==0)))", 1, 2, 0); /* m: 104 -> 108,0 */
	reached11[104] = 1;
	trans[11][104]	= settr(0,0,0,0,0,"assert(!(!((commands[1]==0))))",0,0,0);
	trans[11][106]	= settr(17134,0,356,1,0,"(1)", 0, 2, 0);
	trans[11][107]	= settr(17135,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[11][110]	= settr(17138,0,116,1,0,"break", 0, 2, 0);
	trans[11][117]	= settr(17145,0,116,1,0,".(goto)", 0, 2, 0);
	T = trans[11][116] = settr(17144,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17144,0,113,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17144,0,114,0,0,"DO", 0, 2, 0);
	T = trans[ 11][113] = settr(17141,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17141,2,111,0,0,"ATOMIC", 1, 2, 0);
	trans[11][111]	= settr(17139,0,116,155,155,"(!((commands[1]==ABORT)))", 1, 2, 0); /* m: 112 -> 116,0 */
	reached11[112] = 1;
	trans[11][112]	= settr(0,0,0,0,0,"assert(!(!((commands[1]==ABORT))))",0,0,0);
	trans[11][114]	= settr(17142,0,388,1,0,"(1)", 0, 2, 0);
	trans[11][115]	= settr(17143,0,388,1,0,"goto T0_S165", 0, 2, 0);
	trans[11][118]	= settr(17146,0,128,1,0,"break", 0, 2, 0);
	trans[11][129]	= settr(17157,0,128,1,0,".(goto)", 0, 2, 0);
	T = trans[11][128] = settr(17156,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17156,0,121,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17156,0,122,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17156,0,124,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17156,0,126,0,0,"DO", 0, 2, 0);
	T = trans[ 11][121] = settr(17149,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17149,2,119,0,0,"ATOMIC", 1, 2, 0);
	trans[11][119]	= settr(17147,0,128,156,156,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0); /* m: 120 -> 128,0 */
	reached11[120] = 1;
	trans[11][120]	= settr(0,0,0,0,0,"assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))",0,0,0);
	trans[11][122]	= settr(17150,0,388,157,0,"(!((commands[1]==0)))", 1, 2, 0);
	trans[11][123]	= settr(17151,0,388,1,0,"goto T0_S165", 0, 2, 0);
	trans[11][124]	= settr(17152,0,356,158,0,"(!((commands[1]==ABORT)))", 1, 2, 0);
	trans[11][125]	= settr(17153,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[11][126]	= settr(17154,0,400,1,0,"(1)", 0, 2, 0);
	trans[11][127]	= settr(17155,0,400,1,0,"goto T0_S319", 0, 2, 0);
	trans[11][130]	= settr(17158,0,140,1,0,"break", 0, 2, 0);
	trans[11][141]	= settr(17169,0,140,1,0,".(goto)", 0, 2, 0);
	T = trans[11][140] = settr(17168,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17168,0,131,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17168,0,133,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17168,0,137,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17168,0,138,0,0,"DO", 0, 2, 0);
	trans[11][131]	= settr(17159,0,412,159,0,"(!((commands[0]==0)))", 1, 2, 0);
	trans[11][132]	= settr(17160,0,412,1,0,"goto T0_S374", 0, 2, 0);
	trans[11][133]	= settr(17161,0,446,1,0,"(1)", 0, 2, 0);
	trans[11][134]	= settr(17162,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 11][137] = settr(17165,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17165,2,135,0,0,"ATOMIC", 1, 2, 0);
	trans[11][135]	= settr(17163,0,140,160,160,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0); /* m: 136 -> 140,0 */
	reached11[136] = 1;
	trans[11][136]	= settr(0,0,0,0,0,"assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))",0,0,0);
	trans[11][138]	= settr(17166,0,454,161,0,"(!((commands[0]==ABORT)))", 1, 2, 0);
	trans[11][139]	= settr(17167,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[11][142]	= settr(17170,0,148,1,0,"break", 0, 2, 0);
	trans[11][149]	= settr(17177,0,148,1,0,".(goto)", 0, 2, 0);
	T = trans[11][148] = settr(17176,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17176,0,145,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17176,0,146,0,0,"DO", 0, 2, 0);
	T = trans[ 11][145] = settr(17173,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17173,2,143,0,0,"ATOMIC", 1, 2, 0);
	trans[11][143]	= settr(17171,0,148,162,162,"(!((commands[0]==0)))", 1, 2, 0); /* m: 144 -> 148,0 */
	reached11[144] = 1;
	trans[11][144]	= settr(0,0,0,0,0,"assert(!(!((commands[0]==0))))",0,0,0);
	trans[11][146]	= settr(17174,0,454,1,0,"(1)", 0, 2, 0);
	trans[11][147]	= settr(17175,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[11][150]	= settr(17178,0,156,1,0,"break", 0, 2, 0);
	trans[11][157]	= settr(17185,0,156,1,0,".(goto)", 0, 2, 0);
	T = trans[11][156] = settr(17184,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17184,0,153,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17184,0,154,0,0,"DO", 0, 2, 0);
	T = trans[ 11][153] = settr(17181,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17181,2,151,0,0,"ATOMIC", 1, 2, 0);
	trans[11][151]	= settr(17179,0,156,163,163,"(!((commands[0]==ABORT)))", 1, 2, 0); /* m: 152 -> 156,0 */
	reached11[152] = 1;
	trans[11][152]	= settr(0,0,0,0,0,"assert(!(!((commands[0]==ABORT))))",0,0,0);
	trans[11][154]	= settr(17182,0,486,1,0,"(1)", 0, 2, 0);
	trans[11][155]	= settr(17183,0,486,1,0,"goto T0_S326", 0, 2, 0);
	trans[11][158]	= settr(17186,0,168,1,0,"break", 0, 2, 0);
	trans[11][169]	= settr(17197,0,168,1,0,".(goto)", 0, 2, 0);
	T = trans[11][168] = settr(17196,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17196,0,161,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17196,0,162,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17196,0,164,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17196,0,166,0,0,"DO", 0, 2, 0);
	T = trans[ 11][161] = settr(17189,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17189,2,159,0,0,"ATOMIC", 1, 2, 0);
	trans[11][159]	= settr(17187,0,168,164,164,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0); /* m: 160 -> 168,0 */
	reached11[160] = 1;
	trans[11][160]	= settr(0,0,0,0,0,"assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))",0,0,0);
	trans[11][162]	= settr(17190,0,486,165,0,"(!((commands[0]==0)))", 1, 2, 0);
	trans[11][163]	= settr(17191,0,486,1,0,"goto T0_S326", 0, 2, 0);
	trans[11][164]	= settr(17192,0,454,166,0,"(!((commands[0]==ABORT)))", 1, 2, 0);
	trans[11][165]	= settr(17193,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[11][166]	= settr(17194,0,498,1,0,"(1)", 0, 2, 0);
	trans[11][167]	= settr(17195,0,498,1,0,"goto T0_S480", 0, 2, 0);
	trans[11][170]	= settr(17198,0,180,1,0,"break", 0, 2, 0);
	trans[11][181]	= settr(17209,0,180,1,0,".(goto)", 0, 2, 0);
	T = trans[11][180] = settr(17208,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17208,0,173,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17208,0,174,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17208,0,176,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17208,0,178,0,0,"DO", 0, 2, 0);
	T = trans[ 11][173] = settr(17201,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17201,2,171,0,0,"ATOMIC", 1, 2, 0);
	trans[11][171]	= settr(17199,0,180,167,167,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0); /* m: 172 -> 180,0 */
	reached11[172] = 1;
	trans[11][172]	= settr(0,0,0,0,0,"assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))",0,0,0);
	trans[11][174]	= settr(17202,0,76,168,0,"(!((commands[2]==0)))", 1, 2, 0);
	trans[11][175]	= settr(17203,0,76,1,0,"goto accept_S4", 0, 2, 0);
	trans[11][176]	= settr(17204,0,258,169,0,"(!((commands[2]==ABORT)))", 1, 2, 0);
	trans[11][177]	= settr(17205,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[11][178]	= settr(17206,0,180,1,0,"(1)", 0, 2, 0);
	trans[11][179]	= settr(17207,0,180,1,0,"goto T6_S158", 0, 2, 0);
	trans[11][182]	= settr(17210,0,192,1,0,"break", 0, 2, 0);
	trans[11][193]	= settr(17221,0,192,1,0,".(goto)", 0, 2, 0);
	T = trans[11][192] = settr(17220,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17220,0,185,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17220,0,186,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17220,0,188,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17220,0,190,0,0,"DO", 0, 2, 0);
	T = trans[ 11][185] = settr(17213,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17213,2,183,0,0,"ATOMIC", 1, 2, 0);
	trans[11][183]	= settr(17211,0,192,170,170,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0); /* m: 184 -> 192,0 */
	reached11[184] = 1;
	trans[11][184]	= settr(0,0,0,0,0,"assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))",0,0,0);
	trans[11][186]	= settr(17214,0,116,171,0,"(!((commands[1]==0)))", 1, 2, 0);
	trans[11][187]	= settr(17215,0,116,1,0,"goto accept_S165", 0, 2, 0);
	trans[11][188]	= settr(17216,0,356,172,0,"(!((commands[1]==ABORT)))", 1, 2, 0);
	trans[11][189]	= settr(17217,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[11][190]	= settr(17218,0,192,1,0,"(1)", 0, 2, 0);
	trans[11][191]	= settr(17219,0,192,1,0,"goto T4_S319", 0, 2, 0);
	trans[11][194]	= settr(17222,0,204,1,0,"break", 0, 2, 0);
	trans[11][205]	= settr(17233,0,204,1,0,".(goto)", 0, 2, 0);
	T = trans[11][204] = settr(17232,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17232,0,197,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17232,0,198,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17232,0,200,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17232,0,202,0,0,"DO", 0, 2, 0);
	T = trans[ 11][197] = settr(17225,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17225,2,195,0,0,"ATOMIC", 1, 2, 0);
	trans[11][195]	= settr(17223,0,204,173,173,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0); /* m: 196 -> 204,0 */
	reached11[196] = 1;
	trans[11][196]	= settr(0,0,0,0,0,"assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))",0,0,0);
	trans[11][198]	= settr(17226,0,156,174,0,"(!((commands[0]==0)))", 1, 2, 0);
	trans[11][199]	= settr(17227,0,156,1,0,"goto accept_S326", 0, 2, 0);
	trans[11][200]	= settr(17228,0,454,175,0,"(!((commands[0]==ABORT)))", 1, 2, 0);
	trans[11][201]	= settr(17229,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[11][202]	= settr(17230,0,204,1,0,"(1)", 0, 2, 0);
	trans[11][203]	= settr(17231,0,204,1,0,"goto T2_S480", 0, 2, 0);
	trans[11][206]	= settr(17234,0,216,1,0,"break", 0, 2, 0);
	trans[11][217]	= settr(17245,0,216,1,0,".(goto)", 0, 2, 0);
	T = trans[11][216] = settr(17244,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17244,0,207,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17244,0,209,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17244,0,213,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17244,0,214,0,0,"DO", 0, 2, 0);
	trans[11][207]	= settr(17235,0,60,176,0,"(!((commands[2]==0)))", 1, 2, 0);
	trans[11][208]	= settr(17236,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[11][209]	= settr(17237,0,250,1,0,"(1)", 0, 2, 0);
	trans[11][210]	= settr(17238,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 11][213] = settr(17241,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17241,2,211,0,0,"ATOMIC", 1, 2, 0);
	trans[11][211]	= settr(17239,0,216,177,177,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0); /* m: 212 -> 216,0 */
	reached11[212] = 1;
	trans[11][212]	= settr(0,0,0,0,0,"assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))",0,0,0);
	trans[11][214]	= settr(17242,0,258,178,0,"(!((commands[2]==ABORT)))", 1, 2, 0);
	trans[11][215]	= settr(17243,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[11][218]	= settr(17246,0,236,1,0,"break", 0, 2, 0);
	trans[11][237]	= settr(17265,0,236,1,0,".(goto)", 0, 2, 0);
	T = trans[11][236] = settr(17264,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17264,0,219,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17264,0,221,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17264,0,225,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17264,0,226,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17264,0,228,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17264,0,230,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17264,0,232,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17264,0,234,0,0,"DO", 0, 2, 0);
	trans[11][219]	= settr(17247,0,60,179,0,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0);
	trans[11][220]	= settr(17248,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[11][221]	= settr(17249,0,250,180,0,"(!((commands[2]==ABORT)))", 1, 2, 0);
	trans[11][222]	= settr(17250,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 11][225] = settr(17253,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17253,2,223,0,0,"ATOMIC", 1, 2, 0);
	trans[11][223]	= settr(17251,0,236,181,181,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0); /* m: 224 -> 236,0 */
	reached11[224] = 1;
	trans[11][224]	= settr(0,0,0,0,0,"assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))",0,0,0);
	trans[11][226]	= settr(17254,0,258,182,0,"(!((commands[2]==ABORT)))", 1, 2, 0);
	trans[11][227]	= settr(17255,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[11][228]	= settr(17256,0,236,183,0,"(!((commands[2]==0)))", 1, 2, 0);
	trans[11][229]	= settr(17257,0,236,1,0,"goto T0_S69", 0, 2, 0);
	trans[11][230]	= settr(17258,0,282,1,0,"(1)", 0, 2, 0);
	trans[11][231]	= settr(17259,0,282,1,0,"goto T0_S49", 0, 2, 0);
	trans[11][232]	= settr(17260,0,76,184,0,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0);
	trans[11][233]	= settr(17261,0,76,1,0,"goto accept_S4", 0, 2, 0);
	trans[11][234]	= settr(17262,0,180,185,0,"(!((commands[2]==ABORT)))", 1, 2, 0);
	trans[11][235]	= settr(17263,0,180,1,0,"goto T6_S158", 0, 2, 0);
	trans[11][238]	= settr(17266,0,250,1,0,"break", 0, 2, 0);
	trans[11][251]	= settr(17279,0,250,1,0,".(goto)", 0, 2, 0);
	T = trans[11][250] = settr(17278,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17278,0,239,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17278,0,241,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17278,0,245,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17278,0,246,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17278,0,248,0,0,"DO", 0, 2, 0);
	trans[11][239]	= settr(17267,0,60,186,0,"(!((commands[2]==0)))", 1, 2, 0);
	trans[11][240]	= settr(17268,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[11][241]	= settr(17269,0,250,1,0,"(1)", 0, 2, 0);
	trans[11][242]	= settr(17270,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 11][245] = settr(17273,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17273,2,243,0,0,"ATOMIC", 1, 2, 0);
	trans[11][243]	= settr(17271,0,250,187,187,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0); /* m: 244 -> 250,0 */
	reached11[244] = 1;
	trans[11][244]	= settr(0,0,0,0,0,"assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))",0,0,0);
	trans[11][246]	= settr(17274,0,68,188,0,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0);
	trans[11][247]	= settr(17275,0,68,1,0,"goto accept_S110", 0, 2, 0);
	trans[11][248]	= settr(17276,0,258,189,0,"(!((commands[2]==ABORT)))", 1, 2, 0);
	trans[11][249]	= settr(17277,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[11][252]	= settr(17280,0,258,1,0,"break", 0, 2, 0);
	trans[11][259]	= settr(17287,0,258,1,0,".(goto)", 0, 2, 0);
	T = trans[11][258] = settr(17286,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17286,0,255,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17286,0,256,0,0,"DO", 0, 2, 0);
	T = trans[ 11][255] = settr(17283,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17283,2,253,0,0,"ATOMIC", 1, 2, 0);
	trans[11][253]	= settr(17281,0,258,190,190,"(!((commands[2]==0)))", 1, 2, 0); /* m: 254 -> 258,0 */
	reached11[254] = 1;
	trans[11][254]	= settr(0,0,0,0,0,"assert(!(!((commands[2]==0))))",0,0,0);
	trans[11][256]	= settr(17284,0,258,1,0,"(1)", 0, 2, 0);
	trans[11][257]	= settr(17285,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[11][260]	= settr(17288,0,282,1,0,"break", 0, 2, 0);
	trans[11][283]	= settr(17311,0,282,1,0,".(goto)", 0, 2, 0);
	T = trans[11][282] = settr(17310,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17310,0,261,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17310,0,263,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17310,0,267,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17310,0,268,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17310,0,270,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17310,0,272,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17310,0,274,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17310,0,276,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17310,0,278,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17310,0,280,0,0,"DO", 0, 2, 0);
	trans[11][261]	= settr(17289,0,60,191,0,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0);
	trans[11][262]	= settr(17290,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[11][263]	= settr(17291,0,250,192,0,"(!((commands[2]==ABORT)))", 1, 2, 0);
	trans[11][264]	= settr(17292,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 11][267] = settr(17295,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17295,2,265,0,0,"ATOMIC", 1, 2, 0);
	trans[11][265]	= settr(17293,0,282,193,193,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0); /* m: 266 -> 282,0 */
	reached11[266] = 1;
	trans[11][266]	= settr(0,0,0,0,0,"assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))",0,0,0);
	trans[11][268]	= settr(17296,0,258,194,0,"(!((commands[2]==ABORT)))", 1, 2, 0);
	trans[11][269]	= settr(17297,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[11][270]	= settr(17298,0,236,195,0,"(!((commands[2]==0)))", 1, 2, 0);
	trans[11][271]	= settr(17299,0,236,1,0,"goto T0_S69", 0, 2, 0);
	trans[11][272]	= settr(17300,0,282,1,0,"(1)", 0, 2, 0);
	trans[11][273]	= settr(17301,0,282,1,0,"goto T0_S49", 0, 2, 0);
	trans[11][274]	= settr(17302,0,68,196,0,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0);
	trans[11][275]	= settr(17303,0,68,1,0,"goto accept_S110", 0, 2, 0);
	trans[11][276]	= settr(17304,0,76,197,0,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0);
	trans[11][277]	= settr(17305,0,76,1,0,"goto accept_S4", 0, 2, 0);
	trans[11][278]	= settr(17306,0,88,198,0,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0);
	trans[11][279]	= settr(17307,0,88,1,0,"goto accept_S158", 0, 2, 0);
	trans[11][280]	= settr(17308,0,180,199,0,"(!((commands[2]==ABORT)))", 1, 2, 0);
	trans[11][281]	= settr(17309,0,180,1,0,"goto T6_S158", 0, 2, 0);
	trans[11][284]	= settr(17312,0,290,1,0,"break", 0, 2, 0);
	trans[11][291]	= settr(17319,0,290,1,0,".(goto)", 0, 2, 0);
	T = trans[11][290] = settr(17318,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17318,0,287,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17318,0,288,0,0,"DO", 0, 2, 0);
	T = trans[ 11][287] = settr(17315,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17315,2,285,0,0,"ATOMIC", 1, 2, 0);
	trans[11][285]	= settr(17313,0,290,200,200,"(!((commands[2]==ABORT)))", 1, 2, 0); /* m: 286 -> 290,0 */
	reached11[286] = 1;
	trans[11][286]	= settr(0,0,0,0,0,"assert(!(!((commands[2]==ABORT))))",0,0,0);
	trans[11][288]	= settr(17316,0,290,1,0,"(1)", 0, 2, 0);
	trans[11][289]	= settr(17317,0,290,1,0,"goto T0_S4", 0, 2, 0);
	trans[11][292]	= settr(17320,0,302,1,0,"break", 0, 2, 0);
	trans[11][303]	= settr(17331,0,302,1,0,".(goto)", 0, 2, 0);
	T = trans[11][302] = settr(17330,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17330,0,295,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17330,0,296,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17330,0,298,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17330,0,300,0,0,"DO", 0, 2, 0);
	T = trans[ 11][295] = settr(17323,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17323,2,293,0,0,"ATOMIC", 1, 2, 0);
	trans[11][293]	= settr(17321,0,302,201,201,"((!((commands[2]==0))&&!((commands[2]==ABORT))))", 1, 2, 0); /* m: 294 -> 302,0 */
	reached11[294] = 1;
	trans[11][294]	= settr(0,0,0,0,0,"assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))",0,0,0);
	trans[11][296]	= settr(17324,0,290,202,0,"(!((commands[2]==0)))", 1, 2, 0);
	trans[11][297]	= settr(17325,0,290,1,0,"goto T0_S4", 0, 2, 0);
	trans[11][298]	= settr(17326,0,258,203,0,"(!((commands[2]==ABORT)))", 1, 2, 0);
	trans[11][299]	= settr(17327,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[11][300]	= settr(17328,0,302,1,0,"(1)", 0, 2, 0);
	trans[11][301]	= settr(17329,0,302,1,0,"goto T0_S158", 0, 2, 0);
	trans[11][304]	= settr(17332,0,314,1,0,"break", 0, 2, 0);
	trans[11][315]	= settr(17343,0,314,1,0,".(goto)", 0, 2, 0);
	T = trans[11][314] = settr(17342,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17342,0,305,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17342,0,307,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17342,0,311,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17342,0,312,0,0,"DO", 0, 2, 0);
	trans[11][305]	= settr(17333,0,100,204,0,"(!((commands[1]==0)))", 1, 2, 0);
	trans[11][306]	= settr(17334,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[11][307]	= settr(17335,0,348,1,0,"(1)", 0, 2, 0);
	trans[11][308]	= settr(17336,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 11][311] = settr(17339,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17339,2,309,0,0,"ATOMIC", 1, 2, 0);
	trans[11][309]	= settr(17337,0,314,205,205,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0); /* m: 310 -> 314,0 */
	reached11[310] = 1;
	trans[11][310]	= settr(0,0,0,0,0,"assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))",0,0,0);
	trans[11][312]	= settr(17340,0,356,206,0,"(!((commands[1]==ABORT)))", 1, 2, 0);
	trans[11][313]	= settr(17341,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[11][316]	= settr(17344,0,334,1,0,"break", 0, 2, 0);
	trans[11][335]	= settr(17363,0,334,1,0,".(goto)", 0, 2, 0);
	T = trans[11][334] = settr(17362,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17362,0,317,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17362,0,319,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17362,0,323,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17362,0,324,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17362,0,326,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17362,0,328,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17362,0,330,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17362,0,332,0,0,"DO", 0, 2, 0);
	trans[11][317]	= settr(17345,0,100,207,0,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0);
	trans[11][318]	= settr(17346,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[11][319]	= settr(17347,0,348,208,0,"(!((commands[1]==ABORT)))", 1, 2, 0);
	trans[11][320]	= settr(17348,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 11][323] = settr(17351,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17351,2,321,0,0,"ATOMIC", 1, 2, 0);
	trans[11][321]	= settr(17349,0,334,209,209,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0); /* m: 322 -> 334,0 */
	reached11[322] = 1;
	trans[11][322]	= settr(0,0,0,0,0,"assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))",0,0,0);
	trans[11][324]	= settr(17352,0,356,210,0,"(!((commands[1]==ABORT)))", 1, 2, 0);
	trans[11][325]	= settr(17353,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[11][326]	= settr(17354,0,334,211,0,"(!((commands[1]==0)))", 1, 2, 0);
	trans[11][327]	= settr(17355,0,334,1,0,"goto T0_S230", 0, 2, 0);
	trans[11][328]	= settr(17356,0,380,1,0,"(1)", 0, 2, 0);
	trans[11][329]	= settr(17357,0,380,1,0,"goto T0_S210", 0, 2, 0);
	trans[11][330]	= settr(17358,0,116,212,0,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0);
	trans[11][331]	= settr(17359,0,116,1,0,"goto accept_S165", 0, 2, 0);
	trans[11][332]	= settr(17360,0,192,213,0,"(!((commands[1]==ABORT)))", 1, 2, 0);
	trans[11][333]	= settr(17361,0,192,1,0,"goto T4_S319", 0, 2, 0);
	trans[11][336]	= settr(17364,0,348,1,0,"break", 0, 2, 0);
	trans[11][349]	= settr(17377,0,348,1,0,".(goto)", 0, 2, 0);
	T = trans[11][348] = settr(17376,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17376,0,337,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17376,0,339,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17376,0,343,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17376,0,344,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17376,0,346,0,0,"DO", 0, 2, 0);
	trans[11][337]	= settr(17365,0,100,214,0,"(!((commands[1]==0)))", 1, 2, 0);
	trans[11][338]	= settr(17366,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[11][339]	= settr(17367,0,348,1,0,"(1)", 0, 2, 0);
	trans[11][340]	= settr(17368,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 11][343] = settr(17371,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17371,2,341,0,0,"ATOMIC", 1, 2, 0);
	trans[11][341]	= settr(17369,0,348,215,215,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0); /* m: 342 -> 348,0 */
	reached11[342] = 1;
	trans[11][342]	= settr(0,0,0,0,0,"assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))",0,0,0);
	trans[11][344]	= settr(17372,0,108,216,0,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0);
	trans[11][345]	= settr(17373,0,108,1,0,"goto accept_S271", 0, 2, 0);
	trans[11][346]	= settr(17374,0,356,217,0,"(!((commands[1]==ABORT)))", 1, 2, 0);
	trans[11][347]	= settr(17375,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[11][350]	= settr(17378,0,356,1,0,"break", 0, 2, 0);
	trans[11][357]	= settr(17385,0,356,1,0,".(goto)", 0, 2, 0);
	T = trans[11][356] = settr(17384,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17384,0,353,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17384,0,354,0,0,"DO", 0, 2, 0);
	T = trans[ 11][353] = settr(17381,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17381,2,351,0,0,"ATOMIC", 1, 2, 0);
	trans[11][351]	= settr(17379,0,356,218,218,"(!((commands[1]==0)))", 1, 2, 0); /* m: 352 -> 356,0 */
	reached11[352] = 1;
	trans[11][352]	= settr(0,0,0,0,0,"assert(!(!((commands[1]==0))))",0,0,0);
	trans[11][354]	= settr(17382,0,356,1,0,"(1)", 0, 2, 0);
	trans[11][355]	= settr(17383,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[11][358]	= settr(17386,0,380,1,0,"break", 0, 2, 0);
	trans[11][381]	= settr(17409,0,380,1,0,".(goto)", 0, 2, 0);
	T = trans[11][380] = settr(17408,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17408,0,359,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17408,0,361,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17408,0,365,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17408,0,366,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17408,0,368,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17408,0,370,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17408,0,372,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17408,0,374,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17408,0,376,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17408,0,378,0,0,"DO", 0, 2, 0);
	trans[11][359]	= settr(17387,0,100,219,0,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0);
	trans[11][360]	= settr(17388,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[11][361]	= settr(17389,0,348,220,0,"(!((commands[1]==ABORT)))", 1, 2, 0);
	trans[11][362]	= settr(17390,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 11][365] = settr(17393,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17393,2,363,0,0,"ATOMIC", 1, 2, 0);
	trans[11][363]	= settr(17391,0,380,221,221,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0); /* m: 364 -> 380,0 */
	reached11[364] = 1;
	trans[11][364]	= settr(0,0,0,0,0,"assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))",0,0,0);
	trans[11][366]	= settr(17394,0,356,222,0,"(!((commands[1]==ABORT)))", 1, 2, 0);
	trans[11][367]	= settr(17395,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[11][368]	= settr(17396,0,334,223,0,"(!((commands[1]==0)))", 1, 2, 0);
	trans[11][369]	= settr(17397,0,334,1,0,"goto T0_S230", 0, 2, 0);
	trans[11][370]	= settr(17398,0,380,1,0,"(1)", 0, 2, 0);
	trans[11][371]	= settr(17399,0,380,1,0,"goto T0_S210", 0, 2, 0);
	trans[11][372]	= settr(17400,0,108,224,0,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0);
	trans[11][373]	= settr(17401,0,108,1,0,"goto accept_S271", 0, 2, 0);
	trans[11][374]	= settr(17402,0,116,225,0,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0);
	trans[11][375]	= settr(17403,0,116,1,0,"goto accept_S165", 0, 2, 0);
	trans[11][376]	= settr(17404,0,128,226,0,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0);
	trans[11][377]	= settr(17405,0,128,1,0,"goto accept_S319", 0, 2, 0);
	trans[11][378]	= settr(17406,0,192,227,0,"(!((commands[1]==ABORT)))", 1, 2, 0);
	trans[11][379]	= settr(17407,0,192,1,0,"goto T4_S319", 0, 2, 0);
	trans[11][382]	= settr(17410,0,388,1,0,"break", 0, 2, 0);
	trans[11][389]	= settr(17417,0,388,1,0,".(goto)", 0, 2, 0);
	T = trans[11][388] = settr(17416,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17416,0,385,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17416,0,386,0,0,"DO", 0, 2, 0);
	T = trans[ 11][385] = settr(17413,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17413,2,383,0,0,"ATOMIC", 1, 2, 0);
	trans[11][383]	= settr(17411,0,388,228,228,"(!((commands[1]==ABORT)))", 1, 2, 0); /* m: 384 -> 388,0 */
	reached11[384] = 1;
	trans[11][384]	= settr(0,0,0,0,0,"assert(!(!((commands[1]==ABORT))))",0,0,0);
	trans[11][386]	= settr(17414,0,388,1,0,"(1)", 0, 2, 0);
	trans[11][387]	= settr(17415,0,388,1,0,"goto T0_S165", 0, 2, 0);
	trans[11][390]	= settr(17418,0,400,1,0,"break", 0, 2, 0);
	trans[11][401]	= settr(17429,0,400,1,0,".(goto)", 0, 2, 0);
	T = trans[11][400] = settr(17428,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17428,0,393,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17428,0,394,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17428,0,396,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17428,0,398,0,0,"DO", 0, 2, 0);
	T = trans[ 11][393] = settr(17421,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17421,2,391,0,0,"ATOMIC", 1, 2, 0);
	trans[11][391]	= settr(17419,0,400,229,229,"((!((commands[1]==0))&&!((commands[1]==ABORT))))", 1, 2, 0); /* m: 392 -> 400,0 */
	reached11[392] = 1;
	trans[11][392]	= settr(0,0,0,0,0,"assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))",0,0,0);
	trans[11][394]	= settr(17422,0,388,230,0,"(!((commands[1]==0)))", 1, 2, 0);
	trans[11][395]	= settr(17423,0,388,1,0,"goto T0_S165", 0, 2, 0);
	trans[11][396]	= settr(17424,0,356,231,0,"(!((commands[1]==ABORT)))", 1, 2, 0);
	trans[11][397]	= settr(17425,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[11][398]	= settr(17426,0,400,1,0,"(1)", 0, 2, 0);
	trans[11][399]	= settr(17427,0,400,1,0,"goto T0_S319", 0, 2, 0);
	trans[11][402]	= settr(17430,0,412,1,0,"break", 0, 2, 0);
	trans[11][413]	= settr(17441,0,412,1,0,".(goto)", 0, 2, 0);
	T = trans[11][412] = settr(17440,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17440,0,403,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17440,0,405,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17440,0,409,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17440,0,410,0,0,"DO", 0, 2, 0);
	trans[11][403]	= settr(17431,0,140,232,0,"(!((commands[0]==0)))", 1, 2, 0);
	trans[11][404]	= settr(17432,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[11][405]	= settr(17433,0,446,1,0,"(1)", 0, 2, 0);
	trans[11][406]	= settr(17434,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 11][409] = settr(17437,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17437,2,407,0,0,"ATOMIC", 1, 2, 0);
	trans[11][407]	= settr(17435,0,412,233,233,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0); /* m: 408 -> 412,0 */
	reached11[408] = 1;
	trans[11][408]	= settr(0,0,0,0,0,"assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))",0,0,0);
	trans[11][410]	= settr(17438,0,454,234,0,"(!((commands[0]==ABORT)))", 1, 2, 0);
	trans[11][411]	= settr(17439,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[11][414]	= settr(17442,0,432,1,0,"break", 0, 2, 0);
	trans[11][433]	= settr(17461,0,432,1,0,".(goto)", 0, 2, 0);
	T = trans[11][432] = settr(17460,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17460,0,415,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17460,0,417,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17460,0,421,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17460,0,422,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17460,0,424,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17460,0,426,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17460,0,428,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17460,0,430,0,0,"DO", 0, 2, 0);
	trans[11][415]	= settr(17443,0,140,235,0,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0);
	trans[11][416]	= settr(17444,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[11][417]	= settr(17445,0,446,236,0,"(!((commands[0]==ABORT)))", 1, 2, 0);
	trans[11][418]	= settr(17446,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 11][421] = settr(17449,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17449,2,419,0,0,"ATOMIC", 1, 2, 0);
	trans[11][419]	= settr(17447,0,432,237,237,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0); /* m: 420 -> 432,0 */
	reached11[420] = 1;
	trans[11][420]	= settr(0,0,0,0,0,"assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))",0,0,0);
	trans[11][422]	= settr(17450,0,454,238,0,"(!((commands[0]==ABORT)))", 1, 2, 0);
	trans[11][423]	= settr(17451,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[11][424]	= settr(17452,0,432,239,0,"(!((commands[0]==0)))", 1, 2, 0);
	trans[11][425]	= settr(17453,0,432,1,0,"goto T0_S391", 0, 2, 0);
	trans[11][426]	= settr(17454,0,478,1,0,"(1)", 0, 2, 0);
	trans[11][427]	= settr(17455,0,478,1,0,"goto T0_S371", 0, 2, 0);
	trans[11][428]	= settr(17456,0,156,240,0,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0);
	trans[11][429]	= settr(17457,0,156,1,0,"goto accept_S326", 0, 2, 0);
	trans[11][430]	= settr(17458,0,204,241,0,"(!((commands[0]==ABORT)))", 1, 2, 0);
	trans[11][431]	= settr(17459,0,204,1,0,"goto T2_S480", 0, 2, 0);
	trans[11][434]	= settr(17462,0,446,1,0,"break", 0, 2, 0);
	trans[11][447]	= settr(17475,0,446,1,0,".(goto)", 0, 2, 0);
	T = trans[11][446] = settr(17474,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17474,0,435,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17474,0,437,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17474,0,441,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17474,0,442,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17474,0,444,0,0,"DO", 0, 2, 0);
	trans[11][435]	= settr(17463,0,140,242,0,"(!((commands[0]==0)))", 1, 2, 0);
	trans[11][436]	= settr(17464,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[11][437]	= settr(17465,0,446,1,0,"(1)", 0, 2, 0);
	trans[11][438]	= settr(17466,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 11][441] = settr(17469,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17469,2,439,0,0,"ATOMIC", 1, 2, 0);
	trans[11][439]	= settr(17467,0,446,243,243,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0); /* m: 440 -> 446,0 */
	reached11[440] = 1;
	trans[11][440]	= settr(0,0,0,0,0,"assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))",0,0,0);
	trans[11][442]	= settr(17470,0,148,244,0,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0);
	trans[11][443]	= settr(17471,0,148,1,0,"goto accept_S432", 0, 2, 0);
	trans[11][444]	= settr(17472,0,454,245,0,"(!((commands[0]==ABORT)))", 1, 2, 0);
	trans[11][445]	= settr(17473,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[11][448]	= settr(17476,0,454,1,0,"break", 0, 2, 0);
	trans[11][455]	= settr(17483,0,454,1,0,".(goto)", 0, 2, 0);
	T = trans[11][454] = settr(17482,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17482,0,451,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17482,0,452,0,0,"DO", 0, 2, 0);
	T = trans[ 11][451] = settr(17479,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17479,2,449,0,0,"ATOMIC", 1, 2, 0);
	trans[11][449]	= settr(17477,0,454,246,246,"(!((commands[0]==0)))", 1, 2, 0); /* m: 450 -> 454,0 */
	reached11[450] = 1;
	trans[11][450]	= settr(0,0,0,0,0,"assert(!(!((commands[0]==0))))",0,0,0);
	trans[11][452]	= settr(17480,0,454,1,0,"(1)", 0, 2, 0);
	trans[11][453]	= settr(17481,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[11][456]	= settr(17484,0,478,1,0,"break", 0, 2, 0);
	trans[11][479]	= settr(17507,0,478,1,0,".(goto)", 0, 2, 0);
	T = trans[11][478] = settr(17506,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17506,0,457,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17506,0,459,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17506,0,463,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17506,0,464,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17506,0,466,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17506,0,468,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17506,0,470,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17506,0,472,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17506,0,474,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17506,0,476,0,0,"DO", 0, 2, 0);
	trans[11][457]	= settr(17485,0,140,247,0,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0);
	trans[11][458]	= settr(17486,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[11][459]	= settr(17487,0,446,248,0,"(!((commands[0]==ABORT)))", 1, 2, 0);
	trans[11][460]	= settr(17488,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 11][463] = settr(17491,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17491,2,461,0,0,"ATOMIC", 1, 2, 0);
	trans[11][461]	= settr(17489,0,478,249,249,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0); /* m: 462 -> 478,0 */
	reached11[462] = 1;
	trans[11][462]	= settr(0,0,0,0,0,"assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))",0,0,0);
	trans[11][464]	= settr(17492,0,454,250,0,"(!((commands[0]==ABORT)))", 1, 2, 0);
	trans[11][465]	= settr(17493,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[11][466]	= settr(17494,0,432,251,0,"(!((commands[0]==0)))", 1, 2, 0);
	trans[11][467]	= settr(17495,0,432,1,0,"goto T0_S391", 0, 2, 0);
	trans[11][468]	= settr(17496,0,478,1,0,"(1)", 0, 2, 0);
	trans[11][469]	= settr(17497,0,478,1,0,"goto T0_S371", 0, 2, 0);
	trans[11][470]	= settr(17498,0,148,252,0,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0);
	trans[11][471]	= settr(17499,0,148,1,0,"goto accept_S432", 0, 2, 0);
	trans[11][472]	= settr(17500,0,156,253,0,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0);
	trans[11][473]	= settr(17501,0,156,1,0,"goto accept_S326", 0, 2, 0);
	trans[11][474]	= settr(17502,0,168,254,0,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0);
	trans[11][475]	= settr(17503,0,168,1,0,"goto accept_S480", 0, 2, 0);
	trans[11][476]	= settr(17504,0,204,255,0,"(!((commands[0]==ABORT)))", 1, 2, 0);
	trans[11][477]	= settr(17505,0,204,1,0,"goto T2_S480", 0, 2, 0);
	trans[11][480]	= settr(17508,0,486,1,0,"break", 0, 2, 0);
	trans[11][487]	= settr(17515,0,486,1,0,".(goto)", 0, 2, 0);
	T = trans[11][486] = settr(17514,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17514,0,483,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17514,0,484,0,0,"DO", 0, 2, 0);
	T = trans[ 11][483] = settr(17511,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17511,2,481,0,0,"ATOMIC", 1, 2, 0);
	trans[11][481]	= settr(17509,0,486,256,256,"(!((commands[0]==ABORT)))", 1, 2, 0); /* m: 482 -> 486,0 */
	reached11[482] = 1;
	trans[11][482]	= settr(0,0,0,0,0,"assert(!(!((commands[0]==ABORT))))",0,0,0);
	trans[11][484]	= settr(17512,0,486,1,0,"(1)", 0, 2, 0);
	trans[11][485]	= settr(17513,0,486,1,0,"goto T0_S326", 0, 2, 0);
	trans[11][488]	= settr(17516,0,498,1,0,"break", 0, 2, 0);
	trans[11][499]	= settr(17527,0,498,1,0,".(goto)", 0, 2, 0);
	T = trans[11][498] = settr(17526,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17526,0,491,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17526,0,492,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17526,0,494,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17526,0,496,0,0,"DO", 0, 2, 0);
	T = trans[ 11][491] = settr(17519,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17519,2,489,0,0,"ATOMIC", 1, 2, 0);
	trans[11][489]	= settr(17517,0,498,257,257,"((!((commands[0]==0))&&!((commands[0]==ABORT))))", 1, 2, 0); /* m: 490 -> 498,0 */
	reached11[490] = 1;
	trans[11][490]	= settr(0,0,0,0,0,"assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))",0,0,0);
	trans[11][492]	= settr(17520,0,486,258,0,"(!((commands[0]==0)))", 1, 2, 0);
	trans[11][493]	= settr(17521,0,486,1,0,"goto T0_S326", 0, 2, 0);
	trans[11][494]	= settr(17522,0,454,259,0,"(!((commands[0]==ABORT)))", 1, 2, 0);
	trans[11][495]	= settr(17523,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[11][496]	= settr(17524,0,498,1,0,"(1)", 0, 2, 0);
	trans[11][497]	= settr(17525,0,498,1,0,"goto T0_S480", 0, 2, 0);
	trans[11][500]	= settr(17528,0,501,1,0,"break", 0, 2, 0);
	trans[11][501]	= settr(17529,0,502,1,0,"(1)", 0, 2, 0);
	trans[11][502]	= settr(17530,0,0,260,260,"-end-", 0, 3500, 0);

	/* proctype 10: fsm_aborted */

	trans[10] = (Trans **) emalloc(503*sizeof(Trans *));

	trans[10][49]	= settr(16575,0,48,1,0,".(goto)", 0, 2, 0);
	T = trans[10][48] = settr(16574,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,7,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,8,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,10,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,12,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,14,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,16,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,18,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,20,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,22,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,24,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,26,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,28,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,30,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,32,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,34,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,36,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,38,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,40,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,42,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16574,0,44,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16574,0,46,0,0,"DO", 0, 2, 0);
	trans[10][1]	= settr(16527,0,60,261,0,"(((!(!((states[2]==ABORTED)))&&!((states[2]==0)))&&!((states[2]==ABORTED))))", 1, 2, 0);
	trans[10][2]	= settr(16528,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[10][3]	= settr(16529,0,250,262,0,"((!(!((states[2]==ABORTED)))&&!((states[2]==ABORTED))))", 1, 2, 0);
	trans[10][4]	= settr(16530,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 10][7] = settr(16533,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16533,2,5,0,0,"ATOMIC", 1, 2, 0);
	trans[10][5]	= settr(16531,0,48,263,263,"(((!(!((states[0]==ABORTED)))&&(!((states[0]==0))&&!((states[0]==ABORTED))))||((!(!((states[1]==ABORTED)))&&(!((states[1]==0))&&!((states[1]==ABORTED))))||(!(!((states[2]==ABORTED)))&&(!((states[2]==0))&&!((states[2]==ABORTED)))))))", 1, 2, 0); /* m: 6 -> 48,0 */
	reached10[6] = 1;
	trans[10][6]	= settr(0,0,0,0,0,"assert(!(((!(!((states[0]==ABORTED)))&&(!((states[0]==0))&&!((states[0]==ABORTED))))||((!(!((states[1]==ABORTED)))&&(!((states[1]==0))&&!((states[1]==ABORTED))))||(!(!((states[2]==ABORTED)))&&(!((states[2]==0))&&!((states[2]==ABORTED))))))))",0,0,0);
	trans[10][8]	= settr(16534,0,258,264,0,"((!(!((states[2]==ABORTED)))&&!((states[2]==ABORTED))))", 1, 2, 0);
	trans[10][9]	= settr(16535,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[10][10]	= settr(16536,0,236,265,0,"((!(!((states[2]==ABORTED)))&&!((states[2]==0))))", 1, 2, 0);
	trans[10][11]	= settr(16537,0,236,1,0,"goto T0_S69", 0, 2, 0);
	trans[10][12]	= settr(16538,0,282,266,0,"(!(!((states[2]==ABORTED))))", 1, 2, 0);
	trans[10][13]	= settr(16539,0,282,1,0,"goto T0_S49", 0, 2, 0);
	trans[10][14]	= settr(16540,0,76,267,0,"(((!(!((states[2]==ABORTED)))&&!((states[2]==0)))&&!((states[2]==ABORTED))))", 1, 2, 0);
	trans[10][15]	= settr(16541,0,76,1,0,"goto accept_S4", 0, 2, 0);
	trans[10][16]	= settr(16542,0,180,268,0,"((!(!((states[2]==ABORTED)))&&!((states[2]==ABORTED))))", 1, 2, 0);
	trans[10][17]	= settr(16543,0,180,1,0,"goto T6_S158", 0, 2, 0);
	trans[10][18]	= settr(16544,0,100,269,0,"(((!(!((states[1]==ABORTED)))&&!((states[1]==0)))&&!((states[1]==ABORTED))))", 1, 2, 0);
	trans[10][19]	= settr(16545,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[10][20]	= settr(16546,0,348,270,0,"((!(!((states[1]==ABORTED)))&&!((states[1]==ABORTED))))", 1, 2, 0);
	trans[10][21]	= settr(16547,0,348,1,0,"goto T0_S243", 0, 2, 0);
	trans[10][22]	= settr(16548,0,356,271,0,"((!(!((states[1]==ABORTED)))&&!((states[1]==ABORTED))))", 1, 2, 0);
	trans[10][23]	= settr(16549,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[10][24]	= settr(16550,0,334,272,0,"((!(!((states[1]==ABORTED)))&&!((states[1]==0))))", 1, 2, 0);
	trans[10][25]	= settr(16551,0,334,1,0,"goto T0_S230", 0, 2, 0);
	trans[10][26]	= settr(16552,0,380,273,0,"(!(!((states[1]==ABORTED))))", 1, 2, 0);
	trans[10][27]	= settr(16553,0,380,1,0,"goto T0_S210", 0, 2, 0);
	trans[10][28]	= settr(16554,0,116,274,0,"(((!(!((states[1]==ABORTED)))&&!((states[1]==0)))&&!((states[1]==ABORTED))))", 1, 2, 0);
	trans[10][29]	= settr(16555,0,116,1,0,"goto accept_S165", 0, 2, 0);
	trans[10][30]	= settr(16556,0,192,275,0,"((!(!((states[1]==ABORTED)))&&!((states[1]==ABORTED))))", 1, 2, 0);
	trans[10][31]	= settr(16557,0,192,1,0,"goto T4_S319", 0, 2, 0);
	trans[10][32]	= settr(16558,0,140,276,0,"(((!(!((states[0]==ABORTED)))&&!((states[0]==0)))&&!((states[0]==ABORTED))))", 1, 2, 0);
	trans[10][33]	= settr(16559,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[10][34]	= settr(16560,0,446,277,0,"((!(!((states[0]==ABORTED)))&&!((states[0]==ABORTED))))", 1, 2, 0);
	trans[10][35]	= settr(16561,0,446,1,0,"goto T0_S404", 0, 2, 0);
	trans[10][36]	= settr(16562,0,454,278,0,"((!(!((states[0]==ABORTED)))&&!((states[0]==ABORTED))))", 1, 2, 0);
	trans[10][37]	= settr(16563,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[10][38]	= settr(16564,0,432,279,0,"((!(!((states[0]==ABORTED)))&&!((states[0]==0))))", 1, 2, 0);
	trans[10][39]	= settr(16565,0,432,1,0,"goto T0_S391", 0, 2, 0);
	trans[10][40]	= settr(16566,0,478,280,0,"(!(!((states[0]==ABORTED))))", 1, 2, 0);
	trans[10][41]	= settr(16567,0,478,1,0,"goto T0_S371", 0, 2, 0);
	trans[10][42]	= settr(16568,0,156,281,0,"(((!(!((states[0]==ABORTED)))&&!((states[0]==0)))&&!((states[0]==ABORTED))))", 1, 2, 0);
	trans[10][43]	= settr(16569,0,156,1,0,"goto accept_S326", 0, 2, 0);
	trans[10][44]	= settr(16570,0,204,282,0,"((!(!((states[0]==ABORTED)))&&!((states[0]==ABORTED))))", 1, 2, 0);
	trans[10][45]	= settr(16571,0,204,1,0,"goto T2_S480", 0, 2, 0);
	trans[10][46]	= settr(16572,0,48,1,0,"(1)", 0, 2, 0);
	trans[10][47]	= settr(16573,0,48,1,0,"goto T0_init", 0, 2, 0);
	trans[10][50]	= settr(16576,0,60,1,0,"break", 0, 2, 0);
	trans[10][61]	= settr(16587,0,60,1,0,".(goto)", 0, 2, 0);
	T = trans[10][60] = settr(16586,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16586,0,51,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16586,0,53,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16586,0,57,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16586,0,58,0,0,"DO", 0, 2, 0);
	trans[10][51]	= settr(16577,0,216,283,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[10][52]	= settr(16578,0,216,1,0,"goto T0_S52", 0, 2, 0);
	trans[10][53]	= settr(16579,0,250,1,0,"(1)", 0, 2, 0);
	trans[10][54]	= settr(16580,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 10][57] = settr(16583,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16583,2,55,0,0,"ATOMIC", 1, 2, 0);
	trans[10][55]	= settr(16581,0,60,284,284,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0); /* m: 56 -> 60,0 */
	reached10[56] = 1;
	trans[10][56]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))",0,0,0);
	trans[10][58]	= settr(16584,0,258,285,0,"(!((states[2]==ABORTED)))", 1, 2, 0);
	trans[10][59]	= settr(16585,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[10][62]	= settr(16588,0,68,1,0,"break", 0, 2, 0);
	trans[10][69]	= settr(16595,0,68,1,0,".(goto)", 0, 2, 0);
	T = trans[10][68] = settr(16594,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16594,0,65,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16594,0,66,0,0,"DO", 0, 2, 0);
	T = trans[ 10][65] = settr(16591,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16591,2,63,0,0,"ATOMIC", 1, 2, 0);
	trans[10][63]	= settr(16589,0,68,286,286,"(!((states[2]==0)))", 1, 2, 0); /* m: 64 -> 68,0 */
	reached10[64] = 1;
	trans[10][64]	= settr(0,0,0,0,0,"assert(!(!((states[2]==0))))",0,0,0);
	trans[10][66]	= settr(16592,0,258,1,0,"(1)", 0, 2, 0);
	trans[10][67]	= settr(16593,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[10][70]	= settr(16596,0,76,1,0,"break", 0, 2, 0);
	trans[10][77]	= settr(16603,0,76,1,0,".(goto)", 0, 2, 0);
	T = trans[10][76] = settr(16602,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16602,0,73,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16602,0,74,0,0,"DO", 0, 2, 0);
	T = trans[ 10][73] = settr(16599,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16599,2,71,0,0,"ATOMIC", 1, 2, 0);
	trans[10][71]	= settr(16597,0,76,287,287,"(!((states[2]==ABORTED)))", 1, 2, 0); /* m: 72 -> 76,0 */
	reached10[72] = 1;
	trans[10][72]	= settr(0,0,0,0,0,"assert(!(!((states[2]==ABORTED))))",0,0,0);
	trans[10][74]	= settr(16600,0,290,1,0,"(1)", 0, 2, 0);
	trans[10][75]	= settr(16601,0,290,1,0,"goto T0_S4", 0, 2, 0);
	trans[10][78]	= settr(16604,0,88,1,0,"break", 0, 2, 0);
	trans[10][89]	= settr(16615,0,88,1,0,".(goto)", 0, 2, 0);
	T = trans[10][88] = settr(16614,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16614,0,81,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16614,0,82,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16614,0,84,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16614,0,86,0,0,"DO", 0, 2, 0);
	T = trans[ 10][81] = settr(16607,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16607,2,79,0,0,"ATOMIC", 1, 2, 0);
	trans[10][79]	= settr(16605,0,88,288,288,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0); /* m: 80 -> 88,0 */
	reached10[80] = 1;
	trans[10][80]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))",0,0,0);
	trans[10][82]	= settr(16608,0,290,289,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[10][83]	= settr(16609,0,290,1,0,"goto T0_S4", 0, 2, 0);
	trans[10][84]	= settr(16610,0,258,290,0,"(!((states[2]==ABORTED)))", 1, 2, 0);
	trans[10][85]	= settr(16611,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[10][86]	= settr(16612,0,302,1,0,"(1)", 0, 2, 0);
	trans[10][87]	= settr(16613,0,302,1,0,"goto T0_S158", 0, 2, 0);
	trans[10][90]	= settr(16616,0,100,1,0,"break", 0, 2, 0);
	trans[10][101]	= settr(16627,0,100,1,0,".(goto)", 0, 2, 0);
	T = trans[10][100] = settr(16626,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16626,0,91,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16626,0,93,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16626,0,97,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16626,0,98,0,0,"DO", 0, 2, 0);
	trans[10][91]	= settr(16617,0,314,291,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[10][92]	= settr(16618,0,314,1,0,"goto T0_S213", 0, 2, 0);
	trans[10][93]	= settr(16619,0,348,1,0,"(1)", 0, 2, 0);
	trans[10][94]	= settr(16620,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 10][97] = settr(16623,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16623,2,95,0,0,"ATOMIC", 1, 2, 0);
	trans[10][95]	= settr(16621,0,100,292,292,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0); /* m: 96 -> 100,0 */
	reached10[96] = 1;
	trans[10][96]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))",0,0,0);
	trans[10][98]	= settr(16624,0,356,293,0,"(!((states[1]==ABORTED)))", 1, 2, 0);
	trans[10][99]	= settr(16625,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[10][102]	= settr(16628,0,108,1,0,"break", 0, 2, 0);
	trans[10][109]	= settr(16635,0,108,1,0,".(goto)", 0, 2, 0);
	T = trans[10][108] = settr(16634,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16634,0,105,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16634,0,106,0,0,"DO", 0, 2, 0);
	T = trans[ 10][105] = settr(16631,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16631,2,103,0,0,"ATOMIC", 1, 2, 0);
	trans[10][103]	= settr(16629,0,108,294,294,"(!((states[1]==0)))", 1, 2, 0); /* m: 104 -> 108,0 */
	reached10[104] = 1;
	trans[10][104]	= settr(0,0,0,0,0,"assert(!(!((states[1]==0))))",0,0,0);
	trans[10][106]	= settr(16632,0,356,1,0,"(1)", 0, 2, 0);
	trans[10][107]	= settr(16633,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[10][110]	= settr(16636,0,116,1,0,"break", 0, 2, 0);
	trans[10][117]	= settr(16643,0,116,1,0,".(goto)", 0, 2, 0);
	T = trans[10][116] = settr(16642,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16642,0,113,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16642,0,114,0,0,"DO", 0, 2, 0);
	T = trans[ 10][113] = settr(16639,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16639,2,111,0,0,"ATOMIC", 1, 2, 0);
	trans[10][111]	= settr(16637,0,116,295,295,"(!((states[1]==ABORTED)))", 1, 2, 0); /* m: 112 -> 116,0 */
	reached10[112] = 1;
	trans[10][112]	= settr(0,0,0,0,0,"assert(!(!((states[1]==ABORTED))))",0,0,0);
	trans[10][114]	= settr(16640,0,388,1,0,"(1)", 0, 2, 0);
	trans[10][115]	= settr(16641,0,388,1,0,"goto T0_S165", 0, 2, 0);
	trans[10][118]	= settr(16644,0,128,1,0,"break", 0, 2, 0);
	trans[10][129]	= settr(16655,0,128,1,0,".(goto)", 0, 2, 0);
	T = trans[10][128] = settr(16654,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16654,0,121,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16654,0,122,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16654,0,124,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16654,0,126,0,0,"DO", 0, 2, 0);
	T = trans[ 10][121] = settr(16647,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16647,2,119,0,0,"ATOMIC", 1, 2, 0);
	trans[10][119]	= settr(16645,0,128,296,296,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0); /* m: 120 -> 128,0 */
	reached10[120] = 1;
	trans[10][120]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))",0,0,0);
	trans[10][122]	= settr(16648,0,388,297,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[10][123]	= settr(16649,0,388,1,0,"goto T0_S165", 0, 2, 0);
	trans[10][124]	= settr(16650,0,356,298,0,"(!((states[1]==ABORTED)))", 1, 2, 0);
	trans[10][125]	= settr(16651,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[10][126]	= settr(16652,0,400,1,0,"(1)", 0, 2, 0);
	trans[10][127]	= settr(16653,0,400,1,0,"goto T0_S319", 0, 2, 0);
	trans[10][130]	= settr(16656,0,140,1,0,"break", 0, 2, 0);
	trans[10][141]	= settr(16667,0,140,1,0,".(goto)", 0, 2, 0);
	T = trans[10][140] = settr(16666,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16666,0,131,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16666,0,133,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16666,0,137,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16666,0,138,0,0,"DO", 0, 2, 0);
	trans[10][131]	= settr(16657,0,412,299,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[10][132]	= settr(16658,0,412,1,0,"goto T0_S374", 0, 2, 0);
	trans[10][133]	= settr(16659,0,446,1,0,"(1)", 0, 2, 0);
	trans[10][134]	= settr(16660,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 10][137] = settr(16663,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16663,2,135,0,0,"ATOMIC", 1, 2, 0);
	trans[10][135]	= settr(16661,0,140,300,300,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0); /* m: 136 -> 140,0 */
	reached10[136] = 1;
	trans[10][136]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))",0,0,0);
	trans[10][138]	= settr(16664,0,454,301,0,"(!((states[0]==ABORTED)))", 1, 2, 0);
	trans[10][139]	= settr(16665,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[10][142]	= settr(16668,0,148,1,0,"break", 0, 2, 0);
	trans[10][149]	= settr(16675,0,148,1,0,".(goto)", 0, 2, 0);
	T = trans[10][148] = settr(16674,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16674,0,145,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16674,0,146,0,0,"DO", 0, 2, 0);
	T = trans[ 10][145] = settr(16671,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16671,2,143,0,0,"ATOMIC", 1, 2, 0);
	trans[10][143]	= settr(16669,0,148,302,302,"(!((states[0]==0)))", 1, 2, 0); /* m: 144 -> 148,0 */
	reached10[144] = 1;
	trans[10][144]	= settr(0,0,0,0,0,"assert(!(!((states[0]==0))))",0,0,0);
	trans[10][146]	= settr(16672,0,454,1,0,"(1)", 0, 2, 0);
	trans[10][147]	= settr(16673,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[10][150]	= settr(16676,0,156,1,0,"break", 0, 2, 0);
	trans[10][157]	= settr(16683,0,156,1,0,".(goto)", 0, 2, 0);
	T = trans[10][156] = settr(16682,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16682,0,153,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16682,0,154,0,0,"DO", 0, 2, 0);
	T = trans[ 10][153] = settr(16679,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16679,2,151,0,0,"ATOMIC", 1, 2, 0);
	trans[10][151]	= settr(16677,0,156,303,303,"(!((states[0]==ABORTED)))", 1, 2, 0); /* m: 152 -> 156,0 */
	reached10[152] = 1;
	trans[10][152]	= settr(0,0,0,0,0,"assert(!(!((states[0]==ABORTED))))",0,0,0);
	trans[10][154]	= settr(16680,0,486,1,0,"(1)", 0, 2, 0);
	trans[10][155]	= settr(16681,0,486,1,0,"goto T0_S326", 0, 2, 0);
	trans[10][158]	= settr(16684,0,168,1,0,"break", 0, 2, 0);
	trans[10][169]	= settr(16695,0,168,1,0,".(goto)", 0, 2, 0);
	T = trans[10][168] = settr(16694,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16694,0,161,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16694,0,162,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16694,0,164,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16694,0,166,0,0,"DO", 0, 2, 0);
	T = trans[ 10][161] = settr(16687,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16687,2,159,0,0,"ATOMIC", 1, 2, 0);
	trans[10][159]	= settr(16685,0,168,304,304,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0); /* m: 160 -> 168,0 */
	reached10[160] = 1;
	trans[10][160]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))",0,0,0);
	trans[10][162]	= settr(16688,0,486,305,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[10][163]	= settr(16689,0,486,1,0,"goto T0_S326", 0, 2, 0);
	trans[10][164]	= settr(16690,0,454,306,0,"(!((states[0]==ABORTED)))", 1, 2, 0);
	trans[10][165]	= settr(16691,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[10][166]	= settr(16692,0,498,1,0,"(1)", 0, 2, 0);
	trans[10][167]	= settr(16693,0,498,1,0,"goto T0_S480", 0, 2, 0);
	trans[10][170]	= settr(16696,0,180,1,0,"break", 0, 2, 0);
	trans[10][181]	= settr(16707,0,180,1,0,".(goto)", 0, 2, 0);
	T = trans[10][180] = settr(16706,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16706,0,173,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16706,0,174,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16706,0,176,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16706,0,178,0,0,"DO", 0, 2, 0);
	T = trans[ 10][173] = settr(16699,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16699,2,171,0,0,"ATOMIC", 1, 2, 0);
	trans[10][171]	= settr(16697,0,180,307,307,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0); /* m: 172 -> 180,0 */
	reached10[172] = 1;
	trans[10][172]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))",0,0,0);
	trans[10][174]	= settr(16700,0,76,308,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[10][175]	= settr(16701,0,76,1,0,"goto accept_S4", 0, 2, 0);
	trans[10][176]	= settr(16702,0,258,309,0,"(!((states[2]==ABORTED)))", 1, 2, 0);
	trans[10][177]	= settr(16703,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[10][178]	= settr(16704,0,180,1,0,"(1)", 0, 2, 0);
	trans[10][179]	= settr(16705,0,180,1,0,"goto T6_S158", 0, 2, 0);
	trans[10][182]	= settr(16708,0,192,1,0,"break", 0, 2, 0);
	trans[10][193]	= settr(16719,0,192,1,0,".(goto)", 0, 2, 0);
	T = trans[10][192] = settr(16718,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16718,0,185,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16718,0,186,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16718,0,188,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16718,0,190,0,0,"DO", 0, 2, 0);
	T = trans[ 10][185] = settr(16711,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16711,2,183,0,0,"ATOMIC", 1, 2, 0);
	trans[10][183]	= settr(16709,0,192,310,310,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0); /* m: 184 -> 192,0 */
	reached10[184] = 1;
	trans[10][184]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))",0,0,0);
	trans[10][186]	= settr(16712,0,116,311,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[10][187]	= settr(16713,0,116,1,0,"goto accept_S165", 0, 2, 0);
	trans[10][188]	= settr(16714,0,356,312,0,"(!((states[1]==ABORTED)))", 1, 2, 0);
	trans[10][189]	= settr(16715,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[10][190]	= settr(16716,0,192,1,0,"(1)", 0, 2, 0);
	trans[10][191]	= settr(16717,0,192,1,0,"goto T4_S319", 0, 2, 0);
	trans[10][194]	= settr(16720,0,204,1,0,"break", 0, 2, 0);
	trans[10][205]	= settr(16731,0,204,1,0,".(goto)", 0, 2, 0);
	T = trans[10][204] = settr(16730,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16730,0,197,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16730,0,198,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16730,0,200,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16730,0,202,0,0,"DO", 0, 2, 0);
	T = trans[ 10][197] = settr(16723,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16723,2,195,0,0,"ATOMIC", 1, 2, 0);
	trans[10][195]	= settr(16721,0,204,313,313,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0); /* m: 196 -> 204,0 */
	reached10[196] = 1;
	trans[10][196]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))",0,0,0);
	trans[10][198]	= settr(16724,0,156,314,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[10][199]	= settr(16725,0,156,1,0,"goto accept_S326", 0, 2, 0);
	trans[10][200]	= settr(16726,0,454,315,0,"(!((states[0]==ABORTED)))", 1, 2, 0);
	trans[10][201]	= settr(16727,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[10][202]	= settr(16728,0,204,1,0,"(1)", 0, 2, 0);
	trans[10][203]	= settr(16729,0,204,1,0,"goto T2_S480", 0, 2, 0);
	trans[10][206]	= settr(16732,0,216,1,0,"break", 0, 2, 0);
	trans[10][217]	= settr(16743,0,216,1,0,".(goto)", 0, 2, 0);
	T = trans[10][216] = settr(16742,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16742,0,207,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16742,0,209,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16742,0,213,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16742,0,214,0,0,"DO", 0, 2, 0);
	trans[10][207]	= settr(16733,0,60,316,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[10][208]	= settr(16734,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[10][209]	= settr(16735,0,250,1,0,"(1)", 0, 2, 0);
	trans[10][210]	= settr(16736,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 10][213] = settr(16739,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16739,2,211,0,0,"ATOMIC", 1, 2, 0);
	trans[10][211]	= settr(16737,0,216,317,317,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0); /* m: 212 -> 216,0 */
	reached10[212] = 1;
	trans[10][212]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))",0,0,0);
	trans[10][214]	= settr(16740,0,258,318,0,"(!((states[2]==ABORTED)))", 1, 2, 0);
	trans[10][215]	= settr(16741,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[10][218]	= settr(16744,0,236,1,0,"break", 0, 2, 0);
	trans[10][237]	= settr(16763,0,236,1,0,".(goto)", 0, 2, 0);
	T = trans[10][236] = settr(16762,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16762,0,219,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16762,0,221,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16762,0,225,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16762,0,226,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16762,0,228,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16762,0,230,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16762,0,232,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16762,0,234,0,0,"DO", 0, 2, 0);
	trans[10][219]	= settr(16745,0,60,319,0,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0);
	trans[10][220]	= settr(16746,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[10][221]	= settr(16747,0,250,320,0,"(!((states[2]==ABORTED)))", 1, 2, 0);
	trans[10][222]	= settr(16748,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 10][225] = settr(16751,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16751,2,223,0,0,"ATOMIC", 1, 2, 0);
	trans[10][223]	= settr(16749,0,236,321,321,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0); /* m: 224 -> 236,0 */
	reached10[224] = 1;
	trans[10][224]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))",0,0,0);
	trans[10][226]	= settr(16752,0,258,322,0,"(!((states[2]==ABORTED)))", 1, 2, 0);
	trans[10][227]	= settr(16753,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[10][228]	= settr(16754,0,236,323,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[10][229]	= settr(16755,0,236,1,0,"goto T0_S69", 0, 2, 0);
	trans[10][230]	= settr(16756,0,282,1,0,"(1)", 0, 2, 0);
	trans[10][231]	= settr(16757,0,282,1,0,"goto T0_S49", 0, 2, 0);
	trans[10][232]	= settr(16758,0,76,324,0,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0);
	trans[10][233]	= settr(16759,0,76,1,0,"goto accept_S4", 0, 2, 0);
	trans[10][234]	= settr(16760,0,180,325,0,"(!((states[2]==ABORTED)))", 1, 2, 0);
	trans[10][235]	= settr(16761,0,180,1,0,"goto T6_S158", 0, 2, 0);
	trans[10][238]	= settr(16764,0,250,1,0,"break", 0, 2, 0);
	trans[10][251]	= settr(16777,0,250,1,0,".(goto)", 0, 2, 0);
	T = trans[10][250] = settr(16776,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16776,0,239,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16776,0,241,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16776,0,245,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16776,0,246,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16776,0,248,0,0,"DO", 0, 2, 0);
	trans[10][239]	= settr(16765,0,60,326,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[10][240]	= settr(16766,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[10][241]	= settr(16767,0,250,1,0,"(1)", 0, 2, 0);
	trans[10][242]	= settr(16768,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 10][245] = settr(16771,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16771,2,243,0,0,"ATOMIC", 1, 2, 0);
	trans[10][243]	= settr(16769,0,250,327,327,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0); /* m: 244 -> 250,0 */
	reached10[244] = 1;
	trans[10][244]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))",0,0,0);
	trans[10][246]	= settr(16772,0,68,328,0,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0);
	trans[10][247]	= settr(16773,0,68,1,0,"goto accept_S110", 0, 2, 0);
	trans[10][248]	= settr(16774,0,258,329,0,"(!((states[2]==ABORTED)))", 1, 2, 0);
	trans[10][249]	= settr(16775,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[10][252]	= settr(16778,0,258,1,0,"break", 0, 2, 0);
	trans[10][259]	= settr(16785,0,258,1,0,".(goto)", 0, 2, 0);
	T = trans[10][258] = settr(16784,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16784,0,255,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16784,0,256,0,0,"DO", 0, 2, 0);
	T = trans[ 10][255] = settr(16781,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16781,2,253,0,0,"ATOMIC", 1, 2, 0);
	trans[10][253]	= settr(16779,0,258,330,330,"(!((states[2]==0)))", 1, 2, 0); /* m: 254 -> 258,0 */
	reached10[254] = 1;
	trans[10][254]	= settr(0,0,0,0,0,"assert(!(!((states[2]==0))))",0,0,0);
	trans[10][256]	= settr(16782,0,258,1,0,"(1)", 0, 2, 0);
	trans[10][257]	= settr(16783,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[10][260]	= settr(16786,0,282,1,0,"break", 0, 2, 0);
	trans[10][283]	= settr(16809,0,282,1,0,".(goto)", 0, 2, 0);
	T = trans[10][282] = settr(16808,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16808,0,261,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16808,0,263,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16808,0,267,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16808,0,268,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16808,0,270,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16808,0,272,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16808,0,274,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16808,0,276,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16808,0,278,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16808,0,280,0,0,"DO", 0, 2, 0);
	trans[10][261]	= settr(16787,0,60,331,0,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0);
	trans[10][262]	= settr(16788,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[10][263]	= settr(16789,0,250,332,0,"(!((states[2]==ABORTED)))", 1, 2, 0);
	trans[10][264]	= settr(16790,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 10][267] = settr(16793,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16793,2,265,0,0,"ATOMIC", 1, 2, 0);
	trans[10][265]	= settr(16791,0,282,333,333,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0); /* m: 266 -> 282,0 */
	reached10[266] = 1;
	trans[10][266]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))",0,0,0);
	trans[10][268]	= settr(16794,0,258,334,0,"(!((states[2]==ABORTED)))", 1, 2, 0);
	trans[10][269]	= settr(16795,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[10][270]	= settr(16796,0,236,335,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[10][271]	= settr(16797,0,236,1,0,"goto T0_S69", 0, 2, 0);
	trans[10][272]	= settr(16798,0,282,1,0,"(1)", 0, 2, 0);
	trans[10][273]	= settr(16799,0,282,1,0,"goto T0_S49", 0, 2, 0);
	trans[10][274]	= settr(16800,0,68,336,0,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0);
	trans[10][275]	= settr(16801,0,68,1,0,"goto accept_S110", 0, 2, 0);
	trans[10][276]	= settr(16802,0,76,337,0,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0);
	trans[10][277]	= settr(16803,0,76,1,0,"goto accept_S4", 0, 2, 0);
	trans[10][278]	= settr(16804,0,88,338,0,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0);
	trans[10][279]	= settr(16805,0,88,1,0,"goto accept_S158", 0, 2, 0);
	trans[10][280]	= settr(16806,0,180,339,0,"(!((states[2]==ABORTED)))", 1, 2, 0);
	trans[10][281]	= settr(16807,0,180,1,0,"goto T6_S158", 0, 2, 0);
	trans[10][284]	= settr(16810,0,290,1,0,"break", 0, 2, 0);
	trans[10][291]	= settr(16817,0,290,1,0,".(goto)", 0, 2, 0);
	T = trans[10][290] = settr(16816,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16816,0,287,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16816,0,288,0,0,"DO", 0, 2, 0);
	T = trans[ 10][287] = settr(16813,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16813,2,285,0,0,"ATOMIC", 1, 2, 0);
	trans[10][285]	= settr(16811,0,290,340,340,"(!((states[2]==ABORTED)))", 1, 2, 0); /* m: 286 -> 290,0 */
	reached10[286] = 1;
	trans[10][286]	= settr(0,0,0,0,0,"assert(!(!((states[2]==ABORTED))))",0,0,0);
	trans[10][288]	= settr(16814,0,290,1,0,"(1)", 0, 2, 0);
	trans[10][289]	= settr(16815,0,290,1,0,"goto T0_S4", 0, 2, 0);
	trans[10][292]	= settr(16818,0,302,1,0,"break", 0, 2, 0);
	trans[10][303]	= settr(16829,0,302,1,0,".(goto)", 0, 2, 0);
	T = trans[10][302] = settr(16828,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16828,0,295,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16828,0,296,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16828,0,298,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16828,0,300,0,0,"DO", 0, 2, 0);
	T = trans[ 10][295] = settr(16821,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16821,2,293,0,0,"ATOMIC", 1, 2, 0);
	trans[10][293]	= settr(16819,0,302,341,341,"((!((states[2]==0))&&!((states[2]==ABORTED))))", 1, 2, 0); /* m: 294 -> 302,0 */
	reached10[294] = 1;
	trans[10][294]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))",0,0,0);
	trans[10][296]	= settr(16822,0,290,342,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[10][297]	= settr(16823,0,290,1,0,"goto T0_S4", 0, 2, 0);
	trans[10][298]	= settr(16824,0,258,343,0,"(!((states[2]==ABORTED)))", 1, 2, 0);
	trans[10][299]	= settr(16825,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[10][300]	= settr(16826,0,302,1,0,"(1)", 0, 2, 0);
	trans[10][301]	= settr(16827,0,302,1,0,"goto T0_S158", 0, 2, 0);
	trans[10][304]	= settr(16830,0,314,1,0,"break", 0, 2, 0);
	trans[10][315]	= settr(16841,0,314,1,0,".(goto)", 0, 2, 0);
	T = trans[10][314] = settr(16840,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16840,0,305,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16840,0,307,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16840,0,311,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16840,0,312,0,0,"DO", 0, 2, 0);
	trans[10][305]	= settr(16831,0,100,344,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[10][306]	= settr(16832,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[10][307]	= settr(16833,0,348,1,0,"(1)", 0, 2, 0);
	trans[10][308]	= settr(16834,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 10][311] = settr(16837,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16837,2,309,0,0,"ATOMIC", 1, 2, 0);
	trans[10][309]	= settr(16835,0,314,345,345,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0); /* m: 310 -> 314,0 */
	reached10[310] = 1;
	trans[10][310]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))",0,0,0);
	trans[10][312]	= settr(16838,0,356,346,0,"(!((states[1]==ABORTED)))", 1, 2, 0);
	trans[10][313]	= settr(16839,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[10][316]	= settr(16842,0,334,1,0,"break", 0, 2, 0);
	trans[10][335]	= settr(16861,0,334,1,0,".(goto)", 0, 2, 0);
	T = trans[10][334] = settr(16860,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16860,0,317,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16860,0,319,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16860,0,323,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16860,0,324,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16860,0,326,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16860,0,328,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16860,0,330,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16860,0,332,0,0,"DO", 0, 2, 0);
	trans[10][317]	= settr(16843,0,100,347,0,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0);
	trans[10][318]	= settr(16844,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[10][319]	= settr(16845,0,348,348,0,"(!((states[1]==ABORTED)))", 1, 2, 0);
	trans[10][320]	= settr(16846,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 10][323] = settr(16849,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16849,2,321,0,0,"ATOMIC", 1, 2, 0);
	trans[10][321]	= settr(16847,0,334,349,349,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0); /* m: 322 -> 334,0 */
	reached10[322] = 1;
	trans[10][322]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))",0,0,0);
	trans[10][324]	= settr(16850,0,356,350,0,"(!((states[1]==ABORTED)))", 1, 2, 0);
	trans[10][325]	= settr(16851,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[10][326]	= settr(16852,0,334,351,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[10][327]	= settr(16853,0,334,1,0,"goto T0_S230", 0, 2, 0);
	trans[10][328]	= settr(16854,0,380,1,0,"(1)", 0, 2, 0);
	trans[10][329]	= settr(16855,0,380,1,0,"goto T0_S210", 0, 2, 0);
	trans[10][330]	= settr(16856,0,116,352,0,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0);
	trans[10][331]	= settr(16857,0,116,1,0,"goto accept_S165", 0, 2, 0);
	trans[10][332]	= settr(16858,0,192,353,0,"(!((states[1]==ABORTED)))", 1, 2, 0);
	trans[10][333]	= settr(16859,0,192,1,0,"goto T4_S319", 0, 2, 0);
	trans[10][336]	= settr(16862,0,348,1,0,"break", 0, 2, 0);
	trans[10][349]	= settr(16875,0,348,1,0,".(goto)", 0, 2, 0);
	T = trans[10][348] = settr(16874,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16874,0,337,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16874,0,339,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16874,0,343,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16874,0,344,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16874,0,346,0,0,"DO", 0, 2, 0);
	trans[10][337]	= settr(16863,0,100,354,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[10][338]	= settr(16864,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[10][339]	= settr(16865,0,348,1,0,"(1)", 0, 2, 0);
	trans[10][340]	= settr(16866,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 10][343] = settr(16869,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16869,2,341,0,0,"ATOMIC", 1, 2, 0);
	trans[10][341]	= settr(16867,0,348,355,355,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0); /* m: 342 -> 348,0 */
	reached10[342] = 1;
	trans[10][342]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))",0,0,0);
	trans[10][344]	= settr(16870,0,108,356,0,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0);
	trans[10][345]	= settr(16871,0,108,1,0,"goto accept_S271", 0, 2, 0);
	trans[10][346]	= settr(16872,0,356,357,0,"(!((states[1]==ABORTED)))", 1, 2, 0);
	trans[10][347]	= settr(16873,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[10][350]	= settr(16876,0,356,1,0,"break", 0, 2, 0);
	trans[10][357]	= settr(16883,0,356,1,0,".(goto)", 0, 2, 0);
	T = trans[10][356] = settr(16882,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16882,0,353,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16882,0,354,0,0,"DO", 0, 2, 0);
	T = trans[ 10][353] = settr(16879,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16879,2,351,0,0,"ATOMIC", 1, 2, 0);
	trans[10][351]	= settr(16877,0,356,358,358,"(!((states[1]==0)))", 1, 2, 0); /* m: 352 -> 356,0 */
	reached10[352] = 1;
	trans[10][352]	= settr(0,0,0,0,0,"assert(!(!((states[1]==0))))",0,0,0);
	trans[10][354]	= settr(16880,0,356,1,0,"(1)", 0, 2, 0);
	trans[10][355]	= settr(16881,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[10][358]	= settr(16884,0,380,1,0,"break", 0, 2, 0);
	trans[10][381]	= settr(16907,0,380,1,0,".(goto)", 0, 2, 0);
	T = trans[10][380] = settr(16906,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16906,0,359,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16906,0,361,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16906,0,365,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16906,0,366,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16906,0,368,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16906,0,370,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16906,0,372,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16906,0,374,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16906,0,376,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16906,0,378,0,0,"DO", 0, 2, 0);
	trans[10][359]	= settr(16885,0,100,359,0,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0);
	trans[10][360]	= settr(16886,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[10][361]	= settr(16887,0,348,360,0,"(!((states[1]==ABORTED)))", 1, 2, 0);
	trans[10][362]	= settr(16888,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 10][365] = settr(16891,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16891,2,363,0,0,"ATOMIC", 1, 2, 0);
	trans[10][363]	= settr(16889,0,380,361,361,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0); /* m: 364 -> 380,0 */
	reached10[364] = 1;
	trans[10][364]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))",0,0,0);
	trans[10][366]	= settr(16892,0,356,362,0,"(!((states[1]==ABORTED)))", 1, 2, 0);
	trans[10][367]	= settr(16893,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[10][368]	= settr(16894,0,334,363,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[10][369]	= settr(16895,0,334,1,0,"goto T0_S230", 0, 2, 0);
	trans[10][370]	= settr(16896,0,380,1,0,"(1)", 0, 2, 0);
	trans[10][371]	= settr(16897,0,380,1,0,"goto T0_S210", 0, 2, 0);
	trans[10][372]	= settr(16898,0,108,364,0,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0);
	trans[10][373]	= settr(16899,0,108,1,0,"goto accept_S271", 0, 2, 0);
	trans[10][374]	= settr(16900,0,116,365,0,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0);
	trans[10][375]	= settr(16901,0,116,1,0,"goto accept_S165", 0, 2, 0);
	trans[10][376]	= settr(16902,0,128,366,0,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0);
	trans[10][377]	= settr(16903,0,128,1,0,"goto accept_S319", 0, 2, 0);
	trans[10][378]	= settr(16904,0,192,367,0,"(!((states[1]==ABORTED)))", 1, 2, 0);
	trans[10][379]	= settr(16905,0,192,1,0,"goto T4_S319", 0, 2, 0);
	trans[10][382]	= settr(16908,0,388,1,0,"break", 0, 2, 0);
	trans[10][389]	= settr(16915,0,388,1,0,".(goto)", 0, 2, 0);
	T = trans[10][388] = settr(16914,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16914,0,385,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16914,0,386,0,0,"DO", 0, 2, 0);
	T = trans[ 10][385] = settr(16911,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16911,2,383,0,0,"ATOMIC", 1, 2, 0);
	trans[10][383]	= settr(16909,0,388,368,368,"(!((states[1]==ABORTED)))", 1, 2, 0); /* m: 384 -> 388,0 */
	reached10[384] = 1;
	trans[10][384]	= settr(0,0,0,0,0,"assert(!(!((states[1]==ABORTED))))",0,0,0);
	trans[10][386]	= settr(16912,0,388,1,0,"(1)", 0, 2, 0);
	trans[10][387]	= settr(16913,0,388,1,0,"goto T0_S165", 0, 2, 0);
	trans[10][390]	= settr(16916,0,400,1,0,"break", 0, 2, 0);
	trans[10][401]	= settr(16927,0,400,1,0,".(goto)", 0, 2, 0);
	T = trans[10][400] = settr(16926,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16926,0,393,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16926,0,394,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16926,0,396,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16926,0,398,0,0,"DO", 0, 2, 0);
	T = trans[ 10][393] = settr(16919,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16919,2,391,0,0,"ATOMIC", 1, 2, 0);
	trans[10][391]	= settr(16917,0,400,369,369,"((!((states[1]==0))&&!((states[1]==ABORTED))))", 1, 2, 0); /* m: 392 -> 400,0 */
	reached10[392] = 1;
	trans[10][392]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))",0,0,0);
	trans[10][394]	= settr(16920,0,388,370,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[10][395]	= settr(16921,0,388,1,0,"goto T0_S165", 0, 2, 0);
	trans[10][396]	= settr(16922,0,356,371,0,"(!((states[1]==ABORTED)))", 1, 2, 0);
	trans[10][397]	= settr(16923,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[10][398]	= settr(16924,0,400,1,0,"(1)", 0, 2, 0);
	trans[10][399]	= settr(16925,0,400,1,0,"goto T0_S319", 0, 2, 0);
	trans[10][402]	= settr(16928,0,412,1,0,"break", 0, 2, 0);
	trans[10][413]	= settr(16939,0,412,1,0,".(goto)", 0, 2, 0);
	T = trans[10][412] = settr(16938,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16938,0,403,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16938,0,405,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16938,0,409,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16938,0,410,0,0,"DO", 0, 2, 0);
	trans[10][403]	= settr(16929,0,140,372,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[10][404]	= settr(16930,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[10][405]	= settr(16931,0,446,1,0,"(1)", 0, 2, 0);
	trans[10][406]	= settr(16932,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 10][409] = settr(16935,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16935,2,407,0,0,"ATOMIC", 1, 2, 0);
	trans[10][407]	= settr(16933,0,412,373,373,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0); /* m: 408 -> 412,0 */
	reached10[408] = 1;
	trans[10][408]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))",0,0,0);
	trans[10][410]	= settr(16936,0,454,374,0,"(!((states[0]==ABORTED)))", 1, 2, 0);
	trans[10][411]	= settr(16937,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[10][414]	= settr(16940,0,432,1,0,"break", 0, 2, 0);
	trans[10][433]	= settr(16959,0,432,1,0,".(goto)", 0, 2, 0);
	T = trans[10][432] = settr(16958,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16958,0,415,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16958,0,417,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16958,0,421,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16958,0,422,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16958,0,424,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16958,0,426,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16958,0,428,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16958,0,430,0,0,"DO", 0, 2, 0);
	trans[10][415]	= settr(16941,0,140,375,0,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0);
	trans[10][416]	= settr(16942,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[10][417]	= settr(16943,0,446,376,0,"(!((states[0]==ABORTED)))", 1, 2, 0);
	trans[10][418]	= settr(16944,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 10][421] = settr(16947,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16947,2,419,0,0,"ATOMIC", 1, 2, 0);
	trans[10][419]	= settr(16945,0,432,377,377,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0); /* m: 420 -> 432,0 */
	reached10[420] = 1;
	trans[10][420]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))",0,0,0);
	trans[10][422]	= settr(16948,0,454,378,0,"(!((states[0]==ABORTED)))", 1, 2, 0);
	trans[10][423]	= settr(16949,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[10][424]	= settr(16950,0,432,379,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[10][425]	= settr(16951,0,432,1,0,"goto T0_S391", 0, 2, 0);
	trans[10][426]	= settr(16952,0,478,1,0,"(1)", 0, 2, 0);
	trans[10][427]	= settr(16953,0,478,1,0,"goto T0_S371", 0, 2, 0);
	trans[10][428]	= settr(16954,0,156,380,0,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0);
	trans[10][429]	= settr(16955,0,156,1,0,"goto accept_S326", 0, 2, 0);
	trans[10][430]	= settr(16956,0,204,381,0,"(!((states[0]==ABORTED)))", 1, 2, 0);
	trans[10][431]	= settr(16957,0,204,1,0,"goto T2_S480", 0, 2, 0);
	trans[10][434]	= settr(16960,0,446,1,0,"break", 0, 2, 0);
	trans[10][447]	= settr(16973,0,446,1,0,".(goto)", 0, 2, 0);
	T = trans[10][446] = settr(16972,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16972,0,435,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16972,0,437,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16972,0,441,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16972,0,442,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16972,0,444,0,0,"DO", 0, 2, 0);
	trans[10][435]	= settr(16961,0,140,382,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[10][436]	= settr(16962,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[10][437]	= settr(16963,0,446,1,0,"(1)", 0, 2, 0);
	trans[10][438]	= settr(16964,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 10][441] = settr(16967,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16967,2,439,0,0,"ATOMIC", 1, 2, 0);
	trans[10][439]	= settr(16965,0,446,383,383,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0); /* m: 440 -> 446,0 */
	reached10[440] = 1;
	trans[10][440]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))",0,0,0);
	trans[10][442]	= settr(16968,0,148,384,0,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0);
	trans[10][443]	= settr(16969,0,148,1,0,"goto accept_S432", 0, 2, 0);
	trans[10][444]	= settr(16970,0,454,385,0,"(!((states[0]==ABORTED)))", 1, 2, 0);
	trans[10][445]	= settr(16971,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[10][448]	= settr(16974,0,454,1,0,"break", 0, 2, 0);
	trans[10][455]	= settr(16981,0,454,1,0,".(goto)", 0, 2, 0);
	T = trans[10][454] = settr(16980,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16980,0,451,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16980,0,452,0,0,"DO", 0, 2, 0);
	T = trans[ 10][451] = settr(16977,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16977,2,449,0,0,"ATOMIC", 1, 2, 0);
	trans[10][449]	= settr(16975,0,454,386,386,"(!((states[0]==0)))", 1, 2, 0); /* m: 450 -> 454,0 */
	reached10[450] = 1;
	trans[10][450]	= settr(0,0,0,0,0,"assert(!(!((states[0]==0))))",0,0,0);
	trans[10][452]	= settr(16978,0,454,1,0,"(1)", 0, 2, 0);
	trans[10][453]	= settr(16979,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[10][456]	= settr(16982,0,478,1,0,"break", 0, 2, 0);
	trans[10][479]	= settr(17005,0,478,1,0,".(goto)", 0, 2, 0);
	T = trans[10][478] = settr(17004,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17004,0,457,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17004,0,459,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17004,0,463,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17004,0,464,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17004,0,466,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17004,0,468,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17004,0,470,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17004,0,472,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17004,0,474,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17004,0,476,0,0,"DO", 0, 2, 0);
	trans[10][457]	= settr(16983,0,140,387,0,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0);
	trans[10][458]	= settr(16984,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[10][459]	= settr(16985,0,446,388,0,"(!((states[0]==ABORTED)))", 1, 2, 0);
	trans[10][460]	= settr(16986,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 10][463] = settr(16989,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16989,2,461,0,0,"ATOMIC", 1, 2, 0);
	trans[10][461]	= settr(16987,0,478,389,389,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0); /* m: 462 -> 478,0 */
	reached10[462] = 1;
	trans[10][462]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))",0,0,0);
	trans[10][464]	= settr(16990,0,454,390,0,"(!((states[0]==ABORTED)))", 1, 2, 0);
	trans[10][465]	= settr(16991,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[10][466]	= settr(16992,0,432,391,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[10][467]	= settr(16993,0,432,1,0,"goto T0_S391", 0, 2, 0);
	trans[10][468]	= settr(16994,0,478,1,0,"(1)", 0, 2, 0);
	trans[10][469]	= settr(16995,0,478,1,0,"goto T0_S371", 0, 2, 0);
	trans[10][470]	= settr(16996,0,148,392,0,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0);
	trans[10][471]	= settr(16997,0,148,1,0,"goto accept_S432", 0, 2, 0);
	trans[10][472]	= settr(16998,0,156,393,0,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0);
	trans[10][473]	= settr(16999,0,156,1,0,"goto accept_S326", 0, 2, 0);
	trans[10][474]	= settr(17000,0,168,394,0,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0);
	trans[10][475]	= settr(17001,0,168,1,0,"goto accept_S480", 0, 2, 0);
	trans[10][476]	= settr(17002,0,204,395,0,"(!((states[0]==ABORTED)))", 1, 2, 0);
	trans[10][477]	= settr(17003,0,204,1,0,"goto T2_S480", 0, 2, 0);
	trans[10][480]	= settr(17006,0,486,1,0,"break", 0, 2, 0);
	trans[10][487]	= settr(17013,0,486,1,0,".(goto)", 0, 2, 0);
	T = trans[10][486] = settr(17012,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17012,0,483,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17012,0,484,0,0,"DO", 0, 2, 0);
	T = trans[ 10][483] = settr(17009,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17009,2,481,0,0,"ATOMIC", 1, 2, 0);
	trans[10][481]	= settr(17007,0,486,396,396,"(!((states[0]==ABORTED)))", 1, 2, 0); /* m: 482 -> 486,0 */
	reached10[482] = 1;
	trans[10][482]	= settr(0,0,0,0,0,"assert(!(!((states[0]==ABORTED))))",0,0,0);
	trans[10][484]	= settr(17010,0,486,1,0,"(1)", 0, 2, 0);
	trans[10][485]	= settr(17011,0,486,1,0,"goto T0_S326", 0, 2, 0);
	trans[10][488]	= settr(17014,0,498,1,0,"break", 0, 2, 0);
	trans[10][499]	= settr(17025,0,498,1,0,".(goto)", 0, 2, 0);
	T = trans[10][498] = settr(17024,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17024,0,491,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17024,0,492,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(17024,0,494,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(17024,0,496,0,0,"DO", 0, 2, 0);
	T = trans[ 10][491] = settr(17017,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(17017,2,489,0,0,"ATOMIC", 1, 2, 0);
	trans[10][489]	= settr(17015,0,498,397,397,"((!((states[0]==0))&&!((states[0]==ABORTED))))", 1, 2, 0); /* m: 490 -> 498,0 */
	reached10[490] = 1;
	trans[10][490]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))",0,0,0);
	trans[10][492]	= settr(17018,0,486,398,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[10][493]	= settr(17019,0,486,1,0,"goto T0_S326", 0, 2, 0);
	trans[10][494]	= settr(17020,0,454,399,0,"(!((states[0]==ABORTED)))", 1, 2, 0);
	trans[10][495]	= settr(17021,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[10][496]	= settr(17022,0,498,1,0,"(1)", 0, 2, 0);
	trans[10][497]	= settr(17023,0,498,1,0,"goto T0_S480", 0, 2, 0);
	trans[10][500]	= settr(17026,0,501,1,0,"break", 0, 2, 0);
	trans[10][501]	= settr(17027,0,502,1,0,"(1)", 0, 2, 0);
	trans[10][502]	= settr(17028,0,0,400,400,"-end-", 0, 3500, 0);

	/* proctype 9: fsm_aborting */

	trans[9] = (Trans **) emalloc(41*sizeof(Trans *));

	trans[9][13]	= settr(16499,0,12,1,0,".(goto)", 0, 2, 0);
	T = trans[9][12] = settr(16498,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16498,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16498,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16498,0,6,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16498,0,8,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16498,0,10,0,0,"DO", 0, 2, 0);
	trans[9][1]	= settr(16487,0,20,401,0,"((!(!((states[2]==ABORTING)))&&!((states[2]==ABORTED))))", 1, 2, 0);
	trans[9][2]	= settr(16488,0,20,1,0,"goto accept_S6", 0, 2, 0);
	T = trans[ 9][5] = settr(16491,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16491,2,3,0,0,"ATOMIC", 1, 2, 0);
	trans[9][3]	= settr(16489,0,12,402,402,"(((!(!((states[0]==ABORTING)))&&(!((states[0]==ABORTED))&&!((states[0]==ABORTING))))||((!(!((states[1]==ABORTING)))&&(!((states[1]==ABORTED))&&!((states[1]==ABORTING))))||(!(!((states[2]==ABORTING)))&&(!((states[2]==ABORTED))&&!((states[2]==ABORTING)))))))", 1, 2, 0); /* m: 4 -> 12,0 */
	reached9[4] = 1;
	trans[9][4]	= settr(0,0,0,0,0,"assert(!(((!(!((states[0]==ABORTING)))&&(!((states[0]==ABORTED))&&!((states[0]==ABORTING))))||((!(!((states[1]==ABORTING)))&&(!((states[1]==ABORTED))&&!((states[1]==ABORTING))))||(!(!((states[2]==ABORTING)))&&(!((states[2]==ABORTED))&&!((states[2]==ABORTING))))))))",0,0,0);
	trans[9][6]	= settr(16492,0,28,403,0,"((!(!((states[1]==ABORTING)))&&!((states[1]==ABORTED))))", 1, 2, 0);
	trans[9][7]	= settr(16493,0,28,1,0,"goto accept_S11", 0, 2, 0);
	trans[9][8]	= settr(16494,0,36,404,0,"((!(!((states[0]==ABORTING)))&&!((states[0]==ABORTED))))", 1, 2, 0);
	trans[9][9]	= settr(16495,0,36,1,0,"goto accept_S16", 0, 2, 0);
	trans[9][10]	= settr(16496,0,12,1,0,"(1)", 0, 2, 0);
	trans[9][11]	= settr(16497,0,12,1,0,"goto T0_init", 0, 2, 0);
	trans[9][14]	= settr(16500,0,20,1,0,"break", 0, 2, 0);
	trans[9][21]	= settr(16507,0,20,1,0,".(goto)", 0, 2, 0);
	T = trans[9][20] = settr(16506,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16506,0,15,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16506,0,19,0,0,"DO", 0, 2, 0);
	trans[9][15]	= settr(16501,0,20,405,0,"(!((states[2]==ABORTED)))", 1, 2, 0);
	trans[9][16]	= settr(16502,0,20,1,0,"goto accept_S6", 0, 2, 0);
	T = trans[ 9][19] = settr(16505,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16505,2,17,0,0,"ATOMIC", 1, 2, 0);
	trans[9][17]	= settr(16503,0,20,406,406,"((!((states[2]==ABORTED))&&!((states[2]==ABORTING))))", 1, 2, 0); /* m: 18 -> 20,0 */
	reached9[18] = 1;
	trans[9][18]	= settr(0,0,0,0,0,"assert(!((!((states[2]==ABORTED))&&!((states[2]==ABORTING)))))",0,0,0);
	trans[9][22]	= settr(16508,0,28,1,0,"break", 0, 2, 0);
	trans[9][29]	= settr(16515,0,28,1,0,".(goto)", 0, 2, 0);
	T = trans[9][28] = settr(16514,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16514,0,23,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16514,0,27,0,0,"DO", 0, 2, 0);
	trans[9][23]	= settr(16509,0,28,407,0,"(!((states[1]==ABORTED)))", 1, 2, 0);
	trans[9][24]	= settr(16510,0,28,1,0,"goto accept_S11", 0, 2, 0);
	T = trans[ 9][27] = settr(16513,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16513,2,25,0,0,"ATOMIC", 1, 2, 0);
	trans[9][25]	= settr(16511,0,28,408,408,"((!((states[1]==ABORTED))&&!((states[1]==ABORTING))))", 1, 2, 0); /* m: 26 -> 28,0 */
	reached9[26] = 1;
	trans[9][26]	= settr(0,0,0,0,0,"assert(!((!((states[1]==ABORTED))&&!((states[1]==ABORTING)))))",0,0,0);
	trans[9][30]	= settr(16516,0,36,1,0,"break", 0, 2, 0);
	trans[9][37]	= settr(16523,0,36,1,0,".(goto)", 0, 2, 0);
	T = trans[9][36] = settr(16522,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16522,0,31,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16522,0,35,0,0,"DO", 0, 2, 0);
	trans[9][31]	= settr(16517,0,36,409,0,"(!((states[0]==ABORTED)))", 1, 2, 0);
	trans[9][32]	= settr(16518,0,36,1,0,"goto accept_S16", 0, 2, 0);
	T = trans[ 9][35] = settr(16521,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16521,2,33,0,0,"ATOMIC", 1, 2, 0);
	trans[9][33]	= settr(16519,0,36,410,410,"((!((states[0]==ABORTED))&&!((states[0]==ABORTING))))", 1, 2, 0); /* m: 34 -> 36,0 */
	reached9[34] = 1;
	trans[9][34]	= settr(0,0,0,0,0,"assert(!((!((states[0]==ABORTED))&&!((states[0]==ABORTING)))))",0,0,0);
	trans[9][38]	= settr(16524,0,39,1,0,"break", 0, 2, 0);
	trans[9][39]	= settr(16525,0,40,1,0,"(1)", 0, 2, 0);
	trans[9][40]	= settr(16526,0,0,411,411,"-end-", 0, 3500, 0);

	/* proctype 8: fsm_stopped */

	trans[8] = (Trans **) emalloc(503*sizeof(Trans *));

	trans[8][49]	= settr(16033,0,48,1,0,".(goto)", 0, 2, 0);
	T = trans[8][48] = settr(16032,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,7,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,8,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,10,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,12,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,14,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,16,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,18,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,20,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,22,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,24,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,26,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,28,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,30,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,32,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,34,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,36,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,38,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,40,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,42,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16032,0,44,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16032,0,46,0,0,"DO", 0, 2, 0);
	trans[8][1]	= settr(15985,0,60,412,0,"(((!(!((states[2]==STOPPED)))&&!((states[2]==0)))&&!((states[2]==STOPPED))))", 1, 2, 0);
	trans[8][2]	= settr(15986,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[8][3]	= settr(15987,0,250,413,0,"((!(!((states[2]==STOPPED)))&&!((states[2]==STOPPED))))", 1, 2, 0);
	trans[8][4]	= settr(15988,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 8][7] = settr(15991,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15991,2,5,0,0,"ATOMIC", 1, 2, 0);
	trans[8][5]	= settr(15989,0,48,414,414,"(((!(!((states[0]==STOPPED)))&&(!((states[0]==0))&&!((states[0]==STOPPED))))||((!(!((states[1]==STOPPED)))&&(!((states[1]==0))&&!((states[1]==STOPPED))))||(!(!((states[2]==STOPPED)))&&(!((states[2]==0))&&!((states[2]==STOPPED)))))))", 1, 2, 0); /* m: 6 -> 48,0 */
	reached8[6] = 1;
	trans[8][6]	= settr(0,0,0,0,0,"assert(!(((!(!((states[0]==STOPPED)))&&(!((states[0]==0))&&!((states[0]==STOPPED))))||((!(!((states[1]==STOPPED)))&&(!((states[1]==0))&&!((states[1]==STOPPED))))||(!(!((states[2]==STOPPED)))&&(!((states[2]==0))&&!((states[2]==STOPPED))))))))",0,0,0);
	trans[8][8]	= settr(15992,0,258,415,0,"((!(!((states[2]==STOPPED)))&&!((states[2]==STOPPED))))", 1, 2, 0);
	trans[8][9]	= settr(15993,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[8][10]	= settr(15994,0,236,416,0,"((!(!((states[2]==STOPPED)))&&!((states[2]==0))))", 1, 2, 0);
	trans[8][11]	= settr(15995,0,236,1,0,"goto T0_S69", 0, 2, 0);
	trans[8][12]	= settr(15996,0,282,417,0,"(!(!((states[2]==STOPPED))))", 1, 2, 0);
	trans[8][13]	= settr(15997,0,282,1,0,"goto T0_S49", 0, 2, 0);
	trans[8][14]	= settr(15998,0,76,418,0,"(((!(!((states[2]==STOPPED)))&&!((states[2]==0)))&&!((states[2]==STOPPED))))", 1, 2, 0);
	trans[8][15]	= settr(15999,0,76,1,0,"goto accept_S4", 0, 2, 0);
	trans[8][16]	= settr(16000,0,180,419,0,"((!(!((states[2]==STOPPED)))&&!((states[2]==STOPPED))))", 1, 2, 0);
	trans[8][17]	= settr(16001,0,180,1,0,"goto T6_S158", 0, 2, 0);
	trans[8][18]	= settr(16002,0,100,420,0,"(((!(!((states[1]==STOPPED)))&&!((states[1]==0)))&&!((states[1]==STOPPED))))", 1, 2, 0);
	trans[8][19]	= settr(16003,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[8][20]	= settr(16004,0,348,421,0,"((!(!((states[1]==STOPPED)))&&!((states[1]==STOPPED))))", 1, 2, 0);
	trans[8][21]	= settr(16005,0,348,1,0,"goto T0_S243", 0, 2, 0);
	trans[8][22]	= settr(16006,0,356,422,0,"((!(!((states[1]==STOPPED)))&&!((states[1]==STOPPED))))", 1, 2, 0);
	trans[8][23]	= settr(16007,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[8][24]	= settr(16008,0,334,423,0,"((!(!((states[1]==STOPPED)))&&!((states[1]==0))))", 1, 2, 0);
	trans[8][25]	= settr(16009,0,334,1,0,"goto T0_S230", 0, 2, 0);
	trans[8][26]	= settr(16010,0,380,424,0,"(!(!((states[1]==STOPPED))))", 1, 2, 0);
	trans[8][27]	= settr(16011,0,380,1,0,"goto T0_S210", 0, 2, 0);
	trans[8][28]	= settr(16012,0,116,425,0,"(((!(!((states[1]==STOPPED)))&&!((states[1]==0)))&&!((states[1]==STOPPED))))", 1, 2, 0);
	trans[8][29]	= settr(16013,0,116,1,0,"goto accept_S165", 0, 2, 0);
	trans[8][30]	= settr(16014,0,192,426,0,"((!(!((states[1]==STOPPED)))&&!((states[1]==STOPPED))))", 1, 2, 0);
	trans[8][31]	= settr(16015,0,192,1,0,"goto T4_S319", 0, 2, 0);
	trans[8][32]	= settr(16016,0,140,427,0,"(((!(!((states[0]==STOPPED)))&&!((states[0]==0)))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[8][33]	= settr(16017,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[8][34]	= settr(16018,0,446,428,0,"((!(!((states[0]==STOPPED)))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[8][35]	= settr(16019,0,446,1,0,"goto T0_S404", 0, 2, 0);
	trans[8][36]	= settr(16020,0,454,429,0,"((!(!((states[0]==STOPPED)))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[8][37]	= settr(16021,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[8][38]	= settr(16022,0,432,430,0,"((!(!((states[0]==STOPPED)))&&!((states[0]==0))))", 1, 2, 0);
	trans[8][39]	= settr(16023,0,432,1,0,"goto T0_S391", 0, 2, 0);
	trans[8][40]	= settr(16024,0,478,431,0,"(!(!((states[0]==STOPPED))))", 1, 2, 0);
	trans[8][41]	= settr(16025,0,478,1,0,"goto T0_S371", 0, 2, 0);
	trans[8][42]	= settr(16026,0,156,432,0,"(((!(!((states[0]==STOPPED)))&&!((states[0]==0)))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[8][43]	= settr(16027,0,156,1,0,"goto accept_S326", 0, 2, 0);
	trans[8][44]	= settr(16028,0,204,433,0,"((!(!((states[0]==STOPPED)))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[8][45]	= settr(16029,0,204,1,0,"goto T2_S480", 0, 2, 0);
	trans[8][46]	= settr(16030,0,48,1,0,"(1)", 0, 2, 0);
	trans[8][47]	= settr(16031,0,48,1,0,"goto T0_init", 0, 2, 0);
	trans[8][50]	= settr(16034,0,60,1,0,"break", 0, 2, 0);
	trans[8][61]	= settr(16045,0,60,1,0,".(goto)", 0, 2, 0);
	T = trans[8][60] = settr(16044,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16044,0,51,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16044,0,53,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16044,0,57,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16044,0,58,0,0,"DO", 0, 2, 0);
	trans[8][51]	= settr(16035,0,216,434,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[8][52]	= settr(16036,0,216,1,0,"goto T0_S52", 0, 2, 0);
	trans[8][53]	= settr(16037,0,250,1,0,"(1)", 0, 2, 0);
	trans[8][54]	= settr(16038,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 8][57] = settr(16041,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16041,2,55,0,0,"ATOMIC", 1, 2, 0);
	trans[8][55]	= settr(16039,0,60,435,435,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0); /* m: 56 -> 60,0 */
	reached8[56] = 1;
	trans[8][56]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))",0,0,0);
	trans[8][58]	= settr(16042,0,258,436,0,"(!((states[2]==STOPPED)))", 1, 2, 0);
	trans[8][59]	= settr(16043,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[8][62]	= settr(16046,0,68,1,0,"break", 0, 2, 0);
	trans[8][69]	= settr(16053,0,68,1,0,".(goto)", 0, 2, 0);
	T = trans[8][68] = settr(16052,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16052,0,65,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16052,0,66,0,0,"DO", 0, 2, 0);
	T = trans[ 8][65] = settr(16049,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16049,2,63,0,0,"ATOMIC", 1, 2, 0);
	trans[8][63]	= settr(16047,0,68,437,437,"(!((states[2]==0)))", 1, 2, 0); /* m: 64 -> 68,0 */
	reached8[64] = 1;
	trans[8][64]	= settr(0,0,0,0,0,"assert(!(!((states[2]==0))))",0,0,0);
	trans[8][66]	= settr(16050,0,258,1,0,"(1)", 0, 2, 0);
	trans[8][67]	= settr(16051,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[8][70]	= settr(16054,0,76,1,0,"break", 0, 2, 0);
	trans[8][77]	= settr(16061,0,76,1,0,".(goto)", 0, 2, 0);
	T = trans[8][76] = settr(16060,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16060,0,73,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16060,0,74,0,0,"DO", 0, 2, 0);
	T = trans[ 8][73] = settr(16057,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16057,2,71,0,0,"ATOMIC", 1, 2, 0);
	trans[8][71]	= settr(16055,0,76,438,438,"(!((states[2]==STOPPED)))", 1, 2, 0); /* m: 72 -> 76,0 */
	reached8[72] = 1;
	trans[8][72]	= settr(0,0,0,0,0,"assert(!(!((states[2]==STOPPED))))",0,0,0);
	trans[8][74]	= settr(16058,0,290,1,0,"(1)", 0, 2, 0);
	trans[8][75]	= settr(16059,0,290,1,0,"goto T0_S4", 0, 2, 0);
	trans[8][78]	= settr(16062,0,88,1,0,"break", 0, 2, 0);
	trans[8][89]	= settr(16073,0,88,1,0,".(goto)", 0, 2, 0);
	T = trans[8][88] = settr(16072,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16072,0,81,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16072,0,82,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16072,0,84,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16072,0,86,0,0,"DO", 0, 2, 0);
	T = trans[ 8][81] = settr(16065,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16065,2,79,0,0,"ATOMIC", 1, 2, 0);
	trans[8][79]	= settr(16063,0,88,439,439,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0); /* m: 80 -> 88,0 */
	reached8[80] = 1;
	trans[8][80]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))",0,0,0);
	trans[8][82]	= settr(16066,0,290,440,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[8][83]	= settr(16067,0,290,1,0,"goto T0_S4", 0, 2, 0);
	trans[8][84]	= settr(16068,0,258,441,0,"(!((states[2]==STOPPED)))", 1, 2, 0);
	trans[8][85]	= settr(16069,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[8][86]	= settr(16070,0,302,1,0,"(1)", 0, 2, 0);
	trans[8][87]	= settr(16071,0,302,1,0,"goto T0_S158", 0, 2, 0);
	trans[8][90]	= settr(16074,0,100,1,0,"break", 0, 2, 0);
	trans[8][101]	= settr(16085,0,100,1,0,".(goto)", 0, 2, 0);
	T = trans[8][100] = settr(16084,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16084,0,91,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16084,0,93,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16084,0,97,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16084,0,98,0,0,"DO", 0, 2, 0);
	trans[8][91]	= settr(16075,0,314,442,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[8][92]	= settr(16076,0,314,1,0,"goto T0_S213", 0, 2, 0);
	trans[8][93]	= settr(16077,0,348,1,0,"(1)", 0, 2, 0);
	trans[8][94]	= settr(16078,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 8][97] = settr(16081,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16081,2,95,0,0,"ATOMIC", 1, 2, 0);
	trans[8][95]	= settr(16079,0,100,443,443,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0); /* m: 96 -> 100,0 */
	reached8[96] = 1;
	trans[8][96]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))",0,0,0);
	trans[8][98]	= settr(16082,0,356,444,0,"(!((states[1]==STOPPED)))", 1, 2, 0);
	trans[8][99]	= settr(16083,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[8][102]	= settr(16086,0,108,1,0,"break", 0, 2, 0);
	trans[8][109]	= settr(16093,0,108,1,0,".(goto)", 0, 2, 0);
	T = trans[8][108] = settr(16092,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16092,0,105,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16092,0,106,0,0,"DO", 0, 2, 0);
	T = trans[ 8][105] = settr(16089,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16089,2,103,0,0,"ATOMIC", 1, 2, 0);
	trans[8][103]	= settr(16087,0,108,445,445,"(!((states[1]==0)))", 1, 2, 0); /* m: 104 -> 108,0 */
	reached8[104] = 1;
	trans[8][104]	= settr(0,0,0,0,0,"assert(!(!((states[1]==0))))",0,0,0);
	trans[8][106]	= settr(16090,0,356,1,0,"(1)", 0, 2, 0);
	trans[8][107]	= settr(16091,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[8][110]	= settr(16094,0,116,1,0,"break", 0, 2, 0);
	trans[8][117]	= settr(16101,0,116,1,0,".(goto)", 0, 2, 0);
	T = trans[8][116] = settr(16100,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16100,0,113,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16100,0,114,0,0,"DO", 0, 2, 0);
	T = trans[ 8][113] = settr(16097,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16097,2,111,0,0,"ATOMIC", 1, 2, 0);
	trans[8][111]	= settr(16095,0,116,446,446,"(!((states[1]==STOPPED)))", 1, 2, 0); /* m: 112 -> 116,0 */
	reached8[112] = 1;
	trans[8][112]	= settr(0,0,0,0,0,"assert(!(!((states[1]==STOPPED))))",0,0,0);
	trans[8][114]	= settr(16098,0,388,1,0,"(1)", 0, 2, 0);
	trans[8][115]	= settr(16099,0,388,1,0,"goto T0_S165", 0, 2, 0);
	trans[8][118]	= settr(16102,0,128,1,0,"break", 0, 2, 0);
	trans[8][129]	= settr(16113,0,128,1,0,".(goto)", 0, 2, 0);
	T = trans[8][128] = settr(16112,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16112,0,121,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16112,0,122,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16112,0,124,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16112,0,126,0,0,"DO", 0, 2, 0);
	T = trans[ 8][121] = settr(16105,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16105,2,119,0,0,"ATOMIC", 1, 2, 0);
	trans[8][119]	= settr(16103,0,128,447,447,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0); /* m: 120 -> 128,0 */
	reached8[120] = 1;
	trans[8][120]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))",0,0,0);
	trans[8][122]	= settr(16106,0,388,448,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[8][123]	= settr(16107,0,388,1,0,"goto T0_S165", 0, 2, 0);
	trans[8][124]	= settr(16108,0,356,449,0,"(!((states[1]==STOPPED)))", 1, 2, 0);
	trans[8][125]	= settr(16109,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[8][126]	= settr(16110,0,400,1,0,"(1)", 0, 2, 0);
	trans[8][127]	= settr(16111,0,400,1,0,"goto T0_S319", 0, 2, 0);
	trans[8][130]	= settr(16114,0,140,1,0,"break", 0, 2, 0);
	trans[8][141]	= settr(16125,0,140,1,0,".(goto)", 0, 2, 0);
	T = trans[8][140] = settr(16124,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16124,0,131,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16124,0,133,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16124,0,137,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16124,0,138,0,0,"DO", 0, 2, 0);
	trans[8][131]	= settr(16115,0,412,450,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[8][132]	= settr(16116,0,412,1,0,"goto T0_S374", 0, 2, 0);
	trans[8][133]	= settr(16117,0,446,1,0,"(1)", 0, 2, 0);
	trans[8][134]	= settr(16118,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 8][137] = settr(16121,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16121,2,135,0,0,"ATOMIC", 1, 2, 0);
	trans[8][135]	= settr(16119,0,140,451,451,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0); /* m: 136 -> 140,0 */
	reached8[136] = 1;
	trans[8][136]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))",0,0,0);
	trans[8][138]	= settr(16122,0,454,452,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[8][139]	= settr(16123,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[8][142]	= settr(16126,0,148,1,0,"break", 0, 2, 0);
	trans[8][149]	= settr(16133,0,148,1,0,".(goto)", 0, 2, 0);
	T = trans[8][148] = settr(16132,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16132,0,145,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16132,0,146,0,0,"DO", 0, 2, 0);
	T = trans[ 8][145] = settr(16129,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16129,2,143,0,0,"ATOMIC", 1, 2, 0);
	trans[8][143]	= settr(16127,0,148,453,453,"(!((states[0]==0)))", 1, 2, 0); /* m: 144 -> 148,0 */
	reached8[144] = 1;
	trans[8][144]	= settr(0,0,0,0,0,"assert(!(!((states[0]==0))))",0,0,0);
	trans[8][146]	= settr(16130,0,454,1,0,"(1)", 0, 2, 0);
	trans[8][147]	= settr(16131,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[8][150]	= settr(16134,0,156,1,0,"break", 0, 2, 0);
	trans[8][157]	= settr(16141,0,156,1,0,".(goto)", 0, 2, 0);
	T = trans[8][156] = settr(16140,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16140,0,153,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16140,0,154,0,0,"DO", 0, 2, 0);
	T = trans[ 8][153] = settr(16137,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16137,2,151,0,0,"ATOMIC", 1, 2, 0);
	trans[8][151]	= settr(16135,0,156,454,454,"(!((states[0]==STOPPED)))", 1, 2, 0); /* m: 152 -> 156,0 */
	reached8[152] = 1;
	trans[8][152]	= settr(0,0,0,0,0,"assert(!(!((states[0]==STOPPED))))",0,0,0);
	trans[8][154]	= settr(16138,0,486,1,0,"(1)", 0, 2, 0);
	trans[8][155]	= settr(16139,0,486,1,0,"goto T0_S326", 0, 2, 0);
	trans[8][158]	= settr(16142,0,168,1,0,"break", 0, 2, 0);
	trans[8][169]	= settr(16153,0,168,1,0,".(goto)", 0, 2, 0);
	T = trans[8][168] = settr(16152,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16152,0,161,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16152,0,162,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16152,0,164,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16152,0,166,0,0,"DO", 0, 2, 0);
	T = trans[ 8][161] = settr(16145,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16145,2,159,0,0,"ATOMIC", 1, 2, 0);
	trans[8][159]	= settr(16143,0,168,455,455,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0); /* m: 160 -> 168,0 */
	reached8[160] = 1;
	trans[8][160]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))",0,0,0);
	trans[8][162]	= settr(16146,0,486,456,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[8][163]	= settr(16147,0,486,1,0,"goto T0_S326", 0, 2, 0);
	trans[8][164]	= settr(16148,0,454,457,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[8][165]	= settr(16149,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[8][166]	= settr(16150,0,498,1,0,"(1)", 0, 2, 0);
	trans[8][167]	= settr(16151,0,498,1,0,"goto T0_S480", 0, 2, 0);
	trans[8][170]	= settr(16154,0,180,1,0,"break", 0, 2, 0);
	trans[8][181]	= settr(16165,0,180,1,0,".(goto)", 0, 2, 0);
	T = trans[8][180] = settr(16164,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16164,0,173,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16164,0,174,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16164,0,176,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16164,0,178,0,0,"DO", 0, 2, 0);
	T = trans[ 8][173] = settr(16157,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16157,2,171,0,0,"ATOMIC", 1, 2, 0);
	trans[8][171]	= settr(16155,0,180,458,458,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0); /* m: 172 -> 180,0 */
	reached8[172] = 1;
	trans[8][172]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))",0,0,0);
	trans[8][174]	= settr(16158,0,76,459,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[8][175]	= settr(16159,0,76,1,0,"goto accept_S4", 0, 2, 0);
	trans[8][176]	= settr(16160,0,258,460,0,"(!((states[2]==STOPPED)))", 1, 2, 0);
	trans[8][177]	= settr(16161,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[8][178]	= settr(16162,0,180,1,0,"(1)", 0, 2, 0);
	trans[8][179]	= settr(16163,0,180,1,0,"goto T6_S158", 0, 2, 0);
	trans[8][182]	= settr(16166,0,192,1,0,"break", 0, 2, 0);
	trans[8][193]	= settr(16177,0,192,1,0,".(goto)", 0, 2, 0);
	T = trans[8][192] = settr(16176,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16176,0,185,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16176,0,186,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16176,0,188,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16176,0,190,0,0,"DO", 0, 2, 0);
	T = trans[ 8][185] = settr(16169,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16169,2,183,0,0,"ATOMIC", 1, 2, 0);
	trans[8][183]	= settr(16167,0,192,461,461,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0); /* m: 184 -> 192,0 */
	reached8[184] = 1;
	trans[8][184]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))",0,0,0);
	trans[8][186]	= settr(16170,0,116,462,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[8][187]	= settr(16171,0,116,1,0,"goto accept_S165", 0, 2, 0);
	trans[8][188]	= settr(16172,0,356,463,0,"(!((states[1]==STOPPED)))", 1, 2, 0);
	trans[8][189]	= settr(16173,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[8][190]	= settr(16174,0,192,1,0,"(1)", 0, 2, 0);
	trans[8][191]	= settr(16175,0,192,1,0,"goto T4_S319", 0, 2, 0);
	trans[8][194]	= settr(16178,0,204,1,0,"break", 0, 2, 0);
	trans[8][205]	= settr(16189,0,204,1,0,".(goto)", 0, 2, 0);
	T = trans[8][204] = settr(16188,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16188,0,197,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16188,0,198,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16188,0,200,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16188,0,202,0,0,"DO", 0, 2, 0);
	T = trans[ 8][197] = settr(16181,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16181,2,195,0,0,"ATOMIC", 1, 2, 0);
	trans[8][195]	= settr(16179,0,204,464,464,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0); /* m: 196 -> 204,0 */
	reached8[196] = 1;
	trans[8][196]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))",0,0,0);
	trans[8][198]	= settr(16182,0,156,465,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[8][199]	= settr(16183,0,156,1,0,"goto accept_S326", 0, 2, 0);
	trans[8][200]	= settr(16184,0,454,466,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[8][201]	= settr(16185,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[8][202]	= settr(16186,0,204,1,0,"(1)", 0, 2, 0);
	trans[8][203]	= settr(16187,0,204,1,0,"goto T2_S480", 0, 2, 0);
	trans[8][206]	= settr(16190,0,216,1,0,"break", 0, 2, 0);
	trans[8][217]	= settr(16201,0,216,1,0,".(goto)", 0, 2, 0);
	T = trans[8][216] = settr(16200,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16200,0,207,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16200,0,209,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16200,0,213,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16200,0,214,0,0,"DO", 0, 2, 0);
	trans[8][207]	= settr(16191,0,60,467,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[8][208]	= settr(16192,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[8][209]	= settr(16193,0,250,1,0,"(1)", 0, 2, 0);
	trans[8][210]	= settr(16194,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 8][213] = settr(16197,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16197,2,211,0,0,"ATOMIC", 1, 2, 0);
	trans[8][211]	= settr(16195,0,216,468,468,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0); /* m: 212 -> 216,0 */
	reached8[212] = 1;
	trans[8][212]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))",0,0,0);
	trans[8][214]	= settr(16198,0,258,469,0,"(!((states[2]==STOPPED)))", 1, 2, 0);
	trans[8][215]	= settr(16199,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[8][218]	= settr(16202,0,236,1,0,"break", 0, 2, 0);
	trans[8][237]	= settr(16221,0,236,1,0,".(goto)", 0, 2, 0);
	T = trans[8][236] = settr(16220,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16220,0,219,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16220,0,221,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16220,0,225,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16220,0,226,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16220,0,228,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16220,0,230,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16220,0,232,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16220,0,234,0,0,"DO", 0, 2, 0);
	trans[8][219]	= settr(16203,0,60,470,0,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0);
	trans[8][220]	= settr(16204,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[8][221]	= settr(16205,0,250,471,0,"(!((states[2]==STOPPED)))", 1, 2, 0);
	trans[8][222]	= settr(16206,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 8][225] = settr(16209,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16209,2,223,0,0,"ATOMIC", 1, 2, 0);
	trans[8][223]	= settr(16207,0,236,472,472,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0); /* m: 224 -> 236,0 */
	reached8[224] = 1;
	trans[8][224]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))",0,0,0);
	trans[8][226]	= settr(16210,0,258,473,0,"(!((states[2]==STOPPED)))", 1, 2, 0);
	trans[8][227]	= settr(16211,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[8][228]	= settr(16212,0,236,474,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[8][229]	= settr(16213,0,236,1,0,"goto T0_S69", 0, 2, 0);
	trans[8][230]	= settr(16214,0,282,1,0,"(1)", 0, 2, 0);
	trans[8][231]	= settr(16215,0,282,1,0,"goto T0_S49", 0, 2, 0);
	trans[8][232]	= settr(16216,0,76,475,0,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0);
	trans[8][233]	= settr(16217,0,76,1,0,"goto accept_S4", 0, 2, 0);
	trans[8][234]	= settr(16218,0,180,476,0,"(!((states[2]==STOPPED)))", 1, 2, 0);
	trans[8][235]	= settr(16219,0,180,1,0,"goto T6_S158", 0, 2, 0);
	trans[8][238]	= settr(16222,0,250,1,0,"break", 0, 2, 0);
	trans[8][251]	= settr(16235,0,250,1,0,".(goto)", 0, 2, 0);
	T = trans[8][250] = settr(16234,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16234,0,239,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16234,0,241,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16234,0,245,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16234,0,246,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16234,0,248,0,0,"DO", 0, 2, 0);
	trans[8][239]	= settr(16223,0,60,477,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[8][240]	= settr(16224,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[8][241]	= settr(16225,0,250,1,0,"(1)", 0, 2, 0);
	trans[8][242]	= settr(16226,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 8][245] = settr(16229,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16229,2,243,0,0,"ATOMIC", 1, 2, 0);
	trans[8][243]	= settr(16227,0,250,478,478,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0); /* m: 244 -> 250,0 */
	reached8[244] = 1;
	trans[8][244]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))",0,0,0);
	trans[8][246]	= settr(16230,0,68,479,0,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0);
	trans[8][247]	= settr(16231,0,68,1,0,"goto accept_S110", 0, 2, 0);
	trans[8][248]	= settr(16232,0,258,480,0,"(!((states[2]==STOPPED)))", 1, 2, 0);
	trans[8][249]	= settr(16233,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[8][252]	= settr(16236,0,258,1,0,"break", 0, 2, 0);
	trans[8][259]	= settr(16243,0,258,1,0,".(goto)", 0, 2, 0);
	T = trans[8][258] = settr(16242,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16242,0,255,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16242,0,256,0,0,"DO", 0, 2, 0);
	T = trans[ 8][255] = settr(16239,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16239,2,253,0,0,"ATOMIC", 1, 2, 0);
	trans[8][253]	= settr(16237,0,258,481,481,"(!((states[2]==0)))", 1, 2, 0); /* m: 254 -> 258,0 */
	reached8[254] = 1;
	trans[8][254]	= settr(0,0,0,0,0,"assert(!(!((states[2]==0))))",0,0,0);
	trans[8][256]	= settr(16240,0,258,1,0,"(1)", 0, 2, 0);
	trans[8][257]	= settr(16241,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[8][260]	= settr(16244,0,282,1,0,"break", 0, 2, 0);
	trans[8][283]	= settr(16267,0,282,1,0,".(goto)", 0, 2, 0);
	T = trans[8][282] = settr(16266,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16266,0,261,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16266,0,263,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16266,0,267,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16266,0,268,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16266,0,270,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16266,0,272,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16266,0,274,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16266,0,276,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16266,0,278,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16266,0,280,0,0,"DO", 0, 2, 0);
	trans[8][261]	= settr(16245,0,60,482,0,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0);
	trans[8][262]	= settr(16246,0,60,1,0,"goto accept_S82", 0, 2, 0);
	trans[8][263]	= settr(16247,0,250,483,0,"(!((states[2]==STOPPED)))", 1, 2, 0);
	trans[8][264]	= settr(16248,0,250,1,0,"goto T0_S82", 0, 2, 0);
	T = trans[ 8][267] = settr(16251,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16251,2,265,0,0,"ATOMIC", 1, 2, 0);
	trans[8][265]	= settr(16249,0,282,484,484,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0); /* m: 266 -> 282,0 */
	reached8[266] = 1;
	trans[8][266]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))",0,0,0);
	trans[8][268]	= settr(16252,0,258,485,0,"(!((states[2]==STOPPED)))", 1, 2, 0);
	trans[8][269]	= settr(16253,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[8][270]	= settr(16254,0,236,486,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[8][271]	= settr(16255,0,236,1,0,"goto T0_S69", 0, 2, 0);
	trans[8][272]	= settr(16256,0,282,1,0,"(1)", 0, 2, 0);
	trans[8][273]	= settr(16257,0,282,1,0,"goto T0_S49", 0, 2, 0);
	trans[8][274]	= settr(16258,0,68,487,0,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0);
	trans[8][275]	= settr(16259,0,68,1,0,"goto accept_S110", 0, 2, 0);
	trans[8][276]	= settr(16260,0,76,488,0,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0);
	trans[8][277]	= settr(16261,0,76,1,0,"goto accept_S4", 0, 2, 0);
	trans[8][278]	= settr(16262,0,88,489,0,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0);
	trans[8][279]	= settr(16263,0,88,1,0,"goto accept_S158", 0, 2, 0);
	trans[8][280]	= settr(16264,0,180,490,0,"(!((states[2]==STOPPED)))", 1, 2, 0);
	trans[8][281]	= settr(16265,0,180,1,0,"goto T6_S158", 0, 2, 0);
	trans[8][284]	= settr(16268,0,290,1,0,"break", 0, 2, 0);
	trans[8][291]	= settr(16275,0,290,1,0,".(goto)", 0, 2, 0);
	T = trans[8][290] = settr(16274,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16274,0,287,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16274,0,288,0,0,"DO", 0, 2, 0);
	T = trans[ 8][287] = settr(16271,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16271,2,285,0,0,"ATOMIC", 1, 2, 0);
	trans[8][285]	= settr(16269,0,290,491,491,"(!((states[2]==STOPPED)))", 1, 2, 0); /* m: 286 -> 290,0 */
	reached8[286] = 1;
	trans[8][286]	= settr(0,0,0,0,0,"assert(!(!((states[2]==STOPPED))))",0,0,0);
	trans[8][288]	= settr(16272,0,290,1,0,"(1)", 0, 2, 0);
	trans[8][289]	= settr(16273,0,290,1,0,"goto T0_S4", 0, 2, 0);
	trans[8][292]	= settr(16276,0,302,1,0,"break", 0, 2, 0);
	trans[8][303]	= settr(16287,0,302,1,0,".(goto)", 0, 2, 0);
	T = trans[8][302] = settr(16286,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16286,0,295,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16286,0,296,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16286,0,298,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16286,0,300,0,0,"DO", 0, 2, 0);
	T = trans[ 8][295] = settr(16279,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16279,2,293,0,0,"ATOMIC", 1, 2, 0);
	trans[8][293]	= settr(16277,0,302,492,492,"((!((states[2]==0))&&!((states[2]==STOPPED))))", 1, 2, 0); /* m: 294 -> 302,0 */
	reached8[294] = 1;
	trans[8][294]	= settr(0,0,0,0,0,"assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))",0,0,0);
	trans[8][296]	= settr(16280,0,290,493,0,"(!((states[2]==0)))", 1, 2, 0);
	trans[8][297]	= settr(16281,0,290,1,0,"goto T0_S4", 0, 2, 0);
	trans[8][298]	= settr(16282,0,258,494,0,"(!((states[2]==STOPPED)))", 1, 2, 0);
	trans[8][299]	= settr(16283,0,258,1,0,"goto T0_S110", 0, 2, 0);
	trans[8][300]	= settr(16284,0,302,1,0,"(1)", 0, 2, 0);
	trans[8][301]	= settr(16285,0,302,1,0,"goto T0_S158", 0, 2, 0);
	trans[8][304]	= settr(16288,0,314,1,0,"break", 0, 2, 0);
	trans[8][315]	= settr(16299,0,314,1,0,".(goto)", 0, 2, 0);
	T = trans[8][314] = settr(16298,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16298,0,305,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16298,0,307,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16298,0,311,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16298,0,312,0,0,"DO", 0, 2, 0);
	trans[8][305]	= settr(16289,0,100,495,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[8][306]	= settr(16290,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[8][307]	= settr(16291,0,348,1,0,"(1)", 0, 2, 0);
	trans[8][308]	= settr(16292,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 8][311] = settr(16295,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16295,2,309,0,0,"ATOMIC", 1, 2, 0);
	trans[8][309]	= settr(16293,0,314,496,496,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0); /* m: 310 -> 314,0 */
	reached8[310] = 1;
	trans[8][310]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))",0,0,0);
	trans[8][312]	= settr(16296,0,356,497,0,"(!((states[1]==STOPPED)))", 1, 2, 0);
	trans[8][313]	= settr(16297,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[8][316]	= settr(16300,0,334,1,0,"break", 0, 2, 0);
	trans[8][335]	= settr(16319,0,334,1,0,".(goto)", 0, 2, 0);
	T = trans[8][334] = settr(16318,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16318,0,317,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16318,0,319,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16318,0,323,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16318,0,324,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16318,0,326,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16318,0,328,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16318,0,330,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16318,0,332,0,0,"DO", 0, 2, 0);
	trans[8][317]	= settr(16301,0,100,498,0,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0);
	trans[8][318]	= settr(16302,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[8][319]	= settr(16303,0,348,499,0,"(!((states[1]==STOPPED)))", 1, 2, 0);
	trans[8][320]	= settr(16304,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 8][323] = settr(16307,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16307,2,321,0,0,"ATOMIC", 1, 2, 0);
	trans[8][321]	= settr(16305,0,334,500,500,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0); /* m: 322 -> 334,0 */
	reached8[322] = 1;
	trans[8][322]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))",0,0,0);
	trans[8][324]	= settr(16308,0,356,501,0,"(!((states[1]==STOPPED)))", 1, 2, 0);
	trans[8][325]	= settr(16309,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[8][326]	= settr(16310,0,334,502,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[8][327]	= settr(16311,0,334,1,0,"goto T0_S230", 0, 2, 0);
	trans[8][328]	= settr(16312,0,380,1,0,"(1)", 0, 2, 0);
	trans[8][329]	= settr(16313,0,380,1,0,"goto T0_S210", 0, 2, 0);
	trans[8][330]	= settr(16314,0,116,503,0,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0);
	trans[8][331]	= settr(16315,0,116,1,0,"goto accept_S165", 0, 2, 0);
	trans[8][332]	= settr(16316,0,192,504,0,"(!((states[1]==STOPPED)))", 1, 2, 0);
	trans[8][333]	= settr(16317,0,192,1,0,"goto T4_S319", 0, 2, 0);
	trans[8][336]	= settr(16320,0,348,1,0,"break", 0, 2, 0);
	trans[8][349]	= settr(16333,0,348,1,0,".(goto)", 0, 2, 0);
	T = trans[8][348] = settr(16332,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16332,0,337,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16332,0,339,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16332,0,343,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16332,0,344,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16332,0,346,0,0,"DO", 0, 2, 0);
	trans[8][337]	= settr(16321,0,100,505,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[8][338]	= settr(16322,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[8][339]	= settr(16323,0,348,1,0,"(1)", 0, 2, 0);
	trans[8][340]	= settr(16324,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 8][343] = settr(16327,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16327,2,341,0,0,"ATOMIC", 1, 2, 0);
	trans[8][341]	= settr(16325,0,348,506,506,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0); /* m: 342 -> 348,0 */
	reached8[342] = 1;
	trans[8][342]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))",0,0,0);
	trans[8][344]	= settr(16328,0,108,507,0,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0);
	trans[8][345]	= settr(16329,0,108,1,0,"goto accept_S271", 0, 2, 0);
	trans[8][346]	= settr(16330,0,356,508,0,"(!((states[1]==STOPPED)))", 1, 2, 0);
	trans[8][347]	= settr(16331,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[8][350]	= settr(16334,0,356,1,0,"break", 0, 2, 0);
	trans[8][357]	= settr(16341,0,356,1,0,".(goto)", 0, 2, 0);
	T = trans[8][356] = settr(16340,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16340,0,353,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16340,0,354,0,0,"DO", 0, 2, 0);
	T = trans[ 8][353] = settr(16337,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16337,2,351,0,0,"ATOMIC", 1, 2, 0);
	trans[8][351]	= settr(16335,0,356,509,509,"(!((states[1]==0)))", 1, 2, 0); /* m: 352 -> 356,0 */
	reached8[352] = 1;
	trans[8][352]	= settr(0,0,0,0,0,"assert(!(!((states[1]==0))))",0,0,0);
	trans[8][354]	= settr(16338,0,356,1,0,"(1)", 0, 2, 0);
	trans[8][355]	= settr(16339,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[8][358]	= settr(16342,0,380,1,0,"break", 0, 2, 0);
	trans[8][381]	= settr(16365,0,380,1,0,".(goto)", 0, 2, 0);
	T = trans[8][380] = settr(16364,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16364,0,359,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16364,0,361,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16364,0,365,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16364,0,366,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16364,0,368,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16364,0,370,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16364,0,372,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16364,0,374,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16364,0,376,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16364,0,378,0,0,"DO", 0, 2, 0);
	trans[8][359]	= settr(16343,0,100,510,0,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0);
	trans[8][360]	= settr(16344,0,100,1,0,"goto accept_S243", 0, 2, 0);
	trans[8][361]	= settr(16345,0,348,511,0,"(!((states[1]==STOPPED)))", 1, 2, 0);
	trans[8][362]	= settr(16346,0,348,1,0,"goto T0_S243", 0, 2, 0);
	T = trans[ 8][365] = settr(16349,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16349,2,363,0,0,"ATOMIC", 1, 2, 0);
	trans[8][363]	= settr(16347,0,380,512,512,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0); /* m: 364 -> 380,0 */
	reached8[364] = 1;
	trans[8][364]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))",0,0,0);
	trans[8][366]	= settr(16350,0,356,513,0,"(!((states[1]==STOPPED)))", 1, 2, 0);
	trans[8][367]	= settr(16351,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[8][368]	= settr(16352,0,334,514,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[8][369]	= settr(16353,0,334,1,0,"goto T0_S230", 0, 2, 0);
	trans[8][370]	= settr(16354,0,380,1,0,"(1)", 0, 2, 0);
	trans[8][371]	= settr(16355,0,380,1,0,"goto T0_S210", 0, 2, 0);
	trans[8][372]	= settr(16356,0,108,515,0,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0);
	trans[8][373]	= settr(16357,0,108,1,0,"goto accept_S271", 0, 2, 0);
	trans[8][374]	= settr(16358,0,116,516,0,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0);
	trans[8][375]	= settr(16359,0,116,1,0,"goto accept_S165", 0, 2, 0);
	trans[8][376]	= settr(16360,0,128,517,0,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0);
	trans[8][377]	= settr(16361,0,128,1,0,"goto accept_S319", 0, 2, 0);
	trans[8][378]	= settr(16362,0,192,518,0,"(!((states[1]==STOPPED)))", 1, 2, 0);
	trans[8][379]	= settr(16363,0,192,1,0,"goto T4_S319", 0, 2, 0);
	trans[8][382]	= settr(16366,0,388,1,0,"break", 0, 2, 0);
	trans[8][389]	= settr(16373,0,388,1,0,".(goto)", 0, 2, 0);
	T = trans[8][388] = settr(16372,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16372,0,385,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16372,0,386,0,0,"DO", 0, 2, 0);
	T = trans[ 8][385] = settr(16369,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16369,2,383,0,0,"ATOMIC", 1, 2, 0);
	trans[8][383]	= settr(16367,0,388,519,519,"(!((states[1]==STOPPED)))", 1, 2, 0); /* m: 384 -> 388,0 */
	reached8[384] = 1;
	trans[8][384]	= settr(0,0,0,0,0,"assert(!(!((states[1]==STOPPED))))",0,0,0);
	trans[8][386]	= settr(16370,0,388,1,0,"(1)", 0, 2, 0);
	trans[8][387]	= settr(16371,0,388,1,0,"goto T0_S165", 0, 2, 0);
	trans[8][390]	= settr(16374,0,400,1,0,"break", 0, 2, 0);
	trans[8][401]	= settr(16385,0,400,1,0,".(goto)", 0, 2, 0);
	T = trans[8][400] = settr(16384,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16384,0,393,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16384,0,394,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16384,0,396,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16384,0,398,0,0,"DO", 0, 2, 0);
	T = trans[ 8][393] = settr(16377,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16377,2,391,0,0,"ATOMIC", 1, 2, 0);
	trans[8][391]	= settr(16375,0,400,520,520,"((!((states[1]==0))&&!((states[1]==STOPPED))))", 1, 2, 0); /* m: 392 -> 400,0 */
	reached8[392] = 1;
	trans[8][392]	= settr(0,0,0,0,0,"assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))",0,0,0);
	trans[8][394]	= settr(16378,0,388,521,0,"(!((states[1]==0)))", 1, 2, 0);
	trans[8][395]	= settr(16379,0,388,1,0,"goto T0_S165", 0, 2, 0);
	trans[8][396]	= settr(16380,0,356,522,0,"(!((states[1]==STOPPED)))", 1, 2, 0);
	trans[8][397]	= settr(16381,0,356,1,0,"goto T0_S271", 0, 2, 0);
	trans[8][398]	= settr(16382,0,400,1,0,"(1)", 0, 2, 0);
	trans[8][399]	= settr(16383,0,400,1,0,"goto T0_S319", 0, 2, 0);
	trans[8][402]	= settr(16386,0,412,1,0,"break", 0, 2, 0);
	trans[8][413]	= settr(16397,0,412,1,0,".(goto)", 0, 2, 0);
	T = trans[8][412] = settr(16396,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16396,0,403,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16396,0,405,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16396,0,409,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16396,0,410,0,0,"DO", 0, 2, 0);
	trans[8][403]	= settr(16387,0,140,523,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[8][404]	= settr(16388,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[8][405]	= settr(16389,0,446,1,0,"(1)", 0, 2, 0);
	trans[8][406]	= settr(16390,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 8][409] = settr(16393,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16393,2,407,0,0,"ATOMIC", 1, 2, 0);
	trans[8][407]	= settr(16391,0,412,524,524,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0); /* m: 408 -> 412,0 */
	reached8[408] = 1;
	trans[8][408]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))",0,0,0);
	trans[8][410]	= settr(16394,0,454,525,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[8][411]	= settr(16395,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[8][414]	= settr(16398,0,432,1,0,"break", 0, 2, 0);
	trans[8][433]	= settr(16417,0,432,1,0,".(goto)", 0, 2, 0);
	T = trans[8][432] = settr(16416,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16416,0,415,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16416,0,417,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16416,0,421,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16416,0,422,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16416,0,424,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16416,0,426,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16416,0,428,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16416,0,430,0,0,"DO", 0, 2, 0);
	trans[8][415]	= settr(16399,0,140,526,0,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[8][416]	= settr(16400,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[8][417]	= settr(16401,0,446,527,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[8][418]	= settr(16402,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 8][421] = settr(16405,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16405,2,419,0,0,"ATOMIC", 1, 2, 0);
	trans[8][419]	= settr(16403,0,432,528,528,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0); /* m: 420 -> 432,0 */
	reached8[420] = 1;
	trans[8][420]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))",0,0,0);
	trans[8][422]	= settr(16406,0,454,529,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[8][423]	= settr(16407,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[8][424]	= settr(16408,0,432,530,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[8][425]	= settr(16409,0,432,1,0,"goto T0_S391", 0, 2, 0);
	trans[8][426]	= settr(16410,0,478,1,0,"(1)", 0, 2, 0);
	trans[8][427]	= settr(16411,0,478,1,0,"goto T0_S371", 0, 2, 0);
	trans[8][428]	= settr(16412,0,156,531,0,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[8][429]	= settr(16413,0,156,1,0,"goto accept_S326", 0, 2, 0);
	trans[8][430]	= settr(16414,0,204,532,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[8][431]	= settr(16415,0,204,1,0,"goto T2_S480", 0, 2, 0);
	trans[8][434]	= settr(16418,0,446,1,0,"break", 0, 2, 0);
	trans[8][447]	= settr(16431,0,446,1,0,".(goto)", 0, 2, 0);
	T = trans[8][446] = settr(16430,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16430,0,435,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16430,0,437,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16430,0,441,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16430,0,442,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16430,0,444,0,0,"DO", 0, 2, 0);
	trans[8][435]	= settr(16419,0,140,533,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[8][436]	= settr(16420,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[8][437]	= settr(16421,0,446,1,0,"(1)", 0, 2, 0);
	trans[8][438]	= settr(16422,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 8][441] = settr(16425,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16425,2,439,0,0,"ATOMIC", 1, 2, 0);
	trans[8][439]	= settr(16423,0,446,534,534,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0); /* m: 440 -> 446,0 */
	reached8[440] = 1;
	trans[8][440]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))",0,0,0);
	trans[8][442]	= settr(16426,0,148,535,0,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[8][443]	= settr(16427,0,148,1,0,"goto accept_S432", 0, 2, 0);
	trans[8][444]	= settr(16428,0,454,536,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[8][445]	= settr(16429,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[8][448]	= settr(16432,0,454,1,0,"break", 0, 2, 0);
	trans[8][455]	= settr(16439,0,454,1,0,".(goto)", 0, 2, 0);
	T = trans[8][454] = settr(16438,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16438,0,451,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16438,0,452,0,0,"DO", 0, 2, 0);
	T = trans[ 8][451] = settr(16435,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16435,2,449,0,0,"ATOMIC", 1, 2, 0);
	trans[8][449]	= settr(16433,0,454,537,537,"(!((states[0]==0)))", 1, 2, 0); /* m: 450 -> 454,0 */
	reached8[450] = 1;
	trans[8][450]	= settr(0,0,0,0,0,"assert(!(!((states[0]==0))))",0,0,0);
	trans[8][452]	= settr(16436,0,454,1,0,"(1)", 0, 2, 0);
	trans[8][453]	= settr(16437,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[8][456]	= settr(16440,0,478,1,0,"break", 0, 2, 0);
	trans[8][479]	= settr(16463,0,478,1,0,".(goto)", 0, 2, 0);
	T = trans[8][478] = settr(16462,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16462,0,457,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16462,0,459,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16462,0,463,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16462,0,464,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16462,0,466,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16462,0,468,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16462,0,470,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16462,0,472,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16462,0,474,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16462,0,476,0,0,"DO", 0, 2, 0);
	trans[8][457]	= settr(16441,0,140,538,0,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[8][458]	= settr(16442,0,140,1,0,"goto accept_S404", 0, 2, 0);
	trans[8][459]	= settr(16443,0,446,539,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[8][460]	= settr(16444,0,446,1,0,"goto T0_S404", 0, 2, 0);
	T = trans[ 8][463] = settr(16447,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16447,2,461,0,0,"ATOMIC", 1, 2, 0);
	trans[8][461]	= settr(16445,0,478,540,540,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0); /* m: 462 -> 478,0 */
	reached8[462] = 1;
	trans[8][462]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))",0,0,0);
	trans[8][464]	= settr(16448,0,454,541,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[8][465]	= settr(16449,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[8][466]	= settr(16450,0,432,542,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[8][467]	= settr(16451,0,432,1,0,"goto T0_S391", 0, 2, 0);
	trans[8][468]	= settr(16452,0,478,1,0,"(1)", 0, 2, 0);
	trans[8][469]	= settr(16453,0,478,1,0,"goto T0_S371", 0, 2, 0);
	trans[8][470]	= settr(16454,0,148,543,0,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[8][471]	= settr(16455,0,148,1,0,"goto accept_S432", 0, 2, 0);
	trans[8][472]	= settr(16456,0,156,544,0,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[8][473]	= settr(16457,0,156,1,0,"goto accept_S326", 0, 2, 0);
	trans[8][474]	= settr(16458,0,168,545,0,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0);
	trans[8][475]	= settr(16459,0,168,1,0,"goto accept_S480", 0, 2, 0);
	trans[8][476]	= settr(16460,0,204,546,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[8][477]	= settr(16461,0,204,1,0,"goto T2_S480", 0, 2, 0);
	trans[8][480]	= settr(16464,0,486,1,0,"break", 0, 2, 0);
	trans[8][487]	= settr(16471,0,486,1,0,".(goto)", 0, 2, 0);
	T = trans[8][486] = settr(16470,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16470,0,483,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16470,0,484,0,0,"DO", 0, 2, 0);
	T = trans[ 8][483] = settr(16467,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16467,2,481,0,0,"ATOMIC", 1, 2, 0);
	trans[8][481]	= settr(16465,0,486,547,547,"(!((states[0]==STOPPED)))", 1, 2, 0); /* m: 482 -> 486,0 */
	reached8[482] = 1;
	trans[8][482]	= settr(0,0,0,0,0,"assert(!(!((states[0]==STOPPED))))",0,0,0);
	trans[8][484]	= settr(16468,0,486,1,0,"(1)", 0, 2, 0);
	trans[8][485]	= settr(16469,0,486,1,0,"goto T0_S326", 0, 2, 0);
	trans[8][488]	= settr(16472,0,498,1,0,"break", 0, 2, 0);
	trans[8][499]	= settr(16483,0,498,1,0,".(goto)", 0, 2, 0);
	T = trans[8][498] = settr(16482,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16482,0,491,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16482,0,492,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(16482,0,494,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(16482,0,496,0,0,"DO", 0, 2, 0);
	T = trans[ 8][491] = settr(16475,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(16475,2,489,0,0,"ATOMIC", 1, 2, 0);
	trans[8][489]	= settr(16473,0,498,548,548,"((!((states[0]==0))&&!((states[0]==STOPPED))))", 1, 2, 0); /* m: 490 -> 498,0 */
	reached8[490] = 1;
	trans[8][490]	= settr(0,0,0,0,0,"assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))",0,0,0);
	trans[8][492]	= settr(16476,0,486,549,0,"(!((states[0]==0)))", 1, 2, 0);
	trans[8][493]	= settr(16477,0,486,1,0,"goto T0_S326", 0, 2, 0);
	trans[8][494]	= settr(16478,0,454,550,0,"(!((states[0]==STOPPED)))", 1, 2, 0);
	trans[8][495]	= settr(16479,0,454,1,0,"goto T0_S432", 0, 2, 0);
	trans[8][496]	= settr(16480,0,498,1,0,"(1)", 0, 2, 0);
	trans[8][497]	= settr(16481,0,498,1,0,"goto T0_S480", 0, 2, 0);
	trans[8][500]	= settr(16484,0,501,1,0,"break", 0, 2, 0);
	trans[8][501]	= settr(16485,0,502,1,0,"(1)", 0, 2, 0);
	trans[8][502]	= settr(16486,0,0,551,551,"-end-", 0, 3500, 0);

	/* proctype 7: fsm_stopping */

	trans[7] = (Trans **) emalloc(41*sizeof(Trans *));

	trans[7][13]	= settr(15957,0,12,1,0,".(goto)", 0, 2, 0);
	T = trans[7][12] = settr(15956,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15956,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15956,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15956,0,6,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15956,0,8,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15956,0,10,0,0,"DO", 0, 2, 0);
	trans[7][1]	= settr(15945,0,20,552,0,"((!(!((states[2]==STOPPING)))&&!(((states[2]==STOPPED)||(states[2]==ABORTING)))))", 1, 2, 0);
	trans[7][2]	= settr(15946,0,20,1,0,"goto accept_S6", 0, 2, 0);
	T = trans[ 7][5] = settr(15949,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15949,2,3,0,0,"ATOMIC", 1, 2, 0);
	trans[7][3]	= settr(15947,0,12,553,553,"(((!(!((states[0]==STOPPING)))&&(!(((states[0]==STOPPED)||(states[0]==ABORTING)))&&!((states[0]==STOPPING))))||((!(!((states[1]==STOPPING)))&&(!(((states[1]==STOPPED)||(states[1]==ABORTING)))&&!((states[1]==STOPPING))))||(!(!((states[2]==STOPPING)))&&(!(((states[2]==STOPPED)||(states[2]==ABORTING)))&&!((states[2]==STOPPING)))))))", 1, 2, 0); /* m: 4 -> 12,0 */
	reached7[4] = 1;
	trans[7][4]	= settr(0,0,0,0,0,"assert(!(((!(!((states[0]==STOPPING)))&&(!(((states[0]==STOPPED)||(states[0]==ABORTING)))&&!((states[0]==STOPPING))))||((!(!((states[1]==STOPPING)))&&(!(((states[1]==STOPPED)||(states[1]==ABORTING)))&&!((states[1]==STOPPING))))||(!(!((states[2]==STOPPING)))&&(!(((states[2]==STOPPED)||(states[2]==ABORTING)))&&!((states[2]==STOPPING))))))))",0,0,0);
	trans[7][6]	= settr(15950,0,28,554,0,"((!(!((states[1]==STOPPING)))&&!(((states[1]==STOPPED)||(states[1]==ABORTING)))))", 1, 2, 0);
	trans[7][7]	= settr(15951,0,28,1,0,"goto accept_S11", 0, 2, 0);
	trans[7][8]	= settr(15952,0,36,555,0,"((!(!((states[0]==STOPPING)))&&!(((states[0]==STOPPED)||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[7][9]	= settr(15953,0,36,1,0,"goto accept_S16", 0, 2, 0);
	trans[7][10]	= settr(15954,0,12,1,0,"(1)", 0, 2, 0);
	trans[7][11]	= settr(15955,0,12,1,0,"goto T0_init", 0, 2, 0);
	trans[7][14]	= settr(15958,0,20,1,0,"break", 0, 2, 0);
	trans[7][21]	= settr(15965,0,20,1,0,".(goto)", 0, 2, 0);
	T = trans[7][20] = settr(15964,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15964,0,15,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15964,0,19,0,0,"DO", 0, 2, 0);
	trans[7][15]	= settr(15959,0,20,556,0,"(!(((states[2]==STOPPED)||(states[2]==ABORTING))))", 1, 2, 0);
	trans[7][16]	= settr(15960,0,20,1,0,"goto accept_S6", 0, 2, 0);
	T = trans[ 7][19] = settr(15963,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15963,2,17,0,0,"ATOMIC", 1, 2, 0);
	trans[7][17]	= settr(15961,0,20,557,557,"((!(((states[2]==STOPPED)||(states[2]==ABORTING)))&&!((states[2]==STOPPING))))", 1, 2, 0); /* m: 18 -> 20,0 */
	reached7[18] = 1;
	trans[7][18]	= settr(0,0,0,0,0,"assert(!((!(((states[2]==STOPPED)||(states[2]==ABORTING)))&&!((states[2]==STOPPING)))))",0,0,0);
	trans[7][22]	= settr(15966,0,28,1,0,"break", 0, 2, 0);
	trans[7][29]	= settr(15973,0,28,1,0,".(goto)", 0, 2, 0);
	T = trans[7][28] = settr(15972,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15972,0,23,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15972,0,27,0,0,"DO", 0, 2, 0);
	trans[7][23]	= settr(15967,0,28,558,0,"(!(((states[1]==STOPPED)||(states[1]==ABORTING))))", 1, 2, 0);
	trans[7][24]	= settr(15968,0,28,1,0,"goto accept_S11", 0, 2, 0);
	T = trans[ 7][27] = settr(15971,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15971,2,25,0,0,"ATOMIC", 1, 2, 0);
	trans[7][25]	= settr(15969,0,28,559,559,"((!(((states[1]==STOPPED)||(states[1]==ABORTING)))&&!((states[1]==STOPPING))))", 1, 2, 0); /* m: 26 -> 28,0 */
	reached7[26] = 1;
	trans[7][26]	= settr(0,0,0,0,0,"assert(!((!(((states[1]==STOPPED)||(states[1]==ABORTING)))&&!((states[1]==STOPPING)))))",0,0,0);
	trans[7][30]	= settr(15974,0,36,1,0,"break", 0, 2, 0);
	trans[7][37]	= settr(15981,0,36,1,0,".(goto)", 0, 2, 0);
	T = trans[7][36] = settr(15980,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15980,0,31,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15980,0,35,0,0,"DO", 0, 2, 0);
	trans[7][31]	= settr(15975,0,36,560,0,"(!(((states[0]==STOPPED)||(states[0]==ABORTING))))", 1, 2, 0);
	trans[7][32]	= settr(15976,0,36,1,0,"goto accept_S16", 0, 2, 0);
	T = trans[ 7][35] = settr(15979,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15979,2,33,0,0,"ATOMIC", 1, 2, 0);
	trans[7][33]	= settr(15977,0,36,561,561,"((!(((states[0]==STOPPED)||(states[0]==ABORTING)))&&!((states[0]==STOPPING))))", 1, 2, 0); /* m: 34 -> 36,0 */
	reached7[34] = 1;
	trans[7][34]	= settr(0,0,0,0,0,"assert(!((!(((states[0]==STOPPED)||(states[0]==ABORTING)))&&!((states[0]==STOPPING)))))",0,0,0);
	trans[7][38]	= settr(15982,0,39,1,0,"break", 0, 2, 0);
	trans[7][39]	= settr(15983,0,40,1,0,"(1)", 0, 2, 0);
	trans[7][40]	= settr(15984,0,0,562,562,"-end-", 0, 3500, 0);

	/* proctype 6: fsm_paused */

	trans[6] = (Trans **) emalloc(137*sizeof(Trans *));

	trans[6][25]	= settr(15833,0,24,1,0,".(goto)", 0, 2, 0);
	T = trans[6][24] = settr(15832,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15832,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15832,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15832,0,6,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15832,0,8,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15832,0,10,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15832,0,12,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15832,0,14,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15832,0,16,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15832,0,18,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15832,0,20,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15832,0,22,0,0,"DO", 0, 2, 0);
	trans[6][1]	= settr(15809,0,32,563,0,"(((!(!((states[2]==PAUSED)))&&!(((states[2]==RUNNING)||(states[2]==STOPPING))))&&!((states[2]==PAUSED))))", 1, 2, 0);
	trans[6][2]	= settr(15810,0,32,1,0,"goto accept_S13", 0, 2, 0);
	T = trans[ 6][5] = settr(15813,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15813,2,3,0,0,"ATOMIC", 1, 2, 0);
	trans[6][3]	= settr(15811,0,24,564,564,"(((!(!((states[0]==PAUSED)))&&(!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))||((!(!((states[1]==PAUSED)))&&(!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))||(!(!((states[2]==PAUSED)))&&(!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED)))))))", 1, 2, 0); /* m: 4 -> 24,0 */
	reached6[4] = 1;
	trans[6][4]	= settr(0,0,0,0,0,"assert(!(((!(!((states[0]==PAUSED)))&&(!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))||((!(!((states[1]==PAUSED)))&&(!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))||(!(!((states[2]==PAUSED)))&&(!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))))))",0,0,0);
	trans[6][6]	= settr(15814,0,84,565,0,"((!(!((states[2]==PAUSED)))&&!(((states[2]==RUNNING)||(states[2]==STOPPING)))))", 1, 2, 0);
	trans[6][7]	= settr(15815,0,84,1,0,"goto T0_S16", 0, 2, 0);
	trans[6][8]	= settr(15816,0,40,566,0,"(((!(!((states[2]==PAUSED)))&&!(((states[2]==RUNNING)||(states[2]==STOPPING))))&&!((states[2]==PAUSED))))", 1, 2, 0);
	trans[6][9]	= settr(15817,0,40,1,0,"goto accept_S4", 0, 2, 0);
	trans[6][10]	= settr(15818,0,48,567,0,"(((!(!((states[1]==PAUSED)))&&!(((states[1]==RUNNING)||(states[1]==STOPPING))))&&!((states[1]==PAUSED))))", 1, 2, 0);
	trans[6][11]	= settr(15819,0,48,1,0,"goto accept_S36", 0, 2, 0);
	trans[6][12]	= settr(15820,0,104,568,0,"((!(!((states[1]==PAUSED)))&&!(((states[1]==RUNNING)||(states[1]==STOPPING)))))", 1, 2, 0);
	trans[6][13]	= settr(15821,0,104,1,0,"goto T0_S39", 0, 2, 0);
	trans[6][14]	= settr(15822,0,56,569,0,"(((!(!((states[1]==PAUSED)))&&!(((states[1]==RUNNING)||(states[1]==STOPPING))))&&!((states[1]==PAUSED))))", 1, 2, 0);
	trans[6][15]	= settr(15823,0,56,1,0,"goto accept_S27", 0, 2, 0);
	trans[6][16]	= settr(15824,0,64,570,0,"(((!(!((states[0]==PAUSED)))&&!(((states[0]==RUNNING)||(states[0]==STOPPING))))&&!((states[0]==PAUSED))))", 1, 2, 0);
	trans[6][17]	= settr(15825,0,64,1,0,"goto accept_S59", 0, 2, 0);
	trans[6][18]	= settr(15826,0,124,571,0,"((!(!((states[0]==PAUSED)))&&!(((states[0]==RUNNING)||(states[0]==STOPPING)))))", 1, 2, 0);
	trans[6][19]	= settr(15827,0,124,1,0,"goto T0_S62", 0, 2, 0);
	trans[6][20]	= settr(15828,0,72,572,0,"(((!(!((states[0]==PAUSED)))&&!(((states[0]==RUNNING)||(states[0]==STOPPING))))&&!((states[0]==PAUSED))))", 1, 2, 0);
	trans[6][21]	= settr(15829,0,72,1,0,"goto accept_S50", 0, 2, 0);
	trans[6][22]	= settr(15830,0,24,1,0,"(1)", 0, 2, 0);
	trans[6][23]	= settr(15831,0,24,1,0,"goto T0_init", 0, 2, 0);
	trans[6][26]	= settr(15834,0,32,1,0,"break", 0, 2, 0);
	trans[6][33]	= settr(15841,0,32,1,0,".(goto)", 0, 2, 0);
	T = trans[6][32] = settr(15840,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15840,0,27,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15840,0,31,0,0,"DO", 0, 2, 0);
	trans[6][27]	= settr(15835,0,32,573,0,"(!(((states[2]==RUNNING)||(states[2]==STOPPING))))", 1, 2, 0);
	trans[6][28]	= settr(15836,0,32,1,0,"goto accept_S13", 0, 2, 0);
	T = trans[ 6][31] = settr(15839,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15839,2,29,0,0,"ATOMIC", 1, 2, 0);
	trans[6][29]	= settr(15837,0,32,574,574,"((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))", 1, 2, 0); /* m: 30 -> 32,0 */
	reached6[30] = 1;
	trans[6][30]	= settr(0,0,0,0,0,"assert(!((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED)))))",0,0,0);
	trans[6][34]	= settr(15842,0,40,1,0,"break", 0, 2, 0);
	trans[6][41]	= settr(15849,0,40,1,0,".(goto)", 0, 2, 0);
	T = trans[6][40] = settr(15848,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15848,0,37,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15848,0,38,0,0,"DO", 0, 2, 0);
	T = trans[ 6][37] = settr(15845,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15845,2,35,0,0,"ATOMIC", 1, 2, 0);
	trans[6][35]	= settr(15843,0,40,575,575,"(!((states[2]==PAUSED)))", 1, 2, 0); /* m: 36 -> 40,0 */
	reached6[36] = 1;
	trans[6][36]	= settr(0,0,0,0,0,"assert(!(!((states[2]==PAUSED))))",0,0,0);
	trans[6][38]	= settr(15846,0,92,1,0,"(1)", 0, 2, 0);
	trans[6][39]	= settr(15847,0,92,1,0,"goto T0_S4", 0, 2, 0);
	trans[6][42]	= settr(15850,0,48,1,0,"break", 0, 2, 0);
	trans[6][49]	= settr(15857,0,48,1,0,".(goto)", 0, 2, 0);
	T = trans[6][48] = settr(15856,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15856,0,43,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15856,0,47,0,0,"DO", 0, 2, 0);
	trans[6][43]	= settr(15851,0,48,576,0,"(!(((states[1]==RUNNING)||(states[1]==STOPPING))))", 1, 2, 0);
	trans[6][44]	= settr(15852,0,48,1,0,"goto accept_S36", 0, 2, 0);
	T = trans[ 6][47] = settr(15855,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15855,2,45,0,0,"ATOMIC", 1, 2, 0);
	trans[6][45]	= settr(15853,0,48,577,577,"((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))", 1, 2, 0); /* m: 46 -> 48,0 */
	reached6[46] = 1;
	trans[6][46]	= settr(0,0,0,0,0,"assert(!((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED)))))",0,0,0);
	trans[6][50]	= settr(15858,0,56,1,0,"break", 0, 2, 0);
	trans[6][57]	= settr(15865,0,56,1,0,".(goto)", 0, 2, 0);
	T = trans[6][56] = settr(15864,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15864,0,53,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15864,0,54,0,0,"DO", 0, 2, 0);
	T = trans[ 6][53] = settr(15861,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15861,2,51,0,0,"ATOMIC", 1, 2, 0);
	trans[6][51]	= settr(15859,0,56,578,578,"(!((states[1]==PAUSED)))", 1, 2, 0); /* m: 52 -> 56,0 */
	reached6[52] = 1;
	trans[6][52]	= settr(0,0,0,0,0,"assert(!(!((states[1]==PAUSED))))",0,0,0);
	trans[6][54]	= settr(15862,0,112,1,0,"(1)", 0, 2, 0);
	trans[6][55]	= settr(15863,0,112,1,0,"goto T0_S27", 0, 2, 0);
	trans[6][58]	= settr(15866,0,64,1,0,"break", 0, 2, 0);
	trans[6][65]	= settr(15873,0,64,1,0,".(goto)", 0, 2, 0);
	T = trans[6][64] = settr(15872,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15872,0,59,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15872,0,63,0,0,"DO", 0, 2, 0);
	trans[6][59]	= settr(15867,0,64,579,0,"(!(((states[0]==RUNNING)||(states[0]==STOPPING))))", 1, 2, 0);
	trans[6][60]	= settr(15868,0,64,1,0,"goto accept_S59", 0, 2, 0);
	T = trans[ 6][63] = settr(15871,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15871,2,61,0,0,"ATOMIC", 1, 2, 0);
	trans[6][61]	= settr(15869,0,64,580,580,"((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))", 1, 2, 0); /* m: 62 -> 64,0 */
	reached6[62] = 1;
	trans[6][62]	= settr(0,0,0,0,0,"assert(!((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED)))))",0,0,0);
	trans[6][66]	= settr(15874,0,72,1,0,"break", 0, 2, 0);
	trans[6][73]	= settr(15881,0,72,1,0,".(goto)", 0, 2, 0);
	T = trans[6][72] = settr(15880,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15880,0,69,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15880,0,70,0,0,"DO", 0, 2, 0);
	T = trans[ 6][69] = settr(15877,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15877,2,67,0,0,"ATOMIC", 1, 2, 0);
	trans[6][67]	= settr(15875,0,72,581,581,"(!((states[0]==PAUSED)))", 1, 2, 0); /* m: 68 -> 72,0 */
	reached6[68] = 1;
	trans[6][68]	= settr(0,0,0,0,0,"assert(!(!((states[0]==PAUSED))))",0,0,0);
	trans[6][70]	= settr(15878,0,132,1,0,"(1)", 0, 2, 0);
	trans[6][71]	= settr(15879,0,132,1,0,"goto T0_S50", 0, 2, 0);
	trans[6][74]	= settr(15882,0,84,1,0,"break", 0, 2, 0);
	trans[6][85]	= settr(15893,0,84,1,0,".(goto)", 0, 2, 0);
	T = trans[6][84] = settr(15892,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15892,0,75,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15892,0,79,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15892,0,80,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15892,0,82,0,0,"DO", 0, 2, 0);
	trans[6][75]	= settr(15883,0,32,582,0,"((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))", 1, 2, 0);
	trans[6][76]	= settr(15884,0,32,1,0,"goto accept_S13", 0, 2, 0);
	T = trans[ 6][79] = settr(15887,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15887,2,77,0,0,"ATOMIC", 1, 2, 0);
	trans[6][77]	= settr(15885,0,84,583,583,"((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))", 1, 2, 0); /* m: 78 -> 84,0 */
	reached6[78] = 1;
	trans[6][78]	= settr(0,0,0,0,0,"assert(!((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED)))))",0,0,0);
	trans[6][80]	= settr(15888,0,84,584,0,"(!(((states[2]==RUNNING)||(states[2]==STOPPING))))", 1, 2, 0);
	trans[6][81]	= settr(15889,0,84,1,0,"goto T0_S16", 0, 2, 0);
	trans[6][82]	= settr(15890,0,40,585,0,"((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))", 1, 2, 0);
	trans[6][83]	= settr(15891,0,40,1,0,"goto accept_S4", 0, 2, 0);
	trans[6][86]	= settr(15894,0,92,1,0,"break", 0, 2, 0);
	trans[6][93]	= settr(15901,0,92,1,0,".(goto)", 0, 2, 0);
	T = trans[6][92] = settr(15900,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15900,0,89,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15900,0,90,0,0,"DO", 0, 2, 0);
	T = trans[ 6][89] = settr(15897,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15897,2,87,0,0,"ATOMIC", 1, 2, 0);
	trans[6][87]	= settr(15895,0,92,586,586,"(!((states[2]==PAUSED)))", 1, 2, 0); /* m: 88 -> 92,0 */
	reached6[88] = 1;
	trans[6][88]	= settr(0,0,0,0,0,"assert(!(!((states[2]==PAUSED))))",0,0,0);
	trans[6][90]	= settr(15898,0,92,1,0,"(1)", 0, 2, 0);
	trans[6][91]	= settr(15899,0,92,1,0,"goto T0_S4", 0, 2, 0);
	trans[6][94]	= settr(15902,0,104,1,0,"break", 0, 2, 0);
	trans[6][105]	= settr(15913,0,104,1,0,".(goto)", 0, 2, 0);
	T = trans[6][104] = settr(15912,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15912,0,95,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15912,0,99,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15912,0,100,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15912,0,102,0,0,"DO", 0, 2, 0);
	trans[6][95]	= settr(15903,0,48,587,0,"((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))", 1, 2, 0);
	trans[6][96]	= settr(15904,0,48,1,0,"goto accept_S36", 0, 2, 0);
	T = trans[ 6][99] = settr(15907,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15907,2,97,0,0,"ATOMIC", 1, 2, 0);
	trans[6][97]	= settr(15905,0,104,588,588,"((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))", 1, 2, 0); /* m: 98 -> 104,0 */
	reached6[98] = 1;
	trans[6][98]	= settr(0,0,0,0,0,"assert(!((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED)))))",0,0,0);
	trans[6][100]	= settr(15908,0,104,589,0,"(!(((states[1]==RUNNING)||(states[1]==STOPPING))))", 1, 2, 0);
	trans[6][101]	= settr(15909,0,104,1,0,"goto T0_S39", 0, 2, 0);
	trans[6][102]	= settr(15910,0,56,590,0,"((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))", 1, 2, 0);
	trans[6][103]	= settr(15911,0,56,1,0,"goto accept_S27", 0, 2, 0);
	trans[6][106]	= settr(15914,0,112,1,0,"break", 0, 2, 0);
	trans[6][113]	= settr(15921,0,112,1,0,".(goto)", 0, 2, 0);
	T = trans[6][112] = settr(15920,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15920,0,109,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15920,0,110,0,0,"DO", 0, 2, 0);
	T = trans[ 6][109] = settr(15917,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15917,2,107,0,0,"ATOMIC", 1, 2, 0);
	trans[6][107]	= settr(15915,0,112,591,591,"(!((states[1]==PAUSED)))", 1, 2, 0); /* m: 108 -> 112,0 */
	reached6[108] = 1;
	trans[6][108]	= settr(0,0,0,0,0,"assert(!(!((states[1]==PAUSED))))",0,0,0);
	trans[6][110]	= settr(15918,0,112,1,0,"(1)", 0, 2, 0);
	trans[6][111]	= settr(15919,0,112,1,0,"goto T0_S27", 0, 2, 0);
	trans[6][114]	= settr(15922,0,124,1,0,"break", 0, 2, 0);
	trans[6][125]	= settr(15933,0,124,1,0,".(goto)", 0, 2, 0);
	T = trans[6][124] = settr(15932,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15932,0,115,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15932,0,119,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15932,0,120,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15932,0,122,0,0,"DO", 0, 2, 0);
	trans[6][115]	= settr(15923,0,64,592,0,"((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))", 1, 2, 0);
	trans[6][116]	= settr(15924,0,64,1,0,"goto accept_S59", 0, 2, 0);
	T = trans[ 6][119] = settr(15927,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15927,2,117,0,0,"ATOMIC", 1, 2, 0);
	trans[6][117]	= settr(15925,0,124,593,593,"((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))", 1, 2, 0); /* m: 118 -> 124,0 */
	reached6[118] = 1;
	trans[6][118]	= settr(0,0,0,0,0,"assert(!((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED)))))",0,0,0);
	trans[6][120]	= settr(15928,0,124,594,0,"(!(((states[0]==RUNNING)||(states[0]==STOPPING))))", 1, 2, 0);
	trans[6][121]	= settr(15929,0,124,1,0,"goto T0_S62", 0, 2, 0);
	trans[6][122]	= settr(15930,0,72,595,0,"((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))", 1, 2, 0);
	trans[6][123]	= settr(15931,0,72,1,0,"goto accept_S50", 0, 2, 0);
	trans[6][126]	= settr(15934,0,132,1,0,"break", 0, 2, 0);
	trans[6][133]	= settr(15941,0,132,1,0,".(goto)", 0, 2, 0);
	T = trans[6][132] = settr(15940,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15940,0,129,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15940,0,130,0,0,"DO", 0, 2, 0);
	T = trans[ 6][129] = settr(15937,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15937,2,127,0,0,"ATOMIC", 1, 2, 0);
	trans[6][127]	= settr(15935,0,132,596,596,"(!((states[0]==PAUSED)))", 1, 2, 0); /* m: 128 -> 132,0 */
	reached6[128] = 1;
	trans[6][128]	= settr(0,0,0,0,0,"assert(!(!((states[0]==PAUSED))))",0,0,0);
	trans[6][130]	= settr(15938,0,132,1,0,"(1)", 0, 2, 0);
	trans[6][131]	= settr(15939,0,132,1,0,"goto T0_S50", 0, 2, 0);
	trans[6][134]	= settr(15942,0,135,1,0,"break", 0, 2, 0);
	trans[6][135]	= settr(15943,0,136,1,0,"(1)", 0, 2, 0);
	trans[6][136]	= settr(15944,0,0,597,597,"-end-", 0, 3500, 0);

	/* proctype 5: fsm_running */

	trans[5] = (Trans **) emalloc(137*sizeof(Trans *));

	trans[5][25]	= settr(15697,0,24,1,0,".(goto)", 0, 2, 0);
	T = trans[5][24] = settr(15696,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15696,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15696,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15696,0,6,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15696,0,8,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15696,0,10,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15696,0,12,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15696,0,14,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15696,0,16,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15696,0,18,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15696,0,20,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15696,0,22,0,0,"DO", 0, 2, 0);
	trans[5][1]	= settr(15673,0,32,598,0,"(((!(!((states[2]==RUNNING)))&&!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))&&!((states[2]==RUNNING))))", 1, 2, 0);
	trans[5][2]	= settr(15674,0,32,1,0,"goto accept_S13", 0, 2, 0);
	T = trans[ 5][5] = settr(15677,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15677,2,3,0,0,"ATOMIC", 1, 2, 0);
	trans[5][3]	= settr(15675,0,24,599,599,"(((!(!((states[0]==RUNNING)))&&(!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))||((!(!((states[1]==RUNNING)))&&(!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))||(!(!((states[2]==RUNNING)))&&(!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING)))))))", 1, 2, 0); /* m: 4 -> 24,0 */
	reached5[4] = 1;
	trans[5][4]	= settr(0,0,0,0,0,"assert(!(((!(!((states[0]==RUNNING)))&&(!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))||((!(!((states[1]==RUNNING)))&&(!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))||(!(!((states[2]==RUNNING)))&&(!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))))))",0,0,0);
	trans[5][6]	= settr(15678,0,84,600,0,"((!(!((states[2]==RUNNING)))&&!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))))", 1, 2, 0);
	trans[5][7]	= settr(15679,0,84,1,0,"goto T0_S16", 0, 2, 0);
	trans[5][8]	= settr(15680,0,40,601,0,"(((!(!((states[2]==RUNNING)))&&!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))&&!((states[2]==RUNNING))))", 1, 2, 0);
	trans[5][9]	= settr(15681,0,40,1,0,"goto accept_S4", 0, 2, 0);
	trans[5][10]	= settr(15682,0,48,602,0,"(((!(!((states[1]==RUNNING)))&&!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))&&!((states[1]==RUNNING))))", 1, 2, 0);
	trans[5][11]	= settr(15683,0,48,1,0,"goto accept_S36", 0, 2, 0);
	trans[5][12]	= settr(15684,0,104,603,0,"((!(!((states[1]==RUNNING)))&&!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))))", 1, 2, 0);
	trans[5][13]	= settr(15685,0,104,1,0,"goto T0_S39", 0, 2, 0);
	trans[5][14]	= settr(15686,0,56,604,0,"(((!(!((states[1]==RUNNING)))&&!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))&&!((states[1]==RUNNING))))", 1, 2, 0);
	trans[5][15]	= settr(15687,0,56,1,0,"goto accept_S27", 0, 2, 0);
	trans[5][16]	= settr(15688,0,64,605,0,"(((!(!((states[0]==RUNNING)))&&!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))&&!((states[0]==RUNNING))))", 1, 2, 0);
	trans[5][17]	= settr(15689,0,64,1,0,"goto accept_S59", 0, 2, 0);
	trans[5][18]	= settr(15690,0,124,606,0,"((!(!((states[0]==RUNNING)))&&!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[5][19]	= settr(15691,0,124,1,0,"goto T0_S62", 0, 2, 0);
	trans[5][20]	= settr(15692,0,72,607,0,"(((!(!((states[0]==RUNNING)))&&!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))&&!((states[0]==RUNNING))))", 1, 2, 0);
	trans[5][21]	= settr(15693,0,72,1,0,"goto accept_S50", 0, 2, 0);
	trans[5][22]	= settr(15694,0,24,1,0,"(1)", 0, 2, 0);
	trans[5][23]	= settr(15695,0,24,1,0,"goto T0_init", 0, 2, 0);
	trans[5][26]	= settr(15698,0,32,1,0,"break", 0, 2, 0);
	trans[5][33]	= settr(15705,0,32,1,0,".(goto)", 0, 2, 0);
	T = trans[5][32] = settr(15704,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15704,0,27,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15704,0,31,0,0,"DO", 0, 2, 0);
	trans[5][27]	= settr(15699,0,32,608,0,"(!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))", 1, 2, 0);
	trans[5][28]	= settr(15700,0,32,1,0,"goto accept_S13", 0, 2, 0);
	T = trans[ 5][31] = settr(15703,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15703,2,29,0,0,"ATOMIC", 1, 2, 0);
	trans[5][29]	= settr(15701,0,32,609,609,"((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))", 1, 2, 0); /* m: 30 -> 32,0 */
	reached5[30] = 1;
	trans[5][30]	= settr(0,0,0,0,0,"assert(!((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING)))))",0,0,0);
	trans[5][34]	= settr(15706,0,40,1,0,"break", 0, 2, 0);
	trans[5][41]	= settr(15713,0,40,1,0,".(goto)", 0, 2, 0);
	T = trans[5][40] = settr(15712,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15712,0,37,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15712,0,38,0,0,"DO", 0, 2, 0);
	T = trans[ 5][37] = settr(15709,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15709,2,35,0,0,"ATOMIC", 1, 2, 0);
	trans[5][35]	= settr(15707,0,40,610,610,"(!((states[2]==RUNNING)))", 1, 2, 0); /* m: 36 -> 40,0 */
	reached5[36] = 1;
	trans[5][36]	= settr(0,0,0,0,0,"assert(!(!((states[2]==RUNNING))))",0,0,0);
	trans[5][38]	= settr(15710,0,92,1,0,"(1)", 0, 2, 0);
	trans[5][39]	= settr(15711,0,92,1,0,"goto T0_S4", 0, 2, 0);
	trans[5][42]	= settr(15714,0,48,1,0,"break", 0, 2, 0);
	trans[5][49]	= settr(15721,0,48,1,0,".(goto)", 0, 2, 0);
	T = trans[5][48] = settr(15720,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15720,0,43,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15720,0,47,0,0,"DO", 0, 2, 0);
	trans[5][43]	= settr(15715,0,48,611,0,"(!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))", 1, 2, 0);
	trans[5][44]	= settr(15716,0,48,1,0,"goto accept_S36", 0, 2, 0);
	T = trans[ 5][47] = settr(15719,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15719,2,45,0,0,"ATOMIC", 1, 2, 0);
	trans[5][45]	= settr(15717,0,48,612,612,"((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))", 1, 2, 0); /* m: 46 -> 48,0 */
	reached5[46] = 1;
	trans[5][46]	= settr(0,0,0,0,0,"assert(!((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING)))))",0,0,0);
	trans[5][50]	= settr(15722,0,56,1,0,"break", 0, 2, 0);
	trans[5][57]	= settr(15729,0,56,1,0,".(goto)", 0, 2, 0);
	T = trans[5][56] = settr(15728,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15728,0,53,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15728,0,54,0,0,"DO", 0, 2, 0);
	T = trans[ 5][53] = settr(15725,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15725,2,51,0,0,"ATOMIC", 1, 2, 0);
	trans[5][51]	= settr(15723,0,56,613,613,"(!((states[1]==RUNNING)))", 1, 2, 0); /* m: 52 -> 56,0 */
	reached5[52] = 1;
	trans[5][52]	= settr(0,0,0,0,0,"assert(!(!((states[1]==RUNNING))))",0,0,0);
	trans[5][54]	= settr(15726,0,112,1,0,"(1)", 0, 2, 0);
	trans[5][55]	= settr(15727,0,112,1,0,"goto T0_S27", 0, 2, 0);
	trans[5][58]	= settr(15730,0,64,1,0,"break", 0, 2, 0);
	trans[5][65]	= settr(15737,0,64,1,0,".(goto)", 0, 2, 0);
	T = trans[5][64] = settr(15736,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15736,0,59,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15736,0,63,0,0,"DO", 0, 2, 0);
	trans[5][59]	= settr(15731,0,64,614,0,"(!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))", 1, 2, 0);
	trans[5][60]	= settr(15732,0,64,1,0,"goto accept_S59", 0, 2, 0);
	T = trans[ 5][63] = settr(15735,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15735,2,61,0,0,"ATOMIC", 1, 2, 0);
	trans[5][61]	= settr(15733,0,64,615,615,"((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))", 1, 2, 0); /* m: 62 -> 64,0 */
	reached5[62] = 1;
	trans[5][62]	= settr(0,0,0,0,0,"assert(!((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING)))))",0,0,0);
	trans[5][66]	= settr(15738,0,72,1,0,"break", 0, 2, 0);
	trans[5][73]	= settr(15745,0,72,1,0,".(goto)", 0, 2, 0);
	T = trans[5][72] = settr(15744,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15744,0,69,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15744,0,70,0,0,"DO", 0, 2, 0);
	T = trans[ 5][69] = settr(15741,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15741,2,67,0,0,"ATOMIC", 1, 2, 0);
	trans[5][67]	= settr(15739,0,72,616,616,"(!((states[0]==RUNNING)))", 1, 2, 0); /* m: 68 -> 72,0 */
	reached5[68] = 1;
	trans[5][68]	= settr(0,0,0,0,0,"assert(!(!((states[0]==RUNNING))))",0,0,0);
	trans[5][70]	= settr(15742,0,132,1,0,"(1)", 0, 2, 0);
	trans[5][71]	= settr(15743,0,132,1,0,"goto T0_S50", 0, 2, 0);
	trans[5][74]	= settr(15746,0,84,1,0,"break", 0, 2, 0);
	trans[5][85]	= settr(15757,0,84,1,0,".(goto)", 0, 2, 0);
	T = trans[5][84] = settr(15756,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15756,0,75,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15756,0,79,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15756,0,80,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15756,0,82,0,0,"DO", 0, 2, 0);
	trans[5][75]	= settr(15747,0,32,617,0,"((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))", 1, 2, 0);
	trans[5][76]	= settr(15748,0,32,1,0,"goto accept_S13", 0, 2, 0);
	T = trans[ 5][79] = settr(15751,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15751,2,77,0,0,"ATOMIC", 1, 2, 0);
	trans[5][77]	= settr(15749,0,84,618,618,"((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))", 1, 2, 0); /* m: 78 -> 84,0 */
	reached5[78] = 1;
	trans[5][78]	= settr(0,0,0,0,0,"assert(!((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING)))))",0,0,0);
	trans[5][80]	= settr(15752,0,84,619,0,"(!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))", 1, 2, 0);
	trans[5][81]	= settr(15753,0,84,1,0,"goto T0_S16", 0, 2, 0);
	trans[5][82]	= settr(15754,0,40,620,0,"((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))", 1, 2, 0);
	trans[5][83]	= settr(15755,0,40,1,0,"goto accept_S4", 0, 2, 0);
	trans[5][86]	= settr(15758,0,92,1,0,"break", 0, 2, 0);
	trans[5][93]	= settr(15765,0,92,1,0,".(goto)", 0, 2, 0);
	T = trans[5][92] = settr(15764,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15764,0,89,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15764,0,90,0,0,"DO", 0, 2, 0);
	T = trans[ 5][89] = settr(15761,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15761,2,87,0,0,"ATOMIC", 1, 2, 0);
	trans[5][87]	= settr(15759,0,92,621,621,"(!((states[2]==RUNNING)))", 1, 2, 0); /* m: 88 -> 92,0 */
	reached5[88] = 1;
	trans[5][88]	= settr(0,0,0,0,0,"assert(!(!((states[2]==RUNNING))))",0,0,0);
	trans[5][90]	= settr(15762,0,92,1,0,"(1)", 0, 2, 0);
	trans[5][91]	= settr(15763,0,92,1,0,"goto T0_S4", 0, 2, 0);
	trans[5][94]	= settr(15766,0,104,1,0,"break", 0, 2, 0);
	trans[5][105]	= settr(15777,0,104,1,0,".(goto)", 0, 2, 0);
	T = trans[5][104] = settr(15776,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15776,0,95,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15776,0,99,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15776,0,100,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15776,0,102,0,0,"DO", 0, 2, 0);
	trans[5][95]	= settr(15767,0,48,622,0,"((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))", 1, 2, 0);
	trans[5][96]	= settr(15768,0,48,1,0,"goto accept_S36", 0, 2, 0);
	T = trans[ 5][99] = settr(15771,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15771,2,97,0,0,"ATOMIC", 1, 2, 0);
	trans[5][97]	= settr(15769,0,104,623,623,"((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))", 1, 2, 0); /* m: 98 -> 104,0 */
	reached5[98] = 1;
	trans[5][98]	= settr(0,0,0,0,0,"assert(!((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING)))))",0,0,0);
	trans[5][100]	= settr(15772,0,104,624,0,"(!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))", 1, 2, 0);
	trans[5][101]	= settr(15773,0,104,1,0,"goto T0_S39", 0, 2, 0);
	trans[5][102]	= settr(15774,0,56,625,0,"((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))", 1, 2, 0);
	trans[5][103]	= settr(15775,0,56,1,0,"goto accept_S27", 0, 2, 0);
	trans[5][106]	= settr(15778,0,112,1,0,"break", 0, 2, 0);
	trans[5][113]	= settr(15785,0,112,1,0,".(goto)", 0, 2, 0);
	T = trans[5][112] = settr(15784,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15784,0,109,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15784,0,110,0,0,"DO", 0, 2, 0);
	T = trans[ 5][109] = settr(15781,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15781,2,107,0,0,"ATOMIC", 1, 2, 0);
	trans[5][107]	= settr(15779,0,112,626,626,"(!((states[1]==RUNNING)))", 1, 2, 0); /* m: 108 -> 112,0 */
	reached5[108] = 1;
	trans[5][108]	= settr(0,0,0,0,0,"assert(!(!((states[1]==RUNNING))))",0,0,0);
	trans[5][110]	= settr(15782,0,112,1,0,"(1)", 0, 2, 0);
	trans[5][111]	= settr(15783,0,112,1,0,"goto T0_S27", 0, 2, 0);
	trans[5][114]	= settr(15786,0,124,1,0,"break", 0, 2, 0);
	trans[5][125]	= settr(15797,0,124,1,0,".(goto)", 0, 2, 0);
	T = trans[5][124] = settr(15796,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15796,0,115,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15796,0,119,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15796,0,120,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15796,0,122,0,0,"DO", 0, 2, 0);
	trans[5][115]	= settr(15787,0,64,627,0,"((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))", 1, 2, 0);
	trans[5][116]	= settr(15788,0,64,1,0,"goto accept_S59", 0, 2, 0);
	T = trans[ 5][119] = settr(15791,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15791,2,117,0,0,"ATOMIC", 1, 2, 0);
	trans[5][117]	= settr(15789,0,124,628,628,"((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))", 1, 2, 0); /* m: 118 -> 124,0 */
	reached5[118] = 1;
	trans[5][118]	= settr(0,0,0,0,0,"assert(!((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING)))))",0,0,0);
	trans[5][120]	= settr(15792,0,124,629,0,"(!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))", 1, 2, 0);
	trans[5][121]	= settr(15793,0,124,1,0,"goto T0_S62", 0, 2, 0);
	trans[5][122]	= settr(15794,0,72,630,0,"((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))", 1, 2, 0);
	trans[5][123]	= settr(15795,0,72,1,0,"goto accept_S50", 0, 2, 0);
	trans[5][126]	= settr(15798,0,132,1,0,"break", 0, 2, 0);
	trans[5][133]	= settr(15805,0,132,1,0,".(goto)", 0, 2, 0);
	T = trans[5][132] = settr(15804,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15804,0,129,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15804,0,130,0,0,"DO", 0, 2, 0);
	T = trans[ 5][129] = settr(15801,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15801,2,127,0,0,"ATOMIC", 1, 2, 0);
	trans[5][127]	= settr(15799,0,132,631,631,"(!((states[0]==RUNNING)))", 1, 2, 0); /* m: 128 -> 132,0 */
	reached5[128] = 1;
	trans[5][128]	= settr(0,0,0,0,0,"assert(!(!((states[0]==RUNNING))))",0,0,0);
	trans[5][130]	= settr(15802,0,132,1,0,"(1)", 0, 2, 0);
	trans[5][131]	= settr(15803,0,132,1,0,"goto T0_S50", 0, 2, 0);
	trans[5][134]	= settr(15806,0,135,1,0,"break", 0, 2, 0);
	trans[5][135]	= settr(15807,0,136,1,0,"(1)", 0, 2, 0);
	trans[5][136]	= settr(15808,0,0,632,632,"-end-", 0, 3500, 0);

	/* proctype 4: fsm_starting */

	trans[4] = (Trans **) emalloc(41*sizeof(Trans *));

	trans[4][13]	= settr(15645,0,12,1,0,".(goto)", 0, 2, 0);
	T = trans[4][12] = settr(15644,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15644,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15644,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15644,0,6,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15644,0,8,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15644,0,10,0,0,"DO", 0, 2, 0);
	trans[4][1]	= settr(15633,0,20,633,0,"((!(!((states[2]==STARTING)))&&!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING)))))", 1, 2, 0);
	trans[4][2]	= settr(15634,0,20,1,0,"goto accept_S6", 0, 2, 0);
	T = trans[ 4][5] = settr(15637,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15637,2,3,0,0,"ATOMIC", 1, 2, 0);
	trans[4][3]	= settr(15635,0,12,634,634,"(((!(!((states[0]==STARTING)))&&(!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==STARTING))))||((!(!((states[1]==STARTING)))&&(!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==STARTING))))||(!(!((states[2]==STARTING)))&&(!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==STARTING)))))))", 1, 2, 0); /* m: 4 -> 12,0 */
	reached4[4] = 1;
	trans[4][4]	= settr(0,0,0,0,0,"assert(!(((!(!((states[0]==STARTING)))&&(!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==STARTING))))||((!(!((states[1]==STARTING)))&&(!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==STARTING))))||(!(!((states[2]==STARTING)))&&(!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==STARTING))))))))",0,0,0);
	trans[4][6]	= settr(15638,0,28,635,0,"((!(!((states[1]==STARTING)))&&!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING)))))", 1, 2, 0);
	trans[4][7]	= settr(15639,0,28,1,0,"goto accept_S11", 0, 2, 0);
	trans[4][8]	= settr(15640,0,36,636,0,"((!(!((states[0]==STARTING)))&&!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING)))))", 1, 2, 0);
	trans[4][9]	= settr(15641,0,36,1,0,"goto accept_S16", 0, 2, 0);
	trans[4][10]	= settr(15642,0,12,1,0,"(1)", 0, 2, 0);
	trans[4][11]	= settr(15643,0,12,1,0,"goto T0_init", 0, 2, 0);
	trans[4][14]	= settr(15646,0,20,1,0,"break", 0, 2, 0);
	trans[4][21]	= settr(15653,0,20,1,0,".(goto)", 0, 2, 0);
	T = trans[4][20] = settr(15652,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15652,0,15,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15652,0,19,0,0,"DO", 0, 2, 0);
	trans[4][15]	= settr(15647,0,20,637,0,"(!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING))))", 1, 2, 0);
	trans[4][16]	= settr(15648,0,20,1,0,"goto accept_S6", 0, 2, 0);
	T = trans[ 4][19] = settr(15651,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15651,2,17,0,0,"ATOMIC", 1, 2, 0);
	trans[4][17]	= settr(15649,0,20,638,638,"((!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==STARTING))))", 1, 2, 0); /* m: 18 -> 20,0 */
	reached4[18] = 1;
	trans[4][18]	= settr(0,0,0,0,0,"assert(!((!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==STARTING)))))",0,0,0);
	trans[4][22]	= settr(15654,0,28,1,0,"break", 0, 2, 0);
	trans[4][29]	= settr(15661,0,28,1,0,".(goto)", 0, 2, 0);
	T = trans[4][28] = settr(15660,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15660,0,23,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15660,0,27,0,0,"DO", 0, 2, 0);
	trans[4][23]	= settr(15655,0,28,639,0,"(!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING))))", 1, 2, 0);
	trans[4][24]	= settr(15656,0,28,1,0,"goto accept_S11", 0, 2, 0);
	T = trans[ 4][27] = settr(15659,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15659,2,25,0,0,"ATOMIC", 1, 2, 0);
	trans[4][25]	= settr(15657,0,28,640,640,"((!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==STARTING))))", 1, 2, 0); /* m: 26 -> 28,0 */
	reached4[26] = 1;
	trans[4][26]	= settr(0,0,0,0,0,"assert(!((!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==STARTING)))))",0,0,0);
	trans[4][30]	= settr(15662,0,36,1,0,"break", 0, 2, 0);
	trans[4][37]	= settr(15669,0,36,1,0,".(goto)", 0, 2, 0);
	T = trans[4][36] = settr(15668,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15668,0,31,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15668,0,35,0,0,"DO", 0, 2, 0);
	trans[4][31]	= settr(15663,0,36,641,0,"(!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING))))", 1, 2, 0);
	trans[4][32]	= settr(15664,0,36,1,0,"goto accept_S16", 0, 2, 0);
	T = trans[ 4][35] = settr(15667,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15667,2,33,0,0,"ATOMIC", 1, 2, 0);
	trans[4][33]	= settr(15665,0,36,642,642,"((!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==STARTING))))", 1, 2, 0); /* m: 34 -> 36,0 */
	reached4[34] = 1;
	trans[4][34]	= settr(0,0,0,0,0,"assert(!((!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==STARTING)))))",0,0,0);
	trans[4][38]	= settr(15670,0,39,1,0,"break", 0, 2, 0);
	trans[4][39]	= settr(15671,0,40,1,0,"(1)", 0, 2, 0);
	trans[4][40]	= settr(15672,0,0,643,643,"-end-", 0, 3500, 0);

	/* proctype 3: fsm_ready */

	trans[3] = (Trans **) emalloc(333*sizeof(Trans *));

	trans[3][35]	= settr(15335,0,34,1,0,".(goto)", 0, 2, 0);
	T = trans[3][34] = settr(15334,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,1,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,3,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,5,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,9,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,10,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,12,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,14,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,16,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,18,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,20,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,22,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,24,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,26,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,28,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15334,0,30,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15334,0,32,0,0,"DO", 0, 2, 0);
	trans[3][1]	= settr(15301,0,58,644,0,"((!((states[2]==READY))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][2]	= settr(15302,0,58,1,0,"goto accept_S52", 0, 2, 0);
	trans[3][3]	= settr(15303,0,200,645,0,"(!((states[2]==STARTING)))", 1, 2, 0);
	trans[3][4]	= settr(15304,0,200,1,0,"goto T0_S52", 0, 2, 0);
	trans[3][5]	= settr(15305,0,42,646,0,"(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][6]	= settr(15306,0,42,1,0,"goto accept_S35", 0, 2, 0);
	T = trans[ 3][9] = settr(15309,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15309,2,7,0,0,"ATOMIC", 1, 2, 0);
	trans[3][7]	= settr(15307,0,34,647,647,"(((!((states[0]==0))&&(!((states[0]==READY))&&!((states[0]==STARTING))))||((!((states[1]==0))&&(!((states[1]==READY))&&!((states[1]==STARTING))))||(!((states[2]==0))&&(!((states[2]==READY))&&!((states[2]==STARTING)))))))", 1, 2, 0); /* m: 8 -> 34,0 */
	reached3[8] = 1;
	trans[3][8]	= settr(0,0,0,0,0,"assert(!(((!((states[0]==0))&&(!((states[0]==READY))&&!((states[0]==STARTING))))||((!((states[1]==0))&&(!((states[1]==READY))&&!((states[1]==STARTING))))||(!((states[2]==0))&&(!((states[2]==READY))&&!((states[2]==STARTING))))))))",0,0,0);
	trans[3][10]	= settr(15310,0,66,648,0,"(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][11]	= settr(15311,0,66,1,0,"goto accept_S61", 0, 2, 0);
	trans[3][12]	= settr(15312,0,220,649,0,"((!((states[2]==0))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][13]	= settr(15313,0,220,1,0,"goto T0_S72", 0, 2, 0);
	trans[3][14]	= settr(15314,0,102,650,0,"((!((states[1]==READY))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][15]	= settr(15315,0,102,1,0,"goto accept_S187", 0, 2, 0);
	trans[3][16]	= settr(15316,0,254,651,0,"(!((states[1]==STARTING)))", 1, 2, 0);
	trans[3][17]	= settr(15317,0,254,1,0,"goto T0_S187", 0, 2, 0);
	trans[3][18]	= settr(15318,0,86,652,0,"(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][19]	= settr(15319,0,86,1,0,"goto accept_S170", 0, 2, 0);
	trans[3][20]	= settr(15320,0,110,653,0,"(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][21]	= settr(15321,0,110,1,0,"goto accept_S196", 0, 2, 0);
	trans[3][22]	= settr(15322,0,274,654,0,"((!((states[1]==0))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][23]	= settr(15323,0,274,1,0,"goto T0_S207", 0, 2, 0);
	trans[3][24]	= settr(15324,0,146,655,0,"((!((states[0]==READY))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][25]	= settr(15325,0,146,1,0,"goto accept_S322", 0, 2, 0);
	trans[3][26]	= settr(15326,0,308,656,0,"(!((states[0]==STARTING)))", 1, 2, 0);
	trans[3][27]	= settr(15327,0,308,1,0,"goto T0_S322", 0, 2, 0);
	trans[3][28]	= settr(15328,0,130,657,0,"(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][29]	= settr(15329,0,130,1,0,"goto accept_S305", 0, 2, 0);
	trans[3][30]	= settr(15330,0,154,658,0,"(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][31]	= settr(15331,0,154,1,0,"goto accept_S331", 0, 2, 0);
	trans[3][32]	= settr(15332,0,328,659,0,"((!((states[0]==0))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][33]	= settr(15333,0,328,1,0,"goto T0_S342", 0, 2, 0);
	trans[3][36]	= settr(15336,0,42,1,0,"break", 0, 2, 0);
	trans[3][43]	= settr(15343,0,42,1,0,".(goto)", 0, 2, 0);
	T = trans[3][42] = settr(15342,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15342,0,37,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15342,0,41,0,0,"DO", 0, 2, 0);
	trans[3][37]	= settr(15337,0,42,660,0,"(!((states[2]==STARTING)))", 1, 2, 0);
	trans[3][38]	= settr(15338,0,42,1,0,"goto accept_S35", 0, 2, 0);
	T = trans[ 3][41] = settr(15341,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15341,2,39,0,0,"ATOMIC", 1, 2, 0);
	trans[3][39]	= settr(15339,0,42,661,661,"((!((states[2]==READY))&&!((states[2]==STARTING))))", 1, 2, 0); /* m: 40 -> 42,0 */
	reached3[40] = 1;
	trans[3][40]	= settr(0,0,0,0,0,"assert(!((!((states[2]==READY))&&!((states[2]==STARTING)))))",0,0,0);
	trans[3][44]	= settr(15344,0,58,1,0,"break", 0, 2, 0);
	trans[3][59]	= settr(15359,0,58,1,0,".(goto)", 0, 2, 0);
	T = trans[3][58] = settr(15358,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15358,0,45,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15358,0,47,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15358,0,49,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15358,0,51,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15358,0,55,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15358,0,56,0,0,"DO", 0, 2, 0);
	trans[3][45]	= settr(15345,0,200,662,0,"(!((states[2]==STARTING)))", 1, 2, 0);
	trans[3][46]	= settr(15346,0,200,1,0,"goto T0_S52", 0, 2, 0);
	trans[3][47]	= settr(15347,0,42,663,0,"(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][48]	= settr(15348,0,42,1,0,"goto accept_S35", 0, 2, 0);
	trans[3][49]	= settr(15349,0,220,664,0,"((!((states[2]==0))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][50]	= settr(15350,0,220,1,0,"goto T0_S72", 0, 2, 0);
	trans[3][51]	= settr(15351,0,182,665,0,"((!((states[2]==READY))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][52]	= settr(15352,0,182,1,0,"goto T0_S47", 0, 2, 0);
	T = trans[ 3][55] = settr(15355,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15355,2,53,0,0,"ATOMIC", 1, 2, 0);
	trans[3][53]	= settr(15353,0,58,666,666,"(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))", 1, 2, 0); /* m: 54 -> 58,0 */
	reached3[54] = 1;
	trans[3][54]	= settr(0,0,0,0,0,"assert(!(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING)))))",0,0,0);
	trans[3][56]	= settr(15356,0,208,667,0,"(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][57]	= settr(15357,0,208,1,0,"goto T0_S61", 0, 2, 0);
	trans[3][60]	= settr(15360,0,66,1,0,"break", 0, 2, 0);
	trans[3][67]	= settr(15367,0,66,1,0,".(goto)", 0, 2, 0);
	T = trans[3][66] = settr(15366,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15366,0,63,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15366,0,64,0,0,"DO", 0, 2, 0);
	T = trans[ 3][63] = settr(15363,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15363,2,61,0,0,"ATOMIC", 1, 2, 0);
	trans[3][61]	= settr(15361,0,66,668,668,"(!((states[2]==READY)))", 1, 2, 0); /* m: 62 -> 66,0 */
	reached3[62] = 1;
	trans[3][62]	= settr(0,0,0,0,0,"assert(!(!((states[2]==READY))))",0,0,0);
	trans[3][64]	= settr(15364,0,208,1,0,"(1)", 0, 2, 0);
	trans[3][65]	= settr(15365,0,208,1,0,"goto T0_S61", 0, 2, 0);
	trans[3][68]	= settr(15368,0,78,1,0,"break", 0, 2, 0);
	trans[3][79]	= settr(15379,0,78,1,0,".(goto)", 0, 2, 0);
	T = trans[3][78] = settr(15378,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15378,0,69,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15378,0,73,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15378,0,74,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15378,0,76,0,0,"DO", 0, 2, 0);
	trans[3][69]	= settr(15369,0,42,669,0,"((!((states[2]==READY))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][70]	= settr(15370,0,42,1,0,"goto accept_S35", 0, 2, 0);
	T = trans[ 3][73] = settr(15373,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15373,2,71,0,0,"ATOMIC", 1, 2, 0);
	trans[3][71]	= settr(15371,0,78,670,670,"((!((states[2]==READY))&&!((states[2]==STARTING))))", 1, 2, 0); /* m: 72 -> 78,0 */
	reached3[72] = 1;
	trans[3][72]	= settr(0,0,0,0,0,"assert(!((!((states[2]==READY))&&!((states[2]==STARTING)))))",0,0,0);
	trans[3][74]	= settr(15374,0,220,671,0,"(!((states[2]==STARTING)))", 1, 2, 0);
	trans[3][75]	= settr(15375,0,220,1,0,"goto T0_S72", 0, 2, 0);
	trans[3][76]	= settr(15376,0,208,672,0,"((!((states[2]==READY))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][77]	= settr(15377,0,208,1,0,"goto T0_S61", 0, 2, 0);
	trans[3][80]	= settr(15380,0,86,1,0,"break", 0, 2, 0);
	trans[3][87]	= settr(15387,0,86,1,0,".(goto)", 0, 2, 0);
	T = trans[3][86] = settr(15386,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15386,0,81,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15386,0,85,0,0,"DO", 0, 2, 0);
	trans[3][81]	= settr(15381,0,86,673,0,"(!((states[1]==STARTING)))", 1, 2, 0);
	trans[3][82]	= settr(15382,0,86,1,0,"goto accept_S170", 0, 2, 0);
	T = trans[ 3][85] = settr(15385,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15385,2,83,0,0,"ATOMIC", 1, 2, 0);
	trans[3][83]	= settr(15383,0,86,674,674,"((!((states[1]==READY))&&!((states[1]==STARTING))))", 1, 2, 0); /* m: 84 -> 86,0 */
	reached3[84] = 1;
	trans[3][84]	= settr(0,0,0,0,0,"assert(!((!((states[1]==READY))&&!((states[1]==STARTING)))))",0,0,0);
	trans[3][88]	= settr(15388,0,102,1,0,"break", 0, 2, 0);
	trans[3][103]	= settr(15403,0,102,1,0,".(goto)", 0, 2, 0);
	T = trans[3][102] = settr(15402,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15402,0,89,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15402,0,91,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15402,0,93,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15402,0,95,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15402,0,99,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15402,0,100,0,0,"DO", 0, 2, 0);
	trans[3][89]	= settr(15389,0,254,675,0,"(!((states[1]==STARTING)))", 1, 2, 0);
	trans[3][90]	= settr(15390,0,254,1,0,"goto T0_S187", 0, 2, 0);
	trans[3][91]	= settr(15391,0,86,676,0,"(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][92]	= settr(15392,0,86,1,0,"goto accept_S170", 0, 2, 0);
	trans[3][93]	= settr(15393,0,274,677,0,"((!((states[1]==0))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][94]	= settr(15394,0,274,1,0,"goto T0_S207", 0, 2, 0);
	trans[3][95]	= settr(15395,0,236,678,0,"((!((states[1]==READY))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][96]	= settr(15396,0,236,1,0,"goto T0_S182", 0, 2, 0);
	T = trans[ 3][99] = settr(15399,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15399,2,97,0,0,"ATOMIC", 1, 2, 0);
	trans[3][97]	= settr(15397,0,102,679,679,"(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))", 1, 2, 0); /* m: 98 -> 102,0 */
	reached3[98] = 1;
	trans[3][98]	= settr(0,0,0,0,0,"assert(!(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING)))))",0,0,0);
	trans[3][100]	= settr(15400,0,262,680,0,"(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][101]	= settr(15401,0,262,1,0,"goto T0_S196", 0, 2, 0);
	trans[3][104]	= settr(15404,0,110,1,0,"break", 0, 2, 0);
	trans[3][111]	= settr(15411,0,110,1,0,".(goto)", 0, 2, 0);
	T = trans[3][110] = settr(15410,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15410,0,107,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15410,0,108,0,0,"DO", 0, 2, 0);
	T = trans[ 3][107] = settr(15407,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15407,2,105,0,0,"ATOMIC", 1, 2, 0);
	trans[3][105]	= settr(15405,0,110,681,681,"(!((states[1]==READY)))", 1, 2, 0); /* m: 106 -> 110,0 */
	reached3[106] = 1;
	trans[3][106]	= settr(0,0,0,0,0,"assert(!(!((states[1]==READY))))",0,0,0);
	trans[3][108]	= settr(15408,0,262,1,0,"(1)", 0, 2, 0);
	trans[3][109]	= settr(15409,0,262,1,0,"goto T0_S196", 0, 2, 0);
	trans[3][112]	= settr(15412,0,122,1,0,"break", 0, 2, 0);
	trans[3][123]	= settr(15423,0,122,1,0,".(goto)", 0, 2, 0);
	T = trans[3][122] = settr(15422,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15422,0,113,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15422,0,117,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15422,0,118,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15422,0,120,0,0,"DO", 0, 2, 0);
	trans[3][113]	= settr(15413,0,86,682,0,"((!((states[1]==READY))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][114]	= settr(15414,0,86,1,0,"goto accept_S170", 0, 2, 0);
	T = trans[ 3][117] = settr(15417,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15417,2,115,0,0,"ATOMIC", 1, 2, 0);
	trans[3][115]	= settr(15415,0,122,683,683,"((!((states[1]==READY))&&!((states[1]==STARTING))))", 1, 2, 0); /* m: 116 -> 122,0 */
	reached3[116] = 1;
	trans[3][116]	= settr(0,0,0,0,0,"assert(!((!((states[1]==READY))&&!((states[1]==STARTING)))))",0,0,0);
	trans[3][118]	= settr(15418,0,274,684,0,"(!((states[1]==STARTING)))", 1, 2, 0);
	trans[3][119]	= settr(15419,0,274,1,0,"goto T0_S207", 0, 2, 0);
	trans[3][120]	= settr(15420,0,262,685,0,"((!((states[1]==READY))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][121]	= settr(15421,0,262,1,0,"goto T0_S196", 0, 2, 0);
	trans[3][124]	= settr(15424,0,130,1,0,"break", 0, 2, 0);
	trans[3][131]	= settr(15431,0,130,1,0,".(goto)", 0, 2, 0);
	T = trans[3][130] = settr(15430,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15430,0,125,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15430,0,129,0,0,"DO", 0, 2, 0);
	trans[3][125]	= settr(15425,0,130,686,0,"(!((states[0]==STARTING)))", 1, 2, 0);
	trans[3][126]	= settr(15426,0,130,1,0,"goto accept_S305", 0, 2, 0);
	T = trans[ 3][129] = settr(15429,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15429,2,127,0,0,"ATOMIC", 1, 2, 0);
	trans[3][127]	= settr(15427,0,130,687,687,"((!((states[0]==READY))&&!((states[0]==STARTING))))", 1, 2, 0); /* m: 128 -> 130,0 */
	reached3[128] = 1;
	trans[3][128]	= settr(0,0,0,0,0,"assert(!((!((states[0]==READY))&&!((states[0]==STARTING)))))",0,0,0);
	trans[3][132]	= settr(15432,0,146,1,0,"break", 0, 2, 0);
	trans[3][147]	= settr(15447,0,146,1,0,".(goto)", 0, 2, 0);
	T = trans[3][146] = settr(15446,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15446,0,133,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15446,0,135,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15446,0,137,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15446,0,139,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15446,0,143,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15446,0,144,0,0,"DO", 0, 2, 0);
	trans[3][133]	= settr(15433,0,308,688,0,"(!((states[0]==STARTING)))", 1, 2, 0);
	trans[3][134]	= settr(15434,0,308,1,0,"goto T0_S322", 0, 2, 0);
	trans[3][135]	= settr(15435,0,130,689,0,"(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][136]	= settr(15436,0,130,1,0,"goto accept_S305", 0, 2, 0);
	trans[3][137]	= settr(15437,0,328,690,0,"((!((states[0]==0))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][138]	= settr(15438,0,328,1,0,"goto T0_S342", 0, 2, 0);
	trans[3][139]	= settr(15439,0,290,691,0,"((!((states[0]==READY))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][140]	= settr(15440,0,290,1,0,"goto T0_S317", 0, 2, 0);
	T = trans[ 3][143] = settr(15443,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15443,2,141,0,0,"ATOMIC", 1, 2, 0);
	trans[3][141]	= settr(15441,0,146,692,692,"(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))", 1, 2, 0); /* m: 142 -> 146,0 */
	reached3[142] = 1;
	trans[3][142]	= settr(0,0,0,0,0,"assert(!(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING)))))",0,0,0);
	trans[3][144]	= settr(15444,0,316,693,0,"(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][145]	= settr(15445,0,316,1,0,"goto T0_S331", 0, 2, 0);
	trans[3][148]	= settr(15448,0,154,1,0,"break", 0, 2, 0);
	trans[3][155]	= settr(15455,0,154,1,0,".(goto)", 0, 2, 0);
	T = trans[3][154] = settr(15454,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15454,0,151,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15454,0,152,0,0,"DO", 0, 2, 0);
	T = trans[ 3][151] = settr(15451,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15451,2,149,0,0,"ATOMIC", 1, 2, 0);
	trans[3][149]	= settr(15449,0,154,694,694,"(!((states[0]==READY)))", 1, 2, 0); /* m: 150 -> 154,0 */
	reached3[150] = 1;
	trans[3][150]	= settr(0,0,0,0,0,"assert(!(!((states[0]==READY))))",0,0,0);
	trans[3][152]	= settr(15452,0,316,1,0,"(1)", 0, 2, 0);
	trans[3][153]	= settr(15453,0,316,1,0,"goto T0_S331", 0, 2, 0);
	trans[3][156]	= settr(15456,0,166,1,0,"break", 0, 2, 0);
	trans[3][167]	= settr(15467,0,166,1,0,".(goto)", 0, 2, 0);
	T = trans[3][166] = settr(15466,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15466,0,157,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15466,0,161,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15466,0,162,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15466,0,164,0,0,"DO", 0, 2, 0);
	trans[3][157]	= settr(15457,0,130,695,0,"((!((states[0]==READY))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][158]	= settr(15458,0,130,1,0,"goto accept_S305", 0, 2, 0);
	T = trans[ 3][161] = settr(15461,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15461,2,159,0,0,"ATOMIC", 1, 2, 0);
	trans[3][159]	= settr(15459,0,166,696,696,"((!((states[0]==READY))&&!((states[0]==STARTING))))", 1, 2, 0); /* m: 160 -> 166,0 */
	reached3[160] = 1;
	trans[3][160]	= settr(0,0,0,0,0,"assert(!((!((states[0]==READY))&&!((states[0]==STARTING)))))",0,0,0);
	trans[3][162]	= settr(15462,0,328,697,0,"(!((states[0]==STARTING)))", 1, 2, 0);
	trans[3][163]	= settr(15463,0,328,1,0,"goto T0_S342", 0, 2, 0);
	trans[3][164]	= settr(15464,0,316,698,0,"((!((states[0]==READY))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][165]	= settr(15465,0,316,1,0,"goto T0_S331", 0, 2, 0);
	trans[3][168]	= settr(15468,0,182,1,0,"break", 0, 2, 0);
	trans[3][183]	= settr(15483,0,182,1,0,".(goto)", 0, 2, 0);
	T = trans[3][182] = settr(15482,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15482,0,169,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15482,0,171,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15482,0,173,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15482,0,177,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15482,0,178,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15482,0,180,0,0,"DO", 0, 2, 0);
	trans[3][169]	= settr(15469,0,58,699,0,"((!((states[2]==READY))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][170]	= settr(15470,0,58,1,0,"goto accept_S52", 0, 2, 0);
	trans[3][171]	= settr(15471,0,200,700,0,"(!((states[2]==STARTING)))", 1, 2, 0);
	trans[3][172]	= settr(15472,0,200,1,0,"goto T0_S52", 0, 2, 0);
	trans[3][173]	= settr(15473,0,42,701,0,"(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][174]	= settr(15474,0,42,1,0,"goto accept_S35", 0, 2, 0);
	T = trans[ 3][177] = settr(15477,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15477,2,175,0,0,"ATOMIC", 1, 2, 0);
	trans[3][175]	= settr(15475,0,182,702,702,"(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))", 1, 2, 0); /* m: 176 -> 182,0 */
	reached3[176] = 1;
	trans[3][176]	= settr(0,0,0,0,0,"assert(!(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING)))))",0,0,0);
	trans[3][178]	= settr(15478,0,66,703,0,"(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][179]	= settr(15479,0,66,1,0,"goto accept_S61", 0, 2, 0);
	trans[3][180]	= settr(15480,0,220,704,0,"((!((states[2]==0))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][181]	= settr(15481,0,220,1,0,"goto T0_S72", 0, 2, 0);
	trans[3][184]	= settr(15484,0,200,1,0,"break", 0, 2, 0);
	trans[3][201]	= settr(15501,0,200,1,0,".(goto)", 0, 2, 0);
	T = trans[3][200] = settr(15500,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15500,0,185,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15500,0,187,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15500,0,189,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15500,0,191,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15500,0,195,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15500,0,196,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15500,0,198,0,0,"DO", 0, 2, 0);
	trans[3][185]	= settr(15485,0,58,705,0,"((!((states[2]==READY))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][186]	= settr(15486,0,58,1,0,"goto accept_S52", 0, 2, 0);
	trans[3][187]	= settr(15487,0,200,706,0,"(!((states[2]==STARTING)))", 1, 2, 0);
	trans[3][188]	= settr(15488,0,200,1,0,"goto T0_S52", 0, 2, 0);
	trans[3][189]	= settr(15489,0,42,707,0,"(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][190]	= settr(15490,0,42,1,0,"goto accept_S35", 0, 2, 0);
	trans[3][191]	= settr(15491,0,78,708,0,"(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][192]	= settr(15492,0,78,1,0,"goto accept_S72", 0, 2, 0);
	T = trans[ 3][195] = settr(15495,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15495,2,193,0,0,"ATOMIC", 1, 2, 0);
	trans[3][193]	= settr(15493,0,200,709,709,"(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))", 1, 2, 0); /* m: 194 -> 200,0 */
	reached3[194] = 1;
	trans[3][194]	= settr(0,0,0,0,0,"assert(!(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING)))))",0,0,0);
	trans[3][196]	= settr(15496,0,66,710,0,"(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][197]	= settr(15497,0,66,1,0,"goto accept_S61", 0, 2, 0);
	trans[3][198]	= settr(15498,0,220,711,0,"((!((states[2]==0))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][199]	= settr(15499,0,220,1,0,"goto T0_S72", 0, 2, 0);
	trans[3][202]	= settr(15502,0,208,1,0,"break", 0, 2, 0);
	trans[3][209]	= settr(15509,0,208,1,0,".(goto)", 0, 2, 0);
	T = trans[3][208] = settr(15508,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15508,0,205,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15508,0,206,0,0,"DO", 0, 2, 0);
	T = trans[ 3][205] = settr(15505,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15505,2,203,0,0,"ATOMIC", 1, 2, 0);
	trans[3][203]	= settr(15503,0,208,712,712,"(!((states[2]==READY)))", 1, 2, 0); /* m: 204 -> 208,0 */
	reached3[204] = 1;
	trans[3][204]	= settr(0,0,0,0,0,"assert(!(!((states[2]==READY))))",0,0,0);
	trans[3][206]	= settr(15506,0,208,1,0,"(1)", 0, 2, 0);
	trans[3][207]	= settr(15507,0,208,1,0,"goto T0_S61", 0, 2, 0);
	trans[3][210]	= settr(15510,0,220,1,0,"break", 0, 2, 0);
	trans[3][221]	= settr(15521,0,220,1,0,".(goto)", 0, 2, 0);
	T = trans[3][220] = settr(15520,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15520,0,211,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15520,0,215,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15520,0,216,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15520,0,218,0,0,"DO", 0, 2, 0);
	trans[3][211]	= settr(15511,0,42,713,0,"((!((states[2]==READY))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][212]	= settr(15512,0,42,1,0,"goto accept_S35", 0, 2, 0);
	T = trans[ 3][215] = settr(15515,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15515,2,213,0,0,"ATOMIC", 1, 2, 0);
	trans[3][213]	= settr(15513,0,220,714,714,"((!((states[2]==READY))&&!((states[2]==STARTING))))", 1, 2, 0); /* m: 214 -> 220,0 */
	reached3[214] = 1;
	trans[3][214]	= settr(0,0,0,0,0,"assert(!((!((states[2]==READY))&&!((states[2]==STARTING)))))",0,0,0);
	trans[3][216]	= settr(15516,0,220,715,0,"(!((states[2]==STARTING)))", 1, 2, 0);
	trans[3][217]	= settr(15517,0,220,1,0,"goto T0_S72", 0, 2, 0);
	trans[3][218]	= settr(15518,0,66,716,0,"((!((states[2]==READY))&&!((states[2]==STARTING))))", 1, 2, 0);
	trans[3][219]	= settr(15519,0,66,1,0,"goto accept_S61", 0, 2, 0);
	trans[3][222]	= settr(15522,0,236,1,0,"break", 0, 2, 0);
	trans[3][237]	= settr(15537,0,236,1,0,".(goto)", 0, 2, 0);
	T = trans[3][236] = settr(15536,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15536,0,223,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15536,0,225,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15536,0,227,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15536,0,231,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15536,0,232,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15536,0,234,0,0,"DO", 0, 2, 0);
	trans[3][223]	= settr(15523,0,102,717,0,"((!((states[1]==READY))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][224]	= settr(15524,0,102,1,0,"goto accept_S187", 0, 2, 0);
	trans[3][225]	= settr(15525,0,254,718,0,"(!((states[1]==STARTING)))", 1, 2, 0);
	trans[3][226]	= settr(15526,0,254,1,0,"goto T0_S187", 0, 2, 0);
	trans[3][227]	= settr(15527,0,86,719,0,"(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][228]	= settr(15528,0,86,1,0,"goto accept_S170", 0, 2, 0);
	T = trans[ 3][231] = settr(15531,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15531,2,229,0,0,"ATOMIC", 1, 2, 0);
	trans[3][229]	= settr(15529,0,236,720,720,"(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))", 1, 2, 0); /* m: 230 -> 236,0 */
	reached3[230] = 1;
	trans[3][230]	= settr(0,0,0,0,0,"assert(!(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING)))))",0,0,0);
	trans[3][232]	= settr(15532,0,110,721,0,"(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][233]	= settr(15533,0,110,1,0,"goto accept_S196", 0, 2, 0);
	trans[3][234]	= settr(15534,0,274,722,0,"((!((states[1]==0))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][235]	= settr(15535,0,274,1,0,"goto T0_S207", 0, 2, 0);
	trans[3][238]	= settr(15538,0,254,1,0,"break", 0, 2, 0);
	trans[3][255]	= settr(15555,0,254,1,0,".(goto)", 0, 2, 0);
	T = trans[3][254] = settr(15554,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15554,0,239,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15554,0,241,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15554,0,243,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15554,0,245,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15554,0,249,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15554,0,250,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15554,0,252,0,0,"DO", 0, 2, 0);
	trans[3][239]	= settr(15539,0,102,723,0,"((!((states[1]==READY))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][240]	= settr(15540,0,102,1,0,"goto accept_S187", 0, 2, 0);
	trans[3][241]	= settr(15541,0,254,724,0,"(!((states[1]==STARTING)))", 1, 2, 0);
	trans[3][242]	= settr(15542,0,254,1,0,"goto T0_S187", 0, 2, 0);
	trans[3][243]	= settr(15543,0,86,725,0,"(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][244]	= settr(15544,0,86,1,0,"goto accept_S170", 0, 2, 0);
	trans[3][245]	= settr(15545,0,122,726,0,"(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][246]	= settr(15546,0,122,1,0,"goto accept_S207", 0, 2, 0);
	T = trans[ 3][249] = settr(15549,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15549,2,247,0,0,"ATOMIC", 1, 2, 0);
	trans[3][247]	= settr(15547,0,254,727,727,"(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))", 1, 2, 0); /* m: 248 -> 254,0 */
	reached3[248] = 1;
	trans[3][248]	= settr(0,0,0,0,0,"assert(!(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING)))))",0,0,0);
	trans[3][250]	= settr(15550,0,110,728,0,"(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][251]	= settr(15551,0,110,1,0,"goto accept_S196", 0, 2, 0);
	trans[3][252]	= settr(15552,0,274,729,0,"((!((states[1]==0))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][253]	= settr(15553,0,274,1,0,"goto T0_S207", 0, 2, 0);
	trans[3][256]	= settr(15556,0,262,1,0,"break", 0, 2, 0);
	trans[3][263]	= settr(15563,0,262,1,0,".(goto)", 0, 2, 0);
	T = trans[3][262] = settr(15562,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15562,0,259,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15562,0,260,0,0,"DO", 0, 2, 0);
	T = trans[ 3][259] = settr(15559,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15559,2,257,0,0,"ATOMIC", 1, 2, 0);
	trans[3][257]	= settr(15557,0,262,730,730,"(!((states[1]==READY)))", 1, 2, 0); /* m: 258 -> 262,0 */
	reached3[258] = 1;
	trans[3][258]	= settr(0,0,0,0,0,"assert(!(!((states[1]==READY))))",0,0,0);
	trans[3][260]	= settr(15560,0,262,1,0,"(1)", 0, 2, 0);
	trans[3][261]	= settr(15561,0,262,1,0,"goto T0_S196", 0, 2, 0);
	trans[3][264]	= settr(15564,0,274,1,0,"break", 0, 2, 0);
	trans[3][275]	= settr(15575,0,274,1,0,".(goto)", 0, 2, 0);
	T = trans[3][274] = settr(15574,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15574,0,265,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15574,0,269,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15574,0,270,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15574,0,272,0,0,"DO", 0, 2, 0);
	trans[3][265]	= settr(15565,0,86,731,0,"((!((states[1]==READY))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][266]	= settr(15566,0,86,1,0,"goto accept_S170", 0, 2, 0);
	T = trans[ 3][269] = settr(15569,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15569,2,267,0,0,"ATOMIC", 1, 2, 0);
	trans[3][267]	= settr(15567,0,274,732,732,"((!((states[1]==READY))&&!((states[1]==STARTING))))", 1, 2, 0); /* m: 268 -> 274,0 */
	reached3[268] = 1;
	trans[3][268]	= settr(0,0,0,0,0,"assert(!((!((states[1]==READY))&&!((states[1]==STARTING)))))",0,0,0);
	trans[3][270]	= settr(15570,0,274,733,0,"(!((states[1]==STARTING)))", 1, 2, 0);
	trans[3][271]	= settr(15571,0,274,1,0,"goto T0_S207", 0, 2, 0);
	trans[3][272]	= settr(15572,0,110,734,0,"((!((states[1]==READY))&&!((states[1]==STARTING))))", 1, 2, 0);
	trans[3][273]	= settr(15573,0,110,1,0,"goto accept_S196", 0, 2, 0);
	trans[3][276]	= settr(15576,0,290,1,0,"break", 0, 2, 0);
	trans[3][291]	= settr(15591,0,290,1,0,".(goto)", 0, 2, 0);
	T = trans[3][290] = settr(15590,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15590,0,277,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15590,0,279,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15590,0,281,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15590,0,285,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15590,0,286,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15590,0,288,0,0,"DO", 0, 2, 0);
	trans[3][277]	= settr(15577,0,146,735,0,"((!((states[0]==READY))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][278]	= settr(15578,0,146,1,0,"goto accept_S322", 0, 2, 0);
	trans[3][279]	= settr(15579,0,308,736,0,"(!((states[0]==STARTING)))", 1, 2, 0);
	trans[3][280]	= settr(15580,0,308,1,0,"goto T0_S322", 0, 2, 0);
	trans[3][281]	= settr(15581,0,130,737,0,"(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][282]	= settr(15582,0,130,1,0,"goto accept_S305", 0, 2, 0);
	T = trans[ 3][285] = settr(15585,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15585,2,283,0,0,"ATOMIC", 1, 2, 0);
	trans[3][283]	= settr(15583,0,290,738,738,"(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))", 1, 2, 0); /* m: 284 -> 290,0 */
	reached3[284] = 1;
	trans[3][284]	= settr(0,0,0,0,0,"assert(!(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING)))))",0,0,0);
	trans[3][286]	= settr(15586,0,154,739,0,"(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][287]	= settr(15587,0,154,1,0,"goto accept_S331", 0, 2, 0);
	trans[3][288]	= settr(15588,0,328,740,0,"((!((states[0]==0))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][289]	= settr(15589,0,328,1,0,"goto T0_S342", 0, 2, 0);
	trans[3][292]	= settr(15592,0,308,1,0,"break", 0, 2, 0);
	trans[3][309]	= settr(15609,0,308,1,0,".(goto)", 0, 2, 0);
	T = trans[3][308] = settr(15608,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15608,0,293,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15608,0,295,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15608,0,297,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15608,0,299,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15608,0,303,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15608,0,304,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15608,0,306,0,0,"DO", 0, 2, 0);
	trans[3][293]	= settr(15593,0,146,741,0,"((!((states[0]==READY))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][294]	= settr(15594,0,146,1,0,"goto accept_S322", 0, 2, 0);
	trans[3][295]	= settr(15595,0,308,742,0,"(!((states[0]==STARTING)))", 1, 2, 0);
	trans[3][296]	= settr(15596,0,308,1,0,"goto T0_S322", 0, 2, 0);
	trans[3][297]	= settr(15597,0,130,743,0,"(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][298]	= settr(15598,0,130,1,0,"goto accept_S305", 0, 2, 0);
	trans[3][299]	= settr(15599,0,166,744,0,"(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][300]	= settr(15600,0,166,1,0,"goto accept_S342", 0, 2, 0);
	T = trans[ 3][303] = settr(15603,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15603,2,301,0,0,"ATOMIC", 1, 2, 0);
	trans[3][301]	= settr(15601,0,308,745,745,"(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))", 1, 2, 0); /* m: 302 -> 308,0 */
	reached3[302] = 1;
	trans[3][302]	= settr(0,0,0,0,0,"assert(!(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING)))))",0,0,0);
	trans[3][304]	= settr(15604,0,154,746,0,"(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][305]	= settr(15605,0,154,1,0,"goto accept_S331", 0, 2, 0);
	trans[3][306]	= settr(15606,0,328,747,0,"((!((states[0]==0))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][307]	= settr(15607,0,328,1,0,"goto T0_S342", 0, 2, 0);
	trans[3][310]	= settr(15610,0,316,1,0,"break", 0, 2, 0);
	trans[3][317]	= settr(15617,0,316,1,0,".(goto)", 0, 2, 0);
	T = trans[3][316] = settr(15616,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15616,0,313,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15616,0,314,0,0,"DO", 0, 2, 0);
	T = trans[ 3][313] = settr(15613,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15613,2,311,0,0,"ATOMIC", 1, 2, 0);
	trans[3][311]	= settr(15611,0,316,748,748,"(!((states[0]==READY)))", 1, 2, 0); /* m: 312 -> 316,0 */
	reached3[312] = 1;
	trans[3][312]	= settr(0,0,0,0,0,"assert(!(!((states[0]==READY))))",0,0,0);
	trans[3][314]	= settr(15614,0,316,1,0,"(1)", 0, 2, 0);
	trans[3][315]	= settr(15615,0,316,1,0,"goto T0_S331", 0, 2, 0);
	trans[3][318]	= settr(15618,0,328,1,0,"break", 0, 2, 0);
	trans[3][329]	= settr(15629,0,328,1,0,".(goto)", 0, 2, 0);
	T = trans[3][328] = settr(15628,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15628,0,319,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15628,0,323,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15628,0,324,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15628,0,326,0,0,"DO", 0, 2, 0);
	trans[3][319]	= settr(15619,0,130,749,0,"((!((states[0]==READY))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][320]	= settr(15620,0,130,1,0,"goto accept_S305", 0, 2, 0);
	T = trans[ 3][323] = settr(15623,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15623,2,321,0,0,"ATOMIC", 1, 2, 0);
	trans[3][321]	= settr(15621,0,328,750,750,"((!((states[0]==READY))&&!((states[0]==STARTING))))", 1, 2, 0); /* m: 322 -> 328,0 */
	reached3[322] = 1;
	trans[3][322]	= settr(0,0,0,0,0,"assert(!((!((states[0]==READY))&&!((states[0]==STARTING)))))",0,0,0);
	trans[3][324]	= settr(15624,0,328,751,0,"(!((states[0]==STARTING)))", 1, 2, 0);
	trans[3][325]	= settr(15625,0,328,1,0,"goto T0_S342", 0, 2, 0);
	trans[3][326]	= settr(15626,0,154,752,0,"((!((states[0]==READY))&&!((states[0]==STARTING))))", 1, 2, 0);
	trans[3][327]	= settr(15627,0,154,1,0,"goto accept_S331", 0, 2, 0);
	trans[3][330]	= settr(15630,0,331,1,0,"break", 0, 2, 0);
	trans[3][331]	= settr(15631,0,332,1,0,"(1)", 0, 2, 0);
	trans[3][332]	= settr(15632,0,0,753,753,"-end-", 0, 3500, 0);

	/* proctype 2: :init: */

	trans[2] = (Trans **) emalloc(373*sizeof(Trans *));

	T = trans[ 2][12] = settr(14940,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14940,0,11,0,0,"sub-sequence", 0, 2, 0);
/*->*/	trans[2][11]	= settr(14939,32,34,754,754,"D_STEP642", 1, 2, 0);
	T = trans[ 2][34] = settr(14962,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14962,0,33,0,0,"sub-sequence", 0, 2, 0);
/*->*/	trans[2][33]	= settr(14961,32,35,755,755,"D_STEP808", 1, 2, 0);
	trans[2][35]	= settr(14963,0,47,756,756,"i = 0", 0, 2, 0);
	T = trans[ 2][47] = settr(14975,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14975,0,46,0,0,"sub-sequence", 0, 2, 0);
/*->*/	trans[2][46]	= settr(14974,32,48,757,757,"D_STEP642", 1, 2, 0);
	trans[2][48]	= settr(14976,0,81,758,758,"printf('Init starts Supervisor...\\n')", 0, 2, 0);
	T = trans[ 2][81] = settr(15009,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15009,0,68,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 2][68] = settr(14996,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14996,2,66,0,0,"ATOMIC", 1, 2, 0);
	T = trans[2][66] = settr(14994,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14994,2,49,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14994,2,52,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14994,2,55,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14994,2,58,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14994,2,61,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14994,2,64,0,0,"IF", 1, 2, 0);
	trans[2][49]	= settr(14977,4,69,759,759,"(((START==START)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 50 -> 69,0 */
	reached2[50] = 1;
	trans[2][50]	= settr(0,0,0,0,0,"assert((states[0]==READY))",0,0,0);
	trans[2][51]	= settr(0,0,0,0,0,"commands[0] = START",0,0,0);
	trans[2][67]	= settr(14995,0,69,760,760,".(goto)", 1, 2, 0);
	trans[2][52]	= settr(14980,4,69,761,761,"(((START==PAUSE)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 53 -> 69,0 */
	reached2[53] = 1;
	trans[2][53]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==RUNNING)))",0,0,0);
	trans[2][54]	= settr(0,0,0,0,0,"commands[0] = PAUSE",0,0,0);
	trans[2][55]	= settr(14983,4,69,762,762,"(((START==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 56 -> 69,0 */
	reached2[56] = 1;
	trans[2][56]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==PAUSED)))",0,0,0);
	trans[2][57]	= settr(0,0,0,0,0,"commands[0] = CONTINUE",0,0,0);
	trans[2][58]	= settr(14986,4,69,763,763,"(((START==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 59 -> 69,0 */
	reached2[59] = 1;
	trans[2][59]	= settr(0,0,0,0,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))",0,0,0);
	trans[2][60]	= settr(0,0,0,0,0,"commands[0] = STOP",0,0,0);
	trans[2][61]	= settr(14989,4,69,764,764,"((START==ABORT))", 1, 2, 0); /* m: 62 -> 69,0 */
	reached2[62] = 1;
	trans[2][62]	= settr(0,0,0,0,0,"assert((states[0]!=READY))",0,0,0);
	trans[2][63]	= settr(0,0,0,0,0,"commands[0] = ABORT",0,0,0);
	trans[2][64]	= settr(14992,2,65,2,0,"else", 1, 2, 0);
	trans[2][65]	= settr(14993,4,69,765,765,"printf('Thread %d ignores command %e.\\n',0,commands[0])", 1, 2, 0); /* m: 67 -> 0,69 */
	reached2[67] = 1;
	trans[2][69]	= settr(14997,0,80,766,766,"(run Supervisor())", 0, 2, 0);
	T = trans[ 2][80] = settr(15008,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15008,0,76,0,0,"sub-sequence", 0, 2, 0);
	T = trans[2][76] = settr(15004,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15004,0,70,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15004,0,72,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15004,0,74,0,0,"IF", 0, 2, 0);
	trans[2][70]	= settr(14998,0,78,767,767,"((_pid==0))", 0, 2, 0); /* m: 71 -> 78,0 */
	reached2[71] = 1;
	trans[2][71]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',0)",0,0,0);
	trans[2][77]	= settr(15005,0,78,1,0,".(goto)", 0, 2, 0);
	trans[2][72]	= settr(15000,0,78,768,768,"((_pid==1))", 0, 2, 0); /* m: 73 -> 78,0 */
	reached2[73] = 1;
	trans[2][73]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',0)",0,0,0);
	trans[2][74]	= settr(15002,0,78,769,769,"((_pid>1))", 0, 2, 0); /* m: 75 -> 78,0 */
	reached2[75] = 1;
	trans[2][75]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),0)",0,0,0);
	trans[2][78]	= settr(15006,0,79,770,0,"(((((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))", 1, 2, 0);
	trans[2][79]	= settr(15007,0,247,771,0,"printf('waiiting ended.\\n')", 0, 2, 0);
	trans[2][248]	= settr(15176,0,247,1,0,".(goto)", 0, 2, 0);
	T = trans[2][247] = settr(15175,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(15175,0,244,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(15175,0,246,0,0,"DO", 0, 2, 0);
	T = trans[2][244] = settr(15172,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15172,0,82,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15172,0,162,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15172,0,242,0,0,"IF", 0, 2, 0);
	trans[2][82]	= settr(15010,0,83,772,0,"((states[0]==RUNNING))", 1, 2, 0);
	trans[2][83]	= settr(15011,0,160,773,0,"printf('Init pauses Supervisor...\\n')", 0, 2, 0);
	T = trans[2][160] = settr(15088,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15088,0,84,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15088,0,122,0,0,"IF", 0, 2, 0);
	trans[2][84]	= settr(15012,0,121,1,0,"(1)", 0, 2, 0);
	T = trans[ 2][121] = settr(15049,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15049,0,104,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 2][104] = settr(15032,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15032,2,102,0,0,"ATOMIC", 1, 2, 0);
	T = trans[2][102] = settr(15030,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15030,2,85,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15030,2,88,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15030,2,91,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15030,2,94,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15030,2,97,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(15030,2,100,0,0,"IF", 1, 2, 0);
	trans[2][85]	= settr(15013,4,119,774,774,"(((PAUSE==START)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 86 -> 119,0 */
	reached2[86] = 1;
	trans[2][86]	= settr(0,0,0,0,0,"assert((states[0]==READY))",0,0,0);
	trans[2][87]	= settr(0,0,0,0,0,"commands[0] = START",0,0,0);
	trans[2][103]	= settr(15031,0,119,775,775,".(goto)", 1, 2, 0);
	trans[2][88]	= settr(15016,4,119,776,776,"(((PAUSE==PAUSE)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 89 -> 119,0 */
	reached2[89] = 1;
	trans[2][89]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==RUNNING)))",0,0,0);
	trans[2][90]	= settr(0,0,0,0,0,"commands[0] = PAUSE",0,0,0);
	trans[2][91]	= settr(15019,4,119,777,777,"(((PAUSE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 92 -> 119,0 */
	reached2[92] = 1;
	trans[2][92]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==PAUSED)))",0,0,0);
	trans[2][93]	= settr(0,0,0,0,0,"commands[0] = CONTINUE",0,0,0);
	trans[2][94]	= settr(15022,4,119,778,778,"(((PAUSE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 95 -> 119,0 */
	reached2[95] = 1;
	trans[2][95]	= settr(0,0,0,0,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))",0,0,0);
	trans[2][96]	= settr(0,0,0,0,0,"commands[0] = STOP",0,0,0);
	trans[2][97]	= settr(15025,4,119,779,779,"((PAUSE==ABORT))", 1, 2, 0); /* m: 98 -> 119,0 */
	reached2[98] = 1;
	trans[2][98]	= settr(0,0,0,0,0,"assert((states[0]!=READY))",0,0,0);
	trans[2][99]	= settr(0,0,0,0,0,"commands[0] = ABORT",0,0,0);
	trans[2][100]	= settr(15028,2,101,2,0,"else", 1, 2, 0);
	trans[2][101]	= settr(15029,4,119,780,780,"printf('Thread %d ignores command %e.\\n',0,commands[0])", 1, 2, 0); /* m: 103 -> 0,119 */
	reached2[103] = 1;
	T = trans[2][119] = settr(15047,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15047,0,105,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15047,0,117,0,0,"IF", 0, 2, 0);
	trans[2][105]	= settr(15033,0,116,1,0,"(1)", 0, 2, 0);
	T = trans[ 2][116] = settr(15044,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15044,0,112,0,0,"sub-sequence", 0, 2, 0);
	T = trans[2][112] = settr(15040,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15040,0,106,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15040,0,108,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15040,0,110,0,0,"IF", 0, 2, 0);
	trans[2][106]	= settr(15034,0,114,781,781,"((_pid==0))", 0, 2, 0); /* m: 107 -> 114,0 */
	reached2[107] = 1;
	trans[2][107]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',0)",0,0,0);
	trans[2][113]	= settr(15041,0,114,1,0,".(goto)", 0, 2, 0);
	trans[2][108]	= settr(15036,0,114,782,782,"((_pid==1))", 0, 2, 0); /* m: 109 -> 114,0 */
	reached2[109] = 1;
	trans[2][109]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',0)",0,0,0);
	trans[2][110]	= settr(15038,0,114,783,783,"((_pid>1))", 0, 2, 0); /* m: 111 -> 114,0 */
	reached2[111] = 1;
	trans[2][111]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),0)",0,0,0);
	trans[2][114]	= settr(15042,0,115,784,0,"((((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))", 1, 2, 0);
	trans[2][115]	= settr(15043,0,247,785,0,"printf('waiiting ended.\\n')", 0, 2, 0);
	trans[2][120]	= settr(15048,0,247,1,0,".(goto)", 0, 2, 0);
	trans[2][117]	= settr(15045,0,118,2,0,"else", 0, 2, 0);
	trans[2][118]	= settr(15046,0,247,1,0,"(1)", 0, 2, 0);
	trans[2][161]	= settr(15089,0,247,1,0,".(goto)", 0, 2, 0);
	trans[2][122]	= settr(15050,0,159,1,0,"(1)", 0, 2, 0);
	T = trans[ 2][159] = settr(15087,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15087,0,142,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 2][142] = settr(15070,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15070,2,140,0,0,"ATOMIC", 1, 2, 0);
	T = trans[2][140] = settr(15068,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15068,2,123,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15068,2,126,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15068,2,129,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15068,2,132,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15068,2,135,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(15068,2,138,0,0,"IF", 1, 2, 0);
	trans[2][123]	= settr(15051,4,157,786,786,"(((PAUSE==START)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 124 -> 157,0 */
	reached2[124] = 1;
	trans[2][124]	= settr(0,0,0,0,0,"assert((states[0]==READY))",0,0,0);
	trans[2][125]	= settr(0,0,0,0,0,"commands[0] = START",0,0,0);
	trans[2][141]	= settr(15069,0,157,787,787,".(goto)", 1, 2, 0);
	trans[2][126]	= settr(15054,4,157,788,788,"(((PAUSE==PAUSE)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 127 -> 157,0 */
	reached2[127] = 1;
	trans[2][127]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==RUNNING)))",0,0,0);
	trans[2][128]	= settr(0,0,0,0,0,"commands[0] = PAUSE",0,0,0);
	trans[2][129]	= settr(15057,4,157,789,789,"(((PAUSE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 130 -> 157,0 */
	reached2[130] = 1;
	trans[2][130]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==PAUSED)))",0,0,0);
	trans[2][131]	= settr(0,0,0,0,0,"commands[0] = CONTINUE",0,0,0);
	trans[2][132]	= settr(15060,4,157,790,790,"(((PAUSE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 133 -> 157,0 */
	reached2[133] = 1;
	trans[2][133]	= settr(0,0,0,0,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))",0,0,0);
	trans[2][134]	= settr(0,0,0,0,0,"commands[0] = STOP",0,0,0);
	trans[2][135]	= settr(15063,4,157,791,791,"((PAUSE==ABORT))", 1, 2, 0); /* m: 136 -> 157,0 */
	reached2[136] = 1;
	trans[2][136]	= settr(0,0,0,0,0,"assert((states[0]!=READY))",0,0,0);
	trans[2][137]	= settr(0,0,0,0,0,"commands[0] = ABORT",0,0,0);
	trans[2][138]	= settr(15066,2,139,2,0,"else", 1, 2, 0);
	trans[2][139]	= settr(15067,4,157,792,792,"printf('Thread %d ignores command %e.\\n',0,commands[0])", 1, 2, 0); /* m: 141 -> 0,157 */
	reached2[141] = 1;
	T = trans[2][157] = settr(15085,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(15085,0,143,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(15085,0,155,0,0,"IF", 0, 2, 0);
	trans[2][143]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 2][154] = settr(15082,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15082,0,150,0,0,"sub-sequence", 0, 2, 0);
	T = trans[2][150] = settr(15078,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15078,0,144,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15078,0,146,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15078,0,148,0,0,"IF", 0, 2, 0);
	trans[2][144]	= settr(15072,0,152,793,793,"((_pid==0))", 0, 2, 0); /* m: 145 -> 152,0 */
	reached2[145] = 1;
	trans[2][145]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',0)",0,0,0);
	trans[2][151]	= settr(15079,0,152,1,0,".(goto)", 0, 2, 0);
	trans[2][146]	= settr(15074,0,152,794,794,"((_pid==1))", 0, 2, 0); /* m: 147 -> 152,0 */
	reached2[147] = 1;
	trans[2][147]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',0)",0,0,0);
	trans[2][148]	= settr(15076,0,152,795,795,"((_pid>1))", 0, 2, 0); /* m: 149 -> 152,0 */
	reached2[149] = 1;
	trans[2][149]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),0)",0,0,0);
	trans[2][152]	= settr(15080,0,153,796,0,"((((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))", 1, 2, 0);
	trans[2][153]	= settr(15081,0,247,797,0,"printf('waiiting ended.\\n')", 0, 2, 0);
	trans[2][158]	= settr(15086,0,247,1,0,".(goto)", 0, 2, 0);
	trans[2][155]	= settr(15083,0,156,2,0,"else", 0, 2, 0);
	trans[2][156]	= settr(15084,0,247,1,0,"(1)", 0, 2, 0);
	trans[2][245]	= settr(15173,0,247,1,0,".(goto)", 0, 2, 0);
	trans[2][162]	= settr(15090,0,163,798,0,"((states[0]==PAUSED))", 1, 2, 0);
	trans[2][163]	= settr(15091,0,240,799,0,"printf('Init resumes Supervisor...\\n')", 0, 2, 0);
	T = trans[2][240] = settr(15168,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15168,0,164,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15168,0,202,0,0,"IF", 0, 2, 0);
	trans[2][164]	= settr(15092,0,201,1,0,"(1)", 0, 2, 0);
	T = trans[ 2][201] = settr(15129,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15129,0,184,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 2][184] = settr(15112,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15112,2,182,0,0,"ATOMIC", 1, 2, 0);
	T = trans[2][182] = settr(15110,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15110,2,165,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15110,2,168,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15110,2,171,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15110,2,174,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15110,2,177,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(15110,2,180,0,0,"IF", 1, 2, 0);
	trans[2][165]	= settr(15093,4,199,800,800,"(((CONTINUE==START)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 166 -> 199,0 */
	reached2[166] = 1;
	trans[2][166]	= settr(0,0,0,0,0,"assert((states[0]==READY))",0,0,0);
	trans[2][167]	= settr(0,0,0,0,0,"commands[0] = START",0,0,0);
	trans[2][183]	= settr(15111,0,199,801,801,".(goto)", 1, 2, 0);
	trans[2][168]	= settr(15096,4,199,802,802,"(((CONTINUE==PAUSE)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 169 -> 199,0 */
	reached2[169] = 1;
	trans[2][169]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==RUNNING)))",0,0,0);
	trans[2][170]	= settr(0,0,0,0,0,"commands[0] = PAUSE",0,0,0);
	trans[2][171]	= settr(15099,4,199,803,803,"(((CONTINUE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 172 -> 199,0 */
	reached2[172] = 1;
	trans[2][172]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==PAUSED)))",0,0,0);
	trans[2][173]	= settr(0,0,0,0,0,"commands[0] = CONTINUE",0,0,0);
	trans[2][174]	= settr(15102,4,199,804,804,"(((CONTINUE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 175 -> 199,0 */
	reached2[175] = 1;
	trans[2][175]	= settr(0,0,0,0,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))",0,0,0);
	trans[2][176]	= settr(0,0,0,0,0,"commands[0] = STOP",0,0,0);
	trans[2][177]	= settr(15105,4,199,805,805,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 178 -> 199,0 */
	reached2[178] = 1;
	trans[2][178]	= settr(0,0,0,0,0,"assert((states[0]!=READY))",0,0,0);
	trans[2][179]	= settr(0,0,0,0,0,"commands[0] = ABORT",0,0,0);
	trans[2][180]	= settr(15108,2,181,2,0,"else", 1, 2, 0);
	trans[2][181]	= settr(15109,4,199,806,806,"printf('Thread %d ignores command %e.\\n',0,commands[0])", 1, 2, 0); /* m: 183 -> 0,199 */
	reached2[183] = 1;
	T = trans[2][199] = settr(15127,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15127,0,185,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15127,0,197,0,0,"IF", 0, 2, 0);
	trans[2][185]	= settr(15113,0,196,1,0,"(1)", 0, 2, 0);
	T = trans[ 2][196] = settr(15124,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15124,0,192,0,0,"sub-sequence", 0, 2, 0);
	T = trans[2][192] = settr(15120,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15120,0,186,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15120,0,188,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15120,0,190,0,0,"IF", 0, 2, 0);
	trans[2][186]	= settr(15114,0,194,807,807,"((_pid==0))", 0, 2, 0); /* m: 187 -> 194,0 */
	reached2[187] = 1;
	trans[2][187]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',0)",0,0,0);
	trans[2][193]	= settr(15121,0,194,1,0,".(goto)", 0, 2, 0);
	trans[2][188]	= settr(15116,0,194,808,808,"((_pid==1))", 0, 2, 0); /* m: 189 -> 194,0 */
	reached2[189] = 1;
	trans[2][189]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',0)",0,0,0);
	trans[2][190]	= settr(15118,0,194,809,809,"((_pid>1))", 0, 2, 0); /* m: 191 -> 194,0 */
	reached2[191] = 1;
	trans[2][191]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),0)",0,0,0);
	trans[2][194]	= settr(15122,0,195,810,0,"((((((states[0]==RUNNING)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))", 1, 2, 0);
	trans[2][195]	= settr(15123,0,247,811,0,"printf('waiiting ended.\\n')", 0, 2, 0);
	trans[2][200]	= settr(15128,0,247,1,0,".(goto)", 0, 2, 0);
	trans[2][197]	= settr(15125,0,198,2,0,"else", 0, 2, 0);
	trans[2][198]	= settr(15126,0,247,1,0,"(1)", 0, 2, 0);
	trans[2][241]	= settr(15169,0,247,1,0,".(goto)", 0, 2, 0);
	trans[2][202]	= settr(15130,0,239,1,0,"(1)", 0, 2, 0);
	T = trans[ 2][239] = settr(15167,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15167,0,222,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 2][222] = settr(15150,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15150,2,220,0,0,"ATOMIC", 1, 2, 0);
	T = trans[2][220] = settr(15148,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15148,2,203,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15148,2,206,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15148,2,209,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15148,2,212,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15148,2,215,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(15148,2,218,0,0,"IF", 1, 2, 0);
	trans[2][203]	= settr(15131,4,237,812,812,"(((CONTINUE==START)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 204 -> 237,0 */
	reached2[204] = 1;
	trans[2][204]	= settr(0,0,0,0,0,"assert((states[0]==READY))",0,0,0);
	trans[2][205]	= settr(0,0,0,0,0,"commands[0] = START",0,0,0);
	trans[2][221]	= settr(15149,0,237,813,813,".(goto)", 1, 2, 0);
	trans[2][206]	= settr(15134,4,237,814,814,"(((CONTINUE==PAUSE)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 207 -> 237,0 */
	reached2[207] = 1;
	trans[2][207]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==RUNNING)))",0,0,0);
	trans[2][208]	= settr(0,0,0,0,0,"commands[0] = PAUSE",0,0,0);
	trans[2][209]	= settr(15137,4,237,815,815,"(((CONTINUE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 210 -> 237,0 */
	reached2[210] = 1;
	trans[2][210]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==PAUSED)))",0,0,0);
	trans[2][211]	= settr(0,0,0,0,0,"commands[0] = CONTINUE",0,0,0);
	trans[2][212]	= settr(15140,4,237,816,816,"(((CONTINUE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 213 -> 237,0 */
	reached2[213] = 1;
	trans[2][213]	= settr(0,0,0,0,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))",0,0,0);
	trans[2][214]	= settr(0,0,0,0,0,"commands[0] = STOP",0,0,0);
	trans[2][215]	= settr(15143,4,237,817,817,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 216 -> 237,0 */
	reached2[216] = 1;
	trans[2][216]	= settr(0,0,0,0,0,"assert((states[0]!=READY))",0,0,0);
	trans[2][217]	= settr(0,0,0,0,0,"commands[0] = ABORT",0,0,0);
	trans[2][218]	= settr(15146,2,219,2,0,"else", 1, 2, 0);
	trans[2][219]	= settr(15147,4,237,818,818,"printf('Thread %d ignores command %e.\\n',0,commands[0])", 1, 2, 0); /* m: 221 -> 0,237 */
	reached2[221] = 1;
	T = trans[2][237] = settr(15165,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(15165,0,223,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(15165,0,235,0,0,"IF", 0, 2, 0);
	trans[2][223]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 2][234] = settr(15162,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15162,0,230,0,0,"sub-sequence", 0, 2, 0);
	T = trans[2][230] = settr(15158,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15158,0,224,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15158,0,226,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15158,0,228,0,0,"IF", 0, 2, 0);
	trans[2][224]	= settr(15152,0,232,819,819,"((_pid==0))", 0, 2, 0); /* m: 225 -> 232,0 */
	reached2[225] = 1;
	trans[2][225]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',0)",0,0,0);
	trans[2][231]	= settr(15159,0,232,1,0,".(goto)", 0, 2, 0);
	trans[2][226]	= settr(15154,0,232,820,820,"((_pid==1))", 0, 2, 0); /* m: 227 -> 232,0 */
	reached2[227] = 1;
	trans[2][227]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',0)",0,0,0);
	trans[2][228]	= settr(15156,0,232,821,821,"((_pid>1))", 0, 2, 0); /* m: 229 -> 232,0 */
	reached2[229] = 1;
	trans[2][229]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),0)",0,0,0);
	trans[2][232]	= settr(15160,0,233,822,0,"((((((states[0]==RUNNING)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))", 1, 2, 0);
	trans[2][233]	= settr(15161,0,247,823,0,"printf('waiiting ended.\\n')", 0, 2, 0);
	trans[2][238]	= settr(15166,0,247,1,0,".(goto)", 0, 2, 0);
	trans[2][235]	= settr(15163,0,236,2,0,"else", 0, 2, 0);
	trans[2][236]	= settr(15164,0,247,1,0,"(1)", 0, 2, 0);
	trans[2][242]	= settr(15170,0,243,1,0,"(1)", 0, 2, 0);
	trans[2][243]	= settr(15171,0,247,1,0,"(1)", 0, 2, 0);
	trans[2][246]	= settr(15174,0,331,1,0,"goto :b106", 0, 2, 0);
	trans[2][249]	= settr(15177,0,331,1,0,"break", 0, 2, 0);
	T = trans[2][331] = settr(15259,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15259,0,250,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15259,0,329,0,0,"IF", 0, 2, 0);
	trans[2][250]	= settr(15178,0,327,824,0,"printf('Init stops Supervisor...\\n')", 0, 2, 0);
	T = trans[2][327] = settr(15255,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15255,0,251,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15255,0,289,0,0,"IF", 0, 2, 0);
	trans[2][251]	= settr(15179,0,288,1,0,"(1)", 0, 2, 0);
	T = trans[ 2][288] = settr(15216,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15216,0,271,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 2][271] = settr(15199,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15199,2,269,0,0,"ATOMIC", 1, 2, 0);
	T = trans[2][269] = settr(15197,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15197,2,252,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15197,2,255,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15197,2,258,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15197,2,261,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15197,2,264,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(15197,2,267,0,0,"IF", 1, 2, 0);
	trans[2][252]	= settr(15180,4,286,825,825,"(((STOP==START)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 253 -> 286,0 */
	reached2[253] = 1;
	trans[2][253]	= settr(0,0,0,0,0,"assert((states[0]==READY))",0,0,0);
	trans[2][254]	= settr(0,0,0,0,0,"commands[0] = START",0,0,0);
	trans[2][270]	= settr(15198,0,286,826,826,".(goto)", 1, 2, 0);
	trans[2][255]	= settr(15183,4,286,827,827,"(((STOP==PAUSE)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 256 -> 286,0 */
	reached2[256] = 1;
	trans[2][256]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==RUNNING)))",0,0,0);
	trans[2][257]	= settr(0,0,0,0,0,"commands[0] = PAUSE",0,0,0);
	trans[2][258]	= settr(15186,4,286,828,828,"(((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 259 -> 286,0 */
	reached2[259] = 1;
	trans[2][259]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==PAUSED)))",0,0,0);
	trans[2][260]	= settr(0,0,0,0,0,"commands[0] = CONTINUE",0,0,0);
	trans[2][261]	= settr(15189,4,286,829,829,"(((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 262 -> 286,0 */
	reached2[262] = 1;
	trans[2][262]	= settr(0,0,0,0,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))",0,0,0);
	trans[2][263]	= settr(0,0,0,0,0,"commands[0] = STOP",0,0,0);
	trans[2][264]	= settr(15192,4,286,830,830,"((STOP==ABORT))", 1, 2, 0); /* m: 265 -> 286,0 */
	reached2[265] = 1;
	trans[2][265]	= settr(0,0,0,0,0,"assert((states[0]!=READY))",0,0,0);
	trans[2][266]	= settr(0,0,0,0,0,"commands[0] = ABORT",0,0,0);
	trans[2][267]	= settr(15195,2,268,2,0,"else", 1, 2, 0);
	trans[2][268]	= settr(15196,4,286,831,831,"printf('Thread %d ignores command %e.\\n',0,commands[0])", 1, 2, 0); /* m: 270 -> 0,286 */
	reached2[270] = 1;
	T = trans[2][286] = settr(15214,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15214,0,272,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15214,0,284,0,0,"IF", 0, 2, 0);
	trans[2][272]	= settr(15200,0,283,1,0,"(1)", 0, 2, 0);
	T = trans[ 2][283] = settr(15211,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15211,0,279,0,0,"sub-sequence", 0, 2, 0);
	T = trans[2][279] = settr(15207,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15207,0,273,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15207,0,275,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15207,0,277,0,0,"IF", 0, 2, 0);
	trans[2][273]	= settr(15201,0,281,832,832,"((_pid==0))", 0, 2, 0); /* m: 274 -> 281,0 */
	reached2[274] = 1;
	trans[2][274]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',0)",0,0,0);
	trans[2][280]	= settr(15208,0,281,1,0,".(goto)", 0, 2, 0);
	trans[2][275]	= settr(15203,0,281,833,833,"((_pid==1))", 0, 2, 0); /* m: 276 -> 281,0 */
	reached2[276] = 1;
	trans[2][276]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',0)",0,0,0);
	trans[2][277]	= settr(15205,0,281,834,834,"((_pid>1))", 0, 2, 0); /* m: 278 -> 281,0 */
	reached2[278] = 1;
	trans[2][278]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),0)",0,0,0);
	trans[2][281]	= settr(15209,0,282,835,0,"(((states[0]==STOPPED)||(states[0]==ABORTED)))", 1, 2, 0);
	trans[2][282]	= settr(15210,0,343,836,0,"printf('waiiting ended.\\n')", 0, 2, 0);
	trans[2][287]	= settr(15215,0,343,1,0,".(goto)", 0, 2, 0);
	trans[2][284]	= settr(15212,0,285,2,0,"else", 0, 2, 0);
	trans[2][285]	= settr(15213,0,343,1,0,"(1)", 0, 2, 0);
	trans[2][328]	= settr(15256,0,343,1,0,".(goto)", 0, 2, 0);
	trans[2][289]	= settr(15217,0,326,1,0,"(1)", 0, 2, 0);
	T = trans[ 2][326] = settr(15254,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15254,0,309,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 2][309] = settr(15237,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(15237,2,307,0,0,"ATOMIC", 1, 2, 0);
	T = trans[2][307] = settr(15235,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15235,2,290,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15235,2,293,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15235,2,296,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15235,2,299,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(15235,2,302,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(15235,2,305,0,0,"IF", 1, 2, 0);
	trans[2][290]	= settr(15218,4,324,837,837,"(((STOP==START)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 291 -> 324,0 */
	reached2[291] = 1;
	trans[2][291]	= settr(0,0,0,0,0,"assert((states[0]==READY))",0,0,0);
	trans[2][292]	= settr(0,0,0,0,0,"commands[0] = START",0,0,0);
	trans[2][308]	= settr(15236,0,324,838,838,".(goto)", 1, 2, 0);
	trans[2][293]	= settr(15221,4,324,839,839,"(((STOP==PAUSE)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 294 -> 324,0 */
	reached2[294] = 1;
	trans[2][294]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==RUNNING)))",0,0,0);
	trans[2][295]	= settr(0,0,0,0,0,"commands[0] = PAUSE",0,0,0);
	trans[2][296]	= settr(15224,4,324,840,840,"(((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 297 -> 324,0 */
	reached2[297] = 1;
	trans[2][297]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==PAUSED)))",0,0,0);
	trans[2][298]	= settr(0,0,0,0,0,"commands[0] = CONTINUE",0,0,0);
	trans[2][299]	= settr(15227,4,324,841,841,"(((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 300 -> 324,0 */
	reached2[300] = 1;
	trans[2][300]	= settr(0,0,0,0,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))",0,0,0);
	trans[2][301]	= settr(0,0,0,0,0,"commands[0] = STOP",0,0,0);
	trans[2][302]	= settr(15230,4,324,842,842,"((STOP==ABORT))", 1, 2, 0); /* m: 303 -> 324,0 */
	reached2[303] = 1;
	trans[2][303]	= settr(0,0,0,0,0,"assert((states[0]!=READY))",0,0,0);
	trans[2][304]	= settr(0,0,0,0,0,"commands[0] = ABORT",0,0,0);
	trans[2][305]	= settr(15233,2,306,2,0,"else", 1, 2, 0);
	trans[2][306]	= settr(15234,4,324,843,843,"printf('Thread %d ignores command %e.\\n',0,commands[0])", 1, 2, 0); /* m: 308 -> 0,324 */
	reached2[308] = 1;
	T = trans[2][324] = settr(15252,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(15252,0,310,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(15252,0,322,0,0,"IF", 0, 2, 0);
	trans[2][310]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 2][321] = settr(15249,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15249,0,317,0,0,"sub-sequence", 0, 2, 0);
	T = trans[2][317] = settr(15245,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15245,0,311,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15245,0,313,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15245,0,315,0,0,"IF", 0, 2, 0);
	trans[2][311]	= settr(15239,0,319,844,844,"((_pid==0))", 0, 2, 0); /* m: 312 -> 319,0 */
	reached2[312] = 1;
	trans[2][312]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',0)",0,0,0);
	trans[2][318]	= settr(15246,0,319,1,0,".(goto)", 0, 2, 0);
	trans[2][313]	= settr(15241,0,319,845,845,"((_pid==1))", 0, 2, 0); /* m: 314 -> 319,0 */
	reached2[314] = 1;
	trans[2][314]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',0)",0,0,0);
	trans[2][315]	= settr(15243,0,319,846,846,"((_pid>1))", 0, 2, 0); /* m: 316 -> 319,0 */
	reached2[316] = 1;
	trans[2][316]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),0)",0,0,0);
	trans[2][319]	= settr(15247,0,320,847,0,"(((states[0]==STOPPED)||(states[0]==ABORTED)))", 1, 2, 0);
	trans[2][320]	= settr(15248,0,343,848,0,"printf('waiiting ended.\\n')", 0, 2, 0);
	trans[2][325]	= settr(15253,0,343,1,0,".(goto)", 0, 2, 0);
	trans[2][322]	= settr(15250,0,323,2,0,"else", 0, 2, 0);
	trans[2][323]	= settr(15251,0,343,1,0,"(1)", 0, 2, 0);
	trans[2][332]	= settr(15260,0,343,1,0,".(goto)", 0, 2, 0);
	trans[2][329]	= settr(15257,0,330,1,0,"(1)", 0, 2, 0);
	trans[2][330]	= settr(15258,0,343,1,0,"(1)", 0, 2, 0);
	T = trans[ 2][343] = settr(15271,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15271,0,339,0,0,"sub-sequence", 0, 2, 0);
	T = trans[2][339] = settr(15267,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15267,0,333,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(15267,0,335,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(15267,0,337,0,0,"IF", 0, 2, 0);
	trans[2][333]	= settr(15261,0,341,849,849,"((_pid==0))", 0, 2, 0); /* m: 334 -> 341,0 */
	reached2[334] = 1;
	trans[2][334]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',0)",0,0,0);
	trans[2][340]	= settr(15268,0,341,1,0,".(goto)", 0, 2, 0);
	trans[2][335]	= settr(15263,0,341,850,850,"((_pid==1))", 0, 2, 0); /* m: 336 -> 341,0 */
	reached2[336] = 1;
	trans[2][336]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',0)",0,0,0);
	trans[2][337]	= settr(15265,0,341,851,851,"((_pid>1))", 0, 2, 0); /* m: 338 -> 341,0 */
	reached2[338] = 1;
	trans[2][338]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),0)",0,0,0);
	trans[2][341]	= settr(15269,0,342,852,0,"(((states[0]==STOPPED)||(states[0]==ABORTED)))", 1, 2, 0);
	trans[2][342]	= settr(15270,0,358,853,853,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 344 -> 0,358 */
	reached2[344] = 1;
	trans[2][344]	= settr(0,0,0,0,0,"i = 0",0,0,0);
	T = trans[ 2][358] = settr(15286,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15286,0,357,0,0,"sub-sequence", 0, 2, 0);
/*->*/	trans[2][357]	= settr(15285,32,359,854,854,"D_STEP828", 1, 2, 0);
	trans[2][359]	= settr(15287,0,371,855,855,"i = 0", 0, 2, 0);
	T = trans[ 2][371] = settr(15299,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(15299,0,370,0,0,"sub-sequence", 0, 2, 0);
/*->*/	trans[2][370]	= settr(15298,32,372,856,856,"D_STEP642", 1, 2, 0);
	trans[2][372]	= settr(15300,0,0,857,857,"-end-", 0, 3500, 0);

	/* proctype 1: Supervisor */

	trans[1] = (Trans **) emalloc(14622*sizeof(Trans *));

	trans[1][1]	= settr(308,0,1738,858,0,"((commands[0]==START))", 1, 2, 0);
	T = trans[ 1][1738] = settr(2045,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2045,0,12,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12] = settr(319,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(319,0,10,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10] = settr(317,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(317,0,2,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(317,0,4,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(317,0,6,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(317,0,8,0,0,"IF", 0, 2, 0);
	trans[1][2]	= settr(309,0,13,859,859,"(((0==0)&&(5==0)))", 0, 2, 0); /* m: 3 -> 13,0 */
	reached1[3] = 1;
	trans[1][3]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, _) -> %e\\n',1,2)",0,0,0);
	trans[1][11]	= settr(318,0,13,1,0,".(goto)", 0, 2, 0);
	trans[1][4]	= settr(311,0,13,860,860,"(((0==0)&&(5>0)))", 0, 2, 0); /* m: 5 -> 13,0 */
	reached1[5] = 1;
	trans[1][5]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, %e) -> %e\\n',1,5,2)",0,0,0);
	trans[1][6]	= settr(313,0,13,861,861,"(((0>0)&&(5==0)))", 0, 2, 0); /* m: 7 -> 13,0 */
	reached1[7] = 1;
	trans[1][7]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, _) -> %e\\n',0,1,2)",0,0,0);
	trans[1][8]	= settr(315,0,13,862,862,"(((0>0)&&(5>0)))", 0, 2, 0); /* m: 9 -> 13,0 */
	reached1[9] = 1;
	trans[1][9]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, %e) -> %e\\n',0,1,5,2)",0,0,0);
	trans[1][13]	= settr(320,0,1737,863,863,"states[0] = 2", 1, 2, 0);
	T = trans[ 1][1737] = settr(2044,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2044,0,1735,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1735] = settr(2042,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2042,0,14,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2042,0,587,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2042,0,1160,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2042,0,1733,0,0,"IF", 0, 2, 0);
	trans[1][14]	= settr(321,0,586,864,0,"((2==RUNNING))", 0, 2, 0);
	T = trans[ 1][586] = settr(893,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(893,0,584,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][584] = settr(891,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(891,0,15,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(891,0,18,0,0,"IF", 0, 2, 0);
	trans[1][15]	= settr(322,0,16,865,0,"(((6==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][16]	= settr(323,0,17,866,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][17]	= settr(324,0,1758,867,867,"supervisor_started = 1", 1, 2, 0);
	trans[1][585]	= settr(892,0,1758,1,0,".(goto)", 0, 2, 0);
	trans[1][18]	= settr(325,0,582,2,0,"else", 0, 2, 0);
	T = trans[1][582] = settr(889,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(889,0,19,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(889,0,356,0,0,"IF", 0, 2, 0);
	trans[1][19]	= settr(326,0,355,868,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][355] = settr(662,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(662,0,353,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][353] = settr(660,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(660,0,20,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(660,0,186,0,0,"IF", 0, 2, 0);
	trans[1][20]	= settr(327,0,185,869,0,"(((6==START)||(6==PAUSED)))", 0, 2, 0);
	T = trans[ 1][185] = settr(492,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(492,0,182,0,0,"sub-sequence", 0, 2, 0);
	trans[1][183]	= settr(490,0,182,1,0,".(goto)", 0, 2, 0);
	T = trans[1][182] = settr(489,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(489,0,21,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(489,0,179,0,0,"DO", 0, 2, 0);
	trans[1][21]	= settr(328,0,177,870,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][177] = settr(484,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(484,0,175,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][175] = settr(482,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(482,0,22,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(482,0,61,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(482,0,99,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(482,0,137,0,0,"IF", 0, 2, 0);
	trans[1][22]	= settr(329,0,60,871,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][60] = settr(367,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(367,0,42,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][42] = settr(349,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(349,2,40,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][40] = settr(347,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(347,2,23,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(347,2,26,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(347,2,29,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(347,2,32,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(347,2,35,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(347,2,38,0,0,"IF", 1, 2, 0);
	trans[1][23]	= settr(330,4,43,872,872,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 24 -> 43,0 */
	reached1[24] = 1;
	trans[1][24]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][25]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][41]	= settr(348,0,43,873,873,".(goto)", 1, 2, 0);
	trans[1][26]	= settr(333,4,43,874,874,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 27 -> 43,0 */
	reached1[27] = 1;
	trans[1][27]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][28]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][29]	= settr(336,4,43,875,875,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 30 -> 43,0 */
	reached1[30] = 1;
	trans[1][30]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][31]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][32]	= settr(339,4,43,876,876,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 33 -> 43,0 */
	reached1[33] = 1;
	trans[1][33]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][34]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][35]	= settr(342,4,43,877,877,"((START==ABORT))", 1, 2, 0); /* m: 36 -> 43,0 */
	reached1[36] = 1;
	trans[1][36]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][37]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][38]	= settr(345,2,39,2,0,"else", 1, 2, 0);
	trans[1][39]	= settr(346,4,43,878,878,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 41 -> 0,43 */
	reached1[41] = 1;
	trans[1][43]	= settr(350,0,58,879,879,"(run Thread(j))", 0, 2, 0);
	T = trans[1][58] = settr(365,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(365,0,44,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(365,0,56,0,0,"IF", 0, 2, 0);
	trans[1][44]	= settr(351,0,55,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][55] = settr(362,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(362,0,51,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][51] = settr(358,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(358,0,45,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(358,0,47,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(358,0,49,0,0,"IF", 0, 2, 0);
	trans[1][45]	= settr(352,0,53,880,880,"((_pid==0))", 0, 2, 0); /* m: 46 -> 53,0 */
	reached1[46] = 1;
	trans[1][46]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][52]	= settr(359,0,53,1,0,".(goto)", 0, 2, 0);
	trans[1][47]	= settr(354,0,53,881,881,"((_pid==1))", 0, 2, 0); /* m: 48 -> 53,0 */
	reached1[48] = 1;
	trans[1][48]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][49]	= settr(356,0,53,882,882,"((_pid>1))", 0, 2, 0); /* m: 50 -> 53,0 */
	reached1[50] = 1;
	trans[1][50]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][53]	= settr(360,0,54,883,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][54]	= settr(361,0,182,884,884,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 178 -> 0,182 */
	reached1[178] = 1;
	trans[1][59]	= settr(366,0,178,1,0,".(goto)", 0, 2, 0); /* m: 178 -> 0,182 */
	reached1[178] = 1;
	trans[1][56]	= settr(363,0,57,2,0,"else", 0, 2, 0);
	trans[1][57]	= settr(364,0,182,885,885,"(1)", 0, 2, 0); /* m: 178 -> 182,0 */
	reached1[178] = 1;
	trans[1][176]	= settr(483,0,178,1,0,".(goto)", 0, 2, 0); /* m: 178 -> 0,182 */
	reached1[178] = 1;
	trans[1][61]	= settr(368,0,98,886,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][98] = settr(405,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(405,0,81,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][81] = settr(388,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(388,2,79,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][79] = settr(386,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(386,2,62,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(386,2,65,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(386,2,68,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(386,2,71,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(386,2,74,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(386,2,77,0,0,"IF", 1, 2, 0);
	trans[1][62]	= settr(369,4,96,887,887,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 63 -> 96,0 */
	reached1[63] = 1;
	trans[1][63]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][64]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][80]	= settr(387,0,96,888,888,".(goto)", 1, 2, 0);
	trans[1][65]	= settr(372,4,96,889,889,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 66 -> 96,0 */
	reached1[66] = 1;
	trans[1][66]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][67]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][68]	= settr(375,4,96,890,890,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 69 -> 96,0 */
	reached1[69] = 1;
	trans[1][69]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][70]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][71]	= settr(378,4,96,891,891,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 72 -> 96,0 */
	reached1[72] = 1;
	trans[1][72]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][73]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][74]	= settr(381,4,96,892,892,"((PAUSE==ABORT))", 1, 2, 0); /* m: 75 -> 96,0 */
	reached1[75] = 1;
	trans[1][75]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][76]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][77]	= settr(384,2,78,2,0,"else", 1, 2, 0);
	trans[1][78]	= settr(385,4,96,893,893,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 80 -> 0,96 */
	reached1[80] = 1;
	T = trans[1][96] = settr(403,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(403,0,82,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(403,0,94,0,0,"IF", 0, 2, 0);
	trans[1][82]	= settr(389,0,93,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][93] = settr(400,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(400,0,89,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][89] = settr(396,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(396,0,83,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(396,0,85,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(396,0,87,0,0,"IF", 0, 2, 0);
	trans[1][83]	= settr(390,0,91,894,894,"((_pid==0))", 0, 2, 0); /* m: 84 -> 91,0 */
	reached1[84] = 1;
	trans[1][84]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][90]	= settr(397,0,91,1,0,".(goto)", 0, 2, 0);
	trans[1][85]	= settr(392,0,91,895,895,"((_pid==1))", 0, 2, 0); /* m: 86 -> 91,0 */
	reached1[86] = 1;
	trans[1][86]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][87]	= settr(394,0,91,896,896,"((_pid>1))", 0, 2, 0); /* m: 88 -> 91,0 */
	reached1[88] = 1;
	trans[1][88]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][91]	= settr(398,0,92,897,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][92]	= settr(399,0,182,898,898,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 178 -> 0,182 */
	reached1[178] = 1;
	trans[1][97]	= settr(404,0,178,1,0,".(goto)", 0, 2, 0); /* m: 178 -> 0,182 */
	reached1[178] = 1;
	trans[1][94]	= settr(401,0,95,2,0,"else", 0, 2, 0);
	trans[1][95]	= settr(402,0,182,899,899,"(1)", 0, 2, 0); /* m: 178 -> 182,0 */
	reached1[178] = 1;
	trans[1][99]	= settr(406,0,136,900,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][136] = settr(443,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(443,0,119,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][119] = settr(426,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(426,2,117,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][117] = settr(424,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(424,2,100,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(424,2,103,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(424,2,106,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(424,2,109,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(424,2,112,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(424,2,115,0,0,"IF", 1, 2, 0);
	trans[1][100]	= settr(407,4,134,901,901,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 101 -> 134,0 */
	reached1[101] = 1;
	trans[1][101]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][102]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][118]	= settr(425,0,134,902,902,".(goto)", 1, 2, 0);
	trans[1][103]	= settr(410,4,134,903,903,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 104 -> 134,0 */
	reached1[104] = 1;
	trans[1][104]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][105]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][106]	= settr(413,4,134,904,904,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 107 -> 134,0 */
	reached1[107] = 1;
	trans[1][107]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][108]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][109]	= settr(416,4,134,905,905,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 110 -> 134,0 */
	reached1[110] = 1;
	trans[1][110]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][111]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][112]	= settr(419,4,134,906,906,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 113 -> 134,0 */
	reached1[113] = 1;
	trans[1][113]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][114]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][115]	= settr(422,2,116,2,0,"else", 1, 2, 0);
	trans[1][116]	= settr(423,4,134,907,907,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 118 -> 0,134 */
	reached1[118] = 1;
	T = trans[1][134] = settr(441,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(441,0,120,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(441,0,132,0,0,"IF", 0, 2, 0);
	trans[1][120]	= settr(427,0,131,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][131] = settr(438,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(438,0,127,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][127] = settr(434,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(434,0,121,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(434,0,123,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(434,0,125,0,0,"IF", 0, 2, 0);
	trans[1][121]	= settr(428,0,129,908,908,"((_pid==0))", 0, 2, 0); /* m: 122 -> 129,0 */
	reached1[122] = 1;
	trans[1][122]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][128]	= settr(435,0,129,1,0,".(goto)", 0, 2, 0);
	trans[1][123]	= settr(430,0,129,909,909,"((_pid==1))", 0, 2, 0); /* m: 124 -> 129,0 */
	reached1[124] = 1;
	trans[1][124]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][125]	= settr(432,0,129,910,910,"((_pid>1))", 0, 2, 0); /* m: 126 -> 129,0 */
	reached1[126] = 1;
	trans[1][126]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][129]	= settr(436,0,130,911,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][130]	= settr(437,0,182,912,912,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 178 -> 0,182 */
	reached1[178] = 1;
	trans[1][135]	= settr(442,0,178,1,0,".(goto)", 0, 2, 0); /* m: 178 -> 0,182 */
	reached1[178] = 1;
	trans[1][132]	= settr(439,0,133,2,0,"else", 0, 2, 0);
	trans[1][133]	= settr(440,0,182,913,913,"(1)", 0, 2, 0); /* m: 178 -> 182,0 */
	reached1[178] = 1;
	trans[1][137]	= settr(444,0,174,914,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][174] = settr(481,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(481,0,157,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][157] = settr(464,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(464,2,155,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][155] = settr(462,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(462,2,138,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(462,2,141,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(462,2,144,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(462,2,147,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(462,2,150,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(462,2,153,0,0,"IF", 1, 2, 0);
	trans[1][138]	= settr(445,4,172,915,915,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 139 -> 172,0 */
	reached1[139] = 1;
	trans[1][139]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][140]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][156]	= settr(463,0,172,916,916,".(goto)", 1, 2, 0);
	trans[1][141]	= settr(448,4,172,917,917,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 142 -> 172,0 */
	reached1[142] = 1;
	trans[1][142]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][143]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][144]	= settr(451,4,172,918,918,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 145 -> 172,0 */
	reached1[145] = 1;
	trans[1][145]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][146]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][147]	= settr(454,4,172,919,919,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 148 -> 172,0 */
	reached1[148] = 1;
	trans[1][148]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][149]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][150]	= settr(457,4,172,920,920,"((STOP==ABORT))", 1, 2, 0); /* m: 151 -> 172,0 */
	reached1[151] = 1;
	trans[1][151]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][152]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][153]	= settr(460,2,154,2,0,"else", 1, 2, 0);
	trans[1][154]	= settr(461,4,172,921,921,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 156 -> 0,172 */
	reached1[156] = 1;
	T = trans[1][172] = settr(479,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(479,0,158,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(479,0,170,0,0,"IF", 0, 2, 0);
	trans[1][158]	= settr(465,0,169,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][169] = settr(476,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(476,0,165,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][165] = settr(472,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(472,0,159,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(472,0,161,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(472,0,163,0,0,"IF", 0, 2, 0);
	trans[1][159]	= settr(466,0,167,922,922,"((_pid==0))", 0, 2, 0); /* m: 160 -> 167,0 */
	reached1[160] = 1;
	trans[1][160]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][166]	= settr(473,0,167,1,0,".(goto)", 0, 2, 0);
	trans[1][161]	= settr(468,0,167,923,923,"((_pid==1))", 0, 2, 0); /* m: 162 -> 167,0 */
	reached1[162] = 1;
	trans[1][162]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][163]	= settr(470,0,167,924,924,"((_pid>1))", 0, 2, 0); /* m: 164 -> 167,0 */
	reached1[164] = 1;
	trans[1][164]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][167]	= settr(474,0,168,925,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][168]	= settr(475,0,182,926,926,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 178 -> 0,182 */
	reached1[178] = 1;
	trans[1][173]	= settr(480,0,178,1,0,".(goto)", 0, 2, 0); /* m: 178 -> 0,182 */
	reached1[178] = 1;
	trans[1][170]	= settr(477,0,171,2,0,"else", 0, 2, 0);
	trans[1][171]	= settr(478,0,182,927,927,"(1)", 0, 2, 0); /* m: 178 -> 182,0 */
	reached1[178] = 1;
	trans[1][178]	= settr(485,0,182,928,928,"j = (j+1)", 0, 2, 0);
	trans[1][179]	= settr(486,0,180,2,0,"else", 0, 2, 0);
	trans[1][180]	= settr(487,0,1758,929,929,"j = 1", 0, 2, 0);
	trans[1][181]	= settr(488,0,1758,1,0,"goto :b1", 0, 2, 0);
	trans[1][184]	= settr(491,0,1758,1,0,"break", 0, 2, 0);
	trans[1][354]	= settr(661,0,1758,1,0,".(goto)", 0, 2, 0);
	trans[1][186]	= settr(493,0,352,2,0,"else", 0, 2, 0);
	T = trans[ 1][352] = settr(659,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(659,0,187,0,0,"sub-sequence", 0, 2, 0);
	trans[1][187]	= settr(494,0,349,930,930,"j = (3-1)", 0, 2, 0);
	trans[1][350]	= settr(657,0,349,1,0,".(goto)", 0, 2, 0);
	T = trans[1][349] = settr(656,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(656,0,188,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(656,0,346,0,0,"DO", 0, 2, 0);
	trans[1][188]	= settr(495,0,344,931,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][344] = settr(651,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(651,0,342,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][342] = settr(649,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(649,0,189,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(649,0,228,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(649,0,266,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(649,0,304,0,0,"IF", 0, 2, 0);
	trans[1][189]	= settr(496,0,227,932,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][227] = settr(534,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(534,0,209,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][209] = settr(516,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(516,2,207,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][207] = settr(514,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(514,2,190,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(514,2,193,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(514,2,196,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(514,2,199,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(514,2,202,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(514,2,205,0,0,"IF", 1, 2, 0);
	trans[1][190]	= settr(497,4,210,933,933,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 191 -> 210,0 */
	reached1[191] = 1;
	trans[1][191]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][192]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][208]	= settr(515,0,210,934,934,".(goto)", 1, 2, 0);
	trans[1][193]	= settr(500,4,210,935,935,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 194 -> 210,0 */
	reached1[194] = 1;
	trans[1][194]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][195]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][196]	= settr(503,4,210,936,936,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 197 -> 210,0 */
	reached1[197] = 1;
	trans[1][197]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][198]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][199]	= settr(506,4,210,937,937,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 200 -> 210,0 */
	reached1[200] = 1;
	trans[1][200]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][201]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][202]	= settr(509,4,210,938,938,"((START==ABORT))", 1, 2, 0); /* m: 203 -> 210,0 */
	reached1[203] = 1;
	trans[1][203]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][204]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][205]	= settr(512,2,206,2,0,"else", 1, 2, 0);
	trans[1][206]	= settr(513,4,210,939,939,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 208 -> 0,210 */
	reached1[208] = 1;
	trans[1][210]	= settr(517,0,225,940,940,"(run Thread(j))", 0, 2, 0);
	T = trans[1][225] = settr(532,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(532,0,211,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(532,0,223,0,0,"IF", 0, 2, 0);
	trans[1][211]	= settr(518,0,222,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][222] = settr(529,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(529,0,218,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][218] = settr(525,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(525,0,212,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(525,0,214,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(525,0,216,0,0,"IF", 0, 2, 0);
	trans[1][212]	= settr(519,0,220,941,941,"((_pid==0))", 0, 2, 0); /* m: 213 -> 220,0 */
	reached1[213] = 1;
	trans[1][213]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][219]	= settr(526,0,220,1,0,".(goto)", 0, 2, 0);
	trans[1][214]	= settr(521,0,220,942,942,"((_pid==1))", 0, 2, 0); /* m: 215 -> 220,0 */
	reached1[215] = 1;
	trans[1][215]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][216]	= settr(523,0,220,943,943,"((_pid>1))", 0, 2, 0); /* m: 217 -> 220,0 */
	reached1[217] = 1;
	trans[1][217]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][220]	= settr(527,0,221,944,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][221]	= settr(528,0,349,945,945,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 345 -> 0,349 */
	reached1[345] = 1;
	trans[1][226]	= settr(533,0,345,1,0,".(goto)", 0, 2, 0); /* m: 345 -> 0,349 */
	reached1[345] = 1;
	trans[1][223]	= settr(530,0,224,2,0,"else", 0, 2, 0);
	trans[1][224]	= settr(531,0,349,946,946,"(1)", 0, 2, 0); /* m: 345 -> 349,0 */
	reached1[345] = 1;
	trans[1][343]	= settr(650,0,345,1,0,".(goto)", 0, 2, 0); /* m: 345 -> 0,349 */
	reached1[345] = 1;
	trans[1][228]	= settr(535,0,265,947,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][265] = settr(572,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(572,0,248,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][248] = settr(555,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(555,2,246,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][246] = settr(553,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(553,2,229,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(553,2,232,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(553,2,235,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(553,2,238,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(553,2,241,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(553,2,244,0,0,"IF", 1, 2, 0);
	trans[1][229]	= settr(536,4,263,948,948,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 230 -> 263,0 */
	reached1[230] = 1;
	trans[1][230]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][231]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][247]	= settr(554,0,263,949,949,".(goto)", 1, 2, 0);
	trans[1][232]	= settr(539,4,263,950,950,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 233 -> 263,0 */
	reached1[233] = 1;
	trans[1][233]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][234]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][235]	= settr(542,4,263,951,951,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 236 -> 263,0 */
	reached1[236] = 1;
	trans[1][236]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][237]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][238]	= settr(545,4,263,952,952,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 239 -> 263,0 */
	reached1[239] = 1;
	trans[1][239]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][240]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][241]	= settr(548,4,263,953,953,"((PAUSE==ABORT))", 1, 2, 0); /* m: 242 -> 263,0 */
	reached1[242] = 1;
	trans[1][242]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][243]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][244]	= settr(551,2,245,2,0,"else", 1, 2, 0);
	trans[1][245]	= settr(552,4,263,954,954,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 247 -> 0,263 */
	reached1[247] = 1;
	T = trans[1][263] = settr(570,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(570,0,249,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(570,0,261,0,0,"IF", 0, 2, 0);
	trans[1][249]	= settr(556,0,260,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][260] = settr(567,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(567,0,256,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][256] = settr(563,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(563,0,250,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(563,0,252,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(563,0,254,0,0,"IF", 0, 2, 0);
	trans[1][250]	= settr(557,0,258,955,955,"((_pid==0))", 0, 2, 0); /* m: 251 -> 258,0 */
	reached1[251] = 1;
	trans[1][251]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][257]	= settr(564,0,258,1,0,".(goto)", 0, 2, 0);
	trans[1][252]	= settr(559,0,258,956,956,"((_pid==1))", 0, 2, 0); /* m: 253 -> 258,0 */
	reached1[253] = 1;
	trans[1][253]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][254]	= settr(561,0,258,957,957,"((_pid>1))", 0, 2, 0); /* m: 255 -> 258,0 */
	reached1[255] = 1;
	trans[1][255]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][258]	= settr(565,0,259,958,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][259]	= settr(566,0,349,959,959,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 345 -> 0,349 */
	reached1[345] = 1;
	trans[1][264]	= settr(571,0,345,1,0,".(goto)", 0, 2, 0); /* m: 345 -> 0,349 */
	reached1[345] = 1;
	trans[1][261]	= settr(568,0,262,2,0,"else", 0, 2, 0);
	trans[1][262]	= settr(569,0,349,960,960,"(1)", 0, 2, 0); /* m: 345 -> 349,0 */
	reached1[345] = 1;
	trans[1][266]	= settr(573,0,303,961,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][303] = settr(610,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(610,0,286,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][286] = settr(593,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(593,2,284,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][284] = settr(591,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(591,2,267,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(591,2,270,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(591,2,273,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(591,2,276,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(591,2,279,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(591,2,282,0,0,"IF", 1, 2, 0);
	trans[1][267]	= settr(574,4,301,962,962,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 268 -> 301,0 */
	reached1[268] = 1;
	trans[1][268]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][269]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][285]	= settr(592,0,301,963,963,".(goto)", 1, 2, 0);
	trans[1][270]	= settr(577,4,301,964,964,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 271 -> 301,0 */
	reached1[271] = 1;
	trans[1][271]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][272]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][273]	= settr(580,4,301,965,965,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 274 -> 301,0 */
	reached1[274] = 1;
	trans[1][274]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][275]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][276]	= settr(583,4,301,966,966,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 277 -> 301,0 */
	reached1[277] = 1;
	trans[1][277]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][278]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][279]	= settr(586,4,301,967,967,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 280 -> 301,0 */
	reached1[280] = 1;
	trans[1][280]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][281]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][282]	= settr(589,2,283,2,0,"else", 1, 2, 0);
	trans[1][283]	= settr(590,4,301,968,968,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 285 -> 0,301 */
	reached1[285] = 1;
	T = trans[1][301] = settr(608,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(608,0,287,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(608,0,299,0,0,"IF", 0, 2, 0);
	trans[1][287]	= settr(594,0,298,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][298] = settr(605,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(605,0,294,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][294] = settr(601,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(601,0,288,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(601,0,290,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(601,0,292,0,0,"IF", 0, 2, 0);
	trans[1][288]	= settr(595,0,296,969,969,"((_pid==0))", 0, 2, 0); /* m: 289 -> 296,0 */
	reached1[289] = 1;
	trans[1][289]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][295]	= settr(602,0,296,1,0,".(goto)", 0, 2, 0);
	trans[1][290]	= settr(597,0,296,970,970,"((_pid==1))", 0, 2, 0); /* m: 291 -> 296,0 */
	reached1[291] = 1;
	trans[1][291]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][292]	= settr(599,0,296,971,971,"((_pid>1))", 0, 2, 0); /* m: 293 -> 296,0 */
	reached1[293] = 1;
	trans[1][293]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][296]	= settr(603,0,297,972,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][297]	= settr(604,0,349,973,973,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 345 -> 0,349 */
	reached1[345] = 1;
	trans[1][302]	= settr(609,0,345,1,0,".(goto)", 0, 2, 0); /* m: 345 -> 0,349 */
	reached1[345] = 1;
	trans[1][299]	= settr(606,0,300,2,0,"else", 0, 2, 0);
	trans[1][300]	= settr(607,0,349,974,974,"(1)", 0, 2, 0); /* m: 345 -> 349,0 */
	reached1[345] = 1;
	trans[1][304]	= settr(611,0,341,975,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][341] = settr(648,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(648,0,324,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][324] = settr(631,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(631,2,322,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][322] = settr(629,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(629,2,305,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(629,2,308,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(629,2,311,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(629,2,314,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(629,2,317,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(629,2,320,0,0,"IF", 1, 2, 0);
	trans[1][305]	= settr(612,4,339,976,976,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 306 -> 339,0 */
	reached1[306] = 1;
	trans[1][306]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][307]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][323]	= settr(630,0,339,977,977,".(goto)", 1, 2, 0);
	trans[1][308]	= settr(615,4,339,978,978,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 309 -> 339,0 */
	reached1[309] = 1;
	trans[1][309]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][310]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][311]	= settr(618,4,339,979,979,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 312 -> 339,0 */
	reached1[312] = 1;
	trans[1][312]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][313]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][314]	= settr(621,4,339,980,980,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 315 -> 339,0 */
	reached1[315] = 1;
	trans[1][315]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][316]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][317]	= settr(624,4,339,981,981,"((STOP==ABORT))", 1, 2, 0); /* m: 318 -> 339,0 */
	reached1[318] = 1;
	trans[1][318]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][319]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][320]	= settr(627,2,321,2,0,"else", 1, 2, 0);
	trans[1][321]	= settr(628,4,339,982,982,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 323 -> 0,339 */
	reached1[323] = 1;
	T = trans[1][339] = settr(646,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(646,0,325,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(646,0,337,0,0,"IF", 0, 2, 0);
	trans[1][325]	= settr(632,0,336,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][336] = settr(643,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(643,0,332,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][332] = settr(639,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(639,0,326,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(639,0,328,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(639,0,330,0,0,"IF", 0, 2, 0);
	trans[1][326]	= settr(633,0,334,983,983,"((_pid==0))", 0, 2, 0); /* m: 327 -> 334,0 */
	reached1[327] = 1;
	trans[1][327]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][333]	= settr(640,0,334,1,0,".(goto)", 0, 2, 0);
	trans[1][328]	= settr(635,0,334,984,984,"((_pid==1))", 0, 2, 0); /* m: 329 -> 334,0 */
	reached1[329] = 1;
	trans[1][329]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][330]	= settr(637,0,334,985,985,"((_pid>1))", 0, 2, 0); /* m: 331 -> 334,0 */
	reached1[331] = 1;
	trans[1][331]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][334]	= settr(641,0,335,986,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][335]	= settr(642,0,349,987,987,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 345 -> 0,349 */
	reached1[345] = 1;
	trans[1][340]	= settr(647,0,345,1,0,".(goto)", 0, 2, 0); /* m: 345 -> 0,349 */
	reached1[345] = 1;
	trans[1][337]	= settr(644,0,338,2,0,"else", 0, 2, 0);
	trans[1][338]	= settr(645,0,349,988,988,"(1)", 0, 2, 0); /* m: 345 -> 349,0 */
	reached1[345] = 1;
	trans[1][345]	= settr(652,0,349,989,989,"j = (j-1)", 0, 2, 0);
	trans[1][346]	= settr(653,0,347,2,0,"else", 0, 2, 0);
	trans[1][347]	= settr(654,0,1758,990,990,"j = 1", 0, 2, 0);
	trans[1][348]	= settr(655,0,1758,1,0,"goto :b2", 0, 2, 0);
	trans[1][351]	= settr(658,0,1758,1,0,"break", 0, 2, 0);
	trans[1][583]	= settr(890,0,1758,1,0,".(goto)", 0, 2, 0);
	trans[1][356]	= settr(663,0,581,2,0,"else", 0, 2, 0);
	T = trans[ 1][581] = settr(888,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(888,0,357,0,0,"sub-sequence", 0, 2, 0);
	trans[1][357]	= settr(664,0,522,991,0,"printf('Supervisor propagating command %e...\\n',6)", 0, 2, 0);
	T = trans[ 1][522] = settr(829,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(829,0,519,0,0,"sub-sequence", 0, 2, 0);
	trans[1][520]	= settr(827,0,519,1,0,".(goto)", 0, 2, 0);
	T = trans[1][519] = settr(826,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(826,0,358,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(826,0,516,0,0,"DO", 0, 2, 0);
	trans[1][358]	= settr(665,0,514,992,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][514] = settr(821,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(821,0,512,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][512] = settr(819,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(819,0,359,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(819,0,398,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(819,0,436,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(819,0,474,0,0,"IF", 0, 2, 0);
	trans[1][359]	= settr(666,0,397,993,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][397] = settr(704,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(704,0,379,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][379] = settr(686,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(686,2,377,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][377] = settr(684,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(684,2,360,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(684,2,363,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(684,2,366,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(684,2,369,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(684,2,372,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(684,2,375,0,0,"IF", 1, 2, 0);
	trans[1][360]	= settr(667,4,380,994,994,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 361 -> 380,0 */
	reached1[361] = 1;
	trans[1][361]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][362]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][378]	= settr(685,0,380,995,995,".(goto)", 1, 2, 0);
	trans[1][363]	= settr(670,4,380,996,996,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 364 -> 380,0 */
	reached1[364] = 1;
	trans[1][364]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][365]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][366]	= settr(673,4,380,997,997,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 367 -> 380,0 */
	reached1[367] = 1;
	trans[1][367]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][368]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][369]	= settr(676,4,380,998,998,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 370 -> 380,0 */
	reached1[370] = 1;
	trans[1][370]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][371]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][372]	= settr(679,4,380,999,999,"((START==ABORT))", 1, 2, 0); /* m: 373 -> 380,0 */
	reached1[373] = 1;
	trans[1][373]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][374]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][375]	= settr(682,2,376,2,0,"else", 1, 2, 0);
	trans[1][376]	= settr(683,4,380,1000,1000,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 378 -> 0,380 */
	reached1[378] = 1;
	trans[1][380]	= settr(687,0,395,1001,1001,"(run Thread(j))", 0, 2, 0);
	T = trans[1][395] = settr(702,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(702,0,381,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(702,0,393,0,0,"IF", 0, 2, 0);
	trans[1][381]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][392] = settr(699,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(699,0,388,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][388] = settr(695,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(695,0,382,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(695,0,384,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(695,0,386,0,0,"IF", 0, 2, 0);
	trans[1][382]	= settr(689,0,390,1002,1002,"((_pid==0))", 0, 2, 0); /* m: 383 -> 390,0 */
	reached1[383] = 1;
	trans[1][383]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][389]	= settr(696,0,390,1,0,".(goto)", 0, 2, 0);
	trans[1][384]	= settr(691,0,390,1003,1003,"((_pid==1))", 0, 2, 0); /* m: 385 -> 390,0 */
	reached1[385] = 1;
	trans[1][385]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][386]	= settr(693,0,390,1004,1004,"((_pid>1))", 0, 2, 0); /* m: 387 -> 390,0 */
	reached1[387] = 1;
	trans[1][387]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][390]	= settr(697,0,391,1005,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][391]	= settr(698,0,519,1006,1006,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 515 -> 0,519 */
	reached1[515] = 1;
	trans[1][396]	= settr(703,0,515,1,0,".(goto)", 0, 2, 0); /* m: 515 -> 0,519 */
	reached1[515] = 1;
	trans[1][393]	= settr(700,0,394,2,0,"else", 0, 2, 0);
	trans[1][394]	= settr(701,0,519,1007,1007,"(1)", 0, 2, 0); /* m: 515 -> 519,0 */
	reached1[515] = 1;
	trans[1][513]	= settr(820,0,515,1,0,".(goto)", 0, 2, 0); /* m: 515 -> 0,519 */
	reached1[515] = 1;
	trans[1][398]	= settr(705,0,435,1008,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][435] = settr(742,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(742,0,418,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][418] = settr(725,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(725,2,416,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][416] = settr(723,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(723,2,399,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(723,2,402,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(723,2,405,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(723,2,408,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(723,2,411,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(723,2,414,0,0,"IF", 1, 2, 0);
	trans[1][399]	= settr(706,4,433,1009,1009,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 400 -> 433,0 */
	reached1[400] = 1;
	trans[1][400]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][401]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][417]	= settr(724,0,433,1010,1010,".(goto)", 1, 2, 0);
	trans[1][402]	= settr(709,4,433,1011,1011,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 403 -> 433,0 */
	reached1[403] = 1;
	trans[1][403]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][404]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][405]	= settr(712,4,433,1012,1012,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 406 -> 433,0 */
	reached1[406] = 1;
	trans[1][406]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][407]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][408]	= settr(715,4,433,1013,1013,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 409 -> 433,0 */
	reached1[409] = 1;
	trans[1][409]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][410]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][411]	= settr(718,4,433,1014,1014,"((PAUSE==ABORT))", 1, 2, 0); /* m: 412 -> 433,0 */
	reached1[412] = 1;
	trans[1][412]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][413]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][414]	= settr(721,2,415,2,0,"else", 1, 2, 0);
	trans[1][415]	= settr(722,4,433,1015,1015,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 417 -> 0,433 */
	reached1[417] = 1;
	T = trans[1][433] = settr(740,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(740,0,419,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(740,0,431,0,0,"IF", 0, 2, 0);
	trans[1][419]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][430] = settr(737,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(737,0,426,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][426] = settr(733,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(733,0,420,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(733,0,422,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(733,0,424,0,0,"IF", 0, 2, 0);
	trans[1][420]	= settr(727,0,428,1016,1016,"((_pid==0))", 0, 2, 0); /* m: 421 -> 428,0 */
	reached1[421] = 1;
	trans[1][421]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][427]	= settr(734,0,428,1,0,".(goto)", 0, 2, 0);
	trans[1][422]	= settr(729,0,428,1017,1017,"((_pid==1))", 0, 2, 0); /* m: 423 -> 428,0 */
	reached1[423] = 1;
	trans[1][423]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][424]	= settr(731,0,428,1018,1018,"((_pid>1))", 0, 2, 0); /* m: 425 -> 428,0 */
	reached1[425] = 1;
	trans[1][425]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][428]	= settr(735,0,429,1019,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][429]	= settr(736,0,519,1020,1020,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 515 -> 0,519 */
	reached1[515] = 1;
	trans[1][434]	= settr(741,0,515,1,0,".(goto)", 0, 2, 0); /* m: 515 -> 0,519 */
	reached1[515] = 1;
	trans[1][431]	= settr(738,0,432,2,0,"else", 0, 2, 0);
	trans[1][432]	= settr(739,0,519,1021,1021,"(1)", 0, 2, 0); /* m: 515 -> 519,0 */
	reached1[515] = 1;
	trans[1][436]	= settr(743,0,473,1022,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][473] = settr(780,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(780,0,456,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][456] = settr(763,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(763,2,454,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][454] = settr(761,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(761,2,437,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(761,2,440,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(761,2,443,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(761,2,446,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(761,2,449,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(761,2,452,0,0,"IF", 1, 2, 0);
	trans[1][437]	= settr(744,4,471,1023,1023,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 438 -> 471,0 */
	reached1[438] = 1;
	trans[1][438]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][439]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][455]	= settr(762,0,471,1024,1024,".(goto)", 1, 2, 0);
	trans[1][440]	= settr(747,4,471,1025,1025,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 441 -> 471,0 */
	reached1[441] = 1;
	trans[1][441]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][442]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][443]	= settr(750,4,471,1026,1026,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 444 -> 471,0 */
	reached1[444] = 1;
	trans[1][444]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][445]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][446]	= settr(753,4,471,1027,1027,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 447 -> 471,0 */
	reached1[447] = 1;
	trans[1][447]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][448]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][449]	= settr(756,4,471,1028,1028,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 450 -> 471,0 */
	reached1[450] = 1;
	trans[1][450]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][451]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][452]	= settr(759,2,453,2,0,"else", 1, 2, 0);
	trans[1][453]	= settr(760,4,471,1029,1029,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 455 -> 0,471 */
	reached1[455] = 1;
	T = trans[1][471] = settr(778,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(778,0,457,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(778,0,469,0,0,"IF", 0, 2, 0);
	trans[1][457]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][468] = settr(775,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(775,0,464,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][464] = settr(771,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(771,0,458,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(771,0,460,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(771,0,462,0,0,"IF", 0, 2, 0);
	trans[1][458]	= settr(765,0,466,1030,1030,"((_pid==0))", 0, 2, 0); /* m: 459 -> 466,0 */
	reached1[459] = 1;
	trans[1][459]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][465]	= settr(772,0,466,1,0,".(goto)", 0, 2, 0);
	trans[1][460]	= settr(767,0,466,1031,1031,"((_pid==1))", 0, 2, 0); /* m: 461 -> 466,0 */
	reached1[461] = 1;
	trans[1][461]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][462]	= settr(769,0,466,1032,1032,"((_pid>1))", 0, 2, 0); /* m: 463 -> 466,0 */
	reached1[463] = 1;
	trans[1][463]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][466]	= settr(773,0,467,1033,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][467]	= settr(774,0,519,1034,1034,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 515 -> 0,519 */
	reached1[515] = 1;
	trans[1][472]	= settr(779,0,515,1,0,".(goto)", 0, 2, 0); /* m: 515 -> 0,519 */
	reached1[515] = 1;
	trans[1][469]	= settr(776,0,470,2,0,"else", 0, 2, 0);
	trans[1][470]	= settr(777,0,519,1035,1035,"(1)", 0, 2, 0); /* m: 515 -> 519,0 */
	reached1[515] = 1;
	trans[1][474]	= settr(781,0,511,1036,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][511] = settr(818,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(818,0,494,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][494] = settr(801,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(801,2,492,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][492] = settr(799,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(799,2,475,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(799,2,478,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(799,2,481,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(799,2,484,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(799,2,487,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(799,2,490,0,0,"IF", 1, 2, 0);
	trans[1][475]	= settr(782,4,509,1037,1037,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 476 -> 509,0 */
	reached1[476] = 1;
	trans[1][476]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][477]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][493]	= settr(800,0,509,1038,1038,".(goto)", 1, 2, 0);
	trans[1][478]	= settr(785,4,509,1039,1039,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 479 -> 509,0 */
	reached1[479] = 1;
	trans[1][479]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][480]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][481]	= settr(788,4,509,1040,1040,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 482 -> 509,0 */
	reached1[482] = 1;
	trans[1][482]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][483]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][484]	= settr(791,4,509,1041,1041,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 485 -> 509,0 */
	reached1[485] = 1;
	trans[1][485]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][486]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][487]	= settr(794,4,509,1042,1042,"((STOP==ABORT))", 1, 2, 0); /* m: 488 -> 509,0 */
	reached1[488] = 1;
	trans[1][488]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][489]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][490]	= settr(797,2,491,2,0,"else", 1, 2, 0);
	trans[1][491]	= settr(798,4,509,1043,1043,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 493 -> 0,509 */
	reached1[493] = 1;
	T = trans[1][509] = settr(816,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(816,0,495,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(816,0,507,0,0,"IF", 0, 2, 0);
	trans[1][495]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][506] = settr(813,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(813,0,502,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][502] = settr(809,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(809,0,496,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(809,0,498,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(809,0,500,0,0,"IF", 0, 2, 0);
	trans[1][496]	= settr(803,0,504,1044,1044,"((_pid==0))", 0, 2, 0); /* m: 497 -> 504,0 */
	reached1[497] = 1;
	trans[1][497]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][503]	= settr(810,0,504,1,0,".(goto)", 0, 2, 0);
	trans[1][498]	= settr(805,0,504,1045,1045,"((_pid==1))", 0, 2, 0); /* m: 499 -> 504,0 */
	reached1[499] = 1;
	trans[1][499]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][500]	= settr(807,0,504,1046,1046,"((_pid>1))", 0, 2, 0); /* m: 501 -> 504,0 */
	reached1[501] = 1;
	trans[1][501]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][504]	= settr(811,0,505,1047,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][505]	= settr(812,0,519,1048,1048,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 515 -> 0,519 */
	reached1[515] = 1;
	trans[1][510]	= settr(817,0,515,1,0,".(goto)", 0, 2, 0); /* m: 515 -> 0,519 */
	reached1[515] = 1;
	trans[1][507]	= settr(814,0,508,2,0,"else", 0, 2, 0);
	trans[1][508]	= settr(815,0,519,1049,1049,"(1)", 0, 2, 0); /* m: 515 -> 519,0 */
	reached1[515] = 1;
	trans[1][515]	= settr(822,0,519,1050,1050,"j = (j+1)", 0, 2, 0);
	trans[1][516]	= settr(823,0,517,2,0,"else", 0, 2, 0);
	trans[1][517]	= settr(824,0,578,1051,1051,"j = 1", 0, 2, 0);
	trans[1][518]	= settr(825,0,578,1,0,"goto :b3", 0, 2, 0);
	trans[1][521]	= settr(828,0,578,1,0,"break", 0, 2, 0);
	trans[1][579]	= settr(886,0,578,1,0,".(goto)", 0, 2, 0);
	T = trans[1][578] = settr(885,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(885,0,523,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(885,0,575,0,0,"DO", 0, 2, 0);
	trans[1][523]	= settr(830,0,572,1052,0,"((j<3))", 0, 2, 0);
	T = trans[1][572] = settr(879,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(879,0,524,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(879,0,536,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(879,0,548,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(879,0,560,0,0,"IF", 0, 2, 0);
	trans[1][524]	= settr(831,0,535,1053,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][535] = settr(842,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(842,0,531,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][531] = settr(838,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(838,0,525,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(838,0,527,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(838,0,529,0,0,"IF", 0, 2, 0);
	trans[1][525]	= settr(832,0,533,1054,1054,"((_pid==0))", 0, 2, 0); /* m: 526 -> 533,0 */
	reached1[526] = 1;
	trans[1][526]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][532]	= settr(839,0,533,1,0,".(goto)", 0, 2, 0);
	trans[1][527]	= settr(834,0,533,1055,1055,"((_pid==1))", 0, 2, 0); /* m: 528 -> 533,0 */
	reached1[528] = 1;
	trans[1][528]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][529]	= settr(836,0,533,1056,1056,"((_pid>1))", 0, 2, 0); /* m: 530 -> 533,0 */
	reached1[530] = 1;
	trans[1][530]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][533]	= settr(840,0,534,1057,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][534]	= settr(841,0,578,1058,1058,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 574 -> 0,578 */
	reached1[574] = 1;
	trans[1][573]	= settr(880,0,574,1,0,".(goto)", 0, 2, 0); /* m: 574 -> 0,578 */
	reached1[574] = 1;
	trans[1][536]	= settr(843,0,547,1059,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][547] = settr(854,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(854,0,543,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][543] = settr(850,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(850,0,537,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(850,0,539,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(850,0,541,0,0,"IF", 0, 2, 0);
	trans[1][537]	= settr(844,0,545,1060,1060,"((_pid==0))", 0, 2, 0); /* m: 538 -> 545,0 */
	reached1[538] = 1;
	trans[1][538]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][544]	= settr(851,0,545,1,0,".(goto)", 0, 2, 0);
	trans[1][539]	= settr(846,0,545,1061,1061,"((_pid==1))", 0, 2, 0); /* m: 540 -> 545,0 */
	reached1[540] = 1;
	trans[1][540]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][541]	= settr(848,0,545,1062,1062,"((_pid>1))", 0, 2, 0); /* m: 542 -> 545,0 */
	reached1[542] = 1;
	trans[1][542]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][545]	= settr(852,0,546,1063,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][546]	= settr(853,0,578,1064,1064,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 574 -> 0,578 */
	reached1[574] = 1;
	trans[1][548]	= settr(855,0,559,1065,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][559] = settr(866,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(866,0,555,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][555] = settr(862,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(862,0,549,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(862,0,551,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(862,0,553,0,0,"IF", 0, 2, 0);
	trans[1][549]	= settr(856,0,557,1066,1066,"((_pid==0))", 0, 2, 0); /* m: 550 -> 557,0 */
	reached1[550] = 1;
	trans[1][550]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][556]	= settr(863,0,557,1,0,".(goto)", 0, 2, 0);
	trans[1][551]	= settr(858,0,557,1067,1067,"((_pid==1))", 0, 2, 0); /* m: 552 -> 557,0 */
	reached1[552] = 1;
	trans[1][552]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][553]	= settr(860,0,557,1068,1068,"((_pid>1))", 0, 2, 0); /* m: 554 -> 557,0 */
	reached1[554] = 1;
	trans[1][554]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][557]	= settr(864,0,558,1069,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][558]	= settr(865,0,578,1070,1070,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 574 -> 0,578 */
	reached1[574] = 1;
	trans[1][560]	= settr(867,0,571,1071,0,"((6==STOP))", 0, 2, 0);
	T = trans[ 1][571] = settr(878,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(878,0,567,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][567] = settr(874,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(874,0,561,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(874,0,563,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(874,0,565,0,0,"IF", 0, 2, 0);
	trans[1][561]	= settr(868,0,569,1072,1072,"((_pid==0))", 0, 2, 0); /* m: 562 -> 569,0 */
	reached1[562] = 1;
	trans[1][562]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][568]	= settr(875,0,569,1,0,".(goto)", 0, 2, 0);
	trans[1][563]	= settr(870,0,569,1073,1073,"((_pid==1))", 0, 2, 0); /* m: 564 -> 569,0 */
	reached1[564] = 1;
	trans[1][564]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][565]	= settr(872,0,569,1074,1074,"((_pid>1))", 0, 2, 0); /* m: 566 -> 569,0 */
	reached1[566] = 1;
	trans[1][566]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][569]	= settr(876,0,570,1075,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][570]	= settr(877,0,578,1076,1076,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 574 -> 0,578 */
	reached1[574] = 1;
	trans[1][574]	= settr(881,0,578,1077,1077,"j = (j+1)", 0, 2, 0);
	trans[1][575]	= settr(882,0,576,2,0,"else", 0, 2, 0);
	trans[1][576]	= settr(883,0,1758,1078,1078,"j = 1", 0, 2, 0);
	trans[1][577]	= settr(884,0,1758,1,0,"goto :b4", 0, 2, 0);
	trans[1][580]	= settr(887,0,1758,1,0,"break", 0, 2, 0);
	trans[1][1736]	= settr(2043,0,1758,1,0,".(goto)", 0, 2, 0);
	trans[1][587]	= settr(894,0,1159,1079,0,"((2==PAUSED))", 0, 2, 0);
	T = trans[ 1][1159] = settr(1466,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1466,0,1157,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1157] = settr(1464,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1464,0,588,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1464,0,591,0,0,"IF", 0, 2, 0);
	trans[1][588]	= settr(895,0,589,1080,0,"(((8==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][589]	= settr(896,0,590,1081,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][590]	= settr(897,0,1758,1082,1082,"supervisor_started = 1", 1, 2, 0);
	trans[1][1158]	= settr(1465,0,1758,1,0,".(goto)", 0, 2, 0);
	trans[1][591]	= settr(898,0,1155,2,0,"else", 0, 2, 0);
	T = trans[1][1155] = settr(1462,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1462,0,592,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1462,0,929,0,0,"IF", 0, 2, 0);
	trans[1][592]	= settr(899,0,928,1083,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][928] = settr(1235,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1235,0,926,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][926] = settr(1233,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1233,0,593,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1233,0,759,0,0,"IF", 0, 2, 0);
	trans[1][593]	= settr(900,0,758,1084,0,"(((8==START)||(8==PAUSED)))", 0, 2, 0);
	T = trans[ 1][758] = settr(1065,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1065,0,755,0,0,"sub-sequence", 0, 2, 0);
	trans[1][756]	= settr(1063,0,755,1,0,".(goto)", 0, 2, 0);
	T = trans[1][755] = settr(1062,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1062,0,594,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1062,0,752,0,0,"DO", 0, 2, 0);
	trans[1][594]	= settr(901,0,750,1085,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][750] = settr(1057,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1057,0,748,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][748] = settr(1055,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1055,0,595,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1055,0,634,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1055,0,672,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1055,0,710,0,0,"IF", 0, 2, 0);
	trans[1][595]	= settr(902,0,633,1086,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][633] = settr(940,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(940,0,615,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][615] = settr(922,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(922,2,613,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][613] = settr(920,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(920,2,596,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(920,2,599,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(920,2,602,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(920,2,605,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(920,2,608,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(920,2,611,0,0,"IF", 1, 2, 0);
	trans[1][596]	= settr(903,4,616,1087,1087,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 597 -> 616,0 */
	reached1[597] = 1;
	trans[1][597]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][598]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][614]	= settr(921,0,616,1088,1088,".(goto)", 1, 2, 0);
	trans[1][599]	= settr(906,4,616,1089,1089,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 600 -> 616,0 */
	reached1[600] = 1;
	trans[1][600]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][601]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][602]	= settr(909,4,616,1090,1090,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 603 -> 616,0 */
	reached1[603] = 1;
	trans[1][603]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][604]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][605]	= settr(912,4,616,1091,1091,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 606 -> 616,0 */
	reached1[606] = 1;
	trans[1][606]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][607]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][608]	= settr(915,4,616,1092,1092,"((START==ABORT))", 1, 2, 0); /* m: 609 -> 616,0 */
	reached1[609] = 1;
	trans[1][609]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][610]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][611]	= settr(918,2,612,2,0,"else", 1, 2, 0);
	trans[1][612]	= settr(919,4,616,1093,1093,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 614 -> 0,616 */
	reached1[614] = 1;
	trans[1][616]	= settr(923,0,631,1094,1094,"(run Thread(j))", 0, 2, 0);
	T = trans[1][631] = settr(938,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(938,0,617,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(938,0,629,0,0,"IF", 0, 2, 0);
	trans[1][617]	= settr(924,0,628,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][628] = settr(935,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(935,0,624,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][624] = settr(931,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(931,0,618,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(931,0,620,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(931,0,622,0,0,"IF", 0, 2, 0);
	trans[1][618]	= settr(925,0,626,1095,1095,"((_pid==0))", 0, 2, 0); /* m: 619 -> 626,0 */
	reached1[619] = 1;
	trans[1][619]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][625]	= settr(932,0,626,1,0,".(goto)", 0, 2, 0);
	trans[1][620]	= settr(927,0,626,1096,1096,"((_pid==1))", 0, 2, 0); /* m: 621 -> 626,0 */
	reached1[621] = 1;
	trans[1][621]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][622]	= settr(929,0,626,1097,1097,"((_pid>1))", 0, 2, 0); /* m: 623 -> 626,0 */
	reached1[623] = 1;
	trans[1][623]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][626]	= settr(933,0,627,1098,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][627]	= settr(934,0,755,1099,1099,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 751 -> 0,755 */
	reached1[751] = 1;
	trans[1][632]	= settr(939,0,751,1,0,".(goto)", 0, 2, 0); /* m: 751 -> 0,755 */
	reached1[751] = 1;
	trans[1][629]	= settr(936,0,630,2,0,"else", 0, 2, 0);
	trans[1][630]	= settr(937,0,755,1100,1100,"(1)", 0, 2, 0); /* m: 751 -> 755,0 */
	reached1[751] = 1;
	trans[1][749]	= settr(1056,0,751,1,0,".(goto)", 0, 2, 0); /* m: 751 -> 0,755 */
	reached1[751] = 1;
	trans[1][634]	= settr(941,0,671,1101,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][671] = settr(978,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(978,0,654,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][654] = settr(961,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(961,2,652,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][652] = settr(959,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(959,2,635,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(959,2,638,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(959,2,641,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(959,2,644,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(959,2,647,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(959,2,650,0,0,"IF", 1, 2, 0);
	trans[1][635]	= settr(942,4,669,1102,1102,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 636 -> 669,0 */
	reached1[636] = 1;
	trans[1][636]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][637]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][653]	= settr(960,0,669,1103,1103,".(goto)", 1, 2, 0);
	trans[1][638]	= settr(945,4,669,1104,1104,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 639 -> 669,0 */
	reached1[639] = 1;
	trans[1][639]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][640]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][641]	= settr(948,4,669,1105,1105,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 642 -> 669,0 */
	reached1[642] = 1;
	trans[1][642]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][643]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][644]	= settr(951,4,669,1106,1106,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 645 -> 669,0 */
	reached1[645] = 1;
	trans[1][645]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][646]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][647]	= settr(954,4,669,1107,1107,"((PAUSE==ABORT))", 1, 2, 0); /* m: 648 -> 669,0 */
	reached1[648] = 1;
	trans[1][648]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][649]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][650]	= settr(957,2,651,2,0,"else", 1, 2, 0);
	trans[1][651]	= settr(958,4,669,1108,1108,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 653 -> 0,669 */
	reached1[653] = 1;
	T = trans[1][669] = settr(976,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(976,0,655,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(976,0,667,0,0,"IF", 0, 2, 0);
	trans[1][655]	= settr(962,0,666,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][666] = settr(973,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(973,0,662,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][662] = settr(969,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(969,0,656,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(969,0,658,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(969,0,660,0,0,"IF", 0, 2, 0);
	trans[1][656]	= settr(963,0,664,1109,1109,"((_pid==0))", 0, 2, 0); /* m: 657 -> 664,0 */
	reached1[657] = 1;
	trans[1][657]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][663]	= settr(970,0,664,1,0,".(goto)", 0, 2, 0);
	trans[1][658]	= settr(965,0,664,1110,1110,"((_pid==1))", 0, 2, 0); /* m: 659 -> 664,0 */
	reached1[659] = 1;
	trans[1][659]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][660]	= settr(967,0,664,1111,1111,"((_pid>1))", 0, 2, 0); /* m: 661 -> 664,0 */
	reached1[661] = 1;
	trans[1][661]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][664]	= settr(971,0,665,1112,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][665]	= settr(972,0,755,1113,1113,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 751 -> 0,755 */
	reached1[751] = 1;
	trans[1][670]	= settr(977,0,751,1,0,".(goto)", 0, 2, 0); /* m: 751 -> 0,755 */
	reached1[751] = 1;
	trans[1][667]	= settr(974,0,668,2,0,"else", 0, 2, 0);
	trans[1][668]	= settr(975,0,755,1114,1114,"(1)", 0, 2, 0); /* m: 751 -> 755,0 */
	reached1[751] = 1;
	trans[1][672]	= settr(979,0,709,1115,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][709] = settr(1016,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1016,0,692,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][692] = settr(999,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(999,2,690,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][690] = settr(997,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(997,2,673,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(997,2,676,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(997,2,679,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(997,2,682,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(997,2,685,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(997,2,688,0,0,"IF", 1, 2, 0);
	trans[1][673]	= settr(980,4,707,1116,1116,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 674 -> 707,0 */
	reached1[674] = 1;
	trans[1][674]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][675]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][691]	= settr(998,0,707,1117,1117,".(goto)", 1, 2, 0);
	trans[1][676]	= settr(983,4,707,1118,1118,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 677 -> 707,0 */
	reached1[677] = 1;
	trans[1][677]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][678]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][679]	= settr(986,4,707,1119,1119,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 680 -> 707,0 */
	reached1[680] = 1;
	trans[1][680]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][681]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][682]	= settr(989,4,707,1120,1120,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 683 -> 707,0 */
	reached1[683] = 1;
	trans[1][683]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][684]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][685]	= settr(992,4,707,1121,1121,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 686 -> 707,0 */
	reached1[686] = 1;
	trans[1][686]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][687]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][688]	= settr(995,2,689,2,0,"else", 1, 2, 0);
	trans[1][689]	= settr(996,4,707,1122,1122,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 691 -> 0,707 */
	reached1[691] = 1;
	T = trans[1][707] = settr(1014,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1014,0,693,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1014,0,705,0,0,"IF", 0, 2, 0);
	trans[1][693]	= settr(1000,0,704,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][704] = settr(1011,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1011,0,700,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][700] = settr(1007,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1007,0,694,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1007,0,696,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1007,0,698,0,0,"IF", 0, 2, 0);
	trans[1][694]	= settr(1001,0,702,1123,1123,"((_pid==0))", 0, 2, 0); /* m: 695 -> 702,0 */
	reached1[695] = 1;
	trans[1][695]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][701]	= settr(1008,0,702,1,0,".(goto)", 0, 2, 0);
	trans[1][696]	= settr(1003,0,702,1124,1124,"((_pid==1))", 0, 2, 0); /* m: 697 -> 702,0 */
	reached1[697] = 1;
	trans[1][697]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][698]	= settr(1005,0,702,1125,1125,"((_pid>1))", 0, 2, 0); /* m: 699 -> 702,0 */
	reached1[699] = 1;
	trans[1][699]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][702]	= settr(1009,0,703,1126,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][703]	= settr(1010,0,755,1127,1127,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 751 -> 0,755 */
	reached1[751] = 1;
	trans[1][708]	= settr(1015,0,751,1,0,".(goto)", 0, 2, 0); /* m: 751 -> 0,755 */
	reached1[751] = 1;
	trans[1][705]	= settr(1012,0,706,2,0,"else", 0, 2, 0);
	trans[1][706]	= settr(1013,0,755,1128,1128,"(1)", 0, 2, 0); /* m: 751 -> 755,0 */
	reached1[751] = 1;
	trans[1][710]	= settr(1017,0,747,1129,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][747] = settr(1054,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1054,0,730,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][730] = settr(1037,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1037,2,728,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][728] = settr(1035,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1035,2,711,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1035,2,714,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1035,2,717,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1035,2,720,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1035,2,723,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1035,2,726,0,0,"IF", 1, 2, 0);
	trans[1][711]	= settr(1018,4,745,1130,1130,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 712 -> 745,0 */
	reached1[712] = 1;
	trans[1][712]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][713]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][729]	= settr(1036,0,745,1131,1131,".(goto)", 1, 2, 0);
	trans[1][714]	= settr(1021,4,745,1132,1132,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 715 -> 745,0 */
	reached1[715] = 1;
	trans[1][715]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][716]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][717]	= settr(1024,4,745,1133,1133,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 718 -> 745,0 */
	reached1[718] = 1;
	trans[1][718]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][719]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][720]	= settr(1027,4,745,1134,1134,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 721 -> 745,0 */
	reached1[721] = 1;
	trans[1][721]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][722]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][723]	= settr(1030,4,745,1135,1135,"((STOP==ABORT))", 1, 2, 0); /* m: 724 -> 745,0 */
	reached1[724] = 1;
	trans[1][724]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][725]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][726]	= settr(1033,2,727,2,0,"else", 1, 2, 0);
	trans[1][727]	= settr(1034,4,745,1136,1136,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 729 -> 0,745 */
	reached1[729] = 1;
	T = trans[1][745] = settr(1052,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1052,0,731,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1052,0,743,0,0,"IF", 0, 2, 0);
	trans[1][731]	= settr(1038,0,742,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][742] = settr(1049,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1049,0,738,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][738] = settr(1045,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1045,0,732,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1045,0,734,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1045,0,736,0,0,"IF", 0, 2, 0);
	trans[1][732]	= settr(1039,0,740,1137,1137,"((_pid==0))", 0, 2, 0); /* m: 733 -> 740,0 */
	reached1[733] = 1;
	trans[1][733]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][739]	= settr(1046,0,740,1,0,".(goto)", 0, 2, 0);
	trans[1][734]	= settr(1041,0,740,1138,1138,"((_pid==1))", 0, 2, 0); /* m: 735 -> 740,0 */
	reached1[735] = 1;
	trans[1][735]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][736]	= settr(1043,0,740,1139,1139,"((_pid>1))", 0, 2, 0); /* m: 737 -> 740,0 */
	reached1[737] = 1;
	trans[1][737]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][740]	= settr(1047,0,741,1140,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][741]	= settr(1048,0,755,1141,1141,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 751 -> 0,755 */
	reached1[751] = 1;
	trans[1][746]	= settr(1053,0,751,1,0,".(goto)", 0, 2, 0); /* m: 751 -> 0,755 */
	reached1[751] = 1;
	trans[1][743]	= settr(1050,0,744,2,0,"else", 0, 2, 0);
	trans[1][744]	= settr(1051,0,755,1142,1142,"(1)", 0, 2, 0); /* m: 751 -> 755,0 */
	reached1[751] = 1;
	trans[1][751]	= settr(1058,0,755,1143,1143,"j = (j+1)", 0, 2, 0);
	trans[1][752]	= settr(1059,0,753,2,0,"else", 0, 2, 0);
	trans[1][753]	= settr(1060,0,1758,1144,1144,"j = 1", 0, 2, 0);
	trans[1][754]	= settr(1061,0,1758,1,0,"goto :b5", 0, 2, 0);
	trans[1][757]	= settr(1064,0,1758,1,0,"break", 0, 2, 0);
	trans[1][927]	= settr(1234,0,1758,1,0,".(goto)", 0, 2, 0);
	trans[1][759]	= settr(1066,0,925,2,0,"else", 0, 2, 0);
	T = trans[ 1][925] = settr(1232,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1232,0,760,0,0,"sub-sequence", 0, 2, 0);
	trans[1][760]	= settr(1067,0,922,1145,1145,"j = (3-1)", 0, 2, 0);
	trans[1][923]	= settr(1230,0,922,1,0,".(goto)", 0, 2, 0);
	T = trans[1][922] = settr(1229,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1229,0,761,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1229,0,919,0,0,"DO", 0, 2, 0);
	trans[1][761]	= settr(1068,0,917,1146,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][917] = settr(1224,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1224,0,915,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][915] = settr(1222,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1222,0,762,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1222,0,801,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1222,0,839,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1222,0,877,0,0,"IF", 0, 2, 0);
	trans[1][762]	= settr(1069,0,800,1147,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][800] = settr(1107,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1107,0,782,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][782] = settr(1089,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1089,2,780,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][780] = settr(1087,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1087,2,763,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1087,2,766,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1087,2,769,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1087,2,772,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1087,2,775,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1087,2,778,0,0,"IF", 1, 2, 0);
	trans[1][763]	= settr(1070,4,783,1148,1148,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 764 -> 783,0 */
	reached1[764] = 1;
	trans[1][764]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][765]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][781]	= settr(1088,0,783,1149,1149,".(goto)", 1, 2, 0);
	trans[1][766]	= settr(1073,4,783,1150,1150,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 767 -> 783,0 */
	reached1[767] = 1;
	trans[1][767]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][768]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][769]	= settr(1076,4,783,1151,1151,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 770 -> 783,0 */
	reached1[770] = 1;
	trans[1][770]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][771]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][772]	= settr(1079,4,783,1152,1152,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 773 -> 783,0 */
	reached1[773] = 1;
	trans[1][773]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][774]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][775]	= settr(1082,4,783,1153,1153,"((START==ABORT))", 1, 2, 0); /* m: 776 -> 783,0 */
	reached1[776] = 1;
	trans[1][776]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][777]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][778]	= settr(1085,2,779,2,0,"else", 1, 2, 0);
	trans[1][779]	= settr(1086,4,783,1154,1154,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 781 -> 0,783 */
	reached1[781] = 1;
	trans[1][783]	= settr(1090,0,798,1155,1155,"(run Thread(j))", 0, 2, 0);
	T = trans[1][798] = settr(1105,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1105,0,784,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1105,0,796,0,0,"IF", 0, 2, 0);
	trans[1][784]	= settr(1091,0,795,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][795] = settr(1102,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1102,0,791,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][791] = settr(1098,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1098,0,785,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1098,0,787,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1098,0,789,0,0,"IF", 0, 2, 0);
	trans[1][785]	= settr(1092,0,793,1156,1156,"((_pid==0))", 0, 2, 0); /* m: 786 -> 793,0 */
	reached1[786] = 1;
	trans[1][786]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][792]	= settr(1099,0,793,1,0,".(goto)", 0, 2, 0);
	trans[1][787]	= settr(1094,0,793,1157,1157,"((_pid==1))", 0, 2, 0); /* m: 788 -> 793,0 */
	reached1[788] = 1;
	trans[1][788]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][789]	= settr(1096,0,793,1158,1158,"((_pid>1))", 0, 2, 0); /* m: 790 -> 793,0 */
	reached1[790] = 1;
	trans[1][790]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][793]	= settr(1100,0,794,1159,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][794]	= settr(1101,0,922,1160,1160,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 918 -> 0,922 */
	reached1[918] = 1;
	trans[1][799]	= settr(1106,0,918,1,0,".(goto)", 0, 2, 0); /* m: 918 -> 0,922 */
	reached1[918] = 1;
	trans[1][796]	= settr(1103,0,797,2,0,"else", 0, 2, 0);
	trans[1][797]	= settr(1104,0,922,1161,1161,"(1)", 0, 2, 0); /* m: 918 -> 922,0 */
	reached1[918] = 1;
	trans[1][916]	= settr(1223,0,918,1,0,".(goto)", 0, 2, 0); /* m: 918 -> 0,922 */
	reached1[918] = 1;
	trans[1][801]	= settr(1108,0,838,1162,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][838] = settr(1145,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1145,0,821,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][821] = settr(1128,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1128,2,819,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][819] = settr(1126,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1126,2,802,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1126,2,805,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1126,2,808,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1126,2,811,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1126,2,814,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1126,2,817,0,0,"IF", 1, 2, 0);
	trans[1][802]	= settr(1109,4,836,1163,1163,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 803 -> 836,0 */
	reached1[803] = 1;
	trans[1][803]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][804]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][820]	= settr(1127,0,836,1164,1164,".(goto)", 1, 2, 0);
	trans[1][805]	= settr(1112,4,836,1165,1165,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 806 -> 836,0 */
	reached1[806] = 1;
	trans[1][806]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][807]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][808]	= settr(1115,4,836,1166,1166,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 809 -> 836,0 */
	reached1[809] = 1;
	trans[1][809]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][810]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][811]	= settr(1118,4,836,1167,1167,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 812 -> 836,0 */
	reached1[812] = 1;
	trans[1][812]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][813]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][814]	= settr(1121,4,836,1168,1168,"((PAUSE==ABORT))", 1, 2, 0); /* m: 815 -> 836,0 */
	reached1[815] = 1;
	trans[1][815]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][816]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][817]	= settr(1124,2,818,2,0,"else", 1, 2, 0);
	trans[1][818]	= settr(1125,4,836,1169,1169,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 820 -> 0,836 */
	reached1[820] = 1;
	T = trans[1][836] = settr(1143,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1143,0,822,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1143,0,834,0,0,"IF", 0, 2, 0);
	trans[1][822]	= settr(1129,0,833,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][833] = settr(1140,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1140,0,829,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][829] = settr(1136,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1136,0,823,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1136,0,825,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1136,0,827,0,0,"IF", 0, 2, 0);
	trans[1][823]	= settr(1130,0,831,1170,1170,"((_pid==0))", 0, 2, 0); /* m: 824 -> 831,0 */
	reached1[824] = 1;
	trans[1][824]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][830]	= settr(1137,0,831,1,0,".(goto)", 0, 2, 0);
	trans[1][825]	= settr(1132,0,831,1171,1171,"((_pid==1))", 0, 2, 0); /* m: 826 -> 831,0 */
	reached1[826] = 1;
	trans[1][826]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][827]	= settr(1134,0,831,1172,1172,"((_pid>1))", 0, 2, 0); /* m: 828 -> 831,0 */
	reached1[828] = 1;
	trans[1][828]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][831]	= settr(1138,0,832,1173,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][832]	= settr(1139,0,922,1174,1174,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 918 -> 0,922 */
	reached1[918] = 1;
	trans[1][837]	= settr(1144,0,918,1,0,".(goto)", 0, 2, 0); /* m: 918 -> 0,922 */
	reached1[918] = 1;
	trans[1][834]	= settr(1141,0,835,2,0,"else", 0, 2, 0);
	trans[1][835]	= settr(1142,0,922,1175,1175,"(1)", 0, 2, 0); /* m: 918 -> 922,0 */
	reached1[918] = 1;
	trans[1][839]	= settr(1146,0,876,1176,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][876] = settr(1183,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1183,0,859,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][859] = settr(1166,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1166,2,857,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][857] = settr(1164,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1164,2,840,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1164,2,843,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1164,2,846,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1164,2,849,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1164,2,852,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1164,2,855,0,0,"IF", 1, 2, 0);
	trans[1][840]	= settr(1147,4,874,1177,1177,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 841 -> 874,0 */
	reached1[841] = 1;
	trans[1][841]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][842]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][858]	= settr(1165,0,874,1178,1178,".(goto)", 1, 2, 0);
	trans[1][843]	= settr(1150,4,874,1179,1179,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 844 -> 874,0 */
	reached1[844] = 1;
	trans[1][844]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][845]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][846]	= settr(1153,4,874,1180,1180,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 847 -> 874,0 */
	reached1[847] = 1;
	trans[1][847]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][848]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][849]	= settr(1156,4,874,1181,1181,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 850 -> 874,0 */
	reached1[850] = 1;
	trans[1][850]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][851]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][852]	= settr(1159,4,874,1182,1182,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 853 -> 874,0 */
	reached1[853] = 1;
	trans[1][853]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][854]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][855]	= settr(1162,2,856,2,0,"else", 1, 2, 0);
	trans[1][856]	= settr(1163,4,874,1183,1183,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 858 -> 0,874 */
	reached1[858] = 1;
	T = trans[1][874] = settr(1181,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1181,0,860,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1181,0,872,0,0,"IF", 0, 2, 0);
	trans[1][860]	= settr(1167,0,871,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][871] = settr(1178,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1178,0,867,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][867] = settr(1174,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1174,0,861,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1174,0,863,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1174,0,865,0,0,"IF", 0, 2, 0);
	trans[1][861]	= settr(1168,0,869,1184,1184,"((_pid==0))", 0, 2, 0); /* m: 862 -> 869,0 */
	reached1[862] = 1;
	trans[1][862]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][868]	= settr(1175,0,869,1,0,".(goto)", 0, 2, 0);
	trans[1][863]	= settr(1170,0,869,1185,1185,"((_pid==1))", 0, 2, 0); /* m: 864 -> 869,0 */
	reached1[864] = 1;
	trans[1][864]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][865]	= settr(1172,0,869,1186,1186,"((_pid>1))", 0, 2, 0); /* m: 866 -> 869,0 */
	reached1[866] = 1;
	trans[1][866]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][869]	= settr(1176,0,870,1187,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][870]	= settr(1177,0,922,1188,1188,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 918 -> 0,922 */
	reached1[918] = 1;
	trans[1][875]	= settr(1182,0,918,1,0,".(goto)", 0, 2, 0); /* m: 918 -> 0,922 */
	reached1[918] = 1;
	trans[1][872]	= settr(1179,0,873,2,0,"else", 0, 2, 0);
	trans[1][873]	= settr(1180,0,922,1189,1189,"(1)", 0, 2, 0); /* m: 918 -> 922,0 */
	reached1[918] = 1;
	trans[1][877]	= settr(1184,0,914,1190,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][914] = settr(1221,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1221,0,897,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][897] = settr(1204,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1204,2,895,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][895] = settr(1202,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1202,2,878,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1202,2,881,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1202,2,884,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1202,2,887,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1202,2,890,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1202,2,893,0,0,"IF", 1, 2, 0);
	trans[1][878]	= settr(1185,4,912,1191,1191,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 879 -> 912,0 */
	reached1[879] = 1;
	trans[1][879]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][880]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][896]	= settr(1203,0,912,1192,1192,".(goto)", 1, 2, 0);
	trans[1][881]	= settr(1188,4,912,1193,1193,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 882 -> 912,0 */
	reached1[882] = 1;
	trans[1][882]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][883]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][884]	= settr(1191,4,912,1194,1194,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 885 -> 912,0 */
	reached1[885] = 1;
	trans[1][885]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][886]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][887]	= settr(1194,4,912,1195,1195,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 888 -> 912,0 */
	reached1[888] = 1;
	trans[1][888]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][889]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][890]	= settr(1197,4,912,1196,1196,"((STOP==ABORT))", 1, 2, 0); /* m: 891 -> 912,0 */
	reached1[891] = 1;
	trans[1][891]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][892]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][893]	= settr(1200,2,894,2,0,"else", 1, 2, 0);
	trans[1][894]	= settr(1201,4,912,1197,1197,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 896 -> 0,912 */
	reached1[896] = 1;
	T = trans[1][912] = settr(1219,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1219,0,898,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1219,0,910,0,0,"IF", 0, 2, 0);
	trans[1][898]	= settr(1205,0,909,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][909] = settr(1216,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1216,0,905,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][905] = settr(1212,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1212,0,899,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1212,0,901,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1212,0,903,0,0,"IF", 0, 2, 0);
	trans[1][899]	= settr(1206,0,907,1198,1198,"((_pid==0))", 0, 2, 0); /* m: 900 -> 907,0 */
	reached1[900] = 1;
	trans[1][900]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][906]	= settr(1213,0,907,1,0,".(goto)", 0, 2, 0);
	trans[1][901]	= settr(1208,0,907,1199,1199,"((_pid==1))", 0, 2, 0); /* m: 902 -> 907,0 */
	reached1[902] = 1;
	trans[1][902]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][903]	= settr(1210,0,907,1200,1200,"((_pid>1))", 0, 2, 0); /* m: 904 -> 907,0 */
	reached1[904] = 1;
	trans[1][904]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][907]	= settr(1214,0,908,1201,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][908]	= settr(1215,0,922,1202,1202,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 918 -> 0,922 */
	reached1[918] = 1;
	trans[1][913]	= settr(1220,0,918,1,0,".(goto)", 0, 2, 0); /* m: 918 -> 0,922 */
	reached1[918] = 1;
	trans[1][910]	= settr(1217,0,911,2,0,"else", 0, 2, 0);
	trans[1][911]	= settr(1218,0,922,1203,1203,"(1)", 0, 2, 0); /* m: 918 -> 922,0 */
	reached1[918] = 1;
	trans[1][918]	= settr(1225,0,922,1204,1204,"j = (j-1)", 0, 2, 0);
	trans[1][919]	= settr(1226,0,920,2,0,"else", 0, 2, 0);
	trans[1][920]	= settr(1227,0,1758,1205,1205,"j = 1", 0, 2, 0);
	trans[1][921]	= settr(1228,0,1758,1,0,"goto :b6", 0, 2, 0);
	trans[1][924]	= settr(1231,0,1758,1,0,"break", 0, 2, 0);
	trans[1][1156]	= settr(1463,0,1758,1,0,".(goto)", 0, 2, 0);
	trans[1][929]	= settr(1236,0,1154,2,0,"else", 0, 2, 0);
	T = trans[ 1][1154] = settr(1461,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1461,0,930,0,0,"sub-sequence", 0, 2, 0);
	trans[1][930]	= settr(1237,0,1095,1206,0,"printf('Supervisor propagating command %e...\\n',8)", 0, 2, 0);
	T = trans[ 1][1095] = settr(1402,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1402,0,1092,0,0,"sub-sequence", 0, 2, 0);
	trans[1][1093]	= settr(1400,0,1092,1,0,".(goto)", 0, 2, 0);
	T = trans[1][1092] = settr(1399,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1399,0,931,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1399,0,1089,0,0,"DO", 0, 2, 0);
	trans[1][931]	= settr(1238,0,1087,1207,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][1087] = settr(1394,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1394,0,1085,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1085] = settr(1392,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1392,0,932,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1392,0,971,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1392,0,1009,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1392,0,1047,0,0,"IF", 0, 2, 0);
	trans[1][932]	= settr(1239,0,970,1208,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][970] = settr(1277,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1277,0,952,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][952] = settr(1259,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1259,2,950,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][950] = settr(1257,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1257,2,933,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1257,2,936,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1257,2,939,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1257,2,942,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1257,2,945,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1257,2,948,0,0,"IF", 1, 2, 0);
	trans[1][933]	= settr(1240,4,953,1209,1209,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 934 -> 953,0 */
	reached1[934] = 1;
	trans[1][934]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][935]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][951]	= settr(1258,0,953,1210,1210,".(goto)", 1, 2, 0);
	trans[1][936]	= settr(1243,4,953,1211,1211,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 937 -> 953,0 */
	reached1[937] = 1;
	trans[1][937]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][938]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][939]	= settr(1246,4,953,1212,1212,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 940 -> 953,0 */
	reached1[940] = 1;
	trans[1][940]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][941]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][942]	= settr(1249,4,953,1213,1213,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 943 -> 953,0 */
	reached1[943] = 1;
	trans[1][943]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][944]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][945]	= settr(1252,4,953,1214,1214,"((START==ABORT))", 1, 2, 0); /* m: 946 -> 953,0 */
	reached1[946] = 1;
	trans[1][946]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][947]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][948]	= settr(1255,2,949,2,0,"else", 1, 2, 0);
	trans[1][949]	= settr(1256,4,953,1215,1215,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 951 -> 0,953 */
	reached1[951] = 1;
	trans[1][953]	= settr(1260,0,968,1216,1216,"(run Thread(j))", 0, 2, 0);
	T = trans[1][968] = settr(1275,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(1275,0,954,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(1275,0,966,0,0,"IF", 0, 2, 0);
	trans[1][954]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][965] = settr(1272,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1272,0,961,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][961] = settr(1268,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1268,0,955,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1268,0,957,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1268,0,959,0,0,"IF", 0, 2, 0);
	trans[1][955]	= settr(1262,0,963,1217,1217,"((_pid==0))", 0, 2, 0); /* m: 956 -> 963,0 */
	reached1[956] = 1;
	trans[1][956]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][962]	= settr(1269,0,963,1,0,".(goto)", 0, 2, 0);
	trans[1][957]	= settr(1264,0,963,1218,1218,"((_pid==1))", 0, 2, 0); /* m: 958 -> 963,0 */
	reached1[958] = 1;
	trans[1][958]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][959]	= settr(1266,0,963,1219,1219,"((_pid>1))", 0, 2, 0); /* m: 960 -> 963,0 */
	reached1[960] = 1;
	trans[1][960]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][963]	= settr(1270,0,964,1220,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][964]	= settr(1271,0,1092,1221,1221,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1088 -> 0,1092 */
	reached1[1088] = 1;
	trans[1][969]	= settr(1276,0,1088,1,0,".(goto)", 0, 2, 0); /* m: 1088 -> 0,1092 */
	reached1[1088] = 1;
	trans[1][966]	= settr(1273,0,967,2,0,"else", 0, 2, 0);
	trans[1][967]	= settr(1274,0,1092,1222,1222,"(1)", 0, 2, 0); /* m: 1088 -> 1092,0 */
	reached1[1088] = 1;
	trans[1][1086]	= settr(1393,0,1088,1,0,".(goto)", 0, 2, 0); /* m: 1088 -> 0,1092 */
	reached1[1088] = 1;
	trans[1][971]	= settr(1278,0,1008,1223,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][1008] = settr(1315,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1315,0,991,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][991] = settr(1298,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1298,2,989,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][989] = settr(1296,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1296,2,972,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1296,2,975,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1296,2,978,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1296,2,981,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1296,2,984,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1296,2,987,0,0,"IF", 1, 2, 0);
	trans[1][972]	= settr(1279,4,1006,1224,1224,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 973 -> 1006,0 */
	reached1[973] = 1;
	trans[1][973]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][974]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][990]	= settr(1297,0,1006,1225,1225,".(goto)", 1, 2, 0);
	trans[1][975]	= settr(1282,4,1006,1226,1226,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 976 -> 1006,0 */
	reached1[976] = 1;
	trans[1][976]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][977]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][978]	= settr(1285,4,1006,1227,1227,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 979 -> 1006,0 */
	reached1[979] = 1;
	trans[1][979]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][980]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][981]	= settr(1288,4,1006,1228,1228,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 982 -> 1006,0 */
	reached1[982] = 1;
	trans[1][982]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][983]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][984]	= settr(1291,4,1006,1229,1229,"((PAUSE==ABORT))", 1, 2, 0); /* m: 985 -> 1006,0 */
	reached1[985] = 1;
	trans[1][985]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][986]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][987]	= settr(1294,2,988,2,0,"else", 1, 2, 0);
	trans[1][988]	= settr(1295,4,1006,1230,1230,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 990 -> 0,1006 */
	reached1[990] = 1;
	T = trans[1][1006] = settr(1313,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(1313,0,992,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(1313,0,1004,0,0,"IF", 0, 2, 0);
	trans[1][992]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][1003] = settr(1310,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1310,0,999,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][999] = settr(1306,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1306,0,993,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1306,0,995,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1306,0,997,0,0,"IF", 0, 2, 0);
	trans[1][993]	= settr(1300,0,1001,1231,1231,"((_pid==0))", 0, 2, 0); /* m: 994 -> 1001,0 */
	reached1[994] = 1;
	trans[1][994]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1000]	= settr(1307,0,1001,1,0,".(goto)", 0, 2, 0);
	trans[1][995]	= settr(1302,0,1001,1232,1232,"((_pid==1))", 0, 2, 0); /* m: 996 -> 1001,0 */
	reached1[996] = 1;
	trans[1][996]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][997]	= settr(1304,0,1001,1233,1233,"((_pid>1))", 0, 2, 0); /* m: 998 -> 1001,0 */
	reached1[998] = 1;
	trans[1][998]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1001]	= settr(1308,0,1002,1234,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1002]	= settr(1309,0,1092,1235,1235,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1088 -> 0,1092 */
	reached1[1088] = 1;
	trans[1][1007]	= settr(1314,0,1088,1,0,".(goto)", 0, 2, 0); /* m: 1088 -> 0,1092 */
	reached1[1088] = 1;
	trans[1][1004]	= settr(1311,0,1005,2,0,"else", 0, 2, 0);
	trans[1][1005]	= settr(1312,0,1092,1236,1236,"(1)", 0, 2, 0); /* m: 1088 -> 1092,0 */
	reached1[1088] = 1;
	trans[1][1009]	= settr(1316,0,1046,1237,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][1046] = settr(1353,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1353,0,1029,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1029] = settr(1336,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1336,2,1027,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1027] = settr(1334,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1334,2,1010,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1334,2,1013,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1334,2,1016,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1334,2,1019,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1334,2,1022,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1334,2,1025,0,0,"IF", 1, 2, 0);
	trans[1][1010]	= settr(1317,4,1044,1238,1238,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1011 -> 1044,0 */
	reached1[1011] = 1;
	trans[1][1011]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1012]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1028]	= settr(1335,0,1044,1239,1239,".(goto)", 1, 2, 0);
	trans[1][1013]	= settr(1320,4,1044,1240,1240,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1014 -> 1044,0 */
	reached1[1014] = 1;
	trans[1][1014]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1015]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1016]	= settr(1323,4,1044,1241,1241,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1017 -> 1044,0 */
	reached1[1017] = 1;
	trans[1][1017]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1018]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1019]	= settr(1326,4,1044,1242,1242,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1020 -> 1044,0 */
	reached1[1020] = 1;
	trans[1][1020]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1021]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1022]	= settr(1329,4,1044,1243,1243,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 1023 -> 1044,0 */
	reached1[1023] = 1;
	trans[1][1023]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1024]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1025]	= settr(1332,2,1026,2,0,"else", 1, 2, 0);
	trans[1][1026]	= settr(1333,4,1044,1244,1244,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1028 -> 0,1044 */
	reached1[1028] = 1;
	T = trans[1][1044] = settr(1351,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(1351,0,1030,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(1351,0,1042,0,0,"IF", 0, 2, 0);
	trans[1][1030]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][1041] = settr(1348,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1348,0,1037,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1037] = settr(1344,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1344,0,1031,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1344,0,1033,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1344,0,1035,0,0,"IF", 0, 2, 0);
	trans[1][1031]	= settr(1338,0,1039,1245,1245,"((_pid==0))", 0, 2, 0); /* m: 1032 -> 1039,0 */
	reached1[1032] = 1;
	trans[1][1032]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1038]	= settr(1345,0,1039,1,0,".(goto)", 0, 2, 0);
	trans[1][1033]	= settr(1340,0,1039,1246,1246,"((_pid==1))", 0, 2, 0); /* m: 1034 -> 1039,0 */
	reached1[1034] = 1;
	trans[1][1034]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1035]	= settr(1342,0,1039,1247,1247,"((_pid>1))", 0, 2, 0); /* m: 1036 -> 1039,0 */
	reached1[1036] = 1;
	trans[1][1036]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1039]	= settr(1346,0,1040,1248,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1040]	= settr(1347,0,1092,1249,1249,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1088 -> 0,1092 */
	reached1[1088] = 1;
	trans[1][1045]	= settr(1352,0,1088,1,0,".(goto)", 0, 2, 0); /* m: 1088 -> 0,1092 */
	reached1[1088] = 1;
	trans[1][1042]	= settr(1349,0,1043,2,0,"else", 0, 2, 0);
	trans[1][1043]	= settr(1350,0,1092,1250,1250,"(1)", 0, 2, 0); /* m: 1088 -> 1092,0 */
	reached1[1088] = 1;
	trans[1][1047]	= settr(1354,0,1084,1251,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][1084] = settr(1391,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1391,0,1067,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1067] = settr(1374,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1374,2,1065,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1065] = settr(1372,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1372,2,1048,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1372,2,1051,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1372,2,1054,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1372,2,1057,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1372,2,1060,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1372,2,1063,0,0,"IF", 1, 2, 0);
	trans[1][1048]	= settr(1355,4,1082,1252,1252,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1049 -> 1082,0 */
	reached1[1049] = 1;
	trans[1][1049]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1050]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1066]	= settr(1373,0,1082,1253,1253,".(goto)", 1, 2, 0);
	trans[1][1051]	= settr(1358,4,1082,1254,1254,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1052 -> 1082,0 */
	reached1[1052] = 1;
	trans[1][1052]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1053]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1054]	= settr(1361,4,1082,1255,1255,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1055 -> 1082,0 */
	reached1[1055] = 1;
	trans[1][1055]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1056]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1057]	= settr(1364,4,1082,1256,1256,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1058 -> 1082,0 */
	reached1[1058] = 1;
	trans[1][1058]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1059]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1060]	= settr(1367,4,1082,1257,1257,"((STOP==ABORT))", 1, 2, 0); /* m: 1061 -> 1082,0 */
	reached1[1061] = 1;
	trans[1][1061]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1062]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1063]	= settr(1370,2,1064,2,0,"else", 1, 2, 0);
	trans[1][1064]	= settr(1371,4,1082,1258,1258,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1066 -> 0,1082 */
	reached1[1066] = 1;
	T = trans[1][1082] = settr(1389,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(1389,0,1068,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(1389,0,1080,0,0,"IF", 0, 2, 0);
	trans[1][1068]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][1079] = settr(1386,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1386,0,1075,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1075] = settr(1382,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1382,0,1069,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1382,0,1071,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1382,0,1073,0,0,"IF", 0, 2, 0);
	trans[1][1069]	= settr(1376,0,1077,1259,1259,"((_pid==0))", 0, 2, 0); /* m: 1070 -> 1077,0 */
	reached1[1070] = 1;
	trans[1][1070]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1076]	= settr(1383,0,1077,1,0,".(goto)", 0, 2, 0);
	trans[1][1071]	= settr(1378,0,1077,1260,1260,"((_pid==1))", 0, 2, 0); /* m: 1072 -> 1077,0 */
	reached1[1072] = 1;
	trans[1][1072]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1073]	= settr(1380,0,1077,1261,1261,"((_pid>1))", 0, 2, 0); /* m: 1074 -> 1077,0 */
	reached1[1074] = 1;
	trans[1][1074]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1077]	= settr(1384,0,1078,1262,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1078]	= settr(1385,0,1092,1263,1263,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1088 -> 0,1092 */
	reached1[1088] = 1;
	trans[1][1083]	= settr(1390,0,1088,1,0,".(goto)", 0, 2, 0); /* m: 1088 -> 0,1092 */
	reached1[1088] = 1;
	trans[1][1080]	= settr(1387,0,1081,2,0,"else", 0, 2, 0);
	trans[1][1081]	= settr(1388,0,1092,1264,1264,"(1)", 0, 2, 0); /* m: 1088 -> 1092,0 */
	reached1[1088] = 1;
	trans[1][1088]	= settr(1395,0,1092,1265,1265,"j = (j+1)", 0, 2, 0);
	trans[1][1089]	= settr(1396,0,1090,2,0,"else", 0, 2, 0);
	trans[1][1090]	= settr(1397,0,1151,1266,1266,"j = 1", 0, 2, 0);
	trans[1][1091]	= settr(1398,0,1151,1,0,"goto :b7", 0, 2, 0);
	trans[1][1094]	= settr(1401,0,1151,1,0,"break", 0, 2, 0);
	trans[1][1152]	= settr(1459,0,1151,1,0,".(goto)", 0, 2, 0);
	T = trans[1][1151] = settr(1458,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1458,0,1096,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1458,0,1148,0,0,"DO", 0, 2, 0);
	trans[1][1096]	= settr(1403,0,1145,1267,0,"((j<3))", 0, 2, 0);
	T = trans[1][1145] = settr(1452,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1452,0,1097,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1452,0,1109,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1452,0,1121,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1452,0,1133,0,0,"IF", 0, 2, 0);
	trans[1][1097]	= settr(1404,0,1108,1268,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][1108] = settr(1415,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1415,0,1104,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1104] = settr(1411,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1411,0,1098,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1411,0,1100,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1411,0,1102,0,0,"IF", 0, 2, 0);
	trans[1][1098]	= settr(1405,0,1106,1269,1269,"((_pid==0))", 0, 2, 0); /* m: 1099 -> 1106,0 */
	reached1[1099] = 1;
	trans[1][1099]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1105]	= settr(1412,0,1106,1,0,".(goto)", 0, 2, 0);
	trans[1][1100]	= settr(1407,0,1106,1270,1270,"((_pid==1))", 0, 2, 0); /* m: 1101 -> 1106,0 */
	reached1[1101] = 1;
	trans[1][1101]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1102]	= settr(1409,0,1106,1271,1271,"((_pid>1))", 0, 2, 0); /* m: 1103 -> 1106,0 */
	reached1[1103] = 1;
	trans[1][1103]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1106]	= settr(1413,0,1107,1272,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1107]	= settr(1414,0,1151,1273,1273,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1147 -> 0,1151 */
	reached1[1147] = 1;
	trans[1][1146]	= settr(1453,0,1147,1,0,".(goto)", 0, 2, 0); /* m: 1147 -> 0,1151 */
	reached1[1147] = 1;
	trans[1][1109]	= settr(1416,0,1120,1274,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][1120] = settr(1427,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1427,0,1116,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1116] = settr(1423,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1423,0,1110,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1423,0,1112,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1423,0,1114,0,0,"IF", 0, 2, 0);
	trans[1][1110]	= settr(1417,0,1118,1275,1275,"((_pid==0))", 0, 2, 0); /* m: 1111 -> 1118,0 */
	reached1[1111] = 1;
	trans[1][1111]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1117]	= settr(1424,0,1118,1,0,".(goto)", 0, 2, 0);
	trans[1][1112]	= settr(1419,0,1118,1276,1276,"((_pid==1))", 0, 2, 0); /* m: 1113 -> 1118,0 */
	reached1[1113] = 1;
	trans[1][1113]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1114]	= settr(1421,0,1118,1277,1277,"((_pid>1))", 0, 2, 0); /* m: 1115 -> 1118,0 */
	reached1[1115] = 1;
	trans[1][1115]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1118]	= settr(1425,0,1119,1278,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1119]	= settr(1426,0,1151,1279,1279,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1147 -> 0,1151 */
	reached1[1147] = 1;
	trans[1][1121]	= settr(1428,0,1132,1280,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][1132] = settr(1439,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1439,0,1128,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1128] = settr(1435,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1435,0,1122,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1435,0,1124,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1435,0,1126,0,0,"IF", 0, 2, 0);
	trans[1][1122]	= settr(1429,0,1130,1281,1281,"((_pid==0))", 0, 2, 0); /* m: 1123 -> 1130,0 */
	reached1[1123] = 1;
	trans[1][1123]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1129]	= settr(1436,0,1130,1,0,".(goto)", 0, 2, 0);
	trans[1][1124]	= settr(1431,0,1130,1282,1282,"((_pid==1))", 0, 2, 0); /* m: 1125 -> 1130,0 */
	reached1[1125] = 1;
	trans[1][1125]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1126]	= settr(1433,0,1130,1283,1283,"((_pid>1))", 0, 2, 0); /* m: 1127 -> 1130,0 */
	reached1[1127] = 1;
	trans[1][1127]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1130]	= settr(1437,0,1131,1284,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1131]	= settr(1438,0,1151,1285,1285,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1147 -> 0,1151 */
	reached1[1147] = 1;
	trans[1][1133]	= settr(1440,0,1144,1286,0,"((8==STOP))", 0, 2, 0);
	T = trans[ 1][1144] = settr(1451,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1451,0,1140,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1140] = settr(1447,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1447,0,1134,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1447,0,1136,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1447,0,1138,0,0,"IF", 0, 2, 0);
	trans[1][1134]	= settr(1441,0,1142,1287,1287,"((_pid==0))", 0, 2, 0); /* m: 1135 -> 1142,0 */
	reached1[1135] = 1;
	trans[1][1135]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1141]	= settr(1448,0,1142,1,0,".(goto)", 0, 2, 0);
	trans[1][1136]	= settr(1443,0,1142,1288,1288,"((_pid==1))", 0, 2, 0); /* m: 1137 -> 1142,0 */
	reached1[1137] = 1;
	trans[1][1137]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1138]	= settr(1445,0,1142,1289,1289,"((_pid>1))", 0, 2, 0); /* m: 1139 -> 1142,0 */
	reached1[1139] = 1;
	trans[1][1139]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1142]	= settr(1449,0,1143,1290,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1143]	= settr(1450,0,1151,1291,1291,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1147 -> 0,1151 */
	reached1[1147] = 1;
	trans[1][1147]	= settr(1454,0,1151,1292,1292,"j = (j+1)", 0, 2, 0);
	trans[1][1148]	= settr(1455,0,1149,2,0,"else", 0, 2, 0);
	trans[1][1149]	= settr(1456,0,1758,1293,1293,"j = 1", 0, 2, 0);
	trans[1][1150]	= settr(1457,0,1758,1,0,"goto :b8", 0, 2, 0);
	trans[1][1153]	= settr(1460,0,1758,1,0,"break", 0, 2, 0);
	trans[1][1160]	= settr(1467,0,1732,1294,0,"(((2==ABORTING)||(2==STOPPING)))", 0, 2, 0);
	T = trans[ 1][1732] = settr(2039,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2039,0,1730,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1730] = settr(2037,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2037,0,1161,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2037,0,1164,0,0,"IF", 0, 2, 0);
	trans[1][1161]	= settr(1468,0,1162,1295,0,"(((12==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][1162]	= settr(1469,0,1163,1296,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][1163]	= settr(1470,0,1758,1297,1297,"supervisor_started = 1", 1, 2, 0);
	trans[1][1731]	= settr(2038,0,1758,1,0,".(goto)", 0, 2, 0);
	trans[1][1164]	= settr(1471,0,1728,2,0,"else", 0, 2, 0);
	T = trans[1][1728] = settr(2035,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2035,0,1165,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2035,0,1502,0,0,"IF", 0, 2, 0);
	trans[1][1165]	= settr(1472,0,1501,1298,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][1501] = settr(1808,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1808,0,1499,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1499] = settr(1806,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1806,0,1166,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1806,0,1332,0,0,"IF", 0, 2, 0);
	trans[1][1166]	= settr(1473,0,1331,1299,0,"(((12==START)||(12==PAUSED)))", 0, 2, 0);
	T = trans[ 1][1331] = settr(1638,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1638,0,1328,0,0,"sub-sequence", 0, 2, 0);
	trans[1][1329]	= settr(1636,0,1328,1,0,".(goto)", 0, 2, 0);
	T = trans[1][1328] = settr(1635,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1635,0,1167,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1635,0,1325,0,0,"DO", 0, 2, 0);
	trans[1][1167]	= settr(1474,0,1323,1300,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][1323] = settr(1630,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1630,0,1321,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1321] = settr(1628,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1628,0,1168,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1628,0,1207,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1628,0,1245,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1628,0,1283,0,0,"IF", 0, 2, 0);
	trans[1][1168]	= settr(1475,0,1206,1301,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][1206] = settr(1513,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1513,0,1188,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1188] = settr(1495,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1495,2,1186,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1186] = settr(1493,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1493,2,1169,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1493,2,1172,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1493,2,1175,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1493,2,1178,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1493,2,1181,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1493,2,1184,0,0,"IF", 1, 2, 0);
	trans[1][1169]	= settr(1476,4,1189,1302,1302,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1170 -> 1189,0 */
	reached1[1170] = 1;
	trans[1][1170]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1171]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1187]	= settr(1494,0,1189,1303,1303,".(goto)", 1, 2, 0);
	trans[1][1172]	= settr(1479,4,1189,1304,1304,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1173 -> 1189,0 */
	reached1[1173] = 1;
	trans[1][1173]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1174]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1175]	= settr(1482,4,1189,1305,1305,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1176 -> 1189,0 */
	reached1[1176] = 1;
	trans[1][1176]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1177]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1178]	= settr(1485,4,1189,1306,1306,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1179 -> 1189,0 */
	reached1[1179] = 1;
	trans[1][1179]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1180]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1181]	= settr(1488,4,1189,1307,1307,"((START==ABORT))", 1, 2, 0); /* m: 1182 -> 1189,0 */
	reached1[1182] = 1;
	trans[1][1182]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1183]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1184]	= settr(1491,2,1185,2,0,"else", 1, 2, 0);
	trans[1][1185]	= settr(1492,4,1189,1308,1308,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1187 -> 0,1189 */
	reached1[1187] = 1;
	trans[1][1189]	= settr(1496,0,1204,1309,1309,"(run Thread(j))", 0, 2, 0);
	T = trans[1][1204] = settr(1511,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1511,0,1190,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1511,0,1202,0,0,"IF", 0, 2, 0);
	trans[1][1190]	= settr(1497,0,1201,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1201] = settr(1508,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1508,0,1197,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1197] = settr(1504,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1504,0,1191,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1504,0,1193,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1504,0,1195,0,0,"IF", 0, 2, 0);
	trans[1][1191]	= settr(1498,0,1199,1310,1310,"((_pid==0))", 0, 2, 0); /* m: 1192 -> 1199,0 */
	reached1[1192] = 1;
	trans[1][1192]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1198]	= settr(1505,0,1199,1,0,".(goto)", 0, 2, 0);
	trans[1][1193]	= settr(1500,0,1199,1311,1311,"((_pid==1))", 0, 2, 0); /* m: 1194 -> 1199,0 */
	reached1[1194] = 1;
	trans[1][1194]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1195]	= settr(1502,0,1199,1312,1312,"((_pid>1))", 0, 2, 0); /* m: 1196 -> 1199,0 */
	reached1[1196] = 1;
	trans[1][1196]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1199]	= settr(1506,0,1200,1313,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1200]	= settr(1507,0,1328,1314,1314,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1324 -> 0,1328 */
	reached1[1324] = 1;
	trans[1][1205]	= settr(1512,0,1324,1,0,".(goto)", 0, 2, 0); /* m: 1324 -> 0,1328 */
	reached1[1324] = 1;
	trans[1][1202]	= settr(1509,0,1203,2,0,"else", 0, 2, 0);
	trans[1][1203]	= settr(1510,0,1328,1315,1315,"(1)", 0, 2, 0); /* m: 1324 -> 1328,0 */
	reached1[1324] = 1;
	trans[1][1322]	= settr(1629,0,1324,1,0,".(goto)", 0, 2, 0); /* m: 1324 -> 0,1328 */
	reached1[1324] = 1;
	trans[1][1207]	= settr(1514,0,1244,1316,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][1244] = settr(1551,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1551,0,1227,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1227] = settr(1534,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1534,2,1225,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1225] = settr(1532,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1532,2,1208,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1532,2,1211,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1532,2,1214,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1532,2,1217,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1532,2,1220,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1532,2,1223,0,0,"IF", 1, 2, 0);
	trans[1][1208]	= settr(1515,4,1242,1317,1317,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1209 -> 1242,0 */
	reached1[1209] = 1;
	trans[1][1209]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1210]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1226]	= settr(1533,0,1242,1318,1318,".(goto)", 1, 2, 0);
	trans[1][1211]	= settr(1518,4,1242,1319,1319,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1212 -> 1242,0 */
	reached1[1212] = 1;
	trans[1][1212]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1213]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1214]	= settr(1521,4,1242,1320,1320,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1215 -> 1242,0 */
	reached1[1215] = 1;
	trans[1][1215]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1216]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1217]	= settr(1524,4,1242,1321,1321,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1218 -> 1242,0 */
	reached1[1218] = 1;
	trans[1][1218]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1219]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1220]	= settr(1527,4,1242,1322,1322,"((PAUSE==ABORT))", 1, 2, 0); /* m: 1221 -> 1242,0 */
	reached1[1221] = 1;
	trans[1][1221]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1222]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1223]	= settr(1530,2,1224,2,0,"else", 1, 2, 0);
	trans[1][1224]	= settr(1531,4,1242,1323,1323,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1226 -> 0,1242 */
	reached1[1226] = 1;
	T = trans[1][1242] = settr(1549,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1549,0,1228,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1549,0,1240,0,0,"IF", 0, 2, 0);
	trans[1][1228]	= settr(1535,0,1239,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1239] = settr(1546,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1546,0,1235,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1235] = settr(1542,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1542,0,1229,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1542,0,1231,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1542,0,1233,0,0,"IF", 0, 2, 0);
	trans[1][1229]	= settr(1536,0,1237,1324,1324,"((_pid==0))", 0, 2, 0); /* m: 1230 -> 1237,0 */
	reached1[1230] = 1;
	trans[1][1230]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1236]	= settr(1543,0,1237,1,0,".(goto)", 0, 2, 0);
	trans[1][1231]	= settr(1538,0,1237,1325,1325,"((_pid==1))", 0, 2, 0); /* m: 1232 -> 1237,0 */
	reached1[1232] = 1;
	trans[1][1232]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1233]	= settr(1540,0,1237,1326,1326,"((_pid>1))", 0, 2, 0); /* m: 1234 -> 1237,0 */
	reached1[1234] = 1;
	trans[1][1234]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1237]	= settr(1544,0,1238,1327,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1238]	= settr(1545,0,1328,1328,1328,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1324 -> 0,1328 */
	reached1[1324] = 1;
	trans[1][1243]	= settr(1550,0,1324,1,0,".(goto)", 0, 2, 0); /* m: 1324 -> 0,1328 */
	reached1[1324] = 1;
	trans[1][1240]	= settr(1547,0,1241,2,0,"else", 0, 2, 0);
	trans[1][1241]	= settr(1548,0,1328,1329,1329,"(1)", 0, 2, 0); /* m: 1324 -> 1328,0 */
	reached1[1324] = 1;
	trans[1][1245]	= settr(1552,0,1282,1330,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][1282] = settr(1589,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1589,0,1265,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1265] = settr(1572,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1572,2,1263,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1263] = settr(1570,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1570,2,1246,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1570,2,1249,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1570,2,1252,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1570,2,1255,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1570,2,1258,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1570,2,1261,0,0,"IF", 1, 2, 0);
	trans[1][1246]	= settr(1553,4,1280,1331,1331,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1247 -> 1280,0 */
	reached1[1247] = 1;
	trans[1][1247]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1248]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1264]	= settr(1571,0,1280,1332,1332,".(goto)", 1, 2, 0);
	trans[1][1249]	= settr(1556,4,1280,1333,1333,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1250 -> 1280,0 */
	reached1[1250] = 1;
	trans[1][1250]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1251]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1252]	= settr(1559,4,1280,1334,1334,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1253 -> 1280,0 */
	reached1[1253] = 1;
	trans[1][1253]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1254]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1255]	= settr(1562,4,1280,1335,1335,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1256 -> 1280,0 */
	reached1[1256] = 1;
	trans[1][1256]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1257]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1258]	= settr(1565,4,1280,1336,1336,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 1259 -> 1280,0 */
	reached1[1259] = 1;
	trans[1][1259]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1260]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1261]	= settr(1568,2,1262,2,0,"else", 1, 2, 0);
	trans[1][1262]	= settr(1569,4,1280,1337,1337,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1264 -> 0,1280 */
	reached1[1264] = 1;
	T = trans[1][1280] = settr(1587,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1587,0,1266,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1587,0,1278,0,0,"IF", 0, 2, 0);
	trans[1][1266]	= settr(1573,0,1277,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1277] = settr(1584,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1584,0,1273,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1273] = settr(1580,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1580,0,1267,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1580,0,1269,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1580,0,1271,0,0,"IF", 0, 2, 0);
	trans[1][1267]	= settr(1574,0,1275,1338,1338,"((_pid==0))", 0, 2, 0); /* m: 1268 -> 1275,0 */
	reached1[1268] = 1;
	trans[1][1268]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1274]	= settr(1581,0,1275,1,0,".(goto)", 0, 2, 0);
	trans[1][1269]	= settr(1576,0,1275,1339,1339,"((_pid==1))", 0, 2, 0); /* m: 1270 -> 1275,0 */
	reached1[1270] = 1;
	trans[1][1270]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1271]	= settr(1578,0,1275,1340,1340,"((_pid>1))", 0, 2, 0); /* m: 1272 -> 1275,0 */
	reached1[1272] = 1;
	trans[1][1272]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1275]	= settr(1582,0,1276,1341,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1276]	= settr(1583,0,1328,1342,1342,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1324 -> 0,1328 */
	reached1[1324] = 1;
	trans[1][1281]	= settr(1588,0,1324,1,0,".(goto)", 0, 2, 0); /* m: 1324 -> 0,1328 */
	reached1[1324] = 1;
	trans[1][1278]	= settr(1585,0,1279,2,0,"else", 0, 2, 0);
	trans[1][1279]	= settr(1586,0,1328,1343,1343,"(1)", 0, 2, 0); /* m: 1324 -> 1328,0 */
	reached1[1324] = 1;
	trans[1][1283]	= settr(1590,0,1320,1344,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][1320] = settr(1627,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1627,0,1303,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1303] = settr(1610,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1610,2,1301,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1301] = settr(1608,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1608,2,1284,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1608,2,1287,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1608,2,1290,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1608,2,1293,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1608,2,1296,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1608,2,1299,0,0,"IF", 1, 2, 0);
	trans[1][1284]	= settr(1591,4,1318,1345,1345,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1285 -> 1318,0 */
	reached1[1285] = 1;
	trans[1][1285]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1286]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1302]	= settr(1609,0,1318,1346,1346,".(goto)", 1, 2, 0);
	trans[1][1287]	= settr(1594,4,1318,1347,1347,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1288 -> 1318,0 */
	reached1[1288] = 1;
	trans[1][1288]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1289]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1290]	= settr(1597,4,1318,1348,1348,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1291 -> 1318,0 */
	reached1[1291] = 1;
	trans[1][1291]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1292]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1293]	= settr(1600,4,1318,1349,1349,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1294 -> 1318,0 */
	reached1[1294] = 1;
	trans[1][1294]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1295]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1296]	= settr(1603,4,1318,1350,1350,"((STOP==ABORT))", 1, 2, 0); /* m: 1297 -> 1318,0 */
	reached1[1297] = 1;
	trans[1][1297]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1298]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1299]	= settr(1606,2,1300,2,0,"else", 1, 2, 0);
	trans[1][1300]	= settr(1607,4,1318,1351,1351,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1302 -> 0,1318 */
	reached1[1302] = 1;
	T = trans[1][1318] = settr(1625,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1625,0,1304,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1625,0,1316,0,0,"IF", 0, 2, 0);
	trans[1][1304]	= settr(1611,0,1315,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1315] = settr(1622,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1622,0,1311,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1311] = settr(1618,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1618,0,1305,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1618,0,1307,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1618,0,1309,0,0,"IF", 0, 2, 0);
	trans[1][1305]	= settr(1612,0,1313,1352,1352,"((_pid==0))", 0, 2, 0); /* m: 1306 -> 1313,0 */
	reached1[1306] = 1;
	trans[1][1306]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1312]	= settr(1619,0,1313,1,0,".(goto)", 0, 2, 0);
	trans[1][1307]	= settr(1614,0,1313,1353,1353,"((_pid==1))", 0, 2, 0); /* m: 1308 -> 1313,0 */
	reached1[1308] = 1;
	trans[1][1308]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1309]	= settr(1616,0,1313,1354,1354,"((_pid>1))", 0, 2, 0); /* m: 1310 -> 1313,0 */
	reached1[1310] = 1;
	trans[1][1310]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1313]	= settr(1620,0,1314,1355,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1314]	= settr(1621,0,1328,1356,1356,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1324 -> 0,1328 */
	reached1[1324] = 1;
	trans[1][1319]	= settr(1626,0,1324,1,0,".(goto)", 0, 2, 0); /* m: 1324 -> 0,1328 */
	reached1[1324] = 1;
	trans[1][1316]	= settr(1623,0,1317,2,0,"else", 0, 2, 0);
	trans[1][1317]	= settr(1624,0,1328,1357,1357,"(1)", 0, 2, 0); /* m: 1324 -> 1328,0 */
	reached1[1324] = 1;
	trans[1][1324]	= settr(1631,0,1328,1358,1358,"j = (j+1)", 0, 2, 0);
	trans[1][1325]	= settr(1632,0,1326,2,0,"else", 0, 2, 0);
	trans[1][1326]	= settr(1633,0,1758,1359,1359,"j = 1", 0, 2, 0);
	trans[1][1327]	= settr(1634,0,1758,1,0,"goto :b9", 0, 2, 0);
	trans[1][1330]	= settr(1637,0,1758,1,0,"break", 0, 2, 0);
	trans[1][1500]	= settr(1807,0,1758,1,0,".(goto)", 0, 2, 0);
	trans[1][1332]	= settr(1639,0,1498,2,0,"else", 0, 2, 0);
	T = trans[ 1][1498] = settr(1805,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1805,0,1333,0,0,"sub-sequence", 0, 2, 0);
	trans[1][1333]	= settr(1640,0,1495,1360,1360,"j = (3-1)", 0, 2, 0);
	trans[1][1496]	= settr(1803,0,1495,1,0,".(goto)", 0, 2, 0);
	T = trans[1][1495] = settr(1802,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1802,0,1334,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1802,0,1492,0,0,"DO", 0, 2, 0);
	trans[1][1334]	= settr(1641,0,1490,1361,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][1490] = settr(1797,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1797,0,1488,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1488] = settr(1795,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1795,0,1335,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1795,0,1374,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1795,0,1412,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1795,0,1450,0,0,"IF", 0, 2, 0);
	trans[1][1335]	= settr(1642,0,1373,1362,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][1373] = settr(1680,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1680,0,1355,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1355] = settr(1662,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1662,2,1353,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1353] = settr(1660,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1660,2,1336,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1660,2,1339,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1660,2,1342,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1660,2,1345,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1660,2,1348,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1660,2,1351,0,0,"IF", 1, 2, 0);
	trans[1][1336]	= settr(1643,4,1356,1363,1363,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1337 -> 1356,0 */
	reached1[1337] = 1;
	trans[1][1337]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1338]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1354]	= settr(1661,0,1356,1364,1364,".(goto)", 1, 2, 0);
	trans[1][1339]	= settr(1646,4,1356,1365,1365,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1340 -> 1356,0 */
	reached1[1340] = 1;
	trans[1][1340]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1341]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1342]	= settr(1649,4,1356,1366,1366,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1343 -> 1356,0 */
	reached1[1343] = 1;
	trans[1][1343]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1344]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1345]	= settr(1652,4,1356,1367,1367,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1346 -> 1356,0 */
	reached1[1346] = 1;
	trans[1][1346]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1347]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1348]	= settr(1655,4,1356,1368,1368,"((START==ABORT))", 1, 2, 0); /* m: 1349 -> 1356,0 */
	reached1[1349] = 1;
	trans[1][1349]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1350]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1351]	= settr(1658,2,1352,2,0,"else", 1, 2, 0);
	trans[1][1352]	= settr(1659,4,1356,1369,1369,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1354 -> 0,1356 */
	reached1[1354] = 1;
	trans[1][1356]	= settr(1663,0,1371,1370,1370,"(run Thread(j))", 0, 2, 0);
	T = trans[1][1371] = settr(1678,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1678,0,1357,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1678,0,1369,0,0,"IF", 0, 2, 0);
	trans[1][1357]	= settr(1664,0,1368,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1368] = settr(1675,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1675,0,1364,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1364] = settr(1671,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1671,0,1358,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1671,0,1360,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1671,0,1362,0,0,"IF", 0, 2, 0);
	trans[1][1358]	= settr(1665,0,1366,1371,1371,"((_pid==0))", 0, 2, 0); /* m: 1359 -> 1366,0 */
	reached1[1359] = 1;
	trans[1][1359]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1365]	= settr(1672,0,1366,1,0,".(goto)", 0, 2, 0);
	trans[1][1360]	= settr(1667,0,1366,1372,1372,"((_pid==1))", 0, 2, 0); /* m: 1361 -> 1366,0 */
	reached1[1361] = 1;
	trans[1][1361]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1362]	= settr(1669,0,1366,1373,1373,"((_pid>1))", 0, 2, 0); /* m: 1363 -> 1366,0 */
	reached1[1363] = 1;
	trans[1][1363]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1366]	= settr(1673,0,1367,1374,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1367]	= settr(1674,0,1495,1375,1375,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1491 -> 0,1495 */
	reached1[1491] = 1;
	trans[1][1372]	= settr(1679,0,1491,1,0,".(goto)", 0, 2, 0); /* m: 1491 -> 0,1495 */
	reached1[1491] = 1;
	trans[1][1369]	= settr(1676,0,1370,2,0,"else", 0, 2, 0);
	trans[1][1370]	= settr(1677,0,1495,1376,1376,"(1)", 0, 2, 0); /* m: 1491 -> 1495,0 */
	reached1[1491] = 1;
	trans[1][1489]	= settr(1796,0,1491,1,0,".(goto)", 0, 2, 0); /* m: 1491 -> 0,1495 */
	reached1[1491] = 1;
	trans[1][1374]	= settr(1681,0,1411,1377,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][1411] = settr(1718,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1718,0,1394,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1394] = settr(1701,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1701,2,1392,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1392] = settr(1699,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1699,2,1375,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1699,2,1378,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1699,2,1381,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1699,2,1384,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1699,2,1387,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1699,2,1390,0,0,"IF", 1, 2, 0);
	trans[1][1375]	= settr(1682,4,1409,1378,1378,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1376 -> 1409,0 */
	reached1[1376] = 1;
	trans[1][1376]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1377]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1393]	= settr(1700,0,1409,1379,1379,".(goto)", 1, 2, 0);
	trans[1][1378]	= settr(1685,4,1409,1380,1380,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1379 -> 1409,0 */
	reached1[1379] = 1;
	trans[1][1379]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1380]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1381]	= settr(1688,4,1409,1381,1381,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1382 -> 1409,0 */
	reached1[1382] = 1;
	trans[1][1382]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1383]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1384]	= settr(1691,4,1409,1382,1382,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1385 -> 1409,0 */
	reached1[1385] = 1;
	trans[1][1385]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1386]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1387]	= settr(1694,4,1409,1383,1383,"((PAUSE==ABORT))", 1, 2, 0); /* m: 1388 -> 1409,0 */
	reached1[1388] = 1;
	trans[1][1388]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1389]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1390]	= settr(1697,2,1391,2,0,"else", 1, 2, 0);
	trans[1][1391]	= settr(1698,4,1409,1384,1384,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1393 -> 0,1409 */
	reached1[1393] = 1;
	T = trans[1][1409] = settr(1716,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1716,0,1395,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1716,0,1407,0,0,"IF", 0, 2, 0);
	trans[1][1395]	= settr(1702,0,1406,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1406] = settr(1713,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1713,0,1402,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1402] = settr(1709,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1709,0,1396,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1709,0,1398,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1709,0,1400,0,0,"IF", 0, 2, 0);
	trans[1][1396]	= settr(1703,0,1404,1385,1385,"((_pid==0))", 0, 2, 0); /* m: 1397 -> 1404,0 */
	reached1[1397] = 1;
	trans[1][1397]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1403]	= settr(1710,0,1404,1,0,".(goto)", 0, 2, 0);
	trans[1][1398]	= settr(1705,0,1404,1386,1386,"((_pid==1))", 0, 2, 0); /* m: 1399 -> 1404,0 */
	reached1[1399] = 1;
	trans[1][1399]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1400]	= settr(1707,0,1404,1387,1387,"((_pid>1))", 0, 2, 0); /* m: 1401 -> 1404,0 */
	reached1[1401] = 1;
	trans[1][1401]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1404]	= settr(1711,0,1405,1388,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1405]	= settr(1712,0,1495,1389,1389,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1491 -> 0,1495 */
	reached1[1491] = 1;
	trans[1][1410]	= settr(1717,0,1491,1,0,".(goto)", 0, 2, 0); /* m: 1491 -> 0,1495 */
	reached1[1491] = 1;
	trans[1][1407]	= settr(1714,0,1408,2,0,"else", 0, 2, 0);
	trans[1][1408]	= settr(1715,0,1495,1390,1390,"(1)", 0, 2, 0); /* m: 1491 -> 1495,0 */
	reached1[1491] = 1;
	trans[1][1412]	= settr(1719,0,1449,1391,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][1449] = settr(1756,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1756,0,1432,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1432] = settr(1739,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1739,2,1430,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1430] = settr(1737,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1737,2,1413,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1737,2,1416,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1737,2,1419,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1737,2,1422,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1737,2,1425,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1737,2,1428,0,0,"IF", 1, 2, 0);
	trans[1][1413]	= settr(1720,4,1447,1392,1392,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1414 -> 1447,0 */
	reached1[1414] = 1;
	trans[1][1414]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1415]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1431]	= settr(1738,0,1447,1393,1393,".(goto)", 1, 2, 0);
	trans[1][1416]	= settr(1723,4,1447,1394,1394,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1417 -> 1447,0 */
	reached1[1417] = 1;
	trans[1][1417]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1418]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1419]	= settr(1726,4,1447,1395,1395,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1420 -> 1447,0 */
	reached1[1420] = 1;
	trans[1][1420]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1421]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1422]	= settr(1729,4,1447,1396,1396,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1423 -> 1447,0 */
	reached1[1423] = 1;
	trans[1][1423]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1424]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1425]	= settr(1732,4,1447,1397,1397,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 1426 -> 1447,0 */
	reached1[1426] = 1;
	trans[1][1426]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1427]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1428]	= settr(1735,2,1429,2,0,"else", 1, 2, 0);
	trans[1][1429]	= settr(1736,4,1447,1398,1398,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1431 -> 0,1447 */
	reached1[1431] = 1;
	T = trans[1][1447] = settr(1754,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1754,0,1433,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1754,0,1445,0,0,"IF", 0, 2, 0);
	trans[1][1433]	= settr(1740,0,1444,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1444] = settr(1751,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1751,0,1440,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1440] = settr(1747,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1747,0,1434,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1747,0,1436,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1747,0,1438,0,0,"IF", 0, 2, 0);
	trans[1][1434]	= settr(1741,0,1442,1399,1399,"((_pid==0))", 0, 2, 0); /* m: 1435 -> 1442,0 */
	reached1[1435] = 1;
	trans[1][1435]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1441]	= settr(1748,0,1442,1,0,".(goto)", 0, 2, 0);
	trans[1][1436]	= settr(1743,0,1442,1400,1400,"((_pid==1))", 0, 2, 0); /* m: 1437 -> 1442,0 */
	reached1[1437] = 1;
	trans[1][1437]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1438]	= settr(1745,0,1442,1401,1401,"((_pid>1))", 0, 2, 0); /* m: 1439 -> 1442,0 */
	reached1[1439] = 1;
	trans[1][1439]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1442]	= settr(1749,0,1443,1402,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1443]	= settr(1750,0,1495,1403,1403,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1491 -> 0,1495 */
	reached1[1491] = 1;
	trans[1][1448]	= settr(1755,0,1491,1,0,".(goto)", 0, 2, 0); /* m: 1491 -> 0,1495 */
	reached1[1491] = 1;
	trans[1][1445]	= settr(1752,0,1446,2,0,"else", 0, 2, 0);
	trans[1][1446]	= settr(1753,0,1495,1404,1404,"(1)", 0, 2, 0); /* m: 1491 -> 1495,0 */
	reached1[1491] = 1;
	trans[1][1450]	= settr(1757,0,1487,1405,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][1487] = settr(1794,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1794,0,1470,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1470] = settr(1777,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1777,2,1468,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1468] = settr(1775,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1775,2,1451,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1775,2,1454,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1775,2,1457,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1775,2,1460,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1775,2,1463,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1775,2,1466,0,0,"IF", 1, 2, 0);
	trans[1][1451]	= settr(1758,4,1485,1406,1406,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1452 -> 1485,0 */
	reached1[1452] = 1;
	trans[1][1452]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1453]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1469]	= settr(1776,0,1485,1407,1407,".(goto)", 1, 2, 0);
	trans[1][1454]	= settr(1761,4,1485,1408,1408,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1455 -> 1485,0 */
	reached1[1455] = 1;
	trans[1][1455]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1456]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1457]	= settr(1764,4,1485,1409,1409,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1458 -> 1485,0 */
	reached1[1458] = 1;
	trans[1][1458]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1459]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1460]	= settr(1767,4,1485,1410,1410,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1461 -> 1485,0 */
	reached1[1461] = 1;
	trans[1][1461]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1462]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1463]	= settr(1770,4,1485,1411,1411,"((STOP==ABORT))", 1, 2, 0); /* m: 1464 -> 1485,0 */
	reached1[1464] = 1;
	trans[1][1464]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1465]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1466]	= settr(1773,2,1467,2,0,"else", 1, 2, 0);
	trans[1][1467]	= settr(1774,4,1485,1412,1412,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1469 -> 0,1485 */
	reached1[1469] = 1;
	T = trans[1][1485] = settr(1792,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1792,0,1471,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1792,0,1483,0,0,"IF", 0, 2, 0);
	trans[1][1471]	= settr(1778,0,1482,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1482] = settr(1789,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1789,0,1478,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1478] = settr(1785,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1785,0,1472,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1785,0,1474,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1785,0,1476,0,0,"IF", 0, 2, 0);
	trans[1][1472]	= settr(1779,0,1480,1413,1413,"((_pid==0))", 0, 2, 0); /* m: 1473 -> 1480,0 */
	reached1[1473] = 1;
	trans[1][1473]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1479]	= settr(1786,0,1480,1,0,".(goto)", 0, 2, 0);
	trans[1][1474]	= settr(1781,0,1480,1414,1414,"((_pid==1))", 0, 2, 0); /* m: 1475 -> 1480,0 */
	reached1[1475] = 1;
	trans[1][1475]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1476]	= settr(1783,0,1480,1415,1415,"((_pid>1))", 0, 2, 0); /* m: 1477 -> 1480,0 */
	reached1[1477] = 1;
	trans[1][1477]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1480]	= settr(1787,0,1481,1416,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1481]	= settr(1788,0,1495,1417,1417,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1491 -> 0,1495 */
	reached1[1491] = 1;
	trans[1][1486]	= settr(1793,0,1491,1,0,".(goto)", 0, 2, 0); /* m: 1491 -> 0,1495 */
	reached1[1491] = 1;
	trans[1][1483]	= settr(1790,0,1484,2,0,"else", 0, 2, 0);
	trans[1][1484]	= settr(1791,0,1495,1418,1418,"(1)", 0, 2, 0); /* m: 1491 -> 1495,0 */
	reached1[1491] = 1;
	trans[1][1491]	= settr(1798,0,1495,1419,1419,"j = (j-1)", 0, 2, 0);
	trans[1][1492]	= settr(1799,0,1493,2,0,"else", 0, 2, 0);
	trans[1][1493]	= settr(1800,0,1758,1420,1420,"j = 1", 0, 2, 0);
	trans[1][1494]	= settr(1801,0,1758,1,0,"goto :b10", 0, 2, 0);
	trans[1][1497]	= settr(1804,0,1758,1,0,"break", 0, 2, 0);
	trans[1][1729]	= settr(2036,0,1758,1,0,".(goto)", 0, 2, 0);
	trans[1][1502]	= settr(1809,0,1727,2,0,"else", 0, 2, 0);
	T = trans[ 1][1727] = settr(2034,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2034,0,1503,0,0,"sub-sequence", 0, 2, 0);
	trans[1][1503]	= settr(1810,0,1668,1421,0,"printf('Supervisor propagating command %e...\\n',12)", 0, 2, 0);
	T = trans[ 1][1668] = settr(1975,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1975,0,1665,0,0,"sub-sequence", 0, 2, 0);
	trans[1][1666]	= settr(1973,0,1665,1,0,".(goto)", 0, 2, 0);
	T = trans[1][1665] = settr(1972,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(1972,0,1504,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(1972,0,1662,0,0,"DO", 0, 2, 0);
	trans[1][1504]	= settr(1811,0,1660,1422,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][1660] = settr(1967,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1967,0,1658,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1658] = settr(1965,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1965,0,1505,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1965,0,1544,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1965,0,1582,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1965,0,1620,0,0,"IF", 0, 2, 0);
	trans[1][1505]	= settr(1812,0,1543,1423,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][1543] = settr(1850,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1850,0,1525,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1525] = settr(1832,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1832,2,1523,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1523] = settr(1830,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1830,2,1506,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1830,2,1509,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1830,2,1512,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1830,2,1515,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1830,2,1518,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1830,2,1521,0,0,"IF", 1, 2, 0);
	trans[1][1506]	= settr(1813,4,1526,1424,1424,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1507 -> 1526,0 */
	reached1[1507] = 1;
	trans[1][1507]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1508]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1524]	= settr(1831,0,1526,1425,1425,".(goto)", 1, 2, 0);
	trans[1][1509]	= settr(1816,4,1526,1426,1426,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1510 -> 1526,0 */
	reached1[1510] = 1;
	trans[1][1510]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1511]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1512]	= settr(1819,4,1526,1427,1427,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1513 -> 1526,0 */
	reached1[1513] = 1;
	trans[1][1513]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1514]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1515]	= settr(1822,4,1526,1428,1428,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1516 -> 1526,0 */
	reached1[1516] = 1;
	trans[1][1516]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1517]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1518]	= settr(1825,4,1526,1429,1429,"((START==ABORT))", 1, 2, 0); /* m: 1519 -> 1526,0 */
	reached1[1519] = 1;
	trans[1][1519]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1520]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1521]	= settr(1828,2,1522,2,0,"else", 1, 2, 0);
	trans[1][1522]	= settr(1829,4,1526,1430,1430,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1524 -> 0,1526 */
	reached1[1524] = 1;
	trans[1][1526]	= settr(1833,0,1541,1431,1431,"(run Thread(j))", 0, 2, 0);
	T = trans[1][1541] = settr(1848,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(1848,0,1527,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(1848,0,1539,0,0,"IF", 0, 2, 0);
	trans[1][1527]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][1538] = settr(1845,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1845,0,1534,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1534] = settr(1841,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1841,0,1528,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1841,0,1530,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1841,0,1532,0,0,"IF", 0, 2, 0);
	trans[1][1528]	= settr(1835,0,1536,1432,1432,"((_pid==0))", 0, 2, 0); /* m: 1529 -> 1536,0 */
	reached1[1529] = 1;
	trans[1][1529]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1535]	= settr(1842,0,1536,1,0,".(goto)", 0, 2, 0);
	trans[1][1530]	= settr(1837,0,1536,1433,1433,"((_pid==1))", 0, 2, 0); /* m: 1531 -> 1536,0 */
	reached1[1531] = 1;
	trans[1][1531]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1532]	= settr(1839,0,1536,1434,1434,"((_pid>1))", 0, 2, 0); /* m: 1533 -> 1536,0 */
	reached1[1533] = 1;
	trans[1][1533]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1536]	= settr(1843,0,1537,1435,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1537]	= settr(1844,0,1665,1436,1436,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1661 -> 0,1665 */
	reached1[1661] = 1;
	trans[1][1542]	= settr(1849,0,1661,1,0,".(goto)", 0, 2, 0); /* m: 1661 -> 0,1665 */
	reached1[1661] = 1;
	trans[1][1539]	= settr(1846,0,1540,2,0,"else", 0, 2, 0);
	trans[1][1540]	= settr(1847,0,1665,1437,1437,"(1)", 0, 2, 0); /* m: 1661 -> 1665,0 */
	reached1[1661] = 1;
	trans[1][1659]	= settr(1966,0,1661,1,0,".(goto)", 0, 2, 0); /* m: 1661 -> 0,1665 */
	reached1[1661] = 1;
	trans[1][1544]	= settr(1851,0,1581,1438,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][1581] = settr(1888,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1888,0,1564,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1564] = settr(1871,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1871,2,1562,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1562] = settr(1869,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1869,2,1545,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1869,2,1548,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1869,2,1551,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1869,2,1554,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1869,2,1557,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1869,2,1560,0,0,"IF", 1, 2, 0);
	trans[1][1545]	= settr(1852,4,1579,1439,1439,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1546 -> 1579,0 */
	reached1[1546] = 1;
	trans[1][1546]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1547]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1563]	= settr(1870,0,1579,1440,1440,".(goto)", 1, 2, 0);
	trans[1][1548]	= settr(1855,4,1579,1441,1441,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1549 -> 1579,0 */
	reached1[1549] = 1;
	trans[1][1549]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1550]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1551]	= settr(1858,4,1579,1442,1442,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1552 -> 1579,0 */
	reached1[1552] = 1;
	trans[1][1552]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1553]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1554]	= settr(1861,4,1579,1443,1443,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1555 -> 1579,0 */
	reached1[1555] = 1;
	trans[1][1555]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1556]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1557]	= settr(1864,4,1579,1444,1444,"((PAUSE==ABORT))", 1, 2, 0); /* m: 1558 -> 1579,0 */
	reached1[1558] = 1;
	trans[1][1558]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1559]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1560]	= settr(1867,2,1561,2,0,"else", 1, 2, 0);
	trans[1][1561]	= settr(1868,4,1579,1445,1445,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1563 -> 0,1579 */
	reached1[1563] = 1;
	T = trans[1][1579] = settr(1886,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(1886,0,1565,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(1886,0,1577,0,0,"IF", 0, 2, 0);
	trans[1][1565]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][1576] = settr(1883,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1883,0,1572,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1572] = settr(1879,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1879,0,1566,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1879,0,1568,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1879,0,1570,0,0,"IF", 0, 2, 0);
	trans[1][1566]	= settr(1873,0,1574,1446,1446,"((_pid==0))", 0, 2, 0); /* m: 1567 -> 1574,0 */
	reached1[1567] = 1;
	trans[1][1567]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1573]	= settr(1880,0,1574,1,0,".(goto)", 0, 2, 0);
	trans[1][1568]	= settr(1875,0,1574,1447,1447,"((_pid==1))", 0, 2, 0); /* m: 1569 -> 1574,0 */
	reached1[1569] = 1;
	trans[1][1569]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1570]	= settr(1877,0,1574,1448,1448,"((_pid>1))", 0, 2, 0); /* m: 1571 -> 1574,0 */
	reached1[1571] = 1;
	trans[1][1571]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1574]	= settr(1881,0,1575,1449,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1575]	= settr(1882,0,1665,1450,1450,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1661 -> 0,1665 */
	reached1[1661] = 1;
	trans[1][1580]	= settr(1887,0,1661,1,0,".(goto)", 0, 2, 0); /* m: 1661 -> 0,1665 */
	reached1[1661] = 1;
	trans[1][1577]	= settr(1884,0,1578,2,0,"else", 0, 2, 0);
	trans[1][1578]	= settr(1885,0,1665,1451,1451,"(1)", 0, 2, 0); /* m: 1661 -> 1665,0 */
	reached1[1661] = 1;
	trans[1][1582]	= settr(1889,0,1619,1452,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][1619] = settr(1926,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1926,0,1602,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1602] = settr(1909,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1909,2,1600,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1600] = settr(1907,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1907,2,1583,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1907,2,1586,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1907,2,1589,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1907,2,1592,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1907,2,1595,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1907,2,1598,0,0,"IF", 1, 2, 0);
	trans[1][1583]	= settr(1890,4,1617,1453,1453,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1584 -> 1617,0 */
	reached1[1584] = 1;
	trans[1][1584]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1585]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1601]	= settr(1908,0,1617,1454,1454,".(goto)", 1, 2, 0);
	trans[1][1586]	= settr(1893,4,1617,1455,1455,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1587 -> 1617,0 */
	reached1[1587] = 1;
	trans[1][1587]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1588]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1589]	= settr(1896,4,1617,1456,1456,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1590 -> 1617,0 */
	reached1[1590] = 1;
	trans[1][1590]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1591]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1592]	= settr(1899,4,1617,1457,1457,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1593 -> 1617,0 */
	reached1[1593] = 1;
	trans[1][1593]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1594]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1595]	= settr(1902,4,1617,1458,1458,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 1596 -> 1617,0 */
	reached1[1596] = 1;
	trans[1][1596]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1597]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1598]	= settr(1905,2,1599,2,0,"else", 1, 2, 0);
	trans[1][1599]	= settr(1906,4,1617,1459,1459,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1601 -> 0,1617 */
	reached1[1601] = 1;
	T = trans[1][1617] = settr(1924,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(1924,0,1603,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(1924,0,1615,0,0,"IF", 0, 2, 0);
	trans[1][1603]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][1614] = settr(1921,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1921,0,1610,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1610] = settr(1917,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1917,0,1604,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1917,0,1606,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1917,0,1608,0,0,"IF", 0, 2, 0);
	trans[1][1604]	= settr(1911,0,1612,1460,1460,"((_pid==0))", 0, 2, 0); /* m: 1605 -> 1612,0 */
	reached1[1605] = 1;
	trans[1][1605]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1611]	= settr(1918,0,1612,1,0,".(goto)", 0, 2, 0);
	trans[1][1606]	= settr(1913,0,1612,1461,1461,"((_pid==1))", 0, 2, 0); /* m: 1607 -> 1612,0 */
	reached1[1607] = 1;
	trans[1][1607]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1608]	= settr(1915,0,1612,1462,1462,"((_pid>1))", 0, 2, 0); /* m: 1609 -> 1612,0 */
	reached1[1609] = 1;
	trans[1][1609]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1612]	= settr(1919,0,1613,1463,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1613]	= settr(1920,0,1665,1464,1464,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1661 -> 0,1665 */
	reached1[1661] = 1;
	trans[1][1618]	= settr(1925,0,1661,1,0,".(goto)", 0, 2, 0); /* m: 1661 -> 0,1665 */
	reached1[1661] = 1;
	trans[1][1615]	= settr(1922,0,1616,2,0,"else", 0, 2, 0);
	trans[1][1616]	= settr(1923,0,1665,1465,1465,"(1)", 0, 2, 0); /* m: 1661 -> 1665,0 */
	reached1[1661] = 1;
	trans[1][1620]	= settr(1927,0,1657,1466,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][1657] = settr(1964,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1964,0,1640,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1640] = settr(1947,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(1947,2,1638,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1638] = settr(1945,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1945,2,1621,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1945,2,1624,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1945,2,1627,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1945,2,1630,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(1945,2,1633,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(1945,2,1636,0,0,"IF", 1, 2, 0);
	trans[1][1621]	= settr(1928,4,1655,1467,1467,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1622 -> 1655,0 */
	reached1[1622] = 1;
	trans[1][1622]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1623]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1639]	= settr(1946,0,1655,1468,1468,".(goto)", 1, 2, 0);
	trans[1][1624]	= settr(1931,4,1655,1469,1469,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1625 -> 1655,0 */
	reached1[1625] = 1;
	trans[1][1625]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1626]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1627]	= settr(1934,4,1655,1470,1470,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1628 -> 1655,0 */
	reached1[1628] = 1;
	trans[1][1628]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1629]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1630]	= settr(1937,4,1655,1471,1471,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1631 -> 1655,0 */
	reached1[1631] = 1;
	trans[1][1631]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1632]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1633]	= settr(1940,4,1655,1472,1472,"((STOP==ABORT))", 1, 2, 0); /* m: 1634 -> 1655,0 */
	reached1[1634] = 1;
	trans[1][1634]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1635]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1636]	= settr(1943,2,1637,2,0,"else", 1, 2, 0);
	trans[1][1637]	= settr(1944,4,1655,1473,1473,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1639 -> 0,1655 */
	reached1[1639] = 1;
	T = trans[1][1655] = settr(1962,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(1962,0,1641,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(1962,0,1653,0,0,"IF", 0, 2, 0);
	trans[1][1641]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][1652] = settr(1959,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1959,0,1648,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1648] = settr(1955,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1955,0,1642,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1955,0,1644,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1955,0,1646,0,0,"IF", 0, 2, 0);
	trans[1][1642]	= settr(1949,0,1650,1474,1474,"((_pid==0))", 0, 2, 0); /* m: 1643 -> 1650,0 */
	reached1[1643] = 1;
	trans[1][1643]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1649]	= settr(1956,0,1650,1,0,".(goto)", 0, 2, 0);
	trans[1][1644]	= settr(1951,0,1650,1475,1475,"((_pid==1))", 0, 2, 0); /* m: 1645 -> 1650,0 */
	reached1[1645] = 1;
	trans[1][1645]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1646]	= settr(1953,0,1650,1476,1476,"((_pid>1))", 0, 2, 0); /* m: 1647 -> 1650,0 */
	reached1[1647] = 1;
	trans[1][1647]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1650]	= settr(1957,0,1651,1477,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1651]	= settr(1958,0,1665,1478,1478,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1661 -> 0,1665 */
	reached1[1661] = 1;
	trans[1][1656]	= settr(1963,0,1661,1,0,".(goto)", 0, 2, 0); /* m: 1661 -> 0,1665 */
	reached1[1661] = 1;
	trans[1][1653]	= settr(1960,0,1654,2,0,"else", 0, 2, 0);
	trans[1][1654]	= settr(1961,0,1665,1479,1479,"(1)", 0, 2, 0); /* m: 1661 -> 1665,0 */
	reached1[1661] = 1;
	trans[1][1661]	= settr(1968,0,1665,1480,1480,"j = (j+1)", 0, 2, 0);
	trans[1][1662]	= settr(1969,0,1663,2,0,"else", 0, 2, 0);
	trans[1][1663]	= settr(1970,0,1724,1481,1481,"j = 1", 0, 2, 0);
	trans[1][1664]	= settr(1971,0,1724,1,0,"goto :b11", 0, 2, 0);
	trans[1][1667]	= settr(1974,0,1724,1,0,"break", 0, 2, 0);
	trans[1][1725]	= settr(2032,0,1724,1,0,".(goto)", 0, 2, 0);
	T = trans[1][1724] = settr(2031,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(2031,0,1669,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(2031,0,1721,0,0,"DO", 0, 2, 0);
	trans[1][1669]	= settr(1976,0,1718,1482,0,"((j<3))", 0, 2, 0);
	T = trans[1][1718] = settr(2025,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2025,0,1670,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2025,0,1682,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2025,0,1694,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2025,0,1706,0,0,"IF", 0, 2, 0);
	trans[1][1670]	= settr(1977,0,1681,1483,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][1681] = settr(1988,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(1988,0,1677,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1677] = settr(1984,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1984,0,1671,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1984,0,1673,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1984,0,1675,0,0,"IF", 0, 2, 0);
	trans[1][1671]	= settr(1978,0,1679,1484,1484,"((_pid==0))", 0, 2, 0); /* m: 1672 -> 1679,0 */
	reached1[1672] = 1;
	trans[1][1672]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1678]	= settr(1985,0,1679,1,0,".(goto)", 0, 2, 0);
	trans[1][1673]	= settr(1980,0,1679,1485,1485,"((_pid==1))", 0, 2, 0); /* m: 1674 -> 1679,0 */
	reached1[1674] = 1;
	trans[1][1674]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1675]	= settr(1982,0,1679,1486,1486,"((_pid>1))", 0, 2, 0); /* m: 1676 -> 1679,0 */
	reached1[1676] = 1;
	trans[1][1676]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1679]	= settr(1986,0,1680,1487,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1680]	= settr(1987,0,1724,1488,1488,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1720 -> 0,1724 */
	reached1[1720] = 1;
	trans[1][1719]	= settr(2026,0,1720,1,0,".(goto)", 0, 2, 0); /* m: 1720 -> 0,1724 */
	reached1[1720] = 1;
	trans[1][1682]	= settr(1989,0,1693,1489,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][1693] = settr(2000,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2000,0,1689,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1689] = settr(1996,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1996,0,1683,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(1996,0,1685,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(1996,0,1687,0,0,"IF", 0, 2, 0);
	trans[1][1683]	= settr(1990,0,1691,1490,1490,"((_pid==0))", 0, 2, 0); /* m: 1684 -> 1691,0 */
	reached1[1684] = 1;
	trans[1][1684]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1690]	= settr(1997,0,1691,1,0,".(goto)", 0, 2, 0);
	trans[1][1685]	= settr(1992,0,1691,1491,1491,"((_pid==1))", 0, 2, 0); /* m: 1686 -> 1691,0 */
	reached1[1686] = 1;
	trans[1][1686]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1687]	= settr(1994,0,1691,1492,1492,"((_pid>1))", 0, 2, 0); /* m: 1688 -> 1691,0 */
	reached1[1688] = 1;
	trans[1][1688]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1691]	= settr(1998,0,1692,1493,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1692]	= settr(1999,0,1724,1494,1494,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1720 -> 0,1724 */
	reached1[1720] = 1;
	trans[1][1694]	= settr(2001,0,1705,1495,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][1705] = settr(2012,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2012,0,1701,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1701] = settr(2008,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2008,0,1695,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2008,0,1697,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2008,0,1699,0,0,"IF", 0, 2, 0);
	trans[1][1695]	= settr(2002,0,1703,1496,1496,"((_pid==0))", 0, 2, 0); /* m: 1696 -> 1703,0 */
	reached1[1696] = 1;
	trans[1][1696]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1702]	= settr(2009,0,1703,1,0,".(goto)", 0, 2, 0);
	trans[1][1697]	= settr(2004,0,1703,1497,1497,"((_pid==1))", 0, 2, 0); /* m: 1698 -> 1703,0 */
	reached1[1698] = 1;
	trans[1][1698]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1699]	= settr(2006,0,1703,1498,1498,"((_pid>1))", 0, 2, 0); /* m: 1700 -> 1703,0 */
	reached1[1700] = 1;
	trans[1][1700]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1703]	= settr(2010,0,1704,1499,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1704]	= settr(2011,0,1724,1500,1500,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1720 -> 0,1724 */
	reached1[1720] = 1;
	trans[1][1706]	= settr(2013,0,1717,1501,0,"((12==STOP))", 0, 2, 0);
	T = trans[ 1][1717] = settr(2024,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2024,0,1713,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1713] = settr(2020,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2020,0,1707,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2020,0,1709,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2020,0,1711,0,0,"IF", 0, 2, 0);
	trans[1][1707]	= settr(2014,0,1715,1502,1502,"((_pid==0))", 0, 2, 0); /* m: 1708 -> 1715,0 */
	reached1[1708] = 1;
	trans[1][1708]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1714]	= settr(2021,0,1715,1,0,".(goto)", 0, 2, 0);
	trans[1][1709]	= settr(2016,0,1715,1503,1503,"((_pid==1))", 0, 2, 0); /* m: 1710 -> 1715,0 */
	reached1[1710] = 1;
	trans[1][1710]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1711]	= settr(2018,0,1715,1504,1504,"((_pid>1))", 0, 2, 0); /* m: 1712 -> 1715,0 */
	reached1[1712] = 1;
	trans[1][1712]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1715]	= settr(2022,0,1716,1505,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1716]	= settr(2023,0,1724,1506,1506,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1720 -> 0,1724 */
	reached1[1720] = 1;
	trans[1][1720]	= settr(2027,0,1724,1507,1507,"j = (j+1)", 0, 2, 0);
	trans[1][1721]	= settr(2028,0,1722,2,0,"else", 0, 2, 0);
	trans[1][1722]	= settr(2029,0,1758,1508,1508,"j = 1", 0, 2, 0);
	trans[1][1723]	= settr(2030,0,1758,1,0,"goto :b12", 0, 2, 0);
	trans[1][1726]	= settr(2033,0,1758,1,0,"break", 0, 2, 0);
	trans[1][1733]	= settr(2040,0,1734,2,0,"else", 0, 2, 0);
	trans[1][1734]	= settr(2041,0,1758,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1758] = settr(2065,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2065,2,1756,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1756] = settr(2063,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2063,2,1739,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2063,2,1742,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2063,2,1745,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2063,2,1748,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2063,2,1751,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2063,2,1754,0,0,"IF", 1, 2, 0);
	trans[1][1739]	= settr(2046,4,2331,1509,1509,"(((CONTINUE==START)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 1740 -> 2331,0 */
	reached1[1740] = 1;
	trans[1][1740]	= settr(0,0,0,0,0,"assert((states[0]==READY))",0,0,0);
	trans[1][1741]	= settr(0,0,0,0,0,"commands[0] = START",0,0,0);
	trans[1][1757]	= settr(2064,0,2331,1510,1510,".(goto)", 1, 2, 0);
	trans[1][1742]	= settr(2049,4,2331,1511,1511,"(((CONTINUE==PAUSE)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 1743 -> 2331,0 */
	reached1[1743] = 1;
	trans[1][1743]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==RUNNING)))",0,0,0);
	trans[1][1744]	= settr(0,0,0,0,0,"commands[0] = PAUSE",0,0,0);
	trans[1][1745]	= settr(2052,4,2331,1512,1512,"(((CONTINUE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 1746 -> 2331,0 */
	reached1[1746] = 1;
	trans[1][1746]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==PAUSED)))",0,0,0);
	trans[1][1747]	= settr(0,0,0,0,0,"commands[0] = CONTINUE",0,0,0);
	trans[1][1748]	= settr(2055,4,2331,1513,1513,"(((CONTINUE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 1749 -> 2331,0 */
	reached1[1749] = 1;
	trans[1][1749]	= settr(0,0,0,0,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))",0,0,0);
	trans[1][1750]	= settr(0,0,0,0,0,"commands[0] = STOP",0,0,0);
	trans[1][1751]	= settr(2058,4,2331,1514,1514,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 1752 -> 2331,0 */
	reached1[1752] = 1;
	trans[1][1752]	= settr(0,0,0,0,0,"assert((states[0]!=READY))",0,0,0);
	trans[1][1753]	= settr(0,0,0,0,0,"commands[0] = ABORT",0,0,0);
	trans[1][1754]	= settr(2061,2,1755,2,0,"else", 1, 2, 0);
	trans[1][1755]	= settr(2062,4,2331,1515,1515,"printf('Thread %d ignores command %e.\\n',0,commands[0])", 1, 2, 0); /* m: 1757 -> 0,2331 */
	reached1[1757] = 1;
	T = trans[ 1][2331] = settr(2638,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2638,0,2330,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2330] = settr(2637,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2637,0,2328,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2328] = settr(2635,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2635,0,1759,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2635,0,1762,0,0,"IF", 0, 2, 0);
	trans[1][1759]	= settr(2066,0,1760,1516,0,"(((5==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][1760]	= settr(2067,0,1761,1517,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][1761]	= settr(2068,0,7662,1518,1518,"supervisor_started = 1", 1, 2, 0);
	trans[1][2329]	= settr(2636,0,7662,1,0,".(goto)", 0, 2, 0);
	trans[1][1762]	= settr(2069,0,2326,2,0,"else", 0, 2, 0);
	T = trans[1][2326] = settr(2633,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2633,0,1763,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2633,0,2100,0,0,"IF", 0, 2, 0);
	trans[1][1763]	= settr(2070,0,2099,1519,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][2099] = settr(2406,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2406,0,2097,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2097] = settr(2404,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2404,0,1764,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2404,0,1930,0,0,"IF", 0, 2, 0);
	trans[1][1764]	= settr(2071,0,1929,1520,0,"(((5==START)||(5==PAUSED)))", 0, 2, 0);
	T = trans[ 1][1929] = settr(2236,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2236,0,1926,0,0,"sub-sequence", 0, 2, 0);
	trans[1][1927]	= settr(2234,0,1926,1,0,".(goto)", 0, 2, 0);
	T = trans[1][1926] = settr(2233,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(2233,0,1765,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(2233,0,1923,0,0,"DO", 0, 2, 0);
	trans[1][1765]	= settr(2072,0,1921,1521,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][1921] = settr(2228,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2228,0,1919,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1919] = settr(2226,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2226,0,1766,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2226,0,1805,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2226,0,1843,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2226,0,1881,0,0,"IF", 0, 2, 0);
	trans[1][1766]	= settr(2073,0,1804,1522,0,"((5==START))", 0, 2, 0);
	T = trans[ 1][1804] = settr(2111,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2111,0,1786,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1786] = settr(2093,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2093,2,1784,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1784] = settr(2091,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2091,2,1767,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2091,2,1770,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2091,2,1773,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2091,2,1776,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2091,2,1779,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2091,2,1782,0,0,"IF", 1, 2, 0);
	trans[1][1767]	= settr(2074,4,1787,1523,1523,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1768 -> 1787,0 */
	reached1[1768] = 1;
	trans[1][1768]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1769]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1785]	= settr(2092,0,1787,1524,1524,".(goto)", 1, 2, 0);
	trans[1][1770]	= settr(2077,4,1787,1525,1525,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1771 -> 1787,0 */
	reached1[1771] = 1;
	trans[1][1771]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1772]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1773]	= settr(2080,4,1787,1526,1526,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1774 -> 1787,0 */
	reached1[1774] = 1;
	trans[1][1774]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1775]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1776]	= settr(2083,4,1787,1527,1527,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1777 -> 1787,0 */
	reached1[1777] = 1;
	trans[1][1777]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1778]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1779]	= settr(2086,4,1787,1528,1528,"((START==ABORT))", 1, 2, 0); /* m: 1780 -> 1787,0 */
	reached1[1780] = 1;
	trans[1][1780]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1781]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1782]	= settr(2089,2,1783,2,0,"else", 1, 2, 0);
	trans[1][1783]	= settr(2090,4,1787,1529,1529,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1785 -> 0,1787 */
	reached1[1785] = 1;
	trans[1][1787]	= settr(2094,0,1802,1530,1530,"(run Thread(j))", 0, 2, 0);
	T = trans[1][1802] = settr(2109,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2109,0,1788,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2109,0,1800,0,0,"IF", 0, 2, 0);
	trans[1][1788]	= settr(2095,0,1799,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1799] = settr(2106,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2106,0,1795,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1795] = settr(2102,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2102,0,1789,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2102,0,1791,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2102,0,1793,0,0,"IF", 0, 2, 0);
	trans[1][1789]	= settr(2096,0,1797,1531,1531,"((_pid==0))", 0, 2, 0); /* m: 1790 -> 1797,0 */
	reached1[1790] = 1;
	trans[1][1790]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1796]	= settr(2103,0,1797,1,0,".(goto)", 0, 2, 0);
	trans[1][1791]	= settr(2098,0,1797,1532,1532,"((_pid==1))", 0, 2, 0); /* m: 1792 -> 1797,0 */
	reached1[1792] = 1;
	trans[1][1792]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1793]	= settr(2100,0,1797,1533,1533,"((_pid>1))", 0, 2, 0); /* m: 1794 -> 1797,0 */
	reached1[1794] = 1;
	trans[1][1794]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1797]	= settr(2104,0,1798,1534,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1798]	= settr(2105,0,1926,1535,1535,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1922 -> 0,1926 */
	reached1[1922] = 1;
	trans[1][1803]	= settr(2110,0,1922,1,0,".(goto)", 0, 2, 0); /* m: 1922 -> 0,1926 */
	reached1[1922] = 1;
	trans[1][1800]	= settr(2107,0,1801,2,0,"else", 0, 2, 0);
	trans[1][1801]	= settr(2108,0,1926,1536,1536,"(1)", 0, 2, 0); /* m: 1922 -> 1926,0 */
	reached1[1922] = 1;
	trans[1][1920]	= settr(2227,0,1922,1,0,".(goto)", 0, 2, 0); /* m: 1922 -> 0,1926 */
	reached1[1922] = 1;
	trans[1][1805]	= settr(2112,0,1842,1537,0,"((5==PAUSE))", 0, 2, 0);
	T = trans[ 1][1842] = settr(2149,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2149,0,1825,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1825] = settr(2132,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2132,2,1823,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1823] = settr(2130,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2130,2,1806,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2130,2,1809,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2130,2,1812,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2130,2,1815,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2130,2,1818,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2130,2,1821,0,0,"IF", 1, 2, 0);
	trans[1][1806]	= settr(2113,4,1840,1538,1538,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1807 -> 1840,0 */
	reached1[1807] = 1;
	trans[1][1807]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1808]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1824]	= settr(2131,0,1840,1539,1539,".(goto)", 1, 2, 0);
	trans[1][1809]	= settr(2116,4,1840,1540,1540,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1810 -> 1840,0 */
	reached1[1810] = 1;
	trans[1][1810]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1811]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1812]	= settr(2119,4,1840,1541,1541,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1813 -> 1840,0 */
	reached1[1813] = 1;
	trans[1][1813]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1814]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1815]	= settr(2122,4,1840,1542,1542,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1816 -> 1840,0 */
	reached1[1816] = 1;
	trans[1][1816]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1817]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1818]	= settr(2125,4,1840,1543,1543,"((PAUSE==ABORT))", 1, 2, 0); /* m: 1819 -> 1840,0 */
	reached1[1819] = 1;
	trans[1][1819]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1820]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1821]	= settr(2128,2,1822,2,0,"else", 1, 2, 0);
	trans[1][1822]	= settr(2129,4,1840,1544,1544,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1824 -> 0,1840 */
	reached1[1824] = 1;
	T = trans[1][1840] = settr(2147,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2147,0,1826,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2147,0,1838,0,0,"IF", 0, 2, 0);
	trans[1][1826]	= settr(2133,0,1837,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1837] = settr(2144,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2144,0,1833,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1833] = settr(2140,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2140,0,1827,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2140,0,1829,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2140,0,1831,0,0,"IF", 0, 2, 0);
	trans[1][1827]	= settr(2134,0,1835,1545,1545,"((_pid==0))", 0, 2, 0); /* m: 1828 -> 1835,0 */
	reached1[1828] = 1;
	trans[1][1828]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1834]	= settr(2141,0,1835,1,0,".(goto)", 0, 2, 0);
	trans[1][1829]	= settr(2136,0,1835,1546,1546,"((_pid==1))", 0, 2, 0); /* m: 1830 -> 1835,0 */
	reached1[1830] = 1;
	trans[1][1830]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1831]	= settr(2138,0,1835,1547,1547,"((_pid>1))", 0, 2, 0); /* m: 1832 -> 1835,0 */
	reached1[1832] = 1;
	trans[1][1832]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1835]	= settr(2142,0,1836,1548,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1836]	= settr(2143,0,1926,1549,1549,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1922 -> 0,1926 */
	reached1[1922] = 1;
	trans[1][1841]	= settr(2148,0,1922,1,0,".(goto)", 0, 2, 0); /* m: 1922 -> 0,1926 */
	reached1[1922] = 1;
	trans[1][1838]	= settr(2145,0,1839,2,0,"else", 0, 2, 0);
	trans[1][1839]	= settr(2146,0,1926,1550,1550,"(1)", 0, 2, 0); /* m: 1922 -> 1926,0 */
	reached1[1922] = 1;
	trans[1][1843]	= settr(2150,0,1880,1551,0,"((5==CONTINUE))", 0, 2, 0);
	T = trans[ 1][1880] = settr(2187,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2187,0,1863,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1863] = settr(2170,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2170,2,1861,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1861] = settr(2168,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2168,2,1844,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2168,2,1847,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2168,2,1850,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2168,2,1853,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2168,2,1856,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2168,2,1859,0,0,"IF", 1, 2, 0);
	trans[1][1844]	= settr(2151,4,1878,1552,1552,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1845 -> 1878,0 */
	reached1[1845] = 1;
	trans[1][1845]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1846]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1862]	= settr(2169,0,1878,1553,1553,".(goto)", 1, 2, 0);
	trans[1][1847]	= settr(2154,4,1878,1554,1554,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1848 -> 1878,0 */
	reached1[1848] = 1;
	trans[1][1848]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1849]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1850]	= settr(2157,4,1878,1555,1555,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1851 -> 1878,0 */
	reached1[1851] = 1;
	trans[1][1851]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1852]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1853]	= settr(2160,4,1878,1556,1556,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1854 -> 1878,0 */
	reached1[1854] = 1;
	trans[1][1854]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1855]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1856]	= settr(2163,4,1878,1557,1557,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 1857 -> 1878,0 */
	reached1[1857] = 1;
	trans[1][1857]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1858]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1859]	= settr(2166,2,1860,2,0,"else", 1, 2, 0);
	trans[1][1860]	= settr(2167,4,1878,1558,1558,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1862 -> 0,1878 */
	reached1[1862] = 1;
	T = trans[1][1878] = settr(2185,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2185,0,1864,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2185,0,1876,0,0,"IF", 0, 2, 0);
	trans[1][1864]	= settr(2171,0,1875,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1875] = settr(2182,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2182,0,1871,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1871] = settr(2178,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2178,0,1865,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2178,0,1867,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2178,0,1869,0,0,"IF", 0, 2, 0);
	trans[1][1865]	= settr(2172,0,1873,1559,1559,"((_pid==0))", 0, 2, 0); /* m: 1866 -> 1873,0 */
	reached1[1866] = 1;
	trans[1][1866]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1872]	= settr(2179,0,1873,1,0,".(goto)", 0, 2, 0);
	trans[1][1867]	= settr(2174,0,1873,1560,1560,"((_pid==1))", 0, 2, 0); /* m: 1868 -> 1873,0 */
	reached1[1868] = 1;
	trans[1][1868]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1869]	= settr(2176,0,1873,1561,1561,"((_pid>1))", 0, 2, 0); /* m: 1870 -> 1873,0 */
	reached1[1870] = 1;
	trans[1][1870]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1873]	= settr(2180,0,1874,1562,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1874]	= settr(2181,0,1926,1563,1563,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1922 -> 0,1926 */
	reached1[1922] = 1;
	trans[1][1879]	= settr(2186,0,1922,1,0,".(goto)", 0, 2, 0); /* m: 1922 -> 0,1926 */
	reached1[1922] = 1;
	trans[1][1876]	= settr(2183,0,1877,2,0,"else", 0, 2, 0);
	trans[1][1877]	= settr(2184,0,1926,1564,1564,"(1)", 0, 2, 0); /* m: 1922 -> 1926,0 */
	reached1[1922] = 1;
	trans[1][1881]	= settr(2188,0,1918,1565,0,"(((5==STOP)||(5==ABORT)))", 0, 2, 0);
	T = trans[ 1][1918] = settr(2225,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2225,0,1901,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1901] = settr(2208,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2208,2,1899,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1899] = settr(2206,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2206,2,1882,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2206,2,1885,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2206,2,1888,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2206,2,1891,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2206,2,1894,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2206,2,1897,0,0,"IF", 1, 2, 0);
	trans[1][1882]	= settr(2189,4,1916,1566,1566,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1883 -> 1916,0 */
	reached1[1883] = 1;
	trans[1][1883]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1884]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1900]	= settr(2207,0,1916,1567,1567,".(goto)", 1, 2, 0);
	trans[1][1885]	= settr(2192,4,1916,1568,1568,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1886 -> 1916,0 */
	reached1[1886] = 1;
	trans[1][1886]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1887]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1888]	= settr(2195,4,1916,1569,1569,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1889 -> 1916,0 */
	reached1[1889] = 1;
	trans[1][1889]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1890]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1891]	= settr(2198,4,1916,1570,1570,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1892 -> 1916,0 */
	reached1[1892] = 1;
	trans[1][1892]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1893]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1894]	= settr(2201,4,1916,1571,1571,"((STOP==ABORT))", 1, 2, 0); /* m: 1895 -> 1916,0 */
	reached1[1895] = 1;
	trans[1][1895]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1896]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1897]	= settr(2204,2,1898,2,0,"else", 1, 2, 0);
	trans[1][1898]	= settr(2205,4,1916,1572,1572,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1900 -> 0,1916 */
	reached1[1900] = 1;
	T = trans[1][1916] = settr(2223,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2223,0,1902,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2223,0,1914,0,0,"IF", 0, 2, 0);
	trans[1][1902]	= settr(2209,0,1913,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1913] = settr(2220,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2220,0,1909,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1909] = settr(2216,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2216,0,1903,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2216,0,1905,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2216,0,1907,0,0,"IF", 0, 2, 0);
	trans[1][1903]	= settr(2210,0,1911,1573,1573,"((_pid==0))", 0, 2, 0); /* m: 1904 -> 1911,0 */
	reached1[1904] = 1;
	trans[1][1904]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1910]	= settr(2217,0,1911,1,0,".(goto)", 0, 2, 0);
	trans[1][1905]	= settr(2212,0,1911,1574,1574,"((_pid==1))", 0, 2, 0); /* m: 1906 -> 1911,0 */
	reached1[1906] = 1;
	trans[1][1906]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1907]	= settr(2214,0,1911,1575,1575,"((_pid>1))", 0, 2, 0); /* m: 1908 -> 1911,0 */
	reached1[1908] = 1;
	trans[1][1908]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1911]	= settr(2218,0,1912,1576,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1912]	= settr(2219,0,1926,1577,1577,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 1922 -> 0,1926 */
	reached1[1922] = 1;
	trans[1][1917]	= settr(2224,0,1922,1,0,".(goto)", 0, 2, 0); /* m: 1922 -> 0,1926 */
	reached1[1922] = 1;
	trans[1][1914]	= settr(2221,0,1915,2,0,"else", 0, 2, 0);
	trans[1][1915]	= settr(2222,0,1926,1578,1578,"(1)", 0, 2, 0); /* m: 1922 -> 1926,0 */
	reached1[1922] = 1;
	trans[1][1922]	= settr(2229,0,1926,1579,1579,"j = (j+1)", 0, 2, 0);
	trans[1][1923]	= settr(2230,0,1924,2,0,"else", 0, 2, 0);
	trans[1][1924]	= settr(2231,0,7662,1580,1580,"j = 1", 0, 2, 0);
	trans[1][1925]	= settr(2232,0,7662,1,0,"goto :b13", 0, 2, 0);
	trans[1][1928]	= settr(2235,0,7662,1,0,"break", 0, 2, 0);
	trans[1][2098]	= settr(2405,0,7662,1,0,".(goto)", 0, 2, 0);
	trans[1][1930]	= settr(2237,0,2096,2,0,"else", 0, 2, 0);
	T = trans[ 1][2096] = settr(2403,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2403,0,1931,0,0,"sub-sequence", 0, 2, 0);
	trans[1][1931]	= settr(2238,0,2093,1581,1581,"j = (3-1)", 0, 2, 0);
	trans[1][2094]	= settr(2401,0,2093,1,0,".(goto)", 0, 2, 0);
	T = trans[1][2093] = settr(2400,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(2400,0,1932,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(2400,0,2090,0,0,"DO", 0, 2, 0);
	trans[1][1932]	= settr(2239,0,2088,1582,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][2088] = settr(2395,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2395,0,2086,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2086] = settr(2393,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2393,0,1933,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2393,0,1972,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2393,0,2010,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2393,0,2048,0,0,"IF", 0, 2, 0);
	trans[1][1933]	= settr(2240,0,1971,1583,0,"((5==START))", 0, 2, 0);
	T = trans[ 1][1971] = settr(2278,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2278,0,1953,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1953] = settr(2260,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2260,2,1951,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1951] = settr(2258,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2258,2,1934,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2258,2,1937,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2258,2,1940,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2258,2,1943,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2258,2,1946,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2258,2,1949,0,0,"IF", 1, 2, 0);
	trans[1][1934]	= settr(2241,4,1954,1584,1584,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1935 -> 1954,0 */
	reached1[1935] = 1;
	trans[1][1935]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1936]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1952]	= settr(2259,0,1954,1585,1585,".(goto)", 1, 2, 0);
	trans[1][1937]	= settr(2244,4,1954,1586,1586,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1938 -> 1954,0 */
	reached1[1938] = 1;
	trans[1][1938]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1939]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1940]	= settr(2247,4,1954,1587,1587,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1941 -> 1954,0 */
	reached1[1941] = 1;
	trans[1][1941]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1942]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1943]	= settr(2250,4,1954,1588,1588,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1944 -> 1954,0 */
	reached1[1944] = 1;
	trans[1][1944]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1945]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1946]	= settr(2253,4,1954,1589,1589,"((START==ABORT))", 1, 2, 0); /* m: 1947 -> 1954,0 */
	reached1[1947] = 1;
	trans[1][1947]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1948]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1949]	= settr(2256,2,1950,2,0,"else", 1, 2, 0);
	trans[1][1950]	= settr(2257,4,1954,1590,1590,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1952 -> 0,1954 */
	reached1[1952] = 1;
	trans[1][1954]	= settr(2261,0,1969,1591,1591,"(run Thread(j))", 0, 2, 0);
	T = trans[1][1969] = settr(2276,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2276,0,1955,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2276,0,1967,0,0,"IF", 0, 2, 0);
	trans[1][1955]	= settr(2262,0,1966,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][1966] = settr(2273,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2273,0,1962,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][1962] = settr(2269,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2269,0,1956,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2269,0,1958,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2269,0,1960,0,0,"IF", 0, 2, 0);
	trans[1][1956]	= settr(2263,0,1964,1592,1592,"((_pid==0))", 0, 2, 0); /* m: 1957 -> 1964,0 */
	reached1[1957] = 1;
	trans[1][1957]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1963]	= settr(2270,0,1964,1,0,".(goto)", 0, 2, 0);
	trans[1][1958]	= settr(2265,0,1964,1593,1593,"((_pid==1))", 0, 2, 0); /* m: 1959 -> 1964,0 */
	reached1[1959] = 1;
	trans[1][1959]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1960]	= settr(2267,0,1964,1594,1594,"((_pid>1))", 0, 2, 0); /* m: 1961 -> 1964,0 */
	reached1[1961] = 1;
	trans[1][1961]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][1964]	= settr(2271,0,1965,1595,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][1965]	= settr(2272,0,2093,1596,1596,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2089 -> 0,2093 */
	reached1[2089] = 1;
	trans[1][1970]	= settr(2277,0,2089,1,0,".(goto)", 0, 2, 0); /* m: 2089 -> 0,2093 */
	reached1[2089] = 1;
	trans[1][1967]	= settr(2274,0,1968,2,0,"else", 0, 2, 0);
	trans[1][1968]	= settr(2275,0,2093,1597,1597,"(1)", 0, 2, 0); /* m: 2089 -> 2093,0 */
	reached1[2089] = 1;
	trans[1][2087]	= settr(2394,0,2089,1,0,".(goto)", 0, 2, 0); /* m: 2089 -> 0,2093 */
	reached1[2089] = 1;
	trans[1][1972]	= settr(2279,0,2009,1598,0,"((5==PAUSE))", 0, 2, 0);
	T = trans[ 1][2009] = settr(2316,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2316,0,1992,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][1992] = settr(2299,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2299,2,1990,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][1990] = settr(2297,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2297,2,1973,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2297,2,1976,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2297,2,1979,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2297,2,1982,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2297,2,1985,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2297,2,1988,0,0,"IF", 1, 2, 0);
	trans[1][1973]	= settr(2280,4,2007,1599,1599,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1974 -> 2007,0 */
	reached1[1974] = 1;
	trans[1][1974]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][1975]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][1991]	= settr(2298,0,2007,1600,1600,".(goto)", 1, 2, 0);
	trans[1][1976]	= settr(2283,4,2007,1601,1601,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 1977 -> 2007,0 */
	reached1[1977] = 1;
	trans[1][1977]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][1978]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][1979]	= settr(2286,4,2007,1602,1602,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1980 -> 2007,0 */
	reached1[1980] = 1;
	trans[1][1980]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][1981]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][1982]	= settr(2289,4,2007,1603,1603,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 1983 -> 2007,0 */
	reached1[1983] = 1;
	trans[1][1983]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][1984]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][1985]	= settr(2292,4,2007,1604,1604,"((PAUSE==ABORT))", 1, 2, 0); /* m: 1986 -> 2007,0 */
	reached1[1986] = 1;
	trans[1][1986]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][1987]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][1988]	= settr(2295,2,1989,2,0,"else", 1, 2, 0);
	trans[1][1989]	= settr(2296,4,2007,1605,1605,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 1991 -> 0,2007 */
	reached1[1991] = 1;
	T = trans[1][2007] = settr(2314,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2314,0,1993,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2314,0,2005,0,0,"IF", 0, 2, 0);
	trans[1][1993]	= settr(2300,0,2004,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][2004] = settr(2311,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2311,0,2000,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2000] = settr(2307,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2307,0,1994,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2307,0,1996,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2307,0,1998,0,0,"IF", 0, 2, 0);
	trans[1][1994]	= settr(2301,0,2002,1606,1606,"((_pid==0))", 0, 2, 0); /* m: 1995 -> 2002,0 */
	reached1[1995] = 1;
	trans[1][1995]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2001]	= settr(2308,0,2002,1,0,".(goto)", 0, 2, 0);
	trans[1][1996]	= settr(2303,0,2002,1607,1607,"((_pid==1))", 0, 2, 0); /* m: 1997 -> 2002,0 */
	reached1[1997] = 1;
	trans[1][1997]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][1998]	= settr(2305,0,2002,1608,1608,"((_pid>1))", 0, 2, 0); /* m: 1999 -> 2002,0 */
	reached1[1999] = 1;
	trans[1][1999]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2002]	= settr(2309,0,2003,1609,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2003]	= settr(2310,0,2093,1610,1610,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2089 -> 0,2093 */
	reached1[2089] = 1;
	trans[1][2008]	= settr(2315,0,2089,1,0,".(goto)", 0, 2, 0); /* m: 2089 -> 0,2093 */
	reached1[2089] = 1;
	trans[1][2005]	= settr(2312,0,2006,2,0,"else", 0, 2, 0);
	trans[1][2006]	= settr(2313,0,2093,1611,1611,"(1)", 0, 2, 0); /* m: 2089 -> 2093,0 */
	reached1[2089] = 1;
	trans[1][2010]	= settr(2317,0,2047,1612,0,"((5==CONTINUE))", 0, 2, 0);
	T = trans[ 1][2047] = settr(2354,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2354,0,2030,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2030] = settr(2337,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2337,2,2028,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2028] = settr(2335,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2335,2,2011,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2335,2,2014,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2335,2,2017,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2335,2,2020,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2335,2,2023,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2335,2,2026,0,0,"IF", 1, 2, 0);
	trans[1][2011]	= settr(2318,4,2045,1613,1613,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2012 -> 2045,0 */
	reached1[2012] = 1;
	trans[1][2012]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2013]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2029]	= settr(2336,0,2045,1614,1614,".(goto)", 1, 2, 0);
	trans[1][2014]	= settr(2321,4,2045,1615,1615,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2015 -> 2045,0 */
	reached1[2015] = 1;
	trans[1][2015]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2016]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2017]	= settr(2324,4,2045,1616,1616,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2018 -> 2045,0 */
	reached1[2018] = 1;
	trans[1][2018]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2019]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2020]	= settr(2327,4,2045,1617,1617,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2021 -> 2045,0 */
	reached1[2021] = 1;
	trans[1][2021]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2022]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2023]	= settr(2330,4,2045,1618,1618,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 2024 -> 2045,0 */
	reached1[2024] = 1;
	trans[1][2024]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2025]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2026]	= settr(2333,2,2027,2,0,"else", 1, 2, 0);
	trans[1][2027]	= settr(2334,4,2045,1619,1619,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2029 -> 0,2045 */
	reached1[2029] = 1;
	T = trans[1][2045] = settr(2352,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2352,0,2031,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2352,0,2043,0,0,"IF", 0, 2, 0);
	trans[1][2031]	= settr(2338,0,2042,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][2042] = settr(2349,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2349,0,2038,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2038] = settr(2345,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2345,0,2032,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2345,0,2034,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2345,0,2036,0,0,"IF", 0, 2, 0);
	trans[1][2032]	= settr(2339,0,2040,1620,1620,"((_pid==0))", 0, 2, 0); /* m: 2033 -> 2040,0 */
	reached1[2033] = 1;
	trans[1][2033]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2039]	= settr(2346,0,2040,1,0,".(goto)", 0, 2, 0);
	trans[1][2034]	= settr(2341,0,2040,1621,1621,"((_pid==1))", 0, 2, 0); /* m: 2035 -> 2040,0 */
	reached1[2035] = 1;
	trans[1][2035]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2036]	= settr(2343,0,2040,1622,1622,"((_pid>1))", 0, 2, 0); /* m: 2037 -> 2040,0 */
	reached1[2037] = 1;
	trans[1][2037]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2040]	= settr(2347,0,2041,1623,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2041]	= settr(2348,0,2093,1624,1624,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2089 -> 0,2093 */
	reached1[2089] = 1;
	trans[1][2046]	= settr(2353,0,2089,1,0,".(goto)", 0, 2, 0); /* m: 2089 -> 0,2093 */
	reached1[2089] = 1;
	trans[1][2043]	= settr(2350,0,2044,2,0,"else", 0, 2, 0);
	trans[1][2044]	= settr(2351,0,2093,1625,1625,"(1)", 0, 2, 0); /* m: 2089 -> 2093,0 */
	reached1[2089] = 1;
	trans[1][2048]	= settr(2355,0,2085,1626,0,"(((5==STOP)||(5==ABORT)))", 0, 2, 0);
	T = trans[ 1][2085] = settr(2392,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2392,0,2068,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2068] = settr(2375,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2375,2,2066,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2066] = settr(2373,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2373,2,2049,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2373,2,2052,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2373,2,2055,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2373,2,2058,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2373,2,2061,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2373,2,2064,0,0,"IF", 1, 2, 0);
	trans[1][2049]	= settr(2356,4,2083,1627,1627,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2050 -> 2083,0 */
	reached1[2050] = 1;
	trans[1][2050]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2051]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2067]	= settr(2374,0,2083,1628,1628,".(goto)", 1, 2, 0);
	trans[1][2052]	= settr(2359,4,2083,1629,1629,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2053 -> 2083,0 */
	reached1[2053] = 1;
	trans[1][2053]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2054]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2055]	= settr(2362,4,2083,1630,1630,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2056 -> 2083,0 */
	reached1[2056] = 1;
	trans[1][2056]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2057]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2058]	= settr(2365,4,2083,1631,1631,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2059 -> 2083,0 */
	reached1[2059] = 1;
	trans[1][2059]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2060]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2061]	= settr(2368,4,2083,1632,1632,"((STOP==ABORT))", 1, 2, 0); /* m: 2062 -> 2083,0 */
	reached1[2062] = 1;
	trans[1][2062]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2063]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2064]	= settr(2371,2,2065,2,0,"else", 1, 2, 0);
	trans[1][2065]	= settr(2372,4,2083,1633,1633,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2067 -> 0,2083 */
	reached1[2067] = 1;
	T = trans[1][2083] = settr(2390,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2390,0,2069,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2390,0,2081,0,0,"IF", 0, 2, 0);
	trans[1][2069]	= settr(2376,0,2080,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][2080] = settr(2387,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2387,0,2076,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2076] = settr(2383,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2383,0,2070,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2383,0,2072,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2383,0,2074,0,0,"IF", 0, 2, 0);
	trans[1][2070]	= settr(2377,0,2078,1634,1634,"((_pid==0))", 0, 2, 0); /* m: 2071 -> 2078,0 */
	reached1[2071] = 1;
	trans[1][2071]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2077]	= settr(2384,0,2078,1,0,".(goto)", 0, 2, 0);
	trans[1][2072]	= settr(2379,0,2078,1635,1635,"((_pid==1))", 0, 2, 0); /* m: 2073 -> 2078,0 */
	reached1[2073] = 1;
	trans[1][2073]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2074]	= settr(2381,0,2078,1636,1636,"((_pid>1))", 0, 2, 0); /* m: 2075 -> 2078,0 */
	reached1[2075] = 1;
	trans[1][2075]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2078]	= settr(2385,0,2079,1637,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2079]	= settr(2386,0,2093,1638,1638,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2089 -> 0,2093 */
	reached1[2089] = 1;
	trans[1][2084]	= settr(2391,0,2089,1,0,".(goto)", 0, 2, 0); /* m: 2089 -> 0,2093 */
	reached1[2089] = 1;
	trans[1][2081]	= settr(2388,0,2082,2,0,"else", 0, 2, 0);
	trans[1][2082]	= settr(2389,0,2093,1639,1639,"(1)", 0, 2, 0); /* m: 2089 -> 2093,0 */
	reached1[2089] = 1;
	trans[1][2089]	= settr(2396,0,2093,1640,1640,"j = (j-1)", 0, 2, 0);
	trans[1][2090]	= settr(2397,0,2091,2,0,"else", 0, 2, 0);
	trans[1][2091]	= settr(2398,0,7662,1641,1641,"j = 1", 0, 2, 0);
	trans[1][2092]	= settr(2399,0,7662,1,0,"goto :b14", 0, 2, 0);
	trans[1][2095]	= settr(2402,0,7662,1,0,"break", 0, 2, 0);
	trans[1][2327]	= settr(2634,0,7662,1,0,".(goto)", 0, 2, 0);
	trans[1][2100]	= settr(2407,0,2325,2,0,"else", 0, 2, 0);
	T = trans[ 1][2325] = settr(2632,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2632,0,2101,0,0,"sub-sequence", 0, 2, 0);
	trans[1][2101]	= settr(2408,0,2266,1642,0,"printf('Supervisor propagating command %e...\\n',5)", 0, 2, 0);
	T = trans[ 1][2266] = settr(2573,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2573,0,2263,0,0,"sub-sequence", 0, 2, 0);
	trans[1][2264]	= settr(2571,0,2263,1,0,".(goto)", 0, 2, 0);
	T = trans[1][2263] = settr(2570,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(2570,0,2102,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(2570,0,2260,0,0,"DO", 0, 2, 0);
	trans[1][2102]	= settr(2409,0,2258,1643,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][2258] = settr(2565,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2565,0,2256,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2256] = settr(2563,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2563,0,2103,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2563,0,2142,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2563,0,2180,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2563,0,2218,0,0,"IF", 0, 2, 0);
	trans[1][2103]	= settr(2410,0,2141,1644,0,"((5==START))", 0, 2, 0);
	T = trans[ 1][2141] = settr(2448,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2448,0,2123,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2123] = settr(2430,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2430,2,2121,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2121] = settr(2428,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2428,2,2104,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2428,2,2107,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2428,2,2110,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2428,2,2113,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2428,2,2116,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2428,2,2119,0,0,"IF", 1, 2, 0);
	trans[1][2104]	= settr(2411,4,2124,1645,1645,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2105 -> 2124,0 */
	reached1[2105] = 1;
	trans[1][2105]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2106]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2122]	= settr(2429,0,2124,1646,1646,".(goto)", 1, 2, 0);
	trans[1][2107]	= settr(2414,4,2124,1647,1647,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2108 -> 2124,0 */
	reached1[2108] = 1;
	trans[1][2108]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2109]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2110]	= settr(2417,4,2124,1648,1648,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2111 -> 2124,0 */
	reached1[2111] = 1;
	trans[1][2111]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2112]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2113]	= settr(2420,4,2124,1649,1649,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2114 -> 2124,0 */
	reached1[2114] = 1;
	trans[1][2114]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2115]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2116]	= settr(2423,4,2124,1650,1650,"((START==ABORT))", 1, 2, 0); /* m: 2117 -> 2124,0 */
	reached1[2117] = 1;
	trans[1][2117]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2118]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2119]	= settr(2426,2,2120,2,0,"else", 1, 2, 0);
	trans[1][2120]	= settr(2427,4,2124,1651,1651,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2122 -> 0,2124 */
	reached1[2122] = 1;
	trans[1][2124]	= settr(2431,0,2139,1652,1652,"(run Thread(j))", 0, 2, 0);
	T = trans[1][2139] = settr(2446,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(2446,0,2125,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(2446,0,2137,0,0,"IF", 0, 2, 0);
	trans[1][2125]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][2136] = settr(2443,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2443,0,2132,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2132] = settr(2439,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2439,0,2126,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2439,0,2128,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2439,0,2130,0,0,"IF", 0, 2, 0);
	trans[1][2126]	= settr(2433,0,2134,1653,1653,"((_pid==0))", 0, 2, 0); /* m: 2127 -> 2134,0 */
	reached1[2127] = 1;
	trans[1][2127]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2133]	= settr(2440,0,2134,1,0,".(goto)", 0, 2, 0);
	trans[1][2128]	= settr(2435,0,2134,1654,1654,"((_pid==1))", 0, 2, 0); /* m: 2129 -> 2134,0 */
	reached1[2129] = 1;
	trans[1][2129]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2130]	= settr(2437,0,2134,1655,1655,"((_pid>1))", 0, 2, 0); /* m: 2131 -> 2134,0 */
	reached1[2131] = 1;
	trans[1][2131]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2134]	= settr(2441,0,2135,1656,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2135]	= settr(2442,0,2263,1657,1657,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2259 -> 0,2263 */
	reached1[2259] = 1;
	trans[1][2140]	= settr(2447,0,2259,1,0,".(goto)", 0, 2, 0); /* m: 2259 -> 0,2263 */
	reached1[2259] = 1;
	trans[1][2137]	= settr(2444,0,2138,2,0,"else", 0, 2, 0);
	trans[1][2138]	= settr(2445,0,2263,1658,1658,"(1)", 0, 2, 0); /* m: 2259 -> 2263,0 */
	reached1[2259] = 1;
	trans[1][2257]	= settr(2564,0,2259,1,0,".(goto)", 0, 2, 0); /* m: 2259 -> 0,2263 */
	reached1[2259] = 1;
	trans[1][2142]	= settr(2449,0,2179,1659,0,"((5==PAUSE))", 0, 2, 0);
	T = trans[ 1][2179] = settr(2486,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2486,0,2162,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2162] = settr(2469,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2469,2,2160,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2160] = settr(2467,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2467,2,2143,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2467,2,2146,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2467,2,2149,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2467,2,2152,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2467,2,2155,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2467,2,2158,0,0,"IF", 1, 2, 0);
	trans[1][2143]	= settr(2450,4,2177,1660,1660,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2144 -> 2177,0 */
	reached1[2144] = 1;
	trans[1][2144]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2145]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2161]	= settr(2468,0,2177,1661,1661,".(goto)", 1, 2, 0);
	trans[1][2146]	= settr(2453,4,2177,1662,1662,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2147 -> 2177,0 */
	reached1[2147] = 1;
	trans[1][2147]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2148]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2149]	= settr(2456,4,2177,1663,1663,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2150 -> 2177,0 */
	reached1[2150] = 1;
	trans[1][2150]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2151]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2152]	= settr(2459,4,2177,1664,1664,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2153 -> 2177,0 */
	reached1[2153] = 1;
	trans[1][2153]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2154]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2155]	= settr(2462,4,2177,1665,1665,"((PAUSE==ABORT))", 1, 2, 0); /* m: 2156 -> 2177,0 */
	reached1[2156] = 1;
	trans[1][2156]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2157]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2158]	= settr(2465,2,2159,2,0,"else", 1, 2, 0);
	trans[1][2159]	= settr(2466,4,2177,1666,1666,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2161 -> 0,2177 */
	reached1[2161] = 1;
	T = trans[1][2177] = settr(2484,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(2484,0,2163,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(2484,0,2175,0,0,"IF", 0, 2, 0);
	trans[1][2163]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][2174] = settr(2481,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2481,0,2170,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2170] = settr(2477,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2477,0,2164,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2477,0,2166,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2477,0,2168,0,0,"IF", 0, 2, 0);
	trans[1][2164]	= settr(2471,0,2172,1667,1667,"((_pid==0))", 0, 2, 0); /* m: 2165 -> 2172,0 */
	reached1[2165] = 1;
	trans[1][2165]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2171]	= settr(2478,0,2172,1,0,".(goto)", 0, 2, 0);
	trans[1][2166]	= settr(2473,0,2172,1668,1668,"((_pid==1))", 0, 2, 0); /* m: 2167 -> 2172,0 */
	reached1[2167] = 1;
	trans[1][2167]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2168]	= settr(2475,0,2172,1669,1669,"((_pid>1))", 0, 2, 0); /* m: 2169 -> 2172,0 */
	reached1[2169] = 1;
	trans[1][2169]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2172]	= settr(2479,0,2173,1670,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2173]	= settr(2480,0,2263,1671,1671,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2259 -> 0,2263 */
	reached1[2259] = 1;
	trans[1][2178]	= settr(2485,0,2259,1,0,".(goto)", 0, 2, 0); /* m: 2259 -> 0,2263 */
	reached1[2259] = 1;
	trans[1][2175]	= settr(2482,0,2176,2,0,"else", 0, 2, 0);
	trans[1][2176]	= settr(2483,0,2263,1672,1672,"(1)", 0, 2, 0); /* m: 2259 -> 2263,0 */
	reached1[2259] = 1;
	trans[1][2180]	= settr(2487,0,2217,1673,0,"((5==CONTINUE))", 0, 2, 0);
	T = trans[ 1][2217] = settr(2524,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2524,0,2200,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2200] = settr(2507,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2507,2,2198,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2198] = settr(2505,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2505,2,2181,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2505,2,2184,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2505,2,2187,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2505,2,2190,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2505,2,2193,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2505,2,2196,0,0,"IF", 1, 2, 0);
	trans[1][2181]	= settr(2488,4,2215,1674,1674,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2182 -> 2215,0 */
	reached1[2182] = 1;
	trans[1][2182]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2183]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2199]	= settr(2506,0,2215,1675,1675,".(goto)", 1, 2, 0);
	trans[1][2184]	= settr(2491,4,2215,1676,1676,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2185 -> 2215,0 */
	reached1[2185] = 1;
	trans[1][2185]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2186]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2187]	= settr(2494,4,2215,1677,1677,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2188 -> 2215,0 */
	reached1[2188] = 1;
	trans[1][2188]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2189]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2190]	= settr(2497,4,2215,1678,1678,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2191 -> 2215,0 */
	reached1[2191] = 1;
	trans[1][2191]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2192]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2193]	= settr(2500,4,2215,1679,1679,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 2194 -> 2215,0 */
	reached1[2194] = 1;
	trans[1][2194]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2195]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2196]	= settr(2503,2,2197,2,0,"else", 1, 2, 0);
	trans[1][2197]	= settr(2504,4,2215,1680,1680,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2199 -> 0,2215 */
	reached1[2199] = 1;
	T = trans[1][2215] = settr(2522,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(2522,0,2201,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(2522,0,2213,0,0,"IF", 0, 2, 0);
	trans[1][2201]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][2212] = settr(2519,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2519,0,2208,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2208] = settr(2515,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2515,0,2202,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2515,0,2204,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2515,0,2206,0,0,"IF", 0, 2, 0);
	trans[1][2202]	= settr(2509,0,2210,1681,1681,"((_pid==0))", 0, 2, 0); /* m: 2203 -> 2210,0 */
	reached1[2203] = 1;
	trans[1][2203]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2209]	= settr(2516,0,2210,1,0,".(goto)", 0, 2, 0);
	trans[1][2204]	= settr(2511,0,2210,1682,1682,"((_pid==1))", 0, 2, 0); /* m: 2205 -> 2210,0 */
	reached1[2205] = 1;
	trans[1][2205]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2206]	= settr(2513,0,2210,1683,1683,"((_pid>1))", 0, 2, 0); /* m: 2207 -> 2210,0 */
	reached1[2207] = 1;
	trans[1][2207]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2210]	= settr(2517,0,2211,1684,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2211]	= settr(2518,0,2263,1685,1685,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2259 -> 0,2263 */
	reached1[2259] = 1;
	trans[1][2216]	= settr(2523,0,2259,1,0,".(goto)", 0, 2, 0); /* m: 2259 -> 0,2263 */
	reached1[2259] = 1;
	trans[1][2213]	= settr(2520,0,2214,2,0,"else", 0, 2, 0);
	trans[1][2214]	= settr(2521,0,2263,1686,1686,"(1)", 0, 2, 0); /* m: 2259 -> 2263,0 */
	reached1[2259] = 1;
	trans[1][2218]	= settr(2525,0,2255,1687,0,"(((5==STOP)||(5==ABORT)))", 0, 2, 0);
	T = trans[ 1][2255] = settr(2562,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2562,0,2238,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2238] = settr(2545,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2545,2,2236,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2236] = settr(2543,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2543,2,2219,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2543,2,2222,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2543,2,2225,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2543,2,2228,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2543,2,2231,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2543,2,2234,0,0,"IF", 1, 2, 0);
	trans[1][2219]	= settr(2526,4,2253,1688,1688,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2220 -> 2253,0 */
	reached1[2220] = 1;
	trans[1][2220]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2221]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2237]	= settr(2544,0,2253,1689,1689,".(goto)", 1, 2, 0);
	trans[1][2222]	= settr(2529,4,2253,1690,1690,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2223 -> 2253,0 */
	reached1[2223] = 1;
	trans[1][2223]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2224]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2225]	= settr(2532,4,2253,1691,1691,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2226 -> 2253,0 */
	reached1[2226] = 1;
	trans[1][2226]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2227]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2228]	= settr(2535,4,2253,1692,1692,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2229 -> 2253,0 */
	reached1[2229] = 1;
	trans[1][2229]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2230]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2231]	= settr(2538,4,2253,1693,1693,"((STOP==ABORT))", 1, 2, 0); /* m: 2232 -> 2253,0 */
	reached1[2232] = 1;
	trans[1][2232]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2233]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2234]	= settr(2541,2,2235,2,0,"else", 1, 2, 0);
	trans[1][2235]	= settr(2542,4,2253,1694,1694,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2237 -> 0,2253 */
	reached1[2237] = 1;
	T = trans[1][2253] = settr(2560,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(2560,0,2239,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(2560,0,2251,0,0,"IF", 0, 2, 0);
	trans[1][2239]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][2250] = settr(2557,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2557,0,2246,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2246] = settr(2553,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2553,0,2240,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2553,0,2242,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2553,0,2244,0,0,"IF", 0, 2, 0);
	trans[1][2240]	= settr(2547,0,2248,1695,1695,"((_pid==0))", 0, 2, 0); /* m: 2241 -> 2248,0 */
	reached1[2241] = 1;
	trans[1][2241]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2247]	= settr(2554,0,2248,1,0,".(goto)", 0, 2, 0);
	trans[1][2242]	= settr(2549,0,2248,1696,1696,"((_pid==1))", 0, 2, 0); /* m: 2243 -> 2248,0 */
	reached1[2243] = 1;
	trans[1][2243]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2244]	= settr(2551,0,2248,1697,1697,"((_pid>1))", 0, 2, 0); /* m: 2245 -> 2248,0 */
	reached1[2245] = 1;
	trans[1][2245]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2248]	= settr(2555,0,2249,1698,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2249]	= settr(2556,0,2263,1699,1699,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2259 -> 0,2263 */
	reached1[2259] = 1;
	trans[1][2254]	= settr(2561,0,2259,1,0,".(goto)", 0, 2, 0); /* m: 2259 -> 0,2263 */
	reached1[2259] = 1;
	trans[1][2251]	= settr(2558,0,2252,2,0,"else", 0, 2, 0);
	trans[1][2252]	= settr(2559,0,2263,1700,1700,"(1)", 0, 2, 0); /* m: 2259 -> 2263,0 */
	reached1[2259] = 1;
	trans[1][2259]	= settr(2566,0,2263,1701,1701,"j = (j+1)", 0, 2, 0);
	trans[1][2260]	= settr(2567,0,2261,2,0,"else", 0, 2, 0);
	trans[1][2261]	= settr(2568,0,2322,1702,1702,"j = 1", 0, 2, 0);
	trans[1][2262]	= settr(2569,0,2322,1,0,"goto :b15", 0, 2, 0);
	trans[1][2265]	= settr(2572,0,2322,1,0,"break", 0, 2, 0);
	trans[1][2323]	= settr(2630,0,2322,1,0,".(goto)", 0, 2, 0);
	T = trans[1][2322] = settr(2629,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(2629,0,2267,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(2629,0,2319,0,0,"DO", 0, 2, 0);
	trans[1][2267]	= settr(2574,0,2316,1703,0,"((j<3))", 0, 2, 0);
	T = trans[1][2316] = settr(2623,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2623,0,2268,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2623,0,2280,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2623,0,2292,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2623,0,2304,0,0,"IF", 0, 2, 0);
	trans[1][2268]	= settr(2575,0,2279,1704,0,"((5==START))", 0, 2, 0);
	T = trans[ 1][2279] = settr(2586,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2586,0,2275,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2275] = settr(2582,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2582,0,2269,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2582,0,2271,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2582,0,2273,0,0,"IF", 0, 2, 0);
	trans[1][2269]	= settr(2576,0,2277,1705,1705,"((_pid==0))", 0, 2, 0); /* m: 2270 -> 2277,0 */
	reached1[2270] = 1;
	trans[1][2270]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2276]	= settr(2583,0,2277,1,0,".(goto)", 0, 2, 0);
	trans[1][2271]	= settr(2578,0,2277,1706,1706,"((_pid==1))", 0, 2, 0); /* m: 2272 -> 2277,0 */
	reached1[2272] = 1;
	trans[1][2272]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2273]	= settr(2580,0,2277,1707,1707,"((_pid>1))", 0, 2, 0); /* m: 2274 -> 2277,0 */
	reached1[2274] = 1;
	trans[1][2274]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2277]	= settr(2584,0,2278,1708,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2278]	= settr(2585,0,2322,1709,1709,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2318 -> 0,2322 */
	reached1[2318] = 1;
	trans[1][2317]	= settr(2624,0,2318,1,0,".(goto)", 0, 2, 0); /* m: 2318 -> 0,2322 */
	reached1[2318] = 1;
	trans[1][2280]	= settr(2587,0,2291,1710,0,"((5==CONTINUE))", 0, 2, 0);
	T = trans[ 1][2291] = settr(2598,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2598,0,2287,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2287] = settr(2594,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2594,0,2281,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2594,0,2283,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2594,0,2285,0,0,"IF", 0, 2, 0);
	trans[1][2281]	= settr(2588,0,2289,1711,1711,"((_pid==0))", 0, 2, 0); /* m: 2282 -> 2289,0 */
	reached1[2282] = 1;
	trans[1][2282]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2288]	= settr(2595,0,2289,1,0,".(goto)", 0, 2, 0);
	trans[1][2283]	= settr(2590,0,2289,1712,1712,"((_pid==1))", 0, 2, 0); /* m: 2284 -> 2289,0 */
	reached1[2284] = 1;
	trans[1][2284]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2285]	= settr(2592,0,2289,1713,1713,"((_pid>1))", 0, 2, 0); /* m: 2286 -> 2289,0 */
	reached1[2286] = 1;
	trans[1][2286]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2289]	= settr(2596,0,2290,1714,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2290]	= settr(2597,0,2322,1715,1715,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2318 -> 0,2322 */
	reached1[2318] = 1;
	trans[1][2292]	= settr(2599,0,2303,1716,0,"((5==PAUSE))", 0, 2, 0);
	T = trans[ 1][2303] = settr(2610,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2610,0,2299,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2299] = settr(2606,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2606,0,2293,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2606,0,2295,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2606,0,2297,0,0,"IF", 0, 2, 0);
	trans[1][2293]	= settr(2600,0,2301,1717,1717,"((_pid==0))", 0, 2, 0); /* m: 2294 -> 2301,0 */
	reached1[2294] = 1;
	trans[1][2294]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2300]	= settr(2607,0,2301,1,0,".(goto)", 0, 2, 0);
	trans[1][2295]	= settr(2602,0,2301,1718,1718,"((_pid==1))", 0, 2, 0); /* m: 2296 -> 2301,0 */
	reached1[2296] = 1;
	trans[1][2296]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2297]	= settr(2604,0,2301,1719,1719,"((_pid>1))", 0, 2, 0); /* m: 2298 -> 2301,0 */
	reached1[2298] = 1;
	trans[1][2298]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2301]	= settr(2608,0,2302,1720,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2302]	= settr(2609,0,2322,1721,1721,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2318 -> 0,2322 */
	reached1[2318] = 1;
	trans[1][2304]	= settr(2611,0,2315,1722,0,"((5==STOP))", 0, 2, 0);
	T = trans[ 1][2315] = settr(2622,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2622,0,2311,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2311] = settr(2618,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2618,0,2305,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2618,0,2307,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2618,0,2309,0,0,"IF", 0, 2, 0);
	trans[1][2305]	= settr(2612,0,2313,1723,1723,"((_pid==0))", 0, 2, 0); /* m: 2306 -> 2313,0 */
	reached1[2306] = 1;
	trans[1][2306]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2312]	= settr(2619,0,2313,1,0,".(goto)", 0, 2, 0);
	trans[1][2307]	= settr(2614,0,2313,1724,1724,"((_pid==1))", 0, 2, 0); /* m: 2308 -> 2313,0 */
	reached1[2308] = 1;
	trans[1][2308]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2309]	= settr(2616,0,2313,1725,1725,"((_pid>1))", 0, 2, 0); /* m: 2310 -> 2313,0 */
	reached1[2310] = 1;
	trans[1][2310]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2313]	= settr(2620,0,2314,1726,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2314]	= settr(2621,0,2322,1727,1727,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2318 -> 0,2322 */
	reached1[2318] = 1;
	trans[1][2318]	= settr(2625,0,2322,1728,1728,"j = (j+1)", 0, 2, 0);
	trans[1][2319]	= settr(2626,0,2320,2,0,"else", 0, 2, 0);
	trans[1][2320]	= settr(2627,0,7662,1729,1729,"j = 1", 0, 2, 0);
	trans[1][2321]	= settr(2628,0,7662,1,0,"goto :b16", 0, 2, 0);
	trans[1][2324]	= settr(2631,0,7662,1,0,"break", 0, 2, 0);
	trans[1][7663]	= settr(7970,0,7662,1,0,".(goto)", 0, 2, 0);
	T = trans[1][7662] = settr(7969,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(7969,0,2332,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(7969,0,5911,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(7969,0,7660,0,0,"DO", 0, 2, 0);
	trans[1][2332]	= settr(2639,0,2333,1730,0,"((commands[0]==CONTINUE))", 1, 2, 0);
	trans[1][2333]	= settr(2640,0,5812,1731,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))", 1, 2, 0);
	T = trans[1][5812] = settr(6119,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6119,0,2334,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6119,0,4072,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6119,0,5810,0,0,"IF", 0, 2, 0);
	trans[1][2334]	= settr(2641,0,4071,1732,0,"((states[0]==STARTING))", 1, 2, 0);
	T = trans[ 1][4071] = settr(4378,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4378,0,2345,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2345] = settr(2652,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2652,0,2343,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2343] = settr(2650,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2650,0,2335,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2650,0,2337,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2650,0,2339,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2650,0,2341,0,0,"IF", 0, 2, 0);
	trans[1][2335]	= settr(2642,0,2346,1733,1733,"(((0==0)&&(6==0)))", 0, 2, 0); /* m: 2336 -> 2346,0 */
	reached1[2336] = 1;
	trans[1][2336]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, _) -> %e\\n',2,3)",0,0,0);
	trans[1][2344]	= settr(2651,0,2346,1,0,".(goto)", 0, 2, 0);
	trans[1][2337]	= settr(2644,0,2346,1734,1734,"(((0==0)&&(6>0)))", 0, 2, 0); /* m: 2338 -> 2346,0 */
	reached1[2338] = 1;
	trans[1][2338]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, %e) -> %e\\n',2,6,3)",0,0,0);
	trans[1][2339]	= settr(2646,0,2346,1735,1735,"(((0>0)&&(6==0)))", 0, 2, 0); /* m: 2340 -> 2346,0 */
	reached1[2340] = 1;
	trans[1][2340]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, _) -> %e\\n',0,2,3)",0,0,0);
	trans[1][2341]	= settr(2648,0,2346,1736,1736,"(((0>0)&&(6>0)))", 0, 2, 0); /* m: 2342 -> 2346,0 */
	reached1[2342] = 1;
	trans[1][2342]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, %e) -> %e\\n',0,2,6,3)",0,0,0);
	trans[1][2346]	= settr(2653,0,4070,1737,1737,"states[0] = 3", 1, 2, 0);
	T = trans[ 1][4070] = settr(4377,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4377,0,4068,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4068] = settr(4375,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4375,0,2347,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4375,0,2920,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4375,0,3493,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4375,0,4066,0,0,"IF", 0, 2, 0);
	trans[1][2347]	= settr(2654,0,2919,1738,0,"((3==RUNNING))", 0, 2, 0);
	T = trans[ 1][2919] = settr(3226,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3226,0,2917,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2917] = settr(3224,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3224,0,2348,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3224,0,2351,0,0,"IF", 0, 2, 0);
	trans[1][2348]	= settr(2655,0,2349,1739,0,"(((6==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][2349]	= settr(2656,0,2350,1740,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][2350]	= settr(2657,0,5910,1741,1741,"supervisor_started = 1", 1, 2, 0);
	trans[1][2918]	= settr(3225,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][2351]	= settr(2658,0,2915,2,0,"else", 0, 2, 0);
	T = trans[1][2915] = settr(3222,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3222,0,2352,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3222,0,2689,0,0,"IF", 0, 2, 0);
	trans[1][2352]	= settr(2659,0,2688,1742,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][2688] = settr(2995,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2995,0,2686,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2686] = settr(2993,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2993,0,2353,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2993,0,2519,0,0,"IF", 0, 2, 0);
	trans[1][2353]	= settr(2660,0,2518,1743,0,"(((6==START)||(6==PAUSED)))", 0, 2, 0);
	T = trans[ 1][2518] = settr(2825,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2825,0,2515,0,0,"sub-sequence", 0, 2, 0);
	trans[1][2516]	= settr(2823,0,2515,1,0,".(goto)", 0, 2, 0);
	T = trans[1][2515] = settr(2822,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(2822,0,2354,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(2822,0,2512,0,0,"DO", 0, 2, 0);
	trans[1][2354]	= settr(2661,0,2510,1744,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][2510] = settr(2817,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2817,0,2508,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2508] = settr(2815,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2815,0,2355,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2815,0,2394,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2815,0,2432,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2815,0,2470,0,0,"IF", 0, 2, 0);
	trans[1][2355]	= settr(2662,0,2393,1745,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][2393] = settr(2700,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2700,0,2375,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2375] = settr(2682,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2682,2,2373,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2373] = settr(2680,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2680,2,2356,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2680,2,2359,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2680,2,2362,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2680,2,2365,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2680,2,2368,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2680,2,2371,0,0,"IF", 1, 2, 0);
	trans[1][2356]	= settr(2663,4,2376,1746,1746,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2357 -> 2376,0 */
	reached1[2357] = 1;
	trans[1][2357]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2358]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2374]	= settr(2681,0,2376,1747,1747,".(goto)", 1, 2, 0);
	trans[1][2359]	= settr(2666,4,2376,1748,1748,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2360 -> 2376,0 */
	reached1[2360] = 1;
	trans[1][2360]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2361]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2362]	= settr(2669,4,2376,1749,1749,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2363 -> 2376,0 */
	reached1[2363] = 1;
	trans[1][2363]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2364]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2365]	= settr(2672,4,2376,1750,1750,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2366 -> 2376,0 */
	reached1[2366] = 1;
	trans[1][2366]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2367]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2368]	= settr(2675,4,2376,1751,1751,"((START==ABORT))", 1, 2, 0); /* m: 2369 -> 2376,0 */
	reached1[2369] = 1;
	trans[1][2369]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2370]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2371]	= settr(2678,2,2372,2,0,"else", 1, 2, 0);
	trans[1][2372]	= settr(2679,4,2376,1752,1752,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2374 -> 0,2376 */
	reached1[2374] = 1;
	trans[1][2376]	= settr(2683,0,2391,1753,1753,"(run Thread(j))", 0, 2, 0);
	T = trans[1][2391] = settr(2698,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2698,0,2377,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2698,0,2389,0,0,"IF", 0, 2, 0);
	trans[1][2377]	= settr(2684,0,2388,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][2388] = settr(2695,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2695,0,2384,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2384] = settr(2691,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2691,0,2378,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2691,0,2380,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2691,0,2382,0,0,"IF", 0, 2, 0);
	trans[1][2378]	= settr(2685,0,2386,1754,1754,"((_pid==0))", 0, 2, 0); /* m: 2379 -> 2386,0 */
	reached1[2379] = 1;
	trans[1][2379]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2385]	= settr(2692,0,2386,1,0,".(goto)", 0, 2, 0);
	trans[1][2380]	= settr(2687,0,2386,1755,1755,"((_pid==1))", 0, 2, 0); /* m: 2381 -> 2386,0 */
	reached1[2381] = 1;
	trans[1][2381]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2382]	= settr(2689,0,2386,1756,1756,"((_pid>1))", 0, 2, 0); /* m: 2383 -> 2386,0 */
	reached1[2383] = 1;
	trans[1][2383]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2386]	= settr(2693,0,2387,1757,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2387]	= settr(2694,0,2515,1758,1758,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2511 -> 0,2515 */
	reached1[2511] = 1;
	trans[1][2392]	= settr(2699,0,2511,1,0,".(goto)", 0, 2, 0); /* m: 2511 -> 0,2515 */
	reached1[2511] = 1;
	trans[1][2389]	= settr(2696,0,2390,2,0,"else", 0, 2, 0);
	trans[1][2390]	= settr(2697,0,2515,1759,1759,"(1)", 0, 2, 0); /* m: 2511 -> 2515,0 */
	reached1[2511] = 1;
	trans[1][2509]	= settr(2816,0,2511,1,0,".(goto)", 0, 2, 0); /* m: 2511 -> 0,2515 */
	reached1[2511] = 1;
	trans[1][2394]	= settr(2701,0,2431,1760,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][2431] = settr(2738,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2738,0,2414,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2414] = settr(2721,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2721,2,2412,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2412] = settr(2719,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2719,2,2395,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2719,2,2398,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2719,2,2401,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2719,2,2404,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2719,2,2407,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2719,2,2410,0,0,"IF", 1, 2, 0);
	trans[1][2395]	= settr(2702,4,2429,1761,1761,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2396 -> 2429,0 */
	reached1[2396] = 1;
	trans[1][2396]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2397]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2413]	= settr(2720,0,2429,1762,1762,".(goto)", 1, 2, 0);
	trans[1][2398]	= settr(2705,4,2429,1763,1763,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2399 -> 2429,0 */
	reached1[2399] = 1;
	trans[1][2399]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2400]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2401]	= settr(2708,4,2429,1764,1764,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2402 -> 2429,0 */
	reached1[2402] = 1;
	trans[1][2402]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2403]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2404]	= settr(2711,4,2429,1765,1765,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2405 -> 2429,0 */
	reached1[2405] = 1;
	trans[1][2405]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2406]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2407]	= settr(2714,4,2429,1766,1766,"((PAUSE==ABORT))", 1, 2, 0); /* m: 2408 -> 2429,0 */
	reached1[2408] = 1;
	trans[1][2408]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2409]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2410]	= settr(2717,2,2411,2,0,"else", 1, 2, 0);
	trans[1][2411]	= settr(2718,4,2429,1767,1767,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2413 -> 0,2429 */
	reached1[2413] = 1;
	T = trans[1][2429] = settr(2736,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2736,0,2415,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2736,0,2427,0,0,"IF", 0, 2, 0);
	trans[1][2415]	= settr(2722,0,2426,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][2426] = settr(2733,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2733,0,2422,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2422] = settr(2729,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2729,0,2416,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2729,0,2418,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2729,0,2420,0,0,"IF", 0, 2, 0);
	trans[1][2416]	= settr(2723,0,2424,1768,1768,"((_pid==0))", 0, 2, 0); /* m: 2417 -> 2424,0 */
	reached1[2417] = 1;
	trans[1][2417]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2423]	= settr(2730,0,2424,1,0,".(goto)", 0, 2, 0);
	trans[1][2418]	= settr(2725,0,2424,1769,1769,"((_pid==1))", 0, 2, 0); /* m: 2419 -> 2424,0 */
	reached1[2419] = 1;
	trans[1][2419]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2420]	= settr(2727,0,2424,1770,1770,"((_pid>1))", 0, 2, 0); /* m: 2421 -> 2424,0 */
	reached1[2421] = 1;
	trans[1][2421]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2424]	= settr(2731,0,2425,1771,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2425]	= settr(2732,0,2515,1772,1772,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2511 -> 0,2515 */
	reached1[2511] = 1;
	trans[1][2430]	= settr(2737,0,2511,1,0,".(goto)", 0, 2, 0); /* m: 2511 -> 0,2515 */
	reached1[2511] = 1;
	trans[1][2427]	= settr(2734,0,2428,2,0,"else", 0, 2, 0);
	trans[1][2428]	= settr(2735,0,2515,1773,1773,"(1)", 0, 2, 0); /* m: 2511 -> 2515,0 */
	reached1[2511] = 1;
	trans[1][2432]	= settr(2739,0,2469,1774,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][2469] = settr(2776,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2776,0,2452,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2452] = settr(2759,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2759,2,2450,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2450] = settr(2757,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2757,2,2433,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2757,2,2436,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2757,2,2439,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2757,2,2442,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2757,2,2445,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2757,2,2448,0,0,"IF", 1, 2, 0);
	trans[1][2433]	= settr(2740,4,2467,1775,1775,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2434 -> 2467,0 */
	reached1[2434] = 1;
	trans[1][2434]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2435]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2451]	= settr(2758,0,2467,1776,1776,".(goto)", 1, 2, 0);
	trans[1][2436]	= settr(2743,4,2467,1777,1777,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2437 -> 2467,0 */
	reached1[2437] = 1;
	trans[1][2437]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2438]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2439]	= settr(2746,4,2467,1778,1778,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2440 -> 2467,0 */
	reached1[2440] = 1;
	trans[1][2440]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2441]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2442]	= settr(2749,4,2467,1779,1779,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2443 -> 2467,0 */
	reached1[2443] = 1;
	trans[1][2443]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2444]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2445]	= settr(2752,4,2467,1780,1780,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 2446 -> 2467,0 */
	reached1[2446] = 1;
	trans[1][2446]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2447]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2448]	= settr(2755,2,2449,2,0,"else", 1, 2, 0);
	trans[1][2449]	= settr(2756,4,2467,1781,1781,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2451 -> 0,2467 */
	reached1[2451] = 1;
	T = trans[1][2467] = settr(2774,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2774,0,2453,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2774,0,2465,0,0,"IF", 0, 2, 0);
	trans[1][2453]	= settr(2760,0,2464,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][2464] = settr(2771,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2771,0,2460,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2460] = settr(2767,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2767,0,2454,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2767,0,2456,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2767,0,2458,0,0,"IF", 0, 2, 0);
	trans[1][2454]	= settr(2761,0,2462,1782,1782,"((_pid==0))", 0, 2, 0); /* m: 2455 -> 2462,0 */
	reached1[2455] = 1;
	trans[1][2455]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2461]	= settr(2768,0,2462,1,0,".(goto)", 0, 2, 0);
	trans[1][2456]	= settr(2763,0,2462,1783,1783,"((_pid==1))", 0, 2, 0); /* m: 2457 -> 2462,0 */
	reached1[2457] = 1;
	trans[1][2457]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2458]	= settr(2765,0,2462,1784,1784,"((_pid>1))", 0, 2, 0); /* m: 2459 -> 2462,0 */
	reached1[2459] = 1;
	trans[1][2459]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2462]	= settr(2769,0,2463,1785,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2463]	= settr(2770,0,2515,1786,1786,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2511 -> 0,2515 */
	reached1[2511] = 1;
	trans[1][2468]	= settr(2775,0,2511,1,0,".(goto)", 0, 2, 0); /* m: 2511 -> 0,2515 */
	reached1[2511] = 1;
	trans[1][2465]	= settr(2772,0,2466,2,0,"else", 0, 2, 0);
	trans[1][2466]	= settr(2773,0,2515,1787,1787,"(1)", 0, 2, 0); /* m: 2511 -> 2515,0 */
	reached1[2511] = 1;
	trans[1][2470]	= settr(2777,0,2507,1788,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][2507] = settr(2814,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2814,0,2490,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2490] = settr(2797,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2797,2,2488,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2488] = settr(2795,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2795,2,2471,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2795,2,2474,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2795,2,2477,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2795,2,2480,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2795,2,2483,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2795,2,2486,0,0,"IF", 1, 2, 0);
	trans[1][2471]	= settr(2778,4,2505,1789,1789,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2472 -> 2505,0 */
	reached1[2472] = 1;
	trans[1][2472]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2473]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2489]	= settr(2796,0,2505,1790,1790,".(goto)", 1, 2, 0);
	trans[1][2474]	= settr(2781,4,2505,1791,1791,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2475 -> 2505,0 */
	reached1[2475] = 1;
	trans[1][2475]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2476]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2477]	= settr(2784,4,2505,1792,1792,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2478 -> 2505,0 */
	reached1[2478] = 1;
	trans[1][2478]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2479]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2480]	= settr(2787,4,2505,1793,1793,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2481 -> 2505,0 */
	reached1[2481] = 1;
	trans[1][2481]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2482]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2483]	= settr(2790,4,2505,1794,1794,"((STOP==ABORT))", 1, 2, 0); /* m: 2484 -> 2505,0 */
	reached1[2484] = 1;
	trans[1][2484]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2485]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2486]	= settr(2793,2,2487,2,0,"else", 1, 2, 0);
	trans[1][2487]	= settr(2794,4,2505,1795,1795,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2489 -> 0,2505 */
	reached1[2489] = 1;
	T = trans[1][2505] = settr(2812,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2812,0,2491,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2812,0,2503,0,0,"IF", 0, 2, 0);
	trans[1][2491]	= settr(2798,0,2502,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][2502] = settr(2809,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2809,0,2498,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2498] = settr(2805,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2805,0,2492,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2805,0,2494,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2805,0,2496,0,0,"IF", 0, 2, 0);
	trans[1][2492]	= settr(2799,0,2500,1796,1796,"((_pid==0))", 0, 2, 0); /* m: 2493 -> 2500,0 */
	reached1[2493] = 1;
	trans[1][2493]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2499]	= settr(2806,0,2500,1,0,".(goto)", 0, 2, 0);
	trans[1][2494]	= settr(2801,0,2500,1797,1797,"((_pid==1))", 0, 2, 0); /* m: 2495 -> 2500,0 */
	reached1[2495] = 1;
	trans[1][2495]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2496]	= settr(2803,0,2500,1798,1798,"((_pid>1))", 0, 2, 0); /* m: 2497 -> 2500,0 */
	reached1[2497] = 1;
	trans[1][2497]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2500]	= settr(2807,0,2501,1799,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2501]	= settr(2808,0,2515,1800,1800,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2511 -> 0,2515 */
	reached1[2511] = 1;
	trans[1][2506]	= settr(2813,0,2511,1,0,".(goto)", 0, 2, 0); /* m: 2511 -> 0,2515 */
	reached1[2511] = 1;
	trans[1][2503]	= settr(2810,0,2504,2,0,"else", 0, 2, 0);
	trans[1][2504]	= settr(2811,0,2515,1801,1801,"(1)", 0, 2, 0); /* m: 2511 -> 2515,0 */
	reached1[2511] = 1;
	trans[1][2511]	= settr(2818,0,2515,1802,1802,"j = (j+1)", 0, 2, 0);
	trans[1][2512]	= settr(2819,0,2513,2,0,"else", 0, 2, 0);
	trans[1][2513]	= settr(2820,0,5910,1803,1803,"j = 1", 0, 2, 0);
	trans[1][2514]	= settr(2821,0,5910,1,0,"goto :b18", 0, 2, 0);
	trans[1][2517]	= settr(2824,0,5910,1,0,"break", 0, 2, 0);
	trans[1][2687]	= settr(2994,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][2519]	= settr(2826,0,2685,2,0,"else", 0, 2, 0);
	T = trans[ 1][2685] = settr(2992,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2992,0,2520,0,0,"sub-sequence", 0, 2, 0);
	trans[1][2520]	= settr(2827,0,2682,1804,1804,"j = (3-1)", 0, 2, 0);
	trans[1][2683]	= settr(2990,0,2682,1,0,".(goto)", 0, 2, 0);
	T = trans[1][2682] = settr(2989,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(2989,0,2521,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(2989,0,2679,0,0,"DO", 0, 2, 0);
	trans[1][2521]	= settr(2828,0,2677,1805,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][2677] = settr(2984,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2984,0,2675,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2675] = settr(2982,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2982,0,2522,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2982,0,2561,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2982,0,2599,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2982,0,2637,0,0,"IF", 0, 2, 0);
	trans[1][2522]	= settr(2829,0,2560,1806,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][2560] = settr(2867,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2867,0,2542,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2542] = settr(2849,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2849,2,2540,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2540] = settr(2847,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2847,2,2523,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2847,2,2526,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2847,2,2529,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2847,2,2532,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2847,2,2535,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2847,2,2538,0,0,"IF", 1, 2, 0);
	trans[1][2523]	= settr(2830,4,2543,1807,1807,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2524 -> 2543,0 */
	reached1[2524] = 1;
	trans[1][2524]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2525]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2541]	= settr(2848,0,2543,1808,1808,".(goto)", 1, 2, 0);
	trans[1][2526]	= settr(2833,4,2543,1809,1809,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2527 -> 2543,0 */
	reached1[2527] = 1;
	trans[1][2527]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2528]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2529]	= settr(2836,4,2543,1810,1810,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2530 -> 2543,0 */
	reached1[2530] = 1;
	trans[1][2530]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2531]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2532]	= settr(2839,4,2543,1811,1811,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2533 -> 2543,0 */
	reached1[2533] = 1;
	trans[1][2533]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2534]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2535]	= settr(2842,4,2543,1812,1812,"((START==ABORT))", 1, 2, 0); /* m: 2536 -> 2543,0 */
	reached1[2536] = 1;
	trans[1][2536]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2537]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2538]	= settr(2845,2,2539,2,0,"else", 1, 2, 0);
	trans[1][2539]	= settr(2846,4,2543,1813,1813,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2541 -> 0,2543 */
	reached1[2541] = 1;
	trans[1][2543]	= settr(2850,0,2558,1814,1814,"(run Thread(j))", 0, 2, 0);
	T = trans[1][2558] = settr(2865,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2865,0,2544,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2865,0,2556,0,0,"IF", 0, 2, 0);
	trans[1][2544]	= settr(2851,0,2555,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][2555] = settr(2862,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2862,0,2551,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2551] = settr(2858,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2858,0,2545,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2858,0,2547,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2858,0,2549,0,0,"IF", 0, 2, 0);
	trans[1][2545]	= settr(2852,0,2553,1815,1815,"((_pid==0))", 0, 2, 0); /* m: 2546 -> 2553,0 */
	reached1[2546] = 1;
	trans[1][2546]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2552]	= settr(2859,0,2553,1,0,".(goto)", 0, 2, 0);
	trans[1][2547]	= settr(2854,0,2553,1816,1816,"((_pid==1))", 0, 2, 0); /* m: 2548 -> 2553,0 */
	reached1[2548] = 1;
	trans[1][2548]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2549]	= settr(2856,0,2553,1817,1817,"((_pid>1))", 0, 2, 0); /* m: 2550 -> 2553,0 */
	reached1[2550] = 1;
	trans[1][2550]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2553]	= settr(2860,0,2554,1818,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2554]	= settr(2861,0,2682,1819,1819,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2678 -> 0,2682 */
	reached1[2678] = 1;
	trans[1][2559]	= settr(2866,0,2678,1,0,".(goto)", 0, 2, 0); /* m: 2678 -> 0,2682 */
	reached1[2678] = 1;
	trans[1][2556]	= settr(2863,0,2557,2,0,"else", 0, 2, 0);
	trans[1][2557]	= settr(2864,0,2682,1820,1820,"(1)", 0, 2, 0); /* m: 2678 -> 2682,0 */
	reached1[2678] = 1;
	trans[1][2676]	= settr(2983,0,2678,1,0,".(goto)", 0, 2, 0); /* m: 2678 -> 0,2682 */
	reached1[2678] = 1;
	trans[1][2561]	= settr(2868,0,2598,1821,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][2598] = settr(2905,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2905,0,2581,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2581] = settr(2888,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2888,2,2579,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2579] = settr(2886,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2886,2,2562,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2886,2,2565,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2886,2,2568,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2886,2,2571,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2886,2,2574,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2886,2,2577,0,0,"IF", 1, 2, 0);
	trans[1][2562]	= settr(2869,4,2596,1822,1822,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2563 -> 2596,0 */
	reached1[2563] = 1;
	trans[1][2563]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2564]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2580]	= settr(2887,0,2596,1823,1823,".(goto)", 1, 2, 0);
	trans[1][2565]	= settr(2872,4,2596,1824,1824,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2566 -> 2596,0 */
	reached1[2566] = 1;
	trans[1][2566]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2567]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2568]	= settr(2875,4,2596,1825,1825,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2569 -> 2596,0 */
	reached1[2569] = 1;
	trans[1][2569]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2570]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2571]	= settr(2878,4,2596,1826,1826,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2572 -> 2596,0 */
	reached1[2572] = 1;
	trans[1][2572]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2573]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2574]	= settr(2881,4,2596,1827,1827,"((PAUSE==ABORT))", 1, 2, 0); /* m: 2575 -> 2596,0 */
	reached1[2575] = 1;
	trans[1][2575]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2576]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2577]	= settr(2884,2,2578,2,0,"else", 1, 2, 0);
	trans[1][2578]	= settr(2885,4,2596,1828,1828,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2580 -> 0,2596 */
	reached1[2580] = 1;
	T = trans[1][2596] = settr(2903,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2903,0,2582,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2903,0,2594,0,0,"IF", 0, 2, 0);
	trans[1][2582]	= settr(2889,0,2593,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][2593] = settr(2900,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2900,0,2589,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2589] = settr(2896,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2896,0,2583,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2896,0,2585,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2896,0,2587,0,0,"IF", 0, 2, 0);
	trans[1][2583]	= settr(2890,0,2591,1829,1829,"((_pid==0))", 0, 2, 0); /* m: 2584 -> 2591,0 */
	reached1[2584] = 1;
	trans[1][2584]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2590]	= settr(2897,0,2591,1,0,".(goto)", 0, 2, 0);
	trans[1][2585]	= settr(2892,0,2591,1830,1830,"((_pid==1))", 0, 2, 0); /* m: 2586 -> 2591,0 */
	reached1[2586] = 1;
	trans[1][2586]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2587]	= settr(2894,0,2591,1831,1831,"((_pid>1))", 0, 2, 0); /* m: 2588 -> 2591,0 */
	reached1[2588] = 1;
	trans[1][2588]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2591]	= settr(2898,0,2592,1832,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2592]	= settr(2899,0,2682,1833,1833,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2678 -> 0,2682 */
	reached1[2678] = 1;
	trans[1][2597]	= settr(2904,0,2678,1,0,".(goto)", 0, 2, 0); /* m: 2678 -> 0,2682 */
	reached1[2678] = 1;
	trans[1][2594]	= settr(2901,0,2595,2,0,"else", 0, 2, 0);
	trans[1][2595]	= settr(2902,0,2682,1834,1834,"(1)", 0, 2, 0); /* m: 2678 -> 2682,0 */
	reached1[2678] = 1;
	trans[1][2599]	= settr(2906,0,2636,1835,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][2636] = settr(2943,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2943,0,2619,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2619] = settr(2926,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2926,2,2617,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2617] = settr(2924,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2924,2,2600,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2924,2,2603,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2924,2,2606,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2924,2,2609,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2924,2,2612,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2924,2,2615,0,0,"IF", 1, 2, 0);
	trans[1][2600]	= settr(2907,4,2634,1836,1836,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2601 -> 2634,0 */
	reached1[2601] = 1;
	trans[1][2601]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2602]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2618]	= settr(2925,0,2634,1837,1837,".(goto)", 1, 2, 0);
	trans[1][2603]	= settr(2910,4,2634,1838,1838,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2604 -> 2634,0 */
	reached1[2604] = 1;
	trans[1][2604]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2605]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2606]	= settr(2913,4,2634,1839,1839,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2607 -> 2634,0 */
	reached1[2607] = 1;
	trans[1][2607]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2608]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2609]	= settr(2916,4,2634,1840,1840,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2610 -> 2634,0 */
	reached1[2610] = 1;
	trans[1][2610]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2611]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2612]	= settr(2919,4,2634,1841,1841,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 2613 -> 2634,0 */
	reached1[2613] = 1;
	trans[1][2613]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2614]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2615]	= settr(2922,2,2616,2,0,"else", 1, 2, 0);
	trans[1][2616]	= settr(2923,4,2634,1842,1842,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2618 -> 0,2634 */
	reached1[2618] = 1;
	T = trans[1][2634] = settr(2941,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2941,0,2620,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2941,0,2632,0,0,"IF", 0, 2, 0);
	trans[1][2620]	= settr(2927,0,2631,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][2631] = settr(2938,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2938,0,2627,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2627] = settr(2934,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2934,0,2621,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2934,0,2623,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2934,0,2625,0,0,"IF", 0, 2, 0);
	trans[1][2621]	= settr(2928,0,2629,1843,1843,"((_pid==0))", 0, 2, 0); /* m: 2622 -> 2629,0 */
	reached1[2622] = 1;
	trans[1][2622]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2628]	= settr(2935,0,2629,1,0,".(goto)", 0, 2, 0);
	trans[1][2623]	= settr(2930,0,2629,1844,1844,"((_pid==1))", 0, 2, 0); /* m: 2624 -> 2629,0 */
	reached1[2624] = 1;
	trans[1][2624]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2625]	= settr(2932,0,2629,1845,1845,"((_pid>1))", 0, 2, 0); /* m: 2626 -> 2629,0 */
	reached1[2626] = 1;
	trans[1][2626]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2629]	= settr(2936,0,2630,1846,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2630]	= settr(2937,0,2682,1847,1847,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2678 -> 0,2682 */
	reached1[2678] = 1;
	trans[1][2635]	= settr(2942,0,2678,1,0,".(goto)", 0, 2, 0); /* m: 2678 -> 0,2682 */
	reached1[2678] = 1;
	trans[1][2632]	= settr(2939,0,2633,2,0,"else", 0, 2, 0);
	trans[1][2633]	= settr(2940,0,2682,1848,1848,"(1)", 0, 2, 0); /* m: 2678 -> 2682,0 */
	reached1[2678] = 1;
	trans[1][2637]	= settr(2944,0,2674,1849,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][2674] = settr(2981,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2981,0,2657,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2657] = settr(2964,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(2964,2,2655,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2655] = settr(2962,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2962,2,2638,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2962,2,2641,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2962,2,2644,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2962,2,2647,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(2962,2,2650,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(2962,2,2653,0,0,"IF", 1, 2, 0);
	trans[1][2638]	= settr(2945,4,2672,1850,1850,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2639 -> 2672,0 */
	reached1[2639] = 1;
	trans[1][2639]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2640]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2656]	= settr(2963,0,2672,1851,1851,".(goto)", 1, 2, 0);
	trans[1][2641]	= settr(2948,4,2672,1852,1852,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2642 -> 2672,0 */
	reached1[2642] = 1;
	trans[1][2642]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2643]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2644]	= settr(2951,4,2672,1853,1853,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2645 -> 2672,0 */
	reached1[2645] = 1;
	trans[1][2645]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2646]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2647]	= settr(2954,4,2672,1854,1854,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2648 -> 2672,0 */
	reached1[2648] = 1;
	trans[1][2648]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2649]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2650]	= settr(2957,4,2672,1855,1855,"((STOP==ABORT))", 1, 2, 0); /* m: 2651 -> 2672,0 */
	reached1[2651] = 1;
	trans[1][2651]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2652]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2653]	= settr(2960,2,2654,2,0,"else", 1, 2, 0);
	trans[1][2654]	= settr(2961,4,2672,1856,1856,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2656 -> 0,2672 */
	reached1[2656] = 1;
	T = trans[1][2672] = settr(2979,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2979,0,2658,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2979,0,2670,0,0,"IF", 0, 2, 0);
	trans[1][2658]	= settr(2965,0,2669,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][2669] = settr(2976,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(2976,0,2665,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2665] = settr(2972,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2972,0,2659,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(2972,0,2661,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(2972,0,2663,0,0,"IF", 0, 2, 0);
	trans[1][2659]	= settr(2966,0,2667,1857,1857,"((_pid==0))", 0, 2, 0); /* m: 2660 -> 2667,0 */
	reached1[2660] = 1;
	trans[1][2660]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2666]	= settr(2973,0,2667,1,0,".(goto)", 0, 2, 0);
	trans[1][2661]	= settr(2968,0,2667,1858,1858,"((_pid==1))", 0, 2, 0); /* m: 2662 -> 2667,0 */
	reached1[2662] = 1;
	trans[1][2662]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2663]	= settr(2970,0,2667,1859,1859,"((_pid>1))", 0, 2, 0); /* m: 2664 -> 2667,0 */
	reached1[2664] = 1;
	trans[1][2664]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2667]	= settr(2974,0,2668,1860,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2668]	= settr(2975,0,2682,1861,1861,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2678 -> 0,2682 */
	reached1[2678] = 1;
	trans[1][2673]	= settr(2980,0,2678,1,0,".(goto)", 0, 2, 0); /* m: 2678 -> 0,2682 */
	reached1[2678] = 1;
	trans[1][2670]	= settr(2977,0,2671,2,0,"else", 0, 2, 0);
	trans[1][2671]	= settr(2978,0,2682,1862,1862,"(1)", 0, 2, 0); /* m: 2678 -> 2682,0 */
	reached1[2678] = 1;
	trans[1][2678]	= settr(2985,0,2682,1863,1863,"j = (j-1)", 0, 2, 0);
	trans[1][2679]	= settr(2986,0,2680,2,0,"else", 0, 2, 0);
	trans[1][2680]	= settr(2987,0,5910,1864,1864,"j = 1", 0, 2, 0);
	trans[1][2681]	= settr(2988,0,5910,1,0,"goto :b19", 0, 2, 0);
	trans[1][2684]	= settr(2991,0,5910,1,0,"break", 0, 2, 0);
	trans[1][2916]	= settr(3223,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][2689]	= settr(2996,0,2914,2,0,"else", 0, 2, 0);
	T = trans[ 1][2914] = settr(3221,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3221,0,2690,0,0,"sub-sequence", 0, 2, 0);
	trans[1][2690]	= settr(2997,0,2855,1865,0,"printf('Supervisor propagating command %e...\\n',6)", 0, 2, 0);
	T = trans[ 1][2855] = settr(3162,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3162,0,2852,0,0,"sub-sequence", 0, 2, 0);
	trans[1][2853]	= settr(3160,0,2852,1,0,".(goto)", 0, 2, 0);
	T = trans[1][2852] = settr(3159,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(3159,0,2691,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(3159,0,2849,0,0,"DO", 0, 2, 0);
	trans[1][2691]	= settr(2998,0,2847,1866,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][2847] = settr(3154,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3154,0,2845,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2845] = settr(3152,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3152,0,2692,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3152,0,2731,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3152,0,2769,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3152,0,2807,0,0,"IF", 0, 2, 0);
	trans[1][2692]	= settr(2999,0,2730,1867,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][2730] = settr(3037,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3037,0,2712,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2712] = settr(3019,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3019,2,2710,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2710] = settr(3017,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3017,2,2693,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3017,2,2696,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3017,2,2699,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3017,2,2702,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3017,2,2705,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3017,2,2708,0,0,"IF", 1, 2, 0);
	trans[1][2693]	= settr(3000,4,2713,1868,1868,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2694 -> 2713,0 */
	reached1[2694] = 1;
	trans[1][2694]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2695]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2711]	= settr(3018,0,2713,1869,1869,".(goto)", 1, 2, 0);
	trans[1][2696]	= settr(3003,4,2713,1870,1870,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2697 -> 2713,0 */
	reached1[2697] = 1;
	trans[1][2697]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2698]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2699]	= settr(3006,4,2713,1871,1871,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2700 -> 2713,0 */
	reached1[2700] = 1;
	trans[1][2700]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2701]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2702]	= settr(3009,4,2713,1872,1872,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2703 -> 2713,0 */
	reached1[2703] = 1;
	trans[1][2703]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2704]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2705]	= settr(3012,4,2713,1873,1873,"((START==ABORT))", 1, 2, 0); /* m: 2706 -> 2713,0 */
	reached1[2706] = 1;
	trans[1][2706]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2707]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2708]	= settr(3015,2,2709,2,0,"else", 1, 2, 0);
	trans[1][2709]	= settr(3016,4,2713,1874,1874,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2711 -> 0,2713 */
	reached1[2711] = 1;
	trans[1][2713]	= settr(3020,0,2728,1875,1875,"(run Thread(j))", 0, 2, 0);
	T = trans[1][2728] = settr(3035,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(3035,0,2714,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(3035,0,2726,0,0,"IF", 0, 2, 0);
	trans[1][2714]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][2725] = settr(3032,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3032,0,2721,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2721] = settr(3028,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3028,0,2715,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3028,0,2717,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3028,0,2719,0,0,"IF", 0, 2, 0);
	trans[1][2715]	= settr(3022,0,2723,1876,1876,"((_pid==0))", 0, 2, 0); /* m: 2716 -> 2723,0 */
	reached1[2716] = 1;
	trans[1][2716]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2722]	= settr(3029,0,2723,1,0,".(goto)", 0, 2, 0);
	trans[1][2717]	= settr(3024,0,2723,1877,1877,"((_pid==1))", 0, 2, 0); /* m: 2718 -> 2723,0 */
	reached1[2718] = 1;
	trans[1][2718]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2719]	= settr(3026,0,2723,1878,1878,"((_pid>1))", 0, 2, 0); /* m: 2720 -> 2723,0 */
	reached1[2720] = 1;
	trans[1][2720]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2723]	= settr(3030,0,2724,1879,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2724]	= settr(3031,0,2852,1880,1880,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2848 -> 0,2852 */
	reached1[2848] = 1;
	trans[1][2729]	= settr(3036,0,2848,1,0,".(goto)", 0, 2, 0); /* m: 2848 -> 0,2852 */
	reached1[2848] = 1;
	trans[1][2726]	= settr(3033,0,2727,2,0,"else", 0, 2, 0);
	trans[1][2727]	= settr(3034,0,2852,1881,1881,"(1)", 0, 2, 0); /* m: 2848 -> 2852,0 */
	reached1[2848] = 1;
	trans[1][2846]	= settr(3153,0,2848,1,0,".(goto)", 0, 2, 0); /* m: 2848 -> 0,2852 */
	reached1[2848] = 1;
	trans[1][2731]	= settr(3038,0,2768,1882,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][2768] = settr(3075,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3075,0,2751,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2751] = settr(3058,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3058,2,2749,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2749] = settr(3056,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3056,2,2732,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3056,2,2735,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3056,2,2738,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3056,2,2741,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3056,2,2744,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3056,2,2747,0,0,"IF", 1, 2, 0);
	trans[1][2732]	= settr(3039,4,2766,1883,1883,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2733 -> 2766,0 */
	reached1[2733] = 1;
	trans[1][2733]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2734]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2750]	= settr(3057,0,2766,1884,1884,".(goto)", 1, 2, 0);
	trans[1][2735]	= settr(3042,4,2766,1885,1885,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2736 -> 2766,0 */
	reached1[2736] = 1;
	trans[1][2736]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2737]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2738]	= settr(3045,4,2766,1886,1886,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2739 -> 2766,0 */
	reached1[2739] = 1;
	trans[1][2739]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2740]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2741]	= settr(3048,4,2766,1887,1887,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2742 -> 2766,0 */
	reached1[2742] = 1;
	trans[1][2742]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2743]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2744]	= settr(3051,4,2766,1888,1888,"((PAUSE==ABORT))", 1, 2, 0); /* m: 2745 -> 2766,0 */
	reached1[2745] = 1;
	trans[1][2745]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2746]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2747]	= settr(3054,2,2748,2,0,"else", 1, 2, 0);
	trans[1][2748]	= settr(3055,4,2766,1889,1889,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2750 -> 0,2766 */
	reached1[2750] = 1;
	T = trans[1][2766] = settr(3073,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(3073,0,2752,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(3073,0,2764,0,0,"IF", 0, 2, 0);
	trans[1][2752]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][2763] = settr(3070,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3070,0,2759,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2759] = settr(3066,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3066,0,2753,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3066,0,2755,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3066,0,2757,0,0,"IF", 0, 2, 0);
	trans[1][2753]	= settr(3060,0,2761,1890,1890,"((_pid==0))", 0, 2, 0); /* m: 2754 -> 2761,0 */
	reached1[2754] = 1;
	trans[1][2754]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2760]	= settr(3067,0,2761,1,0,".(goto)", 0, 2, 0);
	trans[1][2755]	= settr(3062,0,2761,1891,1891,"((_pid==1))", 0, 2, 0); /* m: 2756 -> 2761,0 */
	reached1[2756] = 1;
	trans[1][2756]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2757]	= settr(3064,0,2761,1892,1892,"((_pid>1))", 0, 2, 0); /* m: 2758 -> 2761,0 */
	reached1[2758] = 1;
	trans[1][2758]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2761]	= settr(3068,0,2762,1893,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2762]	= settr(3069,0,2852,1894,1894,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2848 -> 0,2852 */
	reached1[2848] = 1;
	trans[1][2767]	= settr(3074,0,2848,1,0,".(goto)", 0, 2, 0); /* m: 2848 -> 0,2852 */
	reached1[2848] = 1;
	trans[1][2764]	= settr(3071,0,2765,2,0,"else", 0, 2, 0);
	trans[1][2765]	= settr(3072,0,2852,1895,1895,"(1)", 0, 2, 0); /* m: 2848 -> 2852,0 */
	reached1[2848] = 1;
	trans[1][2769]	= settr(3076,0,2806,1896,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][2806] = settr(3113,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3113,0,2789,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2789] = settr(3096,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3096,2,2787,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2787] = settr(3094,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3094,2,2770,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3094,2,2773,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3094,2,2776,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3094,2,2779,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3094,2,2782,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3094,2,2785,0,0,"IF", 1, 2, 0);
	trans[1][2770]	= settr(3077,4,2804,1897,1897,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2771 -> 2804,0 */
	reached1[2771] = 1;
	trans[1][2771]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2772]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2788]	= settr(3095,0,2804,1898,1898,".(goto)", 1, 2, 0);
	trans[1][2773]	= settr(3080,4,2804,1899,1899,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2774 -> 2804,0 */
	reached1[2774] = 1;
	trans[1][2774]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2775]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2776]	= settr(3083,4,2804,1900,1900,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2777 -> 2804,0 */
	reached1[2777] = 1;
	trans[1][2777]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2778]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2779]	= settr(3086,4,2804,1901,1901,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2780 -> 2804,0 */
	reached1[2780] = 1;
	trans[1][2780]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2781]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2782]	= settr(3089,4,2804,1902,1902,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 2783 -> 2804,0 */
	reached1[2783] = 1;
	trans[1][2783]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2784]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2785]	= settr(3092,2,2786,2,0,"else", 1, 2, 0);
	trans[1][2786]	= settr(3093,4,2804,1903,1903,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2788 -> 0,2804 */
	reached1[2788] = 1;
	T = trans[1][2804] = settr(3111,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(3111,0,2790,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(3111,0,2802,0,0,"IF", 0, 2, 0);
	trans[1][2790]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][2801] = settr(3108,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3108,0,2797,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2797] = settr(3104,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3104,0,2791,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3104,0,2793,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3104,0,2795,0,0,"IF", 0, 2, 0);
	trans[1][2791]	= settr(3098,0,2799,1904,1904,"((_pid==0))", 0, 2, 0); /* m: 2792 -> 2799,0 */
	reached1[2792] = 1;
	trans[1][2792]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2798]	= settr(3105,0,2799,1,0,".(goto)", 0, 2, 0);
	trans[1][2793]	= settr(3100,0,2799,1905,1905,"((_pid==1))", 0, 2, 0); /* m: 2794 -> 2799,0 */
	reached1[2794] = 1;
	trans[1][2794]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2795]	= settr(3102,0,2799,1906,1906,"((_pid>1))", 0, 2, 0); /* m: 2796 -> 2799,0 */
	reached1[2796] = 1;
	trans[1][2796]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2799]	= settr(3106,0,2800,1907,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2800]	= settr(3107,0,2852,1908,1908,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2848 -> 0,2852 */
	reached1[2848] = 1;
	trans[1][2805]	= settr(3112,0,2848,1,0,".(goto)", 0, 2, 0); /* m: 2848 -> 0,2852 */
	reached1[2848] = 1;
	trans[1][2802]	= settr(3109,0,2803,2,0,"else", 0, 2, 0);
	trans[1][2803]	= settr(3110,0,2852,1909,1909,"(1)", 0, 2, 0); /* m: 2848 -> 2852,0 */
	reached1[2848] = 1;
	trans[1][2807]	= settr(3114,0,2844,1910,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][2844] = settr(3151,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3151,0,2827,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2827] = settr(3134,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3134,2,2825,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2825] = settr(3132,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3132,2,2808,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3132,2,2811,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3132,2,2814,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3132,2,2817,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3132,2,2820,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3132,2,2823,0,0,"IF", 1, 2, 0);
	trans[1][2808]	= settr(3115,4,2842,1911,1911,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2809 -> 2842,0 */
	reached1[2809] = 1;
	trans[1][2809]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2810]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2826]	= settr(3133,0,2842,1912,1912,".(goto)", 1, 2, 0);
	trans[1][2811]	= settr(3118,4,2842,1913,1913,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2812 -> 2842,0 */
	reached1[2812] = 1;
	trans[1][2812]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2813]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2814]	= settr(3121,4,2842,1914,1914,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2815 -> 2842,0 */
	reached1[2815] = 1;
	trans[1][2815]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2816]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2817]	= settr(3124,4,2842,1915,1915,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2818 -> 2842,0 */
	reached1[2818] = 1;
	trans[1][2818]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2819]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2820]	= settr(3127,4,2842,1916,1916,"((STOP==ABORT))", 1, 2, 0); /* m: 2821 -> 2842,0 */
	reached1[2821] = 1;
	trans[1][2821]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2822]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2823]	= settr(3130,2,2824,2,0,"else", 1, 2, 0);
	trans[1][2824]	= settr(3131,4,2842,1917,1917,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2826 -> 0,2842 */
	reached1[2826] = 1;
	T = trans[1][2842] = settr(3149,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(3149,0,2828,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(3149,0,2840,0,0,"IF", 0, 2, 0);
	trans[1][2828]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][2839] = settr(3146,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3146,0,2835,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2835] = settr(3142,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3142,0,2829,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3142,0,2831,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3142,0,2833,0,0,"IF", 0, 2, 0);
	trans[1][2829]	= settr(3136,0,2837,1918,1918,"((_pid==0))", 0, 2, 0); /* m: 2830 -> 2837,0 */
	reached1[2830] = 1;
	trans[1][2830]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2836]	= settr(3143,0,2837,1,0,".(goto)", 0, 2, 0);
	trans[1][2831]	= settr(3138,0,2837,1919,1919,"((_pid==1))", 0, 2, 0); /* m: 2832 -> 2837,0 */
	reached1[2832] = 1;
	trans[1][2832]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2833]	= settr(3140,0,2837,1920,1920,"((_pid>1))", 0, 2, 0); /* m: 2834 -> 2837,0 */
	reached1[2834] = 1;
	trans[1][2834]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2837]	= settr(3144,0,2838,1921,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2838]	= settr(3145,0,2852,1922,1922,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2848 -> 0,2852 */
	reached1[2848] = 1;
	trans[1][2843]	= settr(3150,0,2848,1,0,".(goto)", 0, 2, 0); /* m: 2848 -> 0,2852 */
	reached1[2848] = 1;
	trans[1][2840]	= settr(3147,0,2841,2,0,"else", 0, 2, 0);
	trans[1][2841]	= settr(3148,0,2852,1923,1923,"(1)", 0, 2, 0); /* m: 2848 -> 2852,0 */
	reached1[2848] = 1;
	trans[1][2848]	= settr(3155,0,2852,1924,1924,"j = (j+1)", 0, 2, 0);
	trans[1][2849]	= settr(3156,0,2850,2,0,"else", 0, 2, 0);
	trans[1][2850]	= settr(3157,0,2911,1925,1925,"j = 1", 0, 2, 0);
	trans[1][2851]	= settr(3158,0,2911,1,0,"goto :b20", 0, 2, 0);
	trans[1][2854]	= settr(3161,0,2911,1,0,"break", 0, 2, 0);
	trans[1][2912]	= settr(3219,0,2911,1,0,".(goto)", 0, 2, 0);
	T = trans[1][2911] = settr(3218,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(3218,0,2856,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(3218,0,2908,0,0,"DO", 0, 2, 0);
	trans[1][2856]	= settr(3163,0,2905,1926,0,"((j<3))", 0, 2, 0);
	T = trans[1][2905] = settr(3212,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3212,0,2857,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3212,0,2869,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3212,0,2881,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3212,0,2893,0,0,"IF", 0, 2, 0);
	trans[1][2857]	= settr(3164,0,2868,1927,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][2868] = settr(3175,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3175,0,2864,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2864] = settr(3171,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3171,0,2858,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3171,0,2860,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3171,0,2862,0,0,"IF", 0, 2, 0);
	trans[1][2858]	= settr(3165,0,2866,1928,1928,"((_pid==0))", 0, 2, 0); /* m: 2859 -> 2866,0 */
	reached1[2859] = 1;
	trans[1][2859]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2865]	= settr(3172,0,2866,1,0,".(goto)", 0, 2, 0);
	trans[1][2860]	= settr(3167,0,2866,1929,1929,"((_pid==1))", 0, 2, 0); /* m: 2861 -> 2866,0 */
	reached1[2861] = 1;
	trans[1][2861]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2862]	= settr(3169,0,2866,1930,1930,"((_pid>1))", 0, 2, 0); /* m: 2863 -> 2866,0 */
	reached1[2863] = 1;
	trans[1][2863]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2866]	= settr(3173,0,2867,1931,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2867]	= settr(3174,0,2911,1932,1932,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2907 -> 0,2911 */
	reached1[2907] = 1;
	trans[1][2906]	= settr(3213,0,2907,1,0,".(goto)", 0, 2, 0); /* m: 2907 -> 0,2911 */
	reached1[2907] = 1;
	trans[1][2869]	= settr(3176,0,2880,1933,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][2880] = settr(3187,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3187,0,2876,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2876] = settr(3183,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3183,0,2870,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3183,0,2872,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3183,0,2874,0,0,"IF", 0, 2, 0);
	trans[1][2870]	= settr(3177,0,2878,1934,1934,"((_pid==0))", 0, 2, 0); /* m: 2871 -> 2878,0 */
	reached1[2871] = 1;
	trans[1][2871]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2877]	= settr(3184,0,2878,1,0,".(goto)", 0, 2, 0);
	trans[1][2872]	= settr(3179,0,2878,1935,1935,"((_pid==1))", 0, 2, 0); /* m: 2873 -> 2878,0 */
	reached1[2873] = 1;
	trans[1][2873]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2874]	= settr(3181,0,2878,1936,1936,"((_pid>1))", 0, 2, 0); /* m: 2875 -> 2878,0 */
	reached1[2875] = 1;
	trans[1][2875]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2878]	= settr(3185,0,2879,1937,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2879]	= settr(3186,0,2911,1938,1938,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2907 -> 0,2911 */
	reached1[2907] = 1;
	trans[1][2881]	= settr(3188,0,2892,1939,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][2892] = settr(3199,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3199,0,2888,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2888] = settr(3195,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3195,0,2882,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3195,0,2884,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3195,0,2886,0,0,"IF", 0, 2, 0);
	trans[1][2882]	= settr(3189,0,2890,1940,1940,"((_pid==0))", 0, 2, 0); /* m: 2883 -> 2890,0 */
	reached1[2883] = 1;
	trans[1][2883]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2889]	= settr(3196,0,2890,1,0,".(goto)", 0, 2, 0);
	trans[1][2884]	= settr(3191,0,2890,1941,1941,"((_pid==1))", 0, 2, 0); /* m: 2885 -> 2890,0 */
	reached1[2885] = 1;
	trans[1][2885]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2886]	= settr(3193,0,2890,1942,1942,"((_pid>1))", 0, 2, 0); /* m: 2887 -> 2890,0 */
	reached1[2887] = 1;
	trans[1][2887]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2890]	= settr(3197,0,2891,1943,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2891]	= settr(3198,0,2911,1944,1944,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2907 -> 0,2911 */
	reached1[2907] = 1;
	trans[1][2893]	= settr(3200,0,2904,1945,0,"((6==STOP))", 0, 2, 0);
	T = trans[ 1][2904] = settr(3211,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3211,0,2900,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2900] = settr(3207,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3207,0,2894,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3207,0,2896,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3207,0,2898,0,0,"IF", 0, 2, 0);
	trans[1][2894]	= settr(3201,0,2902,1946,1946,"((_pid==0))", 0, 2, 0); /* m: 2895 -> 2902,0 */
	reached1[2895] = 1;
	trans[1][2895]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2901]	= settr(3208,0,2902,1,0,".(goto)", 0, 2, 0);
	trans[1][2896]	= settr(3203,0,2902,1947,1947,"((_pid==1))", 0, 2, 0); /* m: 2897 -> 2902,0 */
	reached1[2897] = 1;
	trans[1][2897]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2898]	= settr(3205,0,2902,1948,1948,"((_pid>1))", 0, 2, 0); /* m: 2899 -> 2902,0 */
	reached1[2899] = 1;
	trans[1][2899]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2902]	= settr(3209,0,2903,1949,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2903]	= settr(3210,0,2911,1950,1950,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 2907 -> 0,2911 */
	reached1[2907] = 1;
	trans[1][2907]	= settr(3214,0,2911,1951,1951,"j = (j+1)", 0, 2, 0);
	trans[1][2908]	= settr(3215,0,2909,2,0,"else", 0, 2, 0);
	trans[1][2909]	= settr(3216,0,5910,1952,1952,"j = 1", 0, 2, 0);
	trans[1][2910]	= settr(3217,0,5910,1,0,"goto :b21", 0, 2, 0);
	trans[1][2913]	= settr(3220,0,5910,1,0,"break", 0, 2, 0);
	trans[1][4069]	= settr(4376,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][2920]	= settr(3227,0,3492,1953,0,"((3==PAUSED))", 0, 2, 0);
	T = trans[ 1][3492] = settr(3799,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3799,0,3490,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3490] = settr(3797,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3797,0,2921,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3797,0,2924,0,0,"IF", 0, 2, 0);
	trans[1][2921]	= settr(3228,0,2922,1954,0,"(((8==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][2922]	= settr(3229,0,2923,1955,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][2923]	= settr(3230,0,5910,1956,1956,"supervisor_started = 1", 1, 2, 0);
	trans[1][3491]	= settr(3798,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][2924]	= settr(3231,0,3488,2,0,"else", 0, 2, 0);
	T = trans[1][3488] = settr(3795,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3795,0,2925,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3795,0,3262,0,0,"IF", 0, 2, 0);
	trans[1][2925]	= settr(3232,0,3261,1957,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][3261] = settr(3568,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3568,0,3259,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3259] = settr(3566,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3566,0,2926,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3566,0,3092,0,0,"IF", 0, 2, 0);
	trans[1][2926]	= settr(3233,0,3091,1958,0,"(((8==START)||(8==PAUSED)))", 0, 2, 0);
	T = trans[ 1][3091] = settr(3398,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3398,0,3088,0,0,"sub-sequence", 0, 2, 0);
	trans[1][3089]	= settr(3396,0,3088,1,0,".(goto)", 0, 2, 0);
	T = trans[1][3088] = settr(3395,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(3395,0,2927,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(3395,0,3085,0,0,"DO", 0, 2, 0);
	trans[1][2927]	= settr(3234,0,3083,1959,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][3083] = settr(3390,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3390,0,3081,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3081] = settr(3388,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3388,0,2928,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3388,0,2967,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3388,0,3005,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3388,0,3043,0,0,"IF", 0, 2, 0);
	trans[1][2928]	= settr(3235,0,2966,1960,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][2966] = settr(3273,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3273,0,2948,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2948] = settr(3255,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3255,2,2946,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2946] = settr(3253,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3253,2,2929,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3253,2,2932,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3253,2,2935,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3253,2,2938,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3253,2,2941,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3253,2,2944,0,0,"IF", 1, 2, 0);
	trans[1][2929]	= settr(3236,4,2949,1961,1961,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2930 -> 2949,0 */
	reached1[2930] = 1;
	trans[1][2930]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2931]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2947]	= settr(3254,0,2949,1962,1962,".(goto)", 1, 2, 0);
	trans[1][2932]	= settr(3239,4,2949,1963,1963,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2933 -> 2949,0 */
	reached1[2933] = 1;
	trans[1][2933]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2934]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2935]	= settr(3242,4,2949,1964,1964,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2936 -> 2949,0 */
	reached1[2936] = 1;
	trans[1][2936]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2937]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2938]	= settr(3245,4,2949,1965,1965,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2939 -> 2949,0 */
	reached1[2939] = 1;
	trans[1][2939]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2940]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2941]	= settr(3248,4,2949,1966,1966,"((START==ABORT))", 1, 2, 0); /* m: 2942 -> 2949,0 */
	reached1[2942] = 1;
	trans[1][2942]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2943]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2944]	= settr(3251,2,2945,2,0,"else", 1, 2, 0);
	trans[1][2945]	= settr(3252,4,2949,1967,1967,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2947 -> 0,2949 */
	reached1[2947] = 1;
	trans[1][2949]	= settr(3256,0,2964,1968,1968,"(run Thread(j))", 0, 2, 0);
	T = trans[1][2964] = settr(3271,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3271,0,2950,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3271,0,2962,0,0,"IF", 0, 2, 0);
	trans[1][2950]	= settr(3257,0,2961,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][2961] = settr(3268,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3268,0,2957,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2957] = settr(3264,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3264,0,2951,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3264,0,2953,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3264,0,2955,0,0,"IF", 0, 2, 0);
	trans[1][2951]	= settr(3258,0,2959,1969,1969,"((_pid==0))", 0, 2, 0); /* m: 2952 -> 2959,0 */
	reached1[2952] = 1;
	trans[1][2952]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2958]	= settr(3265,0,2959,1,0,".(goto)", 0, 2, 0);
	trans[1][2953]	= settr(3260,0,2959,1970,1970,"((_pid==1))", 0, 2, 0); /* m: 2954 -> 2959,0 */
	reached1[2954] = 1;
	trans[1][2954]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2955]	= settr(3262,0,2959,1971,1971,"((_pid>1))", 0, 2, 0); /* m: 2956 -> 2959,0 */
	reached1[2956] = 1;
	trans[1][2956]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2959]	= settr(3266,0,2960,1972,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2960]	= settr(3267,0,3088,1973,1973,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3084 -> 0,3088 */
	reached1[3084] = 1;
	trans[1][2965]	= settr(3272,0,3084,1,0,".(goto)", 0, 2, 0); /* m: 3084 -> 0,3088 */
	reached1[3084] = 1;
	trans[1][2962]	= settr(3269,0,2963,2,0,"else", 0, 2, 0);
	trans[1][2963]	= settr(3270,0,3088,1974,1974,"(1)", 0, 2, 0); /* m: 3084 -> 3088,0 */
	reached1[3084] = 1;
	trans[1][3082]	= settr(3389,0,3084,1,0,".(goto)", 0, 2, 0); /* m: 3084 -> 0,3088 */
	reached1[3084] = 1;
	trans[1][2967]	= settr(3274,0,3004,1975,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][3004] = settr(3311,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3311,0,2987,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][2987] = settr(3294,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3294,2,2985,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][2985] = settr(3292,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3292,2,2968,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3292,2,2971,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3292,2,2974,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3292,2,2977,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3292,2,2980,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3292,2,2983,0,0,"IF", 1, 2, 0);
	trans[1][2968]	= settr(3275,4,3002,1976,1976,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2969 -> 3002,0 */
	reached1[2969] = 1;
	trans[1][2969]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][2970]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][2986]	= settr(3293,0,3002,1977,1977,".(goto)", 1, 2, 0);
	trans[1][2971]	= settr(3278,4,3002,1978,1978,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 2972 -> 3002,0 */
	reached1[2972] = 1;
	trans[1][2972]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][2973]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][2974]	= settr(3281,4,3002,1979,1979,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2975 -> 3002,0 */
	reached1[2975] = 1;
	trans[1][2975]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][2976]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][2977]	= settr(3284,4,3002,1980,1980,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 2978 -> 3002,0 */
	reached1[2978] = 1;
	trans[1][2978]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][2979]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][2980]	= settr(3287,4,3002,1981,1981,"((PAUSE==ABORT))", 1, 2, 0); /* m: 2981 -> 3002,0 */
	reached1[2981] = 1;
	trans[1][2981]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][2982]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][2983]	= settr(3290,2,2984,2,0,"else", 1, 2, 0);
	trans[1][2984]	= settr(3291,4,3002,1982,1982,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 2986 -> 0,3002 */
	reached1[2986] = 1;
	T = trans[1][3002] = settr(3309,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3309,0,2988,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3309,0,3000,0,0,"IF", 0, 2, 0);
	trans[1][2988]	= settr(3295,0,2999,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][2999] = settr(3306,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3306,0,2995,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][2995] = settr(3302,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3302,0,2989,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3302,0,2991,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3302,0,2993,0,0,"IF", 0, 2, 0);
	trans[1][2989]	= settr(3296,0,2997,1983,1983,"((_pid==0))", 0, 2, 0); /* m: 2990 -> 2997,0 */
	reached1[2990] = 1;
	trans[1][2990]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2996]	= settr(3303,0,2997,1,0,".(goto)", 0, 2, 0);
	trans[1][2991]	= settr(3298,0,2997,1984,1984,"((_pid==1))", 0, 2, 0); /* m: 2992 -> 2997,0 */
	reached1[2992] = 1;
	trans[1][2992]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][2993]	= settr(3300,0,2997,1985,1985,"((_pid>1))", 0, 2, 0); /* m: 2994 -> 2997,0 */
	reached1[2994] = 1;
	trans[1][2994]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][2997]	= settr(3304,0,2998,1986,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][2998]	= settr(3305,0,3088,1987,1987,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3084 -> 0,3088 */
	reached1[3084] = 1;
	trans[1][3003]	= settr(3310,0,3084,1,0,".(goto)", 0, 2, 0); /* m: 3084 -> 0,3088 */
	reached1[3084] = 1;
	trans[1][3000]	= settr(3307,0,3001,2,0,"else", 0, 2, 0);
	trans[1][3001]	= settr(3308,0,3088,1988,1988,"(1)", 0, 2, 0); /* m: 3084 -> 3088,0 */
	reached1[3084] = 1;
	trans[1][3005]	= settr(3312,0,3042,1989,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][3042] = settr(3349,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3349,0,3025,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3025] = settr(3332,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3332,2,3023,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3023] = settr(3330,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3330,2,3006,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3330,2,3009,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3330,2,3012,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3330,2,3015,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3330,2,3018,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3330,2,3021,0,0,"IF", 1, 2, 0);
	trans[1][3006]	= settr(3313,4,3040,1990,1990,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3007 -> 3040,0 */
	reached1[3007] = 1;
	trans[1][3007]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3008]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3024]	= settr(3331,0,3040,1991,1991,".(goto)", 1, 2, 0);
	trans[1][3009]	= settr(3316,4,3040,1992,1992,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3010 -> 3040,0 */
	reached1[3010] = 1;
	trans[1][3010]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3011]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3012]	= settr(3319,4,3040,1993,1993,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3013 -> 3040,0 */
	reached1[3013] = 1;
	trans[1][3013]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3014]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3015]	= settr(3322,4,3040,1994,1994,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3016 -> 3040,0 */
	reached1[3016] = 1;
	trans[1][3016]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3017]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3018]	= settr(3325,4,3040,1995,1995,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 3019 -> 3040,0 */
	reached1[3019] = 1;
	trans[1][3019]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3020]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3021]	= settr(3328,2,3022,2,0,"else", 1, 2, 0);
	trans[1][3022]	= settr(3329,4,3040,1996,1996,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3024 -> 0,3040 */
	reached1[3024] = 1;
	T = trans[1][3040] = settr(3347,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3347,0,3026,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3347,0,3038,0,0,"IF", 0, 2, 0);
	trans[1][3026]	= settr(3333,0,3037,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3037] = settr(3344,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3344,0,3033,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3033] = settr(3340,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3340,0,3027,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3340,0,3029,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3340,0,3031,0,0,"IF", 0, 2, 0);
	trans[1][3027]	= settr(3334,0,3035,1997,1997,"((_pid==0))", 0, 2, 0); /* m: 3028 -> 3035,0 */
	reached1[3028] = 1;
	trans[1][3028]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3034]	= settr(3341,0,3035,1,0,".(goto)", 0, 2, 0);
	trans[1][3029]	= settr(3336,0,3035,1998,1998,"((_pid==1))", 0, 2, 0); /* m: 3030 -> 3035,0 */
	reached1[3030] = 1;
	trans[1][3030]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3031]	= settr(3338,0,3035,1999,1999,"((_pid>1))", 0, 2, 0); /* m: 3032 -> 3035,0 */
	reached1[3032] = 1;
	trans[1][3032]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3035]	= settr(3342,0,3036,2000,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3036]	= settr(3343,0,3088,2001,2001,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3084 -> 0,3088 */
	reached1[3084] = 1;
	trans[1][3041]	= settr(3348,0,3084,1,0,".(goto)", 0, 2, 0); /* m: 3084 -> 0,3088 */
	reached1[3084] = 1;
	trans[1][3038]	= settr(3345,0,3039,2,0,"else", 0, 2, 0);
	trans[1][3039]	= settr(3346,0,3088,2002,2002,"(1)", 0, 2, 0); /* m: 3084 -> 3088,0 */
	reached1[3084] = 1;
	trans[1][3043]	= settr(3350,0,3080,2003,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][3080] = settr(3387,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3387,0,3063,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3063] = settr(3370,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3370,2,3061,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3061] = settr(3368,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3368,2,3044,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3368,2,3047,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3368,2,3050,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3368,2,3053,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3368,2,3056,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3368,2,3059,0,0,"IF", 1, 2, 0);
	trans[1][3044]	= settr(3351,4,3078,2004,2004,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3045 -> 3078,0 */
	reached1[3045] = 1;
	trans[1][3045]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3046]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3062]	= settr(3369,0,3078,2005,2005,".(goto)", 1, 2, 0);
	trans[1][3047]	= settr(3354,4,3078,2006,2006,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3048 -> 3078,0 */
	reached1[3048] = 1;
	trans[1][3048]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3049]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3050]	= settr(3357,4,3078,2007,2007,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3051 -> 3078,0 */
	reached1[3051] = 1;
	trans[1][3051]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3052]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3053]	= settr(3360,4,3078,2008,2008,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3054 -> 3078,0 */
	reached1[3054] = 1;
	trans[1][3054]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3055]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3056]	= settr(3363,4,3078,2009,2009,"((STOP==ABORT))", 1, 2, 0); /* m: 3057 -> 3078,0 */
	reached1[3057] = 1;
	trans[1][3057]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3058]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3059]	= settr(3366,2,3060,2,0,"else", 1, 2, 0);
	trans[1][3060]	= settr(3367,4,3078,2010,2010,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3062 -> 0,3078 */
	reached1[3062] = 1;
	T = trans[1][3078] = settr(3385,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3385,0,3064,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3385,0,3076,0,0,"IF", 0, 2, 0);
	trans[1][3064]	= settr(3371,0,3075,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3075] = settr(3382,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3382,0,3071,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3071] = settr(3378,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3378,0,3065,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3378,0,3067,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3378,0,3069,0,0,"IF", 0, 2, 0);
	trans[1][3065]	= settr(3372,0,3073,2011,2011,"((_pid==0))", 0, 2, 0); /* m: 3066 -> 3073,0 */
	reached1[3066] = 1;
	trans[1][3066]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3072]	= settr(3379,0,3073,1,0,".(goto)", 0, 2, 0);
	trans[1][3067]	= settr(3374,0,3073,2012,2012,"((_pid==1))", 0, 2, 0); /* m: 3068 -> 3073,0 */
	reached1[3068] = 1;
	trans[1][3068]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3069]	= settr(3376,0,3073,2013,2013,"((_pid>1))", 0, 2, 0); /* m: 3070 -> 3073,0 */
	reached1[3070] = 1;
	trans[1][3070]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3073]	= settr(3380,0,3074,2014,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3074]	= settr(3381,0,3088,2015,2015,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3084 -> 0,3088 */
	reached1[3084] = 1;
	trans[1][3079]	= settr(3386,0,3084,1,0,".(goto)", 0, 2, 0); /* m: 3084 -> 0,3088 */
	reached1[3084] = 1;
	trans[1][3076]	= settr(3383,0,3077,2,0,"else", 0, 2, 0);
	trans[1][3077]	= settr(3384,0,3088,2016,2016,"(1)", 0, 2, 0); /* m: 3084 -> 3088,0 */
	reached1[3084] = 1;
	trans[1][3084]	= settr(3391,0,3088,2017,2017,"j = (j+1)", 0, 2, 0);
	trans[1][3085]	= settr(3392,0,3086,2,0,"else", 0, 2, 0);
	trans[1][3086]	= settr(3393,0,5910,2018,2018,"j = 1", 0, 2, 0);
	trans[1][3087]	= settr(3394,0,5910,1,0,"goto :b22", 0, 2, 0);
	trans[1][3090]	= settr(3397,0,5910,1,0,"break", 0, 2, 0);
	trans[1][3260]	= settr(3567,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][3092]	= settr(3399,0,3258,2,0,"else", 0, 2, 0);
	T = trans[ 1][3258] = settr(3565,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3565,0,3093,0,0,"sub-sequence", 0, 2, 0);
	trans[1][3093]	= settr(3400,0,3255,2019,2019,"j = (3-1)", 0, 2, 0);
	trans[1][3256]	= settr(3563,0,3255,1,0,".(goto)", 0, 2, 0);
	T = trans[1][3255] = settr(3562,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(3562,0,3094,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(3562,0,3252,0,0,"DO", 0, 2, 0);
	trans[1][3094]	= settr(3401,0,3250,2020,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][3250] = settr(3557,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3557,0,3248,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3248] = settr(3555,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3555,0,3095,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3555,0,3134,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3555,0,3172,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3555,0,3210,0,0,"IF", 0, 2, 0);
	trans[1][3095]	= settr(3402,0,3133,2021,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][3133] = settr(3440,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3440,0,3115,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3115] = settr(3422,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3422,2,3113,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3113] = settr(3420,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3420,2,3096,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3420,2,3099,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3420,2,3102,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3420,2,3105,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3420,2,3108,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3420,2,3111,0,0,"IF", 1, 2, 0);
	trans[1][3096]	= settr(3403,4,3116,2022,2022,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3097 -> 3116,0 */
	reached1[3097] = 1;
	trans[1][3097]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3098]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3114]	= settr(3421,0,3116,2023,2023,".(goto)", 1, 2, 0);
	trans[1][3099]	= settr(3406,4,3116,2024,2024,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3100 -> 3116,0 */
	reached1[3100] = 1;
	trans[1][3100]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3101]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3102]	= settr(3409,4,3116,2025,2025,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3103 -> 3116,0 */
	reached1[3103] = 1;
	trans[1][3103]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3104]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3105]	= settr(3412,4,3116,2026,2026,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3106 -> 3116,0 */
	reached1[3106] = 1;
	trans[1][3106]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3107]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3108]	= settr(3415,4,3116,2027,2027,"((START==ABORT))", 1, 2, 0); /* m: 3109 -> 3116,0 */
	reached1[3109] = 1;
	trans[1][3109]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3110]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3111]	= settr(3418,2,3112,2,0,"else", 1, 2, 0);
	trans[1][3112]	= settr(3419,4,3116,2028,2028,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3114 -> 0,3116 */
	reached1[3114] = 1;
	trans[1][3116]	= settr(3423,0,3131,2029,2029,"(run Thread(j))", 0, 2, 0);
	T = trans[1][3131] = settr(3438,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3438,0,3117,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3438,0,3129,0,0,"IF", 0, 2, 0);
	trans[1][3117]	= settr(3424,0,3128,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3128] = settr(3435,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3435,0,3124,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3124] = settr(3431,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3431,0,3118,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3431,0,3120,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3431,0,3122,0,0,"IF", 0, 2, 0);
	trans[1][3118]	= settr(3425,0,3126,2030,2030,"((_pid==0))", 0, 2, 0); /* m: 3119 -> 3126,0 */
	reached1[3119] = 1;
	trans[1][3119]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3125]	= settr(3432,0,3126,1,0,".(goto)", 0, 2, 0);
	trans[1][3120]	= settr(3427,0,3126,2031,2031,"((_pid==1))", 0, 2, 0); /* m: 3121 -> 3126,0 */
	reached1[3121] = 1;
	trans[1][3121]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3122]	= settr(3429,0,3126,2032,2032,"((_pid>1))", 0, 2, 0); /* m: 3123 -> 3126,0 */
	reached1[3123] = 1;
	trans[1][3123]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3126]	= settr(3433,0,3127,2033,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3127]	= settr(3434,0,3255,2034,2034,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3251 -> 0,3255 */
	reached1[3251] = 1;
	trans[1][3132]	= settr(3439,0,3251,1,0,".(goto)", 0, 2, 0); /* m: 3251 -> 0,3255 */
	reached1[3251] = 1;
	trans[1][3129]	= settr(3436,0,3130,2,0,"else", 0, 2, 0);
	trans[1][3130]	= settr(3437,0,3255,2035,2035,"(1)", 0, 2, 0); /* m: 3251 -> 3255,0 */
	reached1[3251] = 1;
	trans[1][3249]	= settr(3556,0,3251,1,0,".(goto)", 0, 2, 0); /* m: 3251 -> 0,3255 */
	reached1[3251] = 1;
	trans[1][3134]	= settr(3441,0,3171,2036,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][3171] = settr(3478,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3478,0,3154,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3154] = settr(3461,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3461,2,3152,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3152] = settr(3459,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3459,2,3135,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3459,2,3138,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3459,2,3141,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3459,2,3144,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3459,2,3147,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3459,2,3150,0,0,"IF", 1, 2, 0);
	trans[1][3135]	= settr(3442,4,3169,2037,2037,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3136 -> 3169,0 */
	reached1[3136] = 1;
	trans[1][3136]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3137]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3153]	= settr(3460,0,3169,2038,2038,".(goto)", 1, 2, 0);
	trans[1][3138]	= settr(3445,4,3169,2039,2039,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3139 -> 3169,0 */
	reached1[3139] = 1;
	trans[1][3139]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3140]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3141]	= settr(3448,4,3169,2040,2040,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3142 -> 3169,0 */
	reached1[3142] = 1;
	trans[1][3142]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3143]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3144]	= settr(3451,4,3169,2041,2041,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3145 -> 3169,0 */
	reached1[3145] = 1;
	trans[1][3145]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3146]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3147]	= settr(3454,4,3169,2042,2042,"((PAUSE==ABORT))", 1, 2, 0); /* m: 3148 -> 3169,0 */
	reached1[3148] = 1;
	trans[1][3148]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3149]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3150]	= settr(3457,2,3151,2,0,"else", 1, 2, 0);
	trans[1][3151]	= settr(3458,4,3169,2043,2043,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3153 -> 0,3169 */
	reached1[3153] = 1;
	T = trans[1][3169] = settr(3476,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3476,0,3155,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3476,0,3167,0,0,"IF", 0, 2, 0);
	trans[1][3155]	= settr(3462,0,3166,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3166] = settr(3473,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3473,0,3162,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3162] = settr(3469,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3469,0,3156,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3469,0,3158,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3469,0,3160,0,0,"IF", 0, 2, 0);
	trans[1][3156]	= settr(3463,0,3164,2044,2044,"((_pid==0))", 0, 2, 0); /* m: 3157 -> 3164,0 */
	reached1[3157] = 1;
	trans[1][3157]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3163]	= settr(3470,0,3164,1,0,".(goto)", 0, 2, 0);
	trans[1][3158]	= settr(3465,0,3164,2045,2045,"((_pid==1))", 0, 2, 0); /* m: 3159 -> 3164,0 */
	reached1[3159] = 1;
	trans[1][3159]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3160]	= settr(3467,0,3164,2046,2046,"((_pid>1))", 0, 2, 0); /* m: 3161 -> 3164,0 */
	reached1[3161] = 1;
	trans[1][3161]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3164]	= settr(3471,0,3165,2047,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3165]	= settr(3472,0,3255,2048,2048,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3251 -> 0,3255 */
	reached1[3251] = 1;
	trans[1][3170]	= settr(3477,0,3251,1,0,".(goto)", 0, 2, 0); /* m: 3251 -> 0,3255 */
	reached1[3251] = 1;
	trans[1][3167]	= settr(3474,0,3168,2,0,"else", 0, 2, 0);
	trans[1][3168]	= settr(3475,0,3255,2049,2049,"(1)", 0, 2, 0); /* m: 3251 -> 3255,0 */
	reached1[3251] = 1;
	trans[1][3172]	= settr(3479,0,3209,2050,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][3209] = settr(3516,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3516,0,3192,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3192] = settr(3499,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3499,2,3190,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3190] = settr(3497,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3497,2,3173,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3497,2,3176,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3497,2,3179,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3497,2,3182,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3497,2,3185,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3497,2,3188,0,0,"IF", 1, 2, 0);
	trans[1][3173]	= settr(3480,4,3207,2051,2051,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3174 -> 3207,0 */
	reached1[3174] = 1;
	trans[1][3174]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3175]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3191]	= settr(3498,0,3207,2052,2052,".(goto)", 1, 2, 0);
	trans[1][3176]	= settr(3483,4,3207,2053,2053,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3177 -> 3207,0 */
	reached1[3177] = 1;
	trans[1][3177]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3178]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3179]	= settr(3486,4,3207,2054,2054,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3180 -> 3207,0 */
	reached1[3180] = 1;
	trans[1][3180]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3181]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3182]	= settr(3489,4,3207,2055,2055,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3183 -> 3207,0 */
	reached1[3183] = 1;
	trans[1][3183]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3184]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3185]	= settr(3492,4,3207,2056,2056,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 3186 -> 3207,0 */
	reached1[3186] = 1;
	trans[1][3186]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3187]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3188]	= settr(3495,2,3189,2,0,"else", 1, 2, 0);
	trans[1][3189]	= settr(3496,4,3207,2057,2057,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3191 -> 0,3207 */
	reached1[3191] = 1;
	T = trans[1][3207] = settr(3514,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3514,0,3193,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3514,0,3205,0,0,"IF", 0, 2, 0);
	trans[1][3193]	= settr(3500,0,3204,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3204] = settr(3511,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3511,0,3200,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3200] = settr(3507,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3507,0,3194,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3507,0,3196,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3507,0,3198,0,0,"IF", 0, 2, 0);
	trans[1][3194]	= settr(3501,0,3202,2058,2058,"((_pid==0))", 0, 2, 0); /* m: 3195 -> 3202,0 */
	reached1[3195] = 1;
	trans[1][3195]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3201]	= settr(3508,0,3202,1,0,".(goto)", 0, 2, 0);
	trans[1][3196]	= settr(3503,0,3202,2059,2059,"((_pid==1))", 0, 2, 0); /* m: 3197 -> 3202,0 */
	reached1[3197] = 1;
	trans[1][3197]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3198]	= settr(3505,0,3202,2060,2060,"((_pid>1))", 0, 2, 0); /* m: 3199 -> 3202,0 */
	reached1[3199] = 1;
	trans[1][3199]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3202]	= settr(3509,0,3203,2061,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3203]	= settr(3510,0,3255,2062,2062,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3251 -> 0,3255 */
	reached1[3251] = 1;
	trans[1][3208]	= settr(3515,0,3251,1,0,".(goto)", 0, 2, 0); /* m: 3251 -> 0,3255 */
	reached1[3251] = 1;
	trans[1][3205]	= settr(3512,0,3206,2,0,"else", 0, 2, 0);
	trans[1][3206]	= settr(3513,0,3255,2063,2063,"(1)", 0, 2, 0); /* m: 3251 -> 3255,0 */
	reached1[3251] = 1;
	trans[1][3210]	= settr(3517,0,3247,2064,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][3247] = settr(3554,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3554,0,3230,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3230] = settr(3537,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3537,2,3228,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3228] = settr(3535,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3535,2,3211,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3535,2,3214,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3535,2,3217,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3535,2,3220,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3535,2,3223,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3535,2,3226,0,0,"IF", 1, 2, 0);
	trans[1][3211]	= settr(3518,4,3245,2065,2065,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3212 -> 3245,0 */
	reached1[3212] = 1;
	trans[1][3212]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3213]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3229]	= settr(3536,0,3245,2066,2066,".(goto)", 1, 2, 0);
	trans[1][3214]	= settr(3521,4,3245,2067,2067,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3215 -> 3245,0 */
	reached1[3215] = 1;
	trans[1][3215]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3216]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3217]	= settr(3524,4,3245,2068,2068,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3218 -> 3245,0 */
	reached1[3218] = 1;
	trans[1][3218]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3219]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3220]	= settr(3527,4,3245,2069,2069,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3221 -> 3245,0 */
	reached1[3221] = 1;
	trans[1][3221]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3222]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3223]	= settr(3530,4,3245,2070,2070,"((STOP==ABORT))", 1, 2, 0); /* m: 3224 -> 3245,0 */
	reached1[3224] = 1;
	trans[1][3224]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3225]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3226]	= settr(3533,2,3227,2,0,"else", 1, 2, 0);
	trans[1][3227]	= settr(3534,4,3245,2071,2071,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3229 -> 0,3245 */
	reached1[3229] = 1;
	T = trans[1][3245] = settr(3552,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3552,0,3231,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3552,0,3243,0,0,"IF", 0, 2, 0);
	trans[1][3231]	= settr(3538,0,3242,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3242] = settr(3549,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3549,0,3238,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3238] = settr(3545,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3545,0,3232,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3545,0,3234,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3545,0,3236,0,0,"IF", 0, 2, 0);
	trans[1][3232]	= settr(3539,0,3240,2072,2072,"((_pid==0))", 0, 2, 0); /* m: 3233 -> 3240,0 */
	reached1[3233] = 1;
	trans[1][3233]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3239]	= settr(3546,0,3240,1,0,".(goto)", 0, 2, 0);
	trans[1][3234]	= settr(3541,0,3240,2073,2073,"((_pid==1))", 0, 2, 0); /* m: 3235 -> 3240,0 */
	reached1[3235] = 1;
	trans[1][3235]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3236]	= settr(3543,0,3240,2074,2074,"((_pid>1))", 0, 2, 0); /* m: 3237 -> 3240,0 */
	reached1[3237] = 1;
	trans[1][3237]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3240]	= settr(3547,0,3241,2075,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3241]	= settr(3548,0,3255,2076,2076,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3251 -> 0,3255 */
	reached1[3251] = 1;
	trans[1][3246]	= settr(3553,0,3251,1,0,".(goto)", 0, 2, 0); /* m: 3251 -> 0,3255 */
	reached1[3251] = 1;
	trans[1][3243]	= settr(3550,0,3244,2,0,"else", 0, 2, 0);
	trans[1][3244]	= settr(3551,0,3255,2077,2077,"(1)", 0, 2, 0); /* m: 3251 -> 3255,0 */
	reached1[3251] = 1;
	trans[1][3251]	= settr(3558,0,3255,2078,2078,"j = (j-1)", 0, 2, 0);
	trans[1][3252]	= settr(3559,0,3253,2,0,"else", 0, 2, 0);
	trans[1][3253]	= settr(3560,0,5910,2079,2079,"j = 1", 0, 2, 0);
	trans[1][3254]	= settr(3561,0,5910,1,0,"goto :b23", 0, 2, 0);
	trans[1][3257]	= settr(3564,0,5910,1,0,"break", 0, 2, 0);
	trans[1][3489]	= settr(3796,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][3262]	= settr(3569,0,3487,2,0,"else", 0, 2, 0);
	T = trans[ 1][3487] = settr(3794,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3794,0,3263,0,0,"sub-sequence", 0, 2, 0);
	trans[1][3263]	= settr(3570,0,3428,2080,0,"printf('Supervisor propagating command %e...\\n',8)", 0, 2, 0);
	T = trans[ 1][3428] = settr(3735,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3735,0,3425,0,0,"sub-sequence", 0, 2, 0);
	trans[1][3426]	= settr(3733,0,3425,1,0,".(goto)", 0, 2, 0);
	T = trans[1][3425] = settr(3732,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(3732,0,3264,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(3732,0,3422,0,0,"DO", 0, 2, 0);
	trans[1][3264]	= settr(3571,0,3420,2081,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][3420] = settr(3727,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3727,0,3418,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3418] = settr(3725,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3725,0,3265,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3725,0,3304,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3725,0,3342,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3725,0,3380,0,0,"IF", 0, 2, 0);
	trans[1][3265]	= settr(3572,0,3303,2082,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][3303] = settr(3610,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3610,0,3285,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3285] = settr(3592,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3592,2,3283,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3283] = settr(3590,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3590,2,3266,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3590,2,3269,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3590,2,3272,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3590,2,3275,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3590,2,3278,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3590,2,3281,0,0,"IF", 1, 2, 0);
	trans[1][3266]	= settr(3573,4,3286,2083,2083,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3267 -> 3286,0 */
	reached1[3267] = 1;
	trans[1][3267]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3268]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3284]	= settr(3591,0,3286,2084,2084,".(goto)", 1, 2, 0);
	trans[1][3269]	= settr(3576,4,3286,2085,2085,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3270 -> 3286,0 */
	reached1[3270] = 1;
	trans[1][3270]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3271]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3272]	= settr(3579,4,3286,2086,2086,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3273 -> 3286,0 */
	reached1[3273] = 1;
	trans[1][3273]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3274]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3275]	= settr(3582,4,3286,2087,2087,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3276 -> 3286,0 */
	reached1[3276] = 1;
	trans[1][3276]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3277]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3278]	= settr(3585,4,3286,2088,2088,"((START==ABORT))", 1, 2, 0); /* m: 3279 -> 3286,0 */
	reached1[3279] = 1;
	trans[1][3279]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3280]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3281]	= settr(3588,2,3282,2,0,"else", 1, 2, 0);
	trans[1][3282]	= settr(3589,4,3286,2089,2089,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3284 -> 0,3286 */
	reached1[3284] = 1;
	trans[1][3286]	= settr(3593,0,3301,2090,2090,"(run Thread(j))", 0, 2, 0);
	T = trans[1][3301] = settr(3608,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(3608,0,3287,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(3608,0,3299,0,0,"IF", 0, 2, 0);
	trans[1][3287]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][3298] = settr(3605,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3605,0,3294,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3294] = settr(3601,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3601,0,3288,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3601,0,3290,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3601,0,3292,0,0,"IF", 0, 2, 0);
	trans[1][3288]	= settr(3595,0,3296,2091,2091,"((_pid==0))", 0, 2, 0); /* m: 3289 -> 3296,0 */
	reached1[3289] = 1;
	trans[1][3289]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3295]	= settr(3602,0,3296,1,0,".(goto)", 0, 2, 0);
	trans[1][3290]	= settr(3597,0,3296,2092,2092,"((_pid==1))", 0, 2, 0); /* m: 3291 -> 3296,0 */
	reached1[3291] = 1;
	trans[1][3291]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3292]	= settr(3599,0,3296,2093,2093,"((_pid>1))", 0, 2, 0); /* m: 3293 -> 3296,0 */
	reached1[3293] = 1;
	trans[1][3293]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3296]	= settr(3603,0,3297,2094,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3297]	= settr(3604,0,3425,2095,2095,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3421 -> 0,3425 */
	reached1[3421] = 1;
	trans[1][3302]	= settr(3609,0,3421,1,0,".(goto)", 0, 2, 0); /* m: 3421 -> 0,3425 */
	reached1[3421] = 1;
	trans[1][3299]	= settr(3606,0,3300,2,0,"else", 0, 2, 0);
	trans[1][3300]	= settr(3607,0,3425,2096,2096,"(1)", 0, 2, 0); /* m: 3421 -> 3425,0 */
	reached1[3421] = 1;
	trans[1][3419]	= settr(3726,0,3421,1,0,".(goto)", 0, 2, 0); /* m: 3421 -> 0,3425 */
	reached1[3421] = 1;
	trans[1][3304]	= settr(3611,0,3341,2097,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][3341] = settr(3648,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3648,0,3324,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3324] = settr(3631,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3631,2,3322,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3322] = settr(3629,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3629,2,3305,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3629,2,3308,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3629,2,3311,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3629,2,3314,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3629,2,3317,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3629,2,3320,0,0,"IF", 1, 2, 0);
	trans[1][3305]	= settr(3612,4,3339,2098,2098,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3306 -> 3339,0 */
	reached1[3306] = 1;
	trans[1][3306]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3307]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3323]	= settr(3630,0,3339,2099,2099,".(goto)", 1, 2, 0);
	trans[1][3308]	= settr(3615,4,3339,2100,2100,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3309 -> 3339,0 */
	reached1[3309] = 1;
	trans[1][3309]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3310]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3311]	= settr(3618,4,3339,2101,2101,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3312 -> 3339,0 */
	reached1[3312] = 1;
	trans[1][3312]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3313]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3314]	= settr(3621,4,3339,2102,2102,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3315 -> 3339,0 */
	reached1[3315] = 1;
	trans[1][3315]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3316]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3317]	= settr(3624,4,3339,2103,2103,"((PAUSE==ABORT))", 1, 2, 0); /* m: 3318 -> 3339,0 */
	reached1[3318] = 1;
	trans[1][3318]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3319]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3320]	= settr(3627,2,3321,2,0,"else", 1, 2, 0);
	trans[1][3321]	= settr(3628,4,3339,2104,2104,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3323 -> 0,3339 */
	reached1[3323] = 1;
	T = trans[1][3339] = settr(3646,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(3646,0,3325,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(3646,0,3337,0,0,"IF", 0, 2, 0);
	trans[1][3325]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][3336] = settr(3643,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3643,0,3332,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3332] = settr(3639,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3639,0,3326,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3639,0,3328,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3639,0,3330,0,0,"IF", 0, 2, 0);
	trans[1][3326]	= settr(3633,0,3334,2105,2105,"((_pid==0))", 0, 2, 0); /* m: 3327 -> 3334,0 */
	reached1[3327] = 1;
	trans[1][3327]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3333]	= settr(3640,0,3334,1,0,".(goto)", 0, 2, 0);
	trans[1][3328]	= settr(3635,0,3334,2106,2106,"((_pid==1))", 0, 2, 0); /* m: 3329 -> 3334,0 */
	reached1[3329] = 1;
	trans[1][3329]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3330]	= settr(3637,0,3334,2107,2107,"((_pid>1))", 0, 2, 0); /* m: 3331 -> 3334,0 */
	reached1[3331] = 1;
	trans[1][3331]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3334]	= settr(3641,0,3335,2108,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3335]	= settr(3642,0,3425,2109,2109,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3421 -> 0,3425 */
	reached1[3421] = 1;
	trans[1][3340]	= settr(3647,0,3421,1,0,".(goto)", 0, 2, 0); /* m: 3421 -> 0,3425 */
	reached1[3421] = 1;
	trans[1][3337]	= settr(3644,0,3338,2,0,"else", 0, 2, 0);
	trans[1][3338]	= settr(3645,0,3425,2110,2110,"(1)", 0, 2, 0); /* m: 3421 -> 3425,0 */
	reached1[3421] = 1;
	trans[1][3342]	= settr(3649,0,3379,2111,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][3379] = settr(3686,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3686,0,3362,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3362] = settr(3669,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3669,2,3360,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3360] = settr(3667,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3667,2,3343,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3667,2,3346,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3667,2,3349,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3667,2,3352,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3667,2,3355,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3667,2,3358,0,0,"IF", 1, 2, 0);
	trans[1][3343]	= settr(3650,4,3377,2112,2112,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3344 -> 3377,0 */
	reached1[3344] = 1;
	trans[1][3344]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3345]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3361]	= settr(3668,0,3377,2113,2113,".(goto)", 1, 2, 0);
	trans[1][3346]	= settr(3653,4,3377,2114,2114,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3347 -> 3377,0 */
	reached1[3347] = 1;
	trans[1][3347]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3348]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3349]	= settr(3656,4,3377,2115,2115,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3350 -> 3377,0 */
	reached1[3350] = 1;
	trans[1][3350]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3351]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3352]	= settr(3659,4,3377,2116,2116,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3353 -> 3377,0 */
	reached1[3353] = 1;
	trans[1][3353]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3354]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3355]	= settr(3662,4,3377,2117,2117,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 3356 -> 3377,0 */
	reached1[3356] = 1;
	trans[1][3356]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3357]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3358]	= settr(3665,2,3359,2,0,"else", 1, 2, 0);
	trans[1][3359]	= settr(3666,4,3377,2118,2118,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3361 -> 0,3377 */
	reached1[3361] = 1;
	T = trans[1][3377] = settr(3684,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(3684,0,3363,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(3684,0,3375,0,0,"IF", 0, 2, 0);
	trans[1][3363]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][3374] = settr(3681,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3681,0,3370,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3370] = settr(3677,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3677,0,3364,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3677,0,3366,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3677,0,3368,0,0,"IF", 0, 2, 0);
	trans[1][3364]	= settr(3671,0,3372,2119,2119,"((_pid==0))", 0, 2, 0); /* m: 3365 -> 3372,0 */
	reached1[3365] = 1;
	trans[1][3365]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3371]	= settr(3678,0,3372,1,0,".(goto)", 0, 2, 0);
	trans[1][3366]	= settr(3673,0,3372,2120,2120,"((_pid==1))", 0, 2, 0); /* m: 3367 -> 3372,0 */
	reached1[3367] = 1;
	trans[1][3367]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3368]	= settr(3675,0,3372,2121,2121,"((_pid>1))", 0, 2, 0); /* m: 3369 -> 3372,0 */
	reached1[3369] = 1;
	trans[1][3369]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3372]	= settr(3679,0,3373,2122,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3373]	= settr(3680,0,3425,2123,2123,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3421 -> 0,3425 */
	reached1[3421] = 1;
	trans[1][3378]	= settr(3685,0,3421,1,0,".(goto)", 0, 2, 0); /* m: 3421 -> 0,3425 */
	reached1[3421] = 1;
	trans[1][3375]	= settr(3682,0,3376,2,0,"else", 0, 2, 0);
	trans[1][3376]	= settr(3683,0,3425,2124,2124,"(1)", 0, 2, 0); /* m: 3421 -> 3425,0 */
	reached1[3421] = 1;
	trans[1][3380]	= settr(3687,0,3417,2125,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][3417] = settr(3724,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3724,0,3400,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3400] = settr(3707,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3707,2,3398,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3398] = settr(3705,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3705,2,3381,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3705,2,3384,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3705,2,3387,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3705,2,3390,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3705,2,3393,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3705,2,3396,0,0,"IF", 1, 2, 0);
	trans[1][3381]	= settr(3688,4,3415,2126,2126,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3382 -> 3415,0 */
	reached1[3382] = 1;
	trans[1][3382]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3383]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3399]	= settr(3706,0,3415,2127,2127,".(goto)", 1, 2, 0);
	trans[1][3384]	= settr(3691,4,3415,2128,2128,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3385 -> 3415,0 */
	reached1[3385] = 1;
	trans[1][3385]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3386]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3387]	= settr(3694,4,3415,2129,2129,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3388 -> 3415,0 */
	reached1[3388] = 1;
	trans[1][3388]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3389]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3390]	= settr(3697,4,3415,2130,2130,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3391 -> 3415,0 */
	reached1[3391] = 1;
	trans[1][3391]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3392]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3393]	= settr(3700,4,3415,2131,2131,"((STOP==ABORT))", 1, 2, 0); /* m: 3394 -> 3415,0 */
	reached1[3394] = 1;
	trans[1][3394]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3395]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3396]	= settr(3703,2,3397,2,0,"else", 1, 2, 0);
	trans[1][3397]	= settr(3704,4,3415,2132,2132,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3399 -> 0,3415 */
	reached1[3399] = 1;
	T = trans[1][3415] = settr(3722,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(3722,0,3401,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(3722,0,3413,0,0,"IF", 0, 2, 0);
	trans[1][3401]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][3412] = settr(3719,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3719,0,3408,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3408] = settr(3715,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3715,0,3402,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3715,0,3404,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3715,0,3406,0,0,"IF", 0, 2, 0);
	trans[1][3402]	= settr(3709,0,3410,2133,2133,"((_pid==0))", 0, 2, 0); /* m: 3403 -> 3410,0 */
	reached1[3403] = 1;
	trans[1][3403]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3409]	= settr(3716,0,3410,1,0,".(goto)", 0, 2, 0);
	trans[1][3404]	= settr(3711,0,3410,2134,2134,"((_pid==1))", 0, 2, 0); /* m: 3405 -> 3410,0 */
	reached1[3405] = 1;
	trans[1][3405]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3406]	= settr(3713,0,3410,2135,2135,"((_pid>1))", 0, 2, 0); /* m: 3407 -> 3410,0 */
	reached1[3407] = 1;
	trans[1][3407]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3410]	= settr(3717,0,3411,2136,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3411]	= settr(3718,0,3425,2137,2137,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3421 -> 0,3425 */
	reached1[3421] = 1;
	trans[1][3416]	= settr(3723,0,3421,1,0,".(goto)", 0, 2, 0); /* m: 3421 -> 0,3425 */
	reached1[3421] = 1;
	trans[1][3413]	= settr(3720,0,3414,2,0,"else", 0, 2, 0);
	trans[1][3414]	= settr(3721,0,3425,2138,2138,"(1)", 0, 2, 0); /* m: 3421 -> 3425,0 */
	reached1[3421] = 1;
	trans[1][3421]	= settr(3728,0,3425,2139,2139,"j = (j+1)", 0, 2, 0);
	trans[1][3422]	= settr(3729,0,3423,2,0,"else", 0, 2, 0);
	trans[1][3423]	= settr(3730,0,3484,2140,2140,"j = 1", 0, 2, 0);
	trans[1][3424]	= settr(3731,0,3484,1,0,"goto :b24", 0, 2, 0);
	trans[1][3427]	= settr(3734,0,3484,1,0,"break", 0, 2, 0);
	trans[1][3485]	= settr(3792,0,3484,1,0,".(goto)", 0, 2, 0);
	T = trans[1][3484] = settr(3791,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(3791,0,3429,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(3791,0,3481,0,0,"DO", 0, 2, 0);
	trans[1][3429]	= settr(3736,0,3478,2141,0,"((j<3))", 0, 2, 0);
	T = trans[1][3478] = settr(3785,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3785,0,3430,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3785,0,3442,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3785,0,3454,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3785,0,3466,0,0,"IF", 0, 2, 0);
	trans[1][3430]	= settr(3737,0,3441,2142,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][3441] = settr(3748,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3748,0,3437,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3437] = settr(3744,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3744,0,3431,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3744,0,3433,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3744,0,3435,0,0,"IF", 0, 2, 0);
	trans[1][3431]	= settr(3738,0,3439,2143,2143,"((_pid==0))", 0, 2, 0); /* m: 3432 -> 3439,0 */
	reached1[3432] = 1;
	trans[1][3432]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3438]	= settr(3745,0,3439,1,0,".(goto)", 0, 2, 0);
	trans[1][3433]	= settr(3740,0,3439,2144,2144,"((_pid==1))", 0, 2, 0); /* m: 3434 -> 3439,0 */
	reached1[3434] = 1;
	trans[1][3434]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3435]	= settr(3742,0,3439,2145,2145,"((_pid>1))", 0, 2, 0); /* m: 3436 -> 3439,0 */
	reached1[3436] = 1;
	trans[1][3436]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3439]	= settr(3746,0,3440,2146,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3440]	= settr(3747,0,3484,2147,2147,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3480 -> 0,3484 */
	reached1[3480] = 1;
	trans[1][3479]	= settr(3786,0,3480,1,0,".(goto)", 0, 2, 0); /* m: 3480 -> 0,3484 */
	reached1[3480] = 1;
	trans[1][3442]	= settr(3749,0,3453,2148,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][3453] = settr(3760,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3760,0,3449,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3449] = settr(3756,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3756,0,3443,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3756,0,3445,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3756,0,3447,0,0,"IF", 0, 2, 0);
	trans[1][3443]	= settr(3750,0,3451,2149,2149,"((_pid==0))", 0, 2, 0); /* m: 3444 -> 3451,0 */
	reached1[3444] = 1;
	trans[1][3444]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3450]	= settr(3757,0,3451,1,0,".(goto)", 0, 2, 0);
	trans[1][3445]	= settr(3752,0,3451,2150,2150,"((_pid==1))", 0, 2, 0); /* m: 3446 -> 3451,0 */
	reached1[3446] = 1;
	trans[1][3446]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3447]	= settr(3754,0,3451,2151,2151,"((_pid>1))", 0, 2, 0); /* m: 3448 -> 3451,0 */
	reached1[3448] = 1;
	trans[1][3448]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3451]	= settr(3758,0,3452,2152,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3452]	= settr(3759,0,3484,2153,2153,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3480 -> 0,3484 */
	reached1[3480] = 1;
	trans[1][3454]	= settr(3761,0,3465,2154,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][3465] = settr(3772,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3772,0,3461,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3461] = settr(3768,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3768,0,3455,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3768,0,3457,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3768,0,3459,0,0,"IF", 0, 2, 0);
	trans[1][3455]	= settr(3762,0,3463,2155,2155,"((_pid==0))", 0, 2, 0); /* m: 3456 -> 3463,0 */
	reached1[3456] = 1;
	trans[1][3456]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3462]	= settr(3769,0,3463,1,0,".(goto)", 0, 2, 0);
	trans[1][3457]	= settr(3764,0,3463,2156,2156,"((_pid==1))", 0, 2, 0); /* m: 3458 -> 3463,0 */
	reached1[3458] = 1;
	trans[1][3458]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3459]	= settr(3766,0,3463,2157,2157,"((_pid>1))", 0, 2, 0); /* m: 3460 -> 3463,0 */
	reached1[3460] = 1;
	trans[1][3460]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3463]	= settr(3770,0,3464,2158,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3464]	= settr(3771,0,3484,2159,2159,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3480 -> 0,3484 */
	reached1[3480] = 1;
	trans[1][3466]	= settr(3773,0,3477,2160,0,"((8==STOP))", 0, 2, 0);
	T = trans[ 1][3477] = settr(3784,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3784,0,3473,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3473] = settr(3780,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3780,0,3467,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3780,0,3469,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3780,0,3471,0,0,"IF", 0, 2, 0);
	trans[1][3467]	= settr(3774,0,3475,2161,2161,"((_pid==0))", 0, 2, 0); /* m: 3468 -> 3475,0 */
	reached1[3468] = 1;
	trans[1][3468]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3474]	= settr(3781,0,3475,1,0,".(goto)", 0, 2, 0);
	trans[1][3469]	= settr(3776,0,3475,2162,2162,"((_pid==1))", 0, 2, 0); /* m: 3470 -> 3475,0 */
	reached1[3470] = 1;
	trans[1][3470]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3471]	= settr(3778,0,3475,2163,2163,"((_pid>1))", 0, 2, 0); /* m: 3472 -> 3475,0 */
	reached1[3472] = 1;
	trans[1][3472]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3475]	= settr(3782,0,3476,2164,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3476]	= settr(3783,0,3484,2165,2165,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3480 -> 0,3484 */
	reached1[3480] = 1;
	trans[1][3480]	= settr(3787,0,3484,2166,2166,"j = (j+1)", 0, 2, 0);
	trans[1][3481]	= settr(3788,0,3482,2,0,"else", 0, 2, 0);
	trans[1][3482]	= settr(3789,0,5910,2167,2167,"j = 1", 0, 2, 0);
	trans[1][3483]	= settr(3790,0,5910,1,0,"goto :b25", 0, 2, 0);
	trans[1][3486]	= settr(3793,0,5910,1,0,"break", 0, 2, 0);
	trans[1][3493]	= settr(3800,0,4065,2168,0,"(((3==ABORTING)||(3==STOPPING)))", 0, 2, 0);
	T = trans[ 1][4065] = settr(4372,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4372,0,4063,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4063] = settr(4370,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4370,0,3494,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4370,0,3497,0,0,"IF", 0, 2, 0);
	trans[1][3494]	= settr(3801,0,3495,2169,0,"(((12==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][3495]	= settr(3802,0,3496,2170,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][3496]	= settr(3803,0,5910,2171,2171,"supervisor_started = 1", 1, 2, 0);
	trans[1][4064]	= settr(4371,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][3497]	= settr(3804,0,4061,2,0,"else", 0, 2, 0);
	T = trans[1][4061] = settr(4368,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4368,0,3498,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4368,0,3835,0,0,"IF", 0, 2, 0);
	trans[1][3498]	= settr(3805,0,3834,2172,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][3834] = settr(4141,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4141,0,3832,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3832] = settr(4139,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4139,0,3499,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4139,0,3665,0,0,"IF", 0, 2, 0);
	trans[1][3499]	= settr(3806,0,3664,2173,0,"(((12==START)||(12==PAUSED)))", 0, 2, 0);
	T = trans[ 1][3664] = settr(3971,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3971,0,3661,0,0,"sub-sequence", 0, 2, 0);
	trans[1][3662]	= settr(3969,0,3661,1,0,".(goto)", 0, 2, 0);
	T = trans[1][3661] = settr(3968,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(3968,0,3500,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(3968,0,3658,0,0,"DO", 0, 2, 0);
	trans[1][3500]	= settr(3807,0,3656,2174,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][3656] = settr(3963,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3963,0,3654,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3654] = settr(3961,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3961,0,3501,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3961,0,3540,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3961,0,3578,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3961,0,3616,0,0,"IF", 0, 2, 0);
	trans[1][3501]	= settr(3808,0,3539,2175,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][3539] = settr(3846,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3846,0,3521,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3521] = settr(3828,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3828,2,3519,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3519] = settr(3826,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3826,2,3502,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3826,2,3505,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3826,2,3508,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3826,2,3511,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3826,2,3514,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3826,2,3517,0,0,"IF", 1, 2, 0);
	trans[1][3502]	= settr(3809,4,3522,2176,2176,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3503 -> 3522,0 */
	reached1[3503] = 1;
	trans[1][3503]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3504]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3520]	= settr(3827,0,3522,2177,2177,".(goto)", 1, 2, 0);
	trans[1][3505]	= settr(3812,4,3522,2178,2178,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3506 -> 3522,0 */
	reached1[3506] = 1;
	trans[1][3506]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3507]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3508]	= settr(3815,4,3522,2179,2179,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3509 -> 3522,0 */
	reached1[3509] = 1;
	trans[1][3509]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3510]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3511]	= settr(3818,4,3522,2180,2180,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3512 -> 3522,0 */
	reached1[3512] = 1;
	trans[1][3512]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3513]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3514]	= settr(3821,4,3522,2181,2181,"((START==ABORT))", 1, 2, 0); /* m: 3515 -> 3522,0 */
	reached1[3515] = 1;
	trans[1][3515]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3516]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3517]	= settr(3824,2,3518,2,0,"else", 1, 2, 0);
	trans[1][3518]	= settr(3825,4,3522,2182,2182,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3520 -> 0,3522 */
	reached1[3520] = 1;
	trans[1][3522]	= settr(3829,0,3537,2183,2183,"(run Thread(j))", 0, 2, 0);
	T = trans[1][3537] = settr(3844,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3844,0,3523,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3844,0,3535,0,0,"IF", 0, 2, 0);
	trans[1][3523]	= settr(3830,0,3534,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3534] = settr(3841,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3841,0,3530,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3530] = settr(3837,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3837,0,3524,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3837,0,3526,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3837,0,3528,0,0,"IF", 0, 2, 0);
	trans[1][3524]	= settr(3831,0,3532,2184,2184,"((_pid==0))", 0, 2, 0); /* m: 3525 -> 3532,0 */
	reached1[3525] = 1;
	trans[1][3525]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3531]	= settr(3838,0,3532,1,0,".(goto)", 0, 2, 0);
	trans[1][3526]	= settr(3833,0,3532,2185,2185,"((_pid==1))", 0, 2, 0); /* m: 3527 -> 3532,0 */
	reached1[3527] = 1;
	trans[1][3527]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3528]	= settr(3835,0,3532,2186,2186,"((_pid>1))", 0, 2, 0); /* m: 3529 -> 3532,0 */
	reached1[3529] = 1;
	trans[1][3529]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3532]	= settr(3839,0,3533,2187,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3533]	= settr(3840,0,3661,2188,2188,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3657 -> 0,3661 */
	reached1[3657] = 1;
	trans[1][3538]	= settr(3845,0,3657,1,0,".(goto)", 0, 2, 0); /* m: 3657 -> 0,3661 */
	reached1[3657] = 1;
	trans[1][3535]	= settr(3842,0,3536,2,0,"else", 0, 2, 0);
	trans[1][3536]	= settr(3843,0,3661,2189,2189,"(1)", 0, 2, 0); /* m: 3657 -> 3661,0 */
	reached1[3657] = 1;
	trans[1][3655]	= settr(3962,0,3657,1,0,".(goto)", 0, 2, 0); /* m: 3657 -> 0,3661 */
	reached1[3657] = 1;
	trans[1][3540]	= settr(3847,0,3577,2190,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][3577] = settr(3884,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3884,0,3560,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3560] = settr(3867,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3867,2,3558,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3558] = settr(3865,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3865,2,3541,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3865,2,3544,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3865,2,3547,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3865,2,3550,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3865,2,3553,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3865,2,3556,0,0,"IF", 1, 2, 0);
	trans[1][3541]	= settr(3848,4,3575,2191,2191,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3542 -> 3575,0 */
	reached1[3542] = 1;
	trans[1][3542]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3543]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3559]	= settr(3866,0,3575,2192,2192,".(goto)", 1, 2, 0);
	trans[1][3544]	= settr(3851,4,3575,2193,2193,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3545 -> 3575,0 */
	reached1[3545] = 1;
	trans[1][3545]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3546]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3547]	= settr(3854,4,3575,2194,2194,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3548 -> 3575,0 */
	reached1[3548] = 1;
	trans[1][3548]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3549]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3550]	= settr(3857,4,3575,2195,2195,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3551 -> 3575,0 */
	reached1[3551] = 1;
	trans[1][3551]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3552]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3553]	= settr(3860,4,3575,2196,2196,"((PAUSE==ABORT))", 1, 2, 0); /* m: 3554 -> 3575,0 */
	reached1[3554] = 1;
	trans[1][3554]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3555]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3556]	= settr(3863,2,3557,2,0,"else", 1, 2, 0);
	trans[1][3557]	= settr(3864,4,3575,2197,2197,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3559 -> 0,3575 */
	reached1[3559] = 1;
	T = trans[1][3575] = settr(3882,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3882,0,3561,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3882,0,3573,0,0,"IF", 0, 2, 0);
	trans[1][3561]	= settr(3868,0,3572,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3572] = settr(3879,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3879,0,3568,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3568] = settr(3875,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3875,0,3562,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3875,0,3564,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3875,0,3566,0,0,"IF", 0, 2, 0);
	trans[1][3562]	= settr(3869,0,3570,2198,2198,"((_pid==0))", 0, 2, 0); /* m: 3563 -> 3570,0 */
	reached1[3563] = 1;
	trans[1][3563]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3569]	= settr(3876,0,3570,1,0,".(goto)", 0, 2, 0);
	trans[1][3564]	= settr(3871,0,3570,2199,2199,"((_pid==1))", 0, 2, 0); /* m: 3565 -> 3570,0 */
	reached1[3565] = 1;
	trans[1][3565]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3566]	= settr(3873,0,3570,2200,2200,"((_pid>1))", 0, 2, 0); /* m: 3567 -> 3570,0 */
	reached1[3567] = 1;
	trans[1][3567]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3570]	= settr(3877,0,3571,2201,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3571]	= settr(3878,0,3661,2202,2202,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3657 -> 0,3661 */
	reached1[3657] = 1;
	trans[1][3576]	= settr(3883,0,3657,1,0,".(goto)", 0, 2, 0); /* m: 3657 -> 0,3661 */
	reached1[3657] = 1;
	trans[1][3573]	= settr(3880,0,3574,2,0,"else", 0, 2, 0);
	trans[1][3574]	= settr(3881,0,3661,2203,2203,"(1)", 0, 2, 0); /* m: 3657 -> 3661,0 */
	reached1[3657] = 1;
	trans[1][3578]	= settr(3885,0,3615,2204,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][3615] = settr(3922,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3922,0,3598,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3598] = settr(3905,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3905,2,3596,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3596] = settr(3903,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3903,2,3579,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3903,2,3582,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3903,2,3585,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3903,2,3588,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3903,2,3591,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3903,2,3594,0,0,"IF", 1, 2, 0);
	trans[1][3579]	= settr(3886,4,3613,2205,2205,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3580 -> 3613,0 */
	reached1[3580] = 1;
	trans[1][3580]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3581]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3597]	= settr(3904,0,3613,2206,2206,".(goto)", 1, 2, 0);
	trans[1][3582]	= settr(3889,4,3613,2207,2207,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3583 -> 3613,0 */
	reached1[3583] = 1;
	trans[1][3583]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3584]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3585]	= settr(3892,4,3613,2208,2208,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3586 -> 3613,0 */
	reached1[3586] = 1;
	trans[1][3586]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3587]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3588]	= settr(3895,4,3613,2209,2209,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3589 -> 3613,0 */
	reached1[3589] = 1;
	trans[1][3589]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3590]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3591]	= settr(3898,4,3613,2210,2210,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 3592 -> 3613,0 */
	reached1[3592] = 1;
	trans[1][3592]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3593]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3594]	= settr(3901,2,3595,2,0,"else", 1, 2, 0);
	trans[1][3595]	= settr(3902,4,3613,2211,2211,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3597 -> 0,3613 */
	reached1[3597] = 1;
	T = trans[1][3613] = settr(3920,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3920,0,3599,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3920,0,3611,0,0,"IF", 0, 2, 0);
	trans[1][3599]	= settr(3906,0,3610,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3610] = settr(3917,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3917,0,3606,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3606] = settr(3913,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3913,0,3600,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3913,0,3602,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3913,0,3604,0,0,"IF", 0, 2, 0);
	trans[1][3600]	= settr(3907,0,3608,2212,2212,"((_pid==0))", 0, 2, 0); /* m: 3601 -> 3608,0 */
	reached1[3601] = 1;
	trans[1][3601]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3607]	= settr(3914,0,3608,1,0,".(goto)", 0, 2, 0);
	trans[1][3602]	= settr(3909,0,3608,2213,2213,"((_pid==1))", 0, 2, 0); /* m: 3603 -> 3608,0 */
	reached1[3603] = 1;
	trans[1][3603]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3604]	= settr(3911,0,3608,2214,2214,"((_pid>1))", 0, 2, 0); /* m: 3605 -> 3608,0 */
	reached1[3605] = 1;
	trans[1][3605]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3608]	= settr(3915,0,3609,2215,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3609]	= settr(3916,0,3661,2216,2216,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3657 -> 0,3661 */
	reached1[3657] = 1;
	trans[1][3614]	= settr(3921,0,3657,1,0,".(goto)", 0, 2, 0); /* m: 3657 -> 0,3661 */
	reached1[3657] = 1;
	trans[1][3611]	= settr(3918,0,3612,2,0,"else", 0, 2, 0);
	trans[1][3612]	= settr(3919,0,3661,2217,2217,"(1)", 0, 2, 0); /* m: 3657 -> 3661,0 */
	reached1[3657] = 1;
	trans[1][3616]	= settr(3923,0,3653,2218,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][3653] = settr(3960,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3960,0,3636,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3636] = settr(3943,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3943,2,3634,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3634] = settr(3941,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3941,2,3617,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3941,2,3620,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3941,2,3623,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3941,2,3626,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3941,2,3629,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3941,2,3632,0,0,"IF", 1, 2, 0);
	trans[1][3617]	= settr(3924,4,3651,2219,2219,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3618 -> 3651,0 */
	reached1[3618] = 1;
	trans[1][3618]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3619]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3635]	= settr(3942,0,3651,2220,2220,".(goto)", 1, 2, 0);
	trans[1][3620]	= settr(3927,4,3651,2221,2221,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3621 -> 3651,0 */
	reached1[3621] = 1;
	trans[1][3621]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3622]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3623]	= settr(3930,4,3651,2222,2222,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3624 -> 3651,0 */
	reached1[3624] = 1;
	trans[1][3624]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3625]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3626]	= settr(3933,4,3651,2223,2223,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3627 -> 3651,0 */
	reached1[3627] = 1;
	trans[1][3627]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3628]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3629]	= settr(3936,4,3651,2224,2224,"((STOP==ABORT))", 1, 2, 0); /* m: 3630 -> 3651,0 */
	reached1[3630] = 1;
	trans[1][3630]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3631]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3632]	= settr(3939,2,3633,2,0,"else", 1, 2, 0);
	trans[1][3633]	= settr(3940,4,3651,2225,2225,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3635 -> 0,3651 */
	reached1[3635] = 1;
	T = trans[1][3651] = settr(3958,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3958,0,3637,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3958,0,3649,0,0,"IF", 0, 2, 0);
	trans[1][3637]	= settr(3944,0,3648,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3648] = settr(3955,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(3955,0,3644,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3644] = settr(3951,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3951,0,3638,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(3951,0,3640,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(3951,0,3642,0,0,"IF", 0, 2, 0);
	trans[1][3638]	= settr(3945,0,3646,2226,2226,"((_pid==0))", 0, 2, 0); /* m: 3639 -> 3646,0 */
	reached1[3639] = 1;
	trans[1][3639]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3645]	= settr(3952,0,3646,1,0,".(goto)", 0, 2, 0);
	trans[1][3640]	= settr(3947,0,3646,2227,2227,"((_pid==1))", 0, 2, 0); /* m: 3641 -> 3646,0 */
	reached1[3641] = 1;
	trans[1][3641]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3642]	= settr(3949,0,3646,2228,2228,"((_pid>1))", 0, 2, 0); /* m: 3643 -> 3646,0 */
	reached1[3643] = 1;
	trans[1][3643]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3646]	= settr(3953,0,3647,2229,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3647]	= settr(3954,0,3661,2230,2230,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3657 -> 0,3661 */
	reached1[3657] = 1;
	trans[1][3652]	= settr(3959,0,3657,1,0,".(goto)", 0, 2, 0); /* m: 3657 -> 0,3661 */
	reached1[3657] = 1;
	trans[1][3649]	= settr(3956,0,3650,2,0,"else", 0, 2, 0);
	trans[1][3650]	= settr(3957,0,3661,2231,2231,"(1)", 0, 2, 0); /* m: 3657 -> 3661,0 */
	reached1[3657] = 1;
	trans[1][3657]	= settr(3964,0,3661,2232,2232,"j = (j+1)", 0, 2, 0);
	trans[1][3658]	= settr(3965,0,3659,2,0,"else", 0, 2, 0);
	trans[1][3659]	= settr(3966,0,5910,2233,2233,"j = 1", 0, 2, 0);
	trans[1][3660]	= settr(3967,0,5910,1,0,"goto :b26", 0, 2, 0);
	trans[1][3663]	= settr(3970,0,5910,1,0,"break", 0, 2, 0);
	trans[1][3833]	= settr(4140,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][3665]	= settr(3972,0,3831,2,0,"else", 0, 2, 0);
	T = trans[ 1][3831] = settr(4138,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4138,0,3666,0,0,"sub-sequence", 0, 2, 0);
	trans[1][3666]	= settr(3973,0,3828,2234,2234,"j = (3-1)", 0, 2, 0);
	trans[1][3829]	= settr(4136,0,3828,1,0,".(goto)", 0, 2, 0);
	T = trans[1][3828] = settr(4135,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(4135,0,3667,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(4135,0,3825,0,0,"DO", 0, 2, 0);
	trans[1][3667]	= settr(3974,0,3823,2235,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][3823] = settr(4130,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4130,0,3821,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3821] = settr(4128,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4128,0,3668,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4128,0,3707,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4128,0,3745,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4128,0,3783,0,0,"IF", 0, 2, 0);
	trans[1][3668]	= settr(3975,0,3706,2236,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][3706] = settr(4013,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4013,0,3688,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3688] = settr(3995,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(3995,2,3686,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3686] = settr(3993,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3993,2,3669,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3993,2,3672,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3993,2,3675,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3993,2,3678,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(3993,2,3681,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(3993,2,3684,0,0,"IF", 1, 2, 0);
	trans[1][3669]	= settr(3976,4,3689,2237,2237,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3670 -> 3689,0 */
	reached1[3670] = 1;
	trans[1][3670]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3671]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3687]	= settr(3994,0,3689,2238,2238,".(goto)", 1, 2, 0);
	trans[1][3672]	= settr(3979,4,3689,2239,2239,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3673 -> 3689,0 */
	reached1[3673] = 1;
	trans[1][3673]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3674]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3675]	= settr(3982,4,3689,2240,2240,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3676 -> 3689,0 */
	reached1[3676] = 1;
	trans[1][3676]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3677]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3678]	= settr(3985,4,3689,2241,2241,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3679 -> 3689,0 */
	reached1[3679] = 1;
	trans[1][3679]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3680]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3681]	= settr(3988,4,3689,2242,2242,"((START==ABORT))", 1, 2, 0); /* m: 3682 -> 3689,0 */
	reached1[3682] = 1;
	trans[1][3682]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3683]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3684]	= settr(3991,2,3685,2,0,"else", 1, 2, 0);
	trans[1][3685]	= settr(3992,4,3689,2243,2243,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3687 -> 0,3689 */
	reached1[3687] = 1;
	trans[1][3689]	= settr(3996,0,3704,2244,2244,"(run Thread(j))", 0, 2, 0);
	T = trans[1][3704] = settr(4011,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4011,0,3690,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4011,0,3702,0,0,"IF", 0, 2, 0);
	trans[1][3690]	= settr(3997,0,3701,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3701] = settr(4008,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4008,0,3697,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3697] = settr(4004,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4004,0,3691,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4004,0,3693,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4004,0,3695,0,0,"IF", 0, 2, 0);
	trans[1][3691]	= settr(3998,0,3699,2245,2245,"((_pid==0))", 0, 2, 0); /* m: 3692 -> 3699,0 */
	reached1[3692] = 1;
	trans[1][3692]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3698]	= settr(4005,0,3699,1,0,".(goto)", 0, 2, 0);
	trans[1][3693]	= settr(4000,0,3699,2246,2246,"((_pid==1))", 0, 2, 0); /* m: 3694 -> 3699,0 */
	reached1[3694] = 1;
	trans[1][3694]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3695]	= settr(4002,0,3699,2247,2247,"((_pid>1))", 0, 2, 0); /* m: 3696 -> 3699,0 */
	reached1[3696] = 1;
	trans[1][3696]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3699]	= settr(4006,0,3700,2248,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3700]	= settr(4007,0,3828,2249,2249,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3824 -> 0,3828 */
	reached1[3824] = 1;
	trans[1][3705]	= settr(4012,0,3824,1,0,".(goto)", 0, 2, 0); /* m: 3824 -> 0,3828 */
	reached1[3824] = 1;
	trans[1][3702]	= settr(4009,0,3703,2,0,"else", 0, 2, 0);
	trans[1][3703]	= settr(4010,0,3828,2250,2250,"(1)", 0, 2, 0); /* m: 3824 -> 3828,0 */
	reached1[3824] = 1;
	trans[1][3822]	= settr(4129,0,3824,1,0,".(goto)", 0, 2, 0); /* m: 3824 -> 0,3828 */
	reached1[3824] = 1;
	trans[1][3707]	= settr(4014,0,3744,2251,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][3744] = settr(4051,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4051,0,3727,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3727] = settr(4034,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4034,2,3725,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3725] = settr(4032,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4032,2,3708,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4032,2,3711,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4032,2,3714,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4032,2,3717,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4032,2,3720,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4032,2,3723,0,0,"IF", 1, 2, 0);
	trans[1][3708]	= settr(4015,4,3742,2252,2252,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3709 -> 3742,0 */
	reached1[3709] = 1;
	trans[1][3709]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3710]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3726]	= settr(4033,0,3742,2253,2253,".(goto)", 1, 2, 0);
	trans[1][3711]	= settr(4018,4,3742,2254,2254,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3712 -> 3742,0 */
	reached1[3712] = 1;
	trans[1][3712]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3713]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3714]	= settr(4021,4,3742,2255,2255,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3715 -> 3742,0 */
	reached1[3715] = 1;
	trans[1][3715]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3716]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3717]	= settr(4024,4,3742,2256,2256,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3718 -> 3742,0 */
	reached1[3718] = 1;
	trans[1][3718]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3719]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3720]	= settr(4027,4,3742,2257,2257,"((PAUSE==ABORT))", 1, 2, 0); /* m: 3721 -> 3742,0 */
	reached1[3721] = 1;
	trans[1][3721]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3722]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3723]	= settr(4030,2,3724,2,0,"else", 1, 2, 0);
	trans[1][3724]	= settr(4031,4,3742,2258,2258,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3726 -> 0,3742 */
	reached1[3726] = 1;
	T = trans[1][3742] = settr(4049,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4049,0,3728,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4049,0,3740,0,0,"IF", 0, 2, 0);
	trans[1][3728]	= settr(4035,0,3739,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3739] = settr(4046,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4046,0,3735,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3735] = settr(4042,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4042,0,3729,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4042,0,3731,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4042,0,3733,0,0,"IF", 0, 2, 0);
	trans[1][3729]	= settr(4036,0,3737,2259,2259,"((_pid==0))", 0, 2, 0); /* m: 3730 -> 3737,0 */
	reached1[3730] = 1;
	trans[1][3730]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3736]	= settr(4043,0,3737,1,0,".(goto)", 0, 2, 0);
	trans[1][3731]	= settr(4038,0,3737,2260,2260,"((_pid==1))", 0, 2, 0); /* m: 3732 -> 3737,0 */
	reached1[3732] = 1;
	trans[1][3732]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3733]	= settr(4040,0,3737,2261,2261,"((_pid>1))", 0, 2, 0); /* m: 3734 -> 3737,0 */
	reached1[3734] = 1;
	trans[1][3734]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3737]	= settr(4044,0,3738,2262,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3738]	= settr(4045,0,3828,2263,2263,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3824 -> 0,3828 */
	reached1[3824] = 1;
	trans[1][3743]	= settr(4050,0,3824,1,0,".(goto)", 0, 2, 0); /* m: 3824 -> 0,3828 */
	reached1[3824] = 1;
	trans[1][3740]	= settr(4047,0,3741,2,0,"else", 0, 2, 0);
	trans[1][3741]	= settr(4048,0,3828,2264,2264,"(1)", 0, 2, 0); /* m: 3824 -> 3828,0 */
	reached1[3824] = 1;
	trans[1][3745]	= settr(4052,0,3782,2265,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][3782] = settr(4089,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4089,0,3765,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3765] = settr(4072,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4072,2,3763,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3763] = settr(4070,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4070,2,3746,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4070,2,3749,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4070,2,3752,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4070,2,3755,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4070,2,3758,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4070,2,3761,0,0,"IF", 1, 2, 0);
	trans[1][3746]	= settr(4053,4,3780,2266,2266,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3747 -> 3780,0 */
	reached1[3747] = 1;
	trans[1][3747]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3748]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3764]	= settr(4071,0,3780,2267,2267,".(goto)", 1, 2, 0);
	trans[1][3749]	= settr(4056,4,3780,2268,2268,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3750 -> 3780,0 */
	reached1[3750] = 1;
	trans[1][3750]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3751]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3752]	= settr(4059,4,3780,2269,2269,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3753 -> 3780,0 */
	reached1[3753] = 1;
	trans[1][3753]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3754]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3755]	= settr(4062,4,3780,2270,2270,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3756 -> 3780,0 */
	reached1[3756] = 1;
	trans[1][3756]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3757]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3758]	= settr(4065,4,3780,2271,2271,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 3759 -> 3780,0 */
	reached1[3759] = 1;
	trans[1][3759]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3760]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3761]	= settr(4068,2,3762,2,0,"else", 1, 2, 0);
	trans[1][3762]	= settr(4069,4,3780,2272,2272,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3764 -> 0,3780 */
	reached1[3764] = 1;
	T = trans[1][3780] = settr(4087,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4087,0,3766,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4087,0,3778,0,0,"IF", 0, 2, 0);
	trans[1][3766]	= settr(4073,0,3777,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3777] = settr(4084,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4084,0,3773,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3773] = settr(4080,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4080,0,3767,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4080,0,3769,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4080,0,3771,0,0,"IF", 0, 2, 0);
	trans[1][3767]	= settr(4074,0,3775,2273,2273,"((_pid==0))", 0, 2, 0); /* m: 3768 -> 3775,0 */
	reached1[3768] = 1;
	trans[1][3768]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3774]	= settr(4081,0,3775,1,0,".(goto)", 0, 2, 0);
	trans[1][3769]	= settr(4076,0,3775,2274,2274,"((_pid==1))", 0, 2, 0); /* m: 3770 -> 3775,0 */
	reached1[3770] = 1;
	trans[1][3770]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3771]	= settr(4078,0,3775,2275,2275,"((_pid>1))", 0, 2, 0); /* m: 3772 -> 3775,0 */
	reached1[3772] = 1;
	trans[1][3772]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3775]	= settr(4082,0,3776,2276,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3776]	= settr(4083,0,3828,2277,2277,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3824 -> 0,3828 */
	reached1[3824] = 1;
	trans[1][3781]	= settr(4088,0,3824,1,0,".(goto)", 0, 2, 0); /* m: 3824 -> 0,3828 */
	reached1[3824] = 1;
	trans[1][3778]	= settr(4085,0,3779,2,0,"else", 0, 2, 0);
	trans[1][3779]	= settr(4086,0,3828,2278,2278,"(1)", 0, 2, 0); /* m: 3824 -> 3828,0 */
	reached1[3824] = 1;
	trans[1][3783]	= settr(4090,0,3820,2279,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][3820] = settr(4127,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4127,0,3803,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3803] = settr(4110,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4110,2,3801,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3801] = settr(4108,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4108,2,3784,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4108,2,3787,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4108,2,3790,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4108,2,3793,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4108,2,3796,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4108,2,3799,0,0,"IF", 1, 2, 0);
	trans[1][3784]	= settr(4091,4,3818,2280,2280,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3785 -> 3818,0 */
	reached1[3785] = 1;
	trans[1][3785]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3786]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3802]	= settr(4109,0,3818,2281,2281,".(goto)", 1, 2, 0);
	trans[1][3787]	= settr(4094,4,3818,2282,2282,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3788 -> 3818,0 */
	reached1[3788] = 1;
	trans[1][3788]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3789]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3790]	= settr(4097,4,3818,2283,2283,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3791 -> 3818,0 */
	reached1[3791] = 1;
	trans[1][3791]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3792]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3793]	= settr(4100,4,3818,2284,2284,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3794 -> 3818,0 */
	reached1[3794] = 1;
	trans[1][3794]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3795]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3796]	= settr(4103,4,3818,2285,2285,"((STOP==ABORT))", 1, 2, 0); /* m: 3797 -> 3818,0 */
	reached1[3797] = 1;
	trans[1][3797]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3798]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3799]	= settr(4106,2,3800,2,0,"else", 1, 2, 0);
	trans[1][3800]	= settr(4107,4,3818,2286,2286,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3802 -> 0,3818 */
	reached1[3802] = 1;
	T = trans[1][3818] = settr(4125,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4125,0,3804,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4125,0,3816,0,0,"IF", 0, 2, 0);
	trans[1][3804]	= settr(4111,0,3815,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][3815] = settr(4122,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4122,0,3811,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3811] = settr(4118,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4118,0,3805,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4118,0,3807,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4118,0,3809,0,0,"IF", 0, 2, 0);
	trans[1][3805]	= settr(4112,0,3813,2287,2287,"((_pid==0))", 0, 2, 0); /* m: 3806 -> 3813,0 */
	reached1[3806] = 1;
	trans[1][3806]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3812]	= settr(4119,0,3813,1,0,".(goto)", 0, 2, 0);
	trans[1][3807]	= settr(4114,0,3813,2288,2288,"((_pid==1))", 0, 2, 0); /* m: 3808 -> 3813,0 */
	reached1[3808] = 1;
	trans[1][3808]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3809]	= settr(4116,0,3813,2289,2289,"((_pid>1))", 0, 2, 0); /* m: 3810 -> 3813,0 */
	reached1[3810] = 1;
	trans[1][3810]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3813]	= settr(4120,0,3814,2290,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3814]	= settr(4121,0,3828,2291,2291,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3824 -> 0,3828 */
	reached1[3824] = 1;
	trans[1][3819]	= settr(4126,0,3824,1,0,".(goto)", 0, 2, 0); /* m: 3824 -> 0,3828 */
	reached1[3824] = 1;
	trans[1][3816]	= settr(4123,0,3817,2,0,"else", 0, 2, 0);
	trans[1][3817]	= settr(4124,0,3828,2292,2292,"(1)", 0, 2, 0); /* m: 3824 -> 3828,0 */
	reached1[3824] = 1;
	trans[1][3824]	= settr(4131,0,3828,2293,2293,"j = (j-1)", 0, 2, 0);
	trans[1][3825]	= settr(4132,0,3826,2,0,"else", 0, 2, 0);
	trans[1][3826]	= settr(4133,0,5910,2294,2294,"j = 1", 0, 2, 0);
	trans[1][3827]	= settr(4134,0,5910,1,0,"goto :b27", 0, 2, 0);
	trans[1][3830]	= settr(4137,0,5910,1,0,"break", 0, 2, 0);
	trans[1][4062]	= settr(4369,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][3835]	= settr(4142,0,4060,2,0,"else", 0, 2, 0);
	T = trans[ 1][4060] = settr(4367,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4367,0,3836,0,0,"sub-sequence", 0, 2, 0);
	trans[1][3836]	= settr(4143,0,4001,2295,0,"printf('Supervisor propagating command %e...\\n',12)", 0, 2, 0);
	T = trans[ 1][4001] = settr(4308,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4308,0,3998,0,0,"sub-sequence", 0, 2, 0);
	trans[1][3999]	= settr(4306,0,3998,1,0,".(goto)", 0, 2, 0);
	T = trans[1][3998] = settr(4305,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(4305,0,3837,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(4305,0,3995,0,0,"DO", 0, 2, 0);
	trans[1][3837]	= settr(4144,0,3993,2296,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][3993] = settr(4300,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4300,0,3991,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3991] = settr(4298,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4298,0,3838,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4298,0,3877,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4298,0,3915,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4298,0,3953,0,0,"IF", 0, 2, 0);
	trans[1][3838]	= settr(4145,0,3876,2297,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][3876] = settr(4183,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4183,0,3858,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3858] = settr(4165,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4165,2,3856,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3856] = settr(4163,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4163,2,3839,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4163,2,3842,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4163,2,3845,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4163,2,3848,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4163,2,3851,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4163,2,3854,0,0,"IF", 1, 2, 0);
	trans[1][3839]	= settr(4146,4,3859,2298,2298,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3840 -> 3859,0 */
	reached1[3840] = 1;
	trans[1][3840]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3841]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3857]	= settr(4164,0,3859,2299,2299,".(goto)", 1, 2, 0);
	trans[1][3842]	= settr(4149,4,3859,2300,2300,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3843 -> 3859,0 */
	reached1[3843] = 1;
	trans[1][3843]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3844]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3845]	= settr(4152,4,3859,2301,2301,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3846 -> 3859,0 */
	reached1[3846] = 1;
	trans[1][3846]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3847]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3848]	= settr(4155,4,3859,2302,2302,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3849 -> 3859,0 */
	reached1[3849] = 1;
	trans[1][3849]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3850]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3851]	= settr(4158,4,3859,2303,2303,"((START==ABORT))", 1, 2, 0); /* m: 3852 -> 3859,0 */
	reached1[3852] = 1;
	trans[1][3852]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3853]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3854]	= settr(4161,2,3855,2,0,"else", 1, 2, 0);
	trans[1][3855]	= settr(4162,4,3859,2304,2304,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3857 -> 0,3859 */
	reached1[3857] = 1;
	trans[1][3859]	= settr(4166,0,3874,2305,2305,"(run Thread(j))", 0, 2, 0);
	T = trans[1][3874] = settr(4181,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(4181,0,3860,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(4181,0,3872,0,0,"IF", 0, 2, 0);
	trans[1][3860]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][3871] = settr(4178,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4178,0,3867,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3867] = settr(4174,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4174,0,3861,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4174,0,3863,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4174,0,3865,0,0,"IF", 0, 2, 0);
	trans[1][3861]	= settr(4168,0,3869,2306,2306,"((_pid==0))", 0, 2, 0); /* m: 3862 -> 3869,0 */
	reached1[3862] = 1;
	trans[1][3862]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3868]	= settr(4175,0,3869,1,0,".(goto)", 0, 2, 0);
	trans[1][3863]	= settr(4170,0,3869,2307,2307,"((_pid==1))", 0, 2, 0); /* m: 3864 -> 3869,0 */
	reached1[3864] = 1;
	trans[1][3864]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3865]	= settr(4172,0,3869,2308,2308,"((_pid>1))", 0, 2, 0); /* m: 3866 -> 3869,0 */
	reached1[3866] = 1;
	trans[1][3866]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3869]	= settr(4176,0,3870,2309,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3870]	= settr(4177,0,3998,2310,2310,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3994 -> 0,3998 */
	reached1[3994] = 1;
	trans[1][3875]	= settr(4182,0,3994,1,0,".(goto)", 0, 2, 0); /* m: 3994 -> 0,3998 */
	reached1[3994] = 1;
	trans[1][3872]	= settr(4179,0,3873,2,0,"else", 0, 2, 0);
	trans[1][3873]	= settr(4180,0,3998,2311,2311,"(1)", 0, 2, 0); /* m: 3994 -> 3998,0 */
	reached1[3994] = 1;
	trans[1][3992]	= settr(4299,0,3994,1,0,".(goto)", 0, 2, 0); /* m: 3994 -> 0,3998 */
	reached1[3994] = 1;
	trans[1][3877]	= settr(4184,0,3914,2312,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][3914] = settr(4221,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4221,0,3897,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3897] = settr(4204,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4204,2,3895,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3895] = settr(4202,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4202,2,3878,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4202,2,3881,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4202,2,3884,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4202,2,3887,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4202,2,3890,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4202,2,3893,0,0,"IF", 1, 2, 0);
	trans[1][3878]	= settr(4185,4,3912,2313,2313,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3879 -> 3912,0 */
	reached1[3879] = 1;
	trans[1][3879]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3880]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3896]	= settr(4203,0,3912,2314,2314,".(goto)", 1, 2, 0);
	trans[1][3881]	= settr(4188,4,3912,2315,2315,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3882 -> 3912,0 */
	reached1[3882] = 1;
	trans[1][3882]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3883]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3884]	= settr(4191,4,3912,2316,2316,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3885 -> 3912,0 */
	reached1[3885] = 1;
	trans[1][3885]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3886]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3887]	= settr(4194,4,3912,2317,2317,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3888 -> 3912,0 */
	reached1[3888] = 1;
	trans[1][3888]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3889]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3890]	= settr(4197,4,3912,2318,2318,"((PAUSE==ABORT))", 1, 2, 0); /* m: 3891 -> 3912,0 */
	reached1[3891] = 1;
	trans[1][3891]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3892]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3893]	= settr(4200,2,3894,2,0,"else", 1, 2, 0);
	trans[1][3894]	= settr(4201,4,3912,2319,2319,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3896 -> 0,3912 */
	reached1[3896] = 1;
	T = trans[1][3912] = settr(4219,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(4219,0,3898,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(4219,0,3910,0,0,"IF", 0, 2, 0);
	trans[1][3898]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][3909] = settr(4216,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4216,0,3905,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3905] = settr(4212,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4212,0,3899,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4212,0,3901,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4212,0,3903,0,0,"IF", 0, 2, 0);
	trans[1][3899]	= settr(4206,0,3907,2320,2320,"((_pid==0))", 0, 2, 0); /* m: 3900 -> 3907,0 */
	reached1[3900] = 1;
	trans[1][3900]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3906]	= settr(4213,0,3907,1,0,".(goto)", 0, 2, 0);
	trans[1][3901]	= settr(4208,0,3907,2321,2321,"((_pid==1))", 0, 2, 0); /* m: 3902 -> 3907,0 */
	reached1[3902] = 1;
	trans[1][3902]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3903]	= settr(4210,0,3907,2322,2322,"((_pid>1))", 0, 2, 0); /* m: 3904 -> 3907,0 */
	reached1[3904] = 1;
	trans[1][3904]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3907]	= settr(4214,0,3908,2323,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3908]	= settr(4215,0,3998,2324,2324,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3994 -> 0,3998 */
	reached1[3994] = 1;
	trans[1][3913]	= settr(4220,0,3994,1,0,".(goto)", 0, 2, 0); /* m: 3994 -> 0,3998 */
	reached1[3994] = 1;
	trans[1][3910]	= settr(4217,0,3911,2,0,"else", 0, 2, 0);
	trans[1][3911]	= settr(4218,0,3998,2325,2325,"(1)", 0, 2, 0); /* m: 3994 -> 3998,0 */
	reached1[3994] = 1;
	trans[1][3915]	= settr(4222,0,3952,2326,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][3952] = settr(4259,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4259,0,3935,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3935] = settr(4242,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4242,2,3933,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3933] = settr(4240,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4240,2,3916,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4240,2,3919,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4240,2,3922,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4240,2,3925,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4240,2,3928,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4240,2,3931,0,0,"IF", 1, 2, 0);
	trans[1][3916]	= settr(4223,4,3950,2327,2327,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3917 -> 3950,0 */
	reached1[3917] = 1;
	trans[1][3917]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3918]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3934]	= settr(4241,0,3950,2328,2328,".(goto)", 1, 2, 0);
	trans[1][3919]	= settr(4226,4,3950,2329,2329,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3920 -> 3950,0 */
	reached1[3920] = 1;
	trans[1][3920]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3921]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3922]	= settr(4229,4,3950,2330,2330,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3923 -> 3950,0 */
	reached1[3923] = 1;
	trans[1][3923]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3924]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3925]	= settr(4232,4,3950,2331,2331,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3926 -> 3950,0 */
	reached1[3926] = 1;
	trans[1][3926]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3927]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3928]	= settr(4235,4,3950,2332,2332,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 3929 -> 3950,0 */
	reached1[3929] = 1;
	trans[1][3929]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3930]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3931]	= settr(4238,2,3932,2,0,"else", 1, 2, 0);
	trans[1][3932]	= settr(4239,4,3950,2333,2333,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3934 -> 0,3950 */
	reached1[3934] = 1;
	T = trans[1][3950] = settr(4257,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(4257,0,3936,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(4257,0,3948,0,0,"IF", 0, 2, 0);
	trans[1][3936]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][3947] = settr(4254,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4254,0,3943,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3943] = settr(4250,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4250,0,3937,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4250,0,3939,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4250,0,3941,0,0,"IF", 0, 2, 0);
	trans[1][3937]	= settr(4244,0,3945,2334,2334,"((_pid==0))", 0, 2, 0); /* m: 3938 -> 3945,0 */
	reached1[3938] = 1;
	trans[1][3938]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3944]	= settr(4251,0,3945,1,0,".(goto)", 0, 2, 0);
	trans[1][3939]	= settr(4246,0,3945,2335,2335,"((_pid==1))", 0, 2, 0); /* m: 3940 -> 3945,0 */
	reached1[3940] = 1;
	trans[1][3940]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3941]	= settr(4248,0,3945,2336,2336,"((_pid>1))", 0, 2, 0); /* m: 3942 -> 3945,0 */
	reached1[3942] = 1;
	trans[1][3942]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3945]	= settr(4252,0,3946,2337,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3946]	= settr(4253,0,3998,2338,2338,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3994 -> 0,3998 */
	reached1[3994] = 1;
	trans[1][3951]	= settr(4258,0,3994,1,0,".(goto)", 0, 2, 0); /* m: 3994 -> 0,3998 */
	reached1[3994] = 1;
	trans[1][3948]	= settr(4255,0,3949,2,0,"else", 0, 2, 0);
	trans[1][3949]	= settr(4256,0,3998,2339,2339,"(1)", 0, 2, 0); /* m: 3994 -> 3998,0 */
	reached1[3994] = 1;
	trans[1][3953]	= settr(4260,0,3990,2340,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][3990] = settr(4297,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4297,0,3973,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][3973] = settr(4280,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4280,2,3971,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][3971] = settr(4278,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4278,2,3954,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4278,2,3957,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4278,2,3960,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4278,2,3963,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4278,2,3966,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4278,2,3969,0,0,"IF", 1, 2, 0);
	trans[1][3954]	= settr(4261,4,3988,2341,2341,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3955 -> 3988,0 */
	reached1[3955] = 1;
	trans[1][3955]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][3956]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][3972]	= settr(4279,0,3988,2342,2342,".(goto)", 1, 2, 0);
	trans[1][3957]	= settr(4264,4,3988,2343,2343,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 3958 -> 3988,0 */
	reached1[3958] = 1;
	trans[1][3958]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][3959]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][3960]	= settr(4267,4,3988,2344,2344,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3961 -> 3988,0 */
	reached1[3961] = 1;
	trans[1][3961]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][3962]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][3963]	= settr(4270,4,3988,2345,2345,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 3964 -> 3988,0 */
	reached1[3964] = 1;
	trans[1][3964]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][3965]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][3966]	= settr(4273,4,3988,2346,2346,"((STOP==ABORT))", 1, 2, 0); /* m: 3967 -> 3988,0 */
	reached1[3967] = 1;
	trans[1][3967]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][3968]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][3969]	= settr(4276,2,3970,2,0,"else", 1, 2, 0);
	trans[1][3970]	= settr(4277,4,3988,2347,2347,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 3972 -> 0,3988 */
	reached1[3972] = 1;
	T = trans[1][3988] = settr(4295,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(4295,0,3974,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(4295,0,3986,0,0,"IF", 0, 2, 0);
	trans[1][3974]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][3985] = settr(4292,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4292,0,3981,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][3981] = settr(4288,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4288,0,3975,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4288,0,3977,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4288,0,3979,0,0,"IF", 0, 2, 0);
	trans[1][3975]	= settr(4282,0,3983,2348,2348,"((_pid==0))", 0, 2, 0); /* m: 3976 -> 3983,0 */
	reached1[3976] = 1;
	trans[1][3976]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3982]	= settr(4289,0,3983,1,0,".(goto)", 0, 2, 0);
	trans[1][3977]	= settr(4284,0,3983,2349,2349,"((_pid==1))", 0, 2, 0); /* m: 3978 -> 3983,0 */
	reached1[3978] = 1;
	trans[1][3978]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][3979]	= settr(4286,0,3983,2350,2350,"((_pid>1))", 0, 2, 0); /* m: 3980 -> 3983,0 */
	reached1[3980] = 1;
	trans[1][3980]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][3983]	= settr(4290,0,3984,2351,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][3984]	= settr(4291,0,3998,2352,2352,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 3994 -> 0,3998 */
	reached1[3994] = 1;
	trans[1][3989]	= settr(4296,0,3994,1,0,".(goto)", 0, 2, 0); /* m: 3994 -> 0,3998 */
	reached1[3994] = 1;
	trans[1][3986]	= settr(4293,0,3987,2,0,"else", 0, 2, 0);
	trans[1][3987]	= settr(4294,0,3998,2353,2353,"(1)", 0, 2, 0); /* m: 3994 -> 3998,0 */
	reached1[3994] = 1;
	trans[1][3994]	= settr(4301,0,3998,2354,2354,"j = (j+1)", 0, 2, 0);
	trans[1][3995]	= settr(4302,0,3996,2,0,"else", 0, 2, 0);
	trans[1][3996]	= settr(4303,0,4057,2355,2355,"j = 1", 0, 2, 0);
	trans[1][3997]	= settr(4304,0,4057,1,0,"goto :b28", 0, 2, 0);
	trans[1][4000]	= settr(4307,0,4057,1,0,"break", 0, 2, 0);
	trans[1][4058]	= settr(4365,0,4057,1,0,".(goto)", 0, 2, 0);
	T = trans[1][4057] = settr(4364,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(4364,0,4002,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(4364,0,4054,0,0,"DO", 0, 2, 0);
	trans[1][4002]	= settr(4309,0,4051,2356,0,"((j<3))", 0, 2, 0);
	T = trans[1][4051] = settr(4358,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4358,0,4003,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4358,0,4015,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4358,0,4027,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4358,0,4039,0,0,"IF", 0, 2, 0);
	trans[1][4003]	= settr(4310,0,4014,2357,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][4014] = settr(4321,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4321,0,4010,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4010] = settr(4317,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4317,0,4004,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4317,0,4006,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4317,0,4008,0,0,"IF", 0, 2, 0);
	trans[1][4004]	= settr(4311,0,4012,2358,2358,"((_pid==0))", 0, 2, 0); /* m: 4005 -> 4012,0 */
	reached1[4005] = 1;
	trans[1][4005]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4011]	= settr(4318,0,4012,1,0,".(goto)", 0, 2, 0);
	trans[1][4006]	= settr(4313,0,4012,2359,2359,"((_pid==1))", 0, 2, 0); /* m: 4007 -> 4012,0 */
	reached1[4007] = 1;
	trans[1][4007]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4008]	= settr(4315,0,4012,2360,2360,"((_pid>1))", 0, 2, 0); /* m: 4009 -> 4012,0 */
	reached1[4009] = 1;
	trans[1][4009]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4012]	= settr(4319,0,4013,2361,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4013]	= settr(4320,0,4057,2362,2362,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4053 -> 0,4057 */
	reached1[4053] = 1;
	trans[1][4052]	= settr(4359,0,4053,1,0,".(goto)", 0, 2, 0); /* m: 4053 -> 0,4057 */
	reached1[4053] = 1;
	trans[1][4015]	= settr(4322,0,4026,2363,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][4026] = settr(4333,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4333,0,4022,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4022] = settr(4329,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4329,0,4016,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4329,0,4018,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4329,0,4020,0,0,"IF", 0, 2, 0);
	trans[1][4016]	= settr(4323,0,4024,2364,2364,"((_pid==0))", 0, 2, 0); /* m: 4017 -> 4024,0 */
	reached1[4017] = 1;
	trans[1][4017]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4023]	= settr(4330,0,4024,1,0,".(goto)", 0, 2, 0);
	trans[1][4018]	= settr(4325,0,4024,2365,2365,"((_pid==1))", 0, 2, 0); /* m: 4019 -> 4024,0 */
	reached1[4019] = 1;
	trans[1][4019]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4020]	= settr(4327,0,4024,2366,2366,"((_pid>1))", 0, 2, 0); /* m: 4021 -> 4024,0 */
	reached1[4021] = 1;
	trans[1][4021]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4024]	= settr(4331,0,4025,2367,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4025]	= settr(4332,0,4057,2368,2368,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4053 -> 0,4057 */
	reached1[4053] = 1;
	trans[1][4027]	= settr(4334,0,4038,2369,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][4038] = settr(4345,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4345,0,4034,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4034] = settr(4341,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4341,0,4028,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4341,0,4030,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4341,0,4032,0,0,"IF", 0, 2, 0);
	trans[1][4028]	= settr(4335,0,4036,2370,2370,"((_pid==0))", 0, 2, 0); /* m: 4029 -> 4036,0 */
	reached1[4029] = 1;
	trans[1][4029]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4035]	= settr(4342,0,4036,1,0,".(goto)", 0, 2, 0);
	trans[1][4030]	= settr(4337,0,4036,2371,2371,"((_pid==1))", 0, 2, 0); /* m: 4031 -> 4036,0 */
	reached1[4031] = 1;
	trans[1][4031]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4032]	= settr(4339,0,4036,2372,2372,"((_pid>1))", 0, 2, 0); /* m: 4033 -> 4036,0 */
	reached1[4033] = 1;
	trans[1][4033]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4036]	= settr(4343,0,4037,2373,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4037]	= settr(4344,0,4057,2374,2374,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4053 -> 0,4057 */
	reached1[4053] = 1;
	trans[1][4039]	= settr(4346,0,4050,2375,0,"((12==STOP))", 0, 2, 0);
	T = trans[ 1][4050] = settr(4357,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4357,0,4046,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4046] = settr(4353,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4353,0,4040,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4353,0,4042,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4353,0,4044,0,0,"IF", 0, 2, 0);
	trans[1][4040]	= settr(4347,0,4048,2376,2376,"((_pid==0))", 0, 2, 0); /* m: 4041 -> 4048,0 */
	reached1[4041] = 1;
	trans[1][4041]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4047]	= settr(4354,0,4048,1,0,".(goto)", 0, 2, 0);
	trans[1][4042]	= settr(4349,0,4048,2377,2377,"((_pid==1))", 0, 2, 0); /* m: 4043 -> 4048,0 */
	reached1[4043] = 1;
	trans[1][4043]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4044]	= settr(4351,0,4048,2378,2378,"((_pid>1))", 0, 2, 0); /* m: 4045 -> 4048,0 */
	reached1[4045] = 1;
	trans[1][4045]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4048]	= settr(4355,0,4049,2379,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4049]	= settr(4356,0,4057,2380,2380,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4053 -> 0,4057 */
	reached1[4053] = 1;
	trans[1][4053]	= settr(4360,0,4057,2381,2381,"j = (j+1)", 0, 2, 0);
	trans[1][4054]	= settr(4361,0,4055,2,0,"else", 0, 2, 0);
	trans[1][4055]	= settr(4362,0,5910,2382,2382,"j = 1", 0, 2, 0);
	trans[1][4056]	= settr(4363,0,5910,1,0,"goto :b29", 0, 2, 0);
	trans[1][4059]	= settr(4366,0,5910,1,0,"break", 0, 2, 0);
	trans[1][4066]	= settr(4373,0,4067,2,0,"else", 0, 2, 0);
	trans[1][4067]	= settr(4374,0,5910,1,0,"(1)", 0, 2, 0);
	trans[1][5813]	= settr(6120,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][4072]	= settr(4379,0,5809,2383,0,"((states[0]==PAUSED))", 1, 2, 0);
	T = trans[ 1][5809] = settr(6116,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6116,0,4083,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4083] = settr(4390,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4390,0,4081,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4081] = settr(4388,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4388,0,4073,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4388,0,4075,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4388,0,4077,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4388,0,4079,0,0,"IF", 0, 2, 0);
	trans[1][4073]	= settr(4380,0,4084,2384,2384,"(((0==0)&&(6==0)))", 0, 2, 0); /* m: 4074 -> 4084,0 */
	reached1[4074] = 1;
	trans[1][4074]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, _) -> %e\\n',4,3)",0,0,0);
	trans[1][4082]	= settr(4389,0,4084,1,0,".(goto)", 0, 2, 0);
	trans[1][4075]	= settr(4382,0,4084,2385,2385,"(((0==0)&&(6>0)))", 0, 2, 0); /* m: 4076 -> 4084,0 */
	reached1[4076] = 1;
	trans[1][4076]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, %e) -> %e\\n',4,6,3)",0,0,0);
	trans[1][4077]	= settr(4384,0,4084,2386,2386,"(((0>0)&&(6==0)))", 0, 2, 0); /* m: 4078 -> 4084,0 */
	reached1[4078] = 1;
	trans[1][4078]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, _) -> %e\\n',0,4,3)",0,0,0);
	trans[1][4079]	= settr(4386,0,4084,2387,2387,"(((0>0)&&(6>0)))", 0, 2, 0); /* m: 4080 -> 4084,0 */
	reached1[4080] = 1;
	trans[1][4080]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, %e) -> %e\\n',0,4,6,3)",0,0,0);
	trans[1][4084]	= settr(4391,0,5808,2388,2388,"states[0] = 3", 1, 2, 0);
	T = trans[ 1][5808] = settr(6115,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6115,0,5806,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5806] = settr(6113,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6113,0,4085,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6113,0,4658,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6113,0,5231,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6113,0,5804,0,0,"IF", 0, 2, 0);
	trans[1][4085]	= settr(4392,0,4657,2389,0,"((3==RUNNING))", 0, 2, 0);
	T = trans[ 1][4657] = settr(4964,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4964,0,4655,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4655] = settr(4962,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4962,0,4086,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4962,0,4089,0,0,"IF", 0, 2, 0);
	trans[1][4086]	= settr(4393,0,4087,2390,0,"(((6==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][4087]	= settr(4394,0,4088,2391,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][4088]	= settr(4395,0,5910,2392,2392,"supervisor_started = 1", 1, 2, 0);
	trans[1][4656]	= settr(4963,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][4089]	= settr(4396,0,4653,2,0,"else", 0, 2, 0);
	T = trans[1][4653] = settr(4960,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4960,0,4090,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4960,0,4427,0,0,"IF", 0, 2, 0);
	trans[1][4090]	= settr(4397,0,4426,2393,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][4426] = settr(4733,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4733,0,4424,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4424] = settr(4731,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4731,0,4091,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4731,0,4257,0,0,"IF", 0, 2, 0);
	trans[1][4091]	= settr(4398,0,4256,2394,0,"(((6==START)||(6==PAUSED)))", 0, 2, 0);
	T = trans[ 1][4256] = settr(4563,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4563,0,4253,0,0,"sub-sequence", 0, 2, 0);
	trans[1][4254]	= settr(4561,0,4253,1,0,".(goto)", 0, 2, 0);
	T = trans[1][4253] = settr(4560,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(4560,0,4092,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(4560,0,4250,0,0,"DO", 0, 2, 0);
	trans[1][4092]	= settr(4399,0,4248,2395,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][4248] = settr(4555,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4555,0,4246,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4246] = settr(4553,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4553,0,4093,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4553,0,4132,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4553,0,4170,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4553,0,4208,0,0,"IF", 0, 2, 0);
	trans[1][4093]	= settr(4400,0,4131,2396,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][4131] = settr(4438,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4438,0,4113,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4113] = settr(4420,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4420,2,4111,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4111] = settr(4418,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4418,2,4094,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4418,2,4097,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4418,2,4100,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4418,2,4103,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4418,2,4106,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4418,2,4109,0,0,"IF", 1, 2, 0);
	trans[1][4094]	= settr(4401,4,4114,2397,2397,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4095 -> 4114,0 */
	reached1[4095] = 1;
	trans[1][4095]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4096]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4112]	= settr(4419,0,4114,2398,2398,".(goto)", 1, 2, 0);
	trans[1][4097]	= settr(4404,4,4114,2399,2399,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4098 -> 4114,0 */
	reached1[4098] = 1;
	trans[1][4098]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4099]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4100]	= settr(4407,4,4114,2400,2400,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4101 -> 4114,0 */
	reached1[4101] = 1;
	trans[1][4101]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4102]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4103]	= settr(4410,4,4114,2401,2401,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4104 -> 4114,0 */
	reached1[4104] = 1;
	trans[1][4104]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4105]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4106]	= settr(4413,4,4114,2402,2402,"((START==ABORT))", 1, 2, 0); /* m: 4107 -> 4114,0 */
	reached1[4107] = 1;
	trans[1][4107]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4108]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4109]	= settr(4416,2,4110,2,0,"else", 1, 2, 0);
	trans[1][4110]	= settr(4417,4,4114,2403,2403,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4112 -> 0,4114 */
	reached1[4112] = 1;
	trans[1][4114]	= settr(4421,0,4129,2404,2404,"(run Thread(j))", 0, 2, 0);
	T = trans[1][4129] = settr(4436,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4436,0,4115,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4436,0,4127,0,0,"IF", 0, 2, 0);
	trans[1][4115]	= settr(4422,0,4126,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4126] = settr(4433,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4433,0,4122,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4122] = settr(4429,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4429,0,4116,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4429,0,4118,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4429,0,4120,0,0,"IF", 0, 2, 0);
	trans[1][4116]	= settr(4423,0,4124,2405,2405,"((_pid==0))", 0, 2, 0); /* m: 4117 -> 4124,0 */
	reached1[4117] = 1;
	trans[1][4117]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4123]	= settr(4430,0,4124,1,0,".(goto)", 0, 2, 0);
	trans[1][4118]	= settr(4425,0,4124,2406,2406,"((_pid==1))", 0, 2, 0); /* m: 4119 -> 4124,0 */
	reached1[4119] = 1;
	trans[1][4119]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4120]	= settr(4427,0,4124,2407,2407,"((_pid>1))", 0, 2, 0); /* m: 4121 -> 4124,0 */
	reached1[4121] = 1;
	trans[1][4121]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4124]	= settr(4431,0,4125,2408,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4125]	= settr(4432,0,4253,2409,2409,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4249 -> 0,4253 */
	reached1[4249] = 1;
	trans[1][4130]	= settr(4437,0,4249,1,0,".(goto)", 0, 2, 0); /* m: 4249 -> 0,4253 */
	reached1[4249] = 1;
	trans[1][4127]	= settr(4434,0,4128,2,0,"else", 0, 2, 0);
	trans[1][4128]	= settr(4435,0,4253,2410,2410,"(1)", 0, 2, 0); /* m: 4249 -> 4253,0 */
	reached1[4249] = 1;
	trans[1][4247]	= settr(4554,0,4249,1,0,".(goto)", 0, 2, 0); /* m: 4249 -> 0,4253 */
	reached1[4249] = 1;
	trans[1][4132]	= settr(4439,0,4169,2411,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][4169] = settr(4476,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4476,0,4152,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4152] = settr(4459,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4459,2,4150,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4150] = settr(4457,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4457,2,4133,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4457,2,4136,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4457,2,4139,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4457,2,4142,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4457,2,4145,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4457,2,4148,0,0,"IF", 1, 2, 0);
	trans[1][4133]	= settr(4440,4,4167,2412,2412,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4134 -> 4167,0 */
	reached1[4134] = 1;
	trans[1][4134]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4135]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4151]	= settr(4458,0,4167,2413,2413,".(goto)", 1, 2, 0);
	trans[1][4136]	= settr(4443,4,4167,2414,2414,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4137 -> 4167,0 */
	reached1[4137] = 1;
	trans[1][4137]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4138]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4139]	= settr(4446,4,4167,2415,2415,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4140 -> 4167,0 */
	reached1[4140] = 1;
	trans[1][4140]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4141]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4142]	= settr(4449,4,4167,2416,2416,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4143 -> 4167,0 */
	reached1[4143] = 1;
	trans[1][4143]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4144]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4145]	= settr(4452,4,4167,2417,2417,"((PAUSE==ABORT))", 1, 2, 0); /* m: 4146 -> 4167,0 */
	reached1[4146] = 1;
	trans[1][4146]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4147]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4148]	= settr(4455,2,4149,2,0,"else", 1, 2, 0);
	trans[1][4149]	= settr(4456,4,4167,2418,2418,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4151 -> 0,4167 */
	reached1[4151] = 1;
	T = trans[1][4167] = settr(4474,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4474,0,4153,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4474,0,4165,0,0,"IF", 0, 2, 0);
	trans[1][4153]	= settr(4460,0,4164,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4164] = settr(4471,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4471,0,4160,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4160] = settr(4467,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4467,0,4154,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4467,0,4156,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4467,0,4158,0,0,"IF", 0, 2, 0);
	trans[1][4154]	= settr(4461,0,4162,2419,2419,"((_pid==0))", 0, 2, 0); /* m: 4155 -> 4162,0 */
	reached1[4155] = 1;
	trans[1][4155]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4161]	= settr(4468,0,4162,1,0,".(goto)", 0, 2, 0);
	trans[1][4156]	= settr(4463,0,4162,2420,2420,"((_pid==1))", 0, 2, 0); /* m: 4157 -> 4162,0 */
	reached1[4157] = 1;
	trans[1][4157]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4158]	= settr(4465,0,4162,2421,2421,"((_pid>1))", 0, 2, 0); /* m: 4159 -> 4162,0 */
	reached1[4159] = 1;
	trans[1][4159]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4162]	= settr(4469,0,4163,2422,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4163]	= settr(4470,0,4253,2423,2423,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4249 -> 0,4253 */
	reached1[4249] = 1;
	trans[1][4168]	= settr(4475,0,4249,1,0,".(goto)", 0, 2, 0); /* m: 4249 -> 0,4253 */
	reached1[4249] = 1;
	trans[1][4165]	= settr(4472,0,4166,2,0,"else", 0, 2, 0);
	trans[1][4166]	= settr(4473,0,4253,2424,2424,"(1)", 0, 2, 0); /* m: 4249 -> 4253,0 */
	reached1[4249] = 1;
	trans[1][4170]	= settr(4477,0,4207,2425,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][4207] = settr(4514,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4514,0,4190,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4190] = settr(4497,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4497,2,4188,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4188] = settr(4495,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4495,2,4171,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4495,2,4174,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4495,2,4177,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4495,2,4180,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4495,2,4183,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4495,2,4186,0,0,"IF", 1, 2, 0);
	trans[1][4171]	= settr(4478,4,4205,2426,2426,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4172 -> 4205,0 */
	reached1[4172] = 1;
	trans[1][4172]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4173]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4189]	= settr(4496,0,4205,2427,2427,".(goto)", 1, 2, 0);
	trans[1][4174]	= settr(4481,4,4205,2428,2428,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4175 -> 4205,0 */
	reached1[4175] = 1;
	trans[1][4175]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4176]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4177]	= settr(4484,4,4205,2429,2429,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4178 -> 4205,0 */
	reached1[4178] = 1;
	trans[1][4178]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4179]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4180]	= settr(4487,4,4205,2430,2430,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4181 -> 4205,0 */
	reached1[4181] = 1;
	trans[1][4181]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4182]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4183]	= settr(4490,4,4205,2431,2431,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 4184 -> 4205,0 */
	reached1[4184] = 1;
	trans[1][4184]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4185]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4186]	= settr(4493,2,4187,2,0,"else", 1, 2, 0);
	trans[1][4187]	= settr(4494,4,4205,2432,2432,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4189 -> 0,4205 */
	reached1[4189] = 1;
	T = trans[1][4205] = settr(4512,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4512,0,4191,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4512,0,4203,0,0,"IF", 0, 2, 0);
	trans[1][4191]	= settr(4498,0,4202,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4202] = settr(4509,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4509,0,4198,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4198] = settr(4505,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4505,0,4192,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4505,0,4194,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4505,0,4196,0,0,"IF", 0, 2, 0);
	trans[1][4192]	= settr(4499,0,4200,2433,2433,"((_pid==0))", 0, 2, 0); /* m: 4193 -> 4200,0 */
	reached1[4193] = 1;
	trans[1][4193]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4199]	= settr(4506,0,4200,1,0,".(goto)", 0, 2, 0);
	trans[1][4194]	= settr(4501,0,4200,2434,2434,"((_pid==1))", 0, 2, 0); /* m: 4195 -> 4200,0 */
	reached1[4195] = 1;
	trans[1][4195]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4196]	= settr(4503,0,4200,2435,2435,"((_pid>1))", 0, 2, 0); /* m: 4197 -> 4200,0 */
	reached1[4197] = 1;
	trans[1][4197]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4200]	= settr(4507,0,4201,2436,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4201]	= settr(4508,0,4253,2437,2437,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4249 -> 0,4253 */
	reached1[4249] = 1;
	trans[1][4206]	= settr(4513,0,4249,1,0,".(goto)", 0, 2, 0); /* m: 4249 -> 0,4253 */
	reached1[4249] = 1;
	trans[1][4203]	= settr(4510,0,4204,2,0,"else", 0, 2, 0);
	trans[1][4204]	= settr(4511,0,4253,2438,2438,"(1)", 0, 2, 0); /* m: 4249 -> 4253,0 */
	reached1[4249] = 1;
	trans[1][4208]	= settr(4515,0,4245,2439,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][4245] = settr(4552,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4552,0,4228,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4228] = settr(4535,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4535,2,4226,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4226] = settr(4533,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4533,2,4209,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4533,2,4212,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4533,2,4215,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4533,2,4218,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4533,2,4221,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4533,2,4224,0,0,"IF", 1, 2, 0);
	trans[1][4209]	= settr(4516,4,4243,2440,2440,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4210 -> 4243,0 */
	reached1[4210] = 1;
	trans[1][4210]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4211]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4227]	= settr(4534,0,4243,2441,2441,".(goto)", 1, 2, 0);
	trans[1][4212]	= settr(4519,4,4243,2442,2442,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4213 -> 4243,0 */
	reached1[4213] = 1;
	trans[1][4213]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4214]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4215]	= settr(4522,4,4243,2443,2443,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4216 -> 4243,0 */
	reached1[4216] = 1;
	trans[1][4216]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4217]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4218]	= settr(4525,4,4243,2444,2444,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4219 -> 4243,0 */
	reached1[4219] = 1;
	trans[1][4219]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4220]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4221]	= settr(4528,4,4243,2445,2445,"((STOP==ABORT))", 1, 2, 0); /* m: 4222 -> 4243,0 */
	reached1[4222] = 1;
	trans[1][4222]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4223]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4224]	= settr(4531,2,4225,2,0,"else", 1, 2, 0);
	trans[1][4225]	= settr(4532,4,4243,2446,2446,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4227 -> 0,4243 */
	reached1[4227] = 1;
	T = trans[1][4243] = settr(4550,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4550,0,4229,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4550,0,4241,0,0,"IF", 0, 2, 0);
	trans[1][4229]	= settr(4536,0,4240,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4240] = settr(4547,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4547,0,4236,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4236] = settr(4543,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4543,0,4230,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4543,0,4232,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4543,0,4234,0,0,"IF", 0, 2, 0);
	trans[1][4230]	= settr(4537,0,4238,2447,2447,"((_pid==0))", 0, 2, 0); /* m: 4231 -> 4238,0 */
	reached1[4231] = 1;
	trans[1][4231]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4237]	= settr(4544,0,4238,1,0,".(goto)", 0, 2, 0);
	trans[1][4232]	= settr(4539,0,4238,2448,2448,"((_pid==1))", 0, 2, 0); /* m: 4233 -> 4238,0 */
	reached1[4233] = 1;
	trans[1][4233]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4234]	= settr(4541,0,4238,2449,2449,"((_pid>1))", 0, 2, 0); /* m: 4235 -> 4238,0 */
	reached1[4235] = 1;
	trans[1][4235]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4238]	= settr(4545,0,4239,2450,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4239]	= settr(4546,0,4253,2451,2451,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4249 -> 0,4253 */
	reached1[4249] = 1;
	trans[1][4244]	= settr(4551,0,4249,1,0,".(goto)", 0, 2, 0); /* m: 4249 -> 0,4253 */
	reached1[4249] = 1;
	trans[1][4241]	= settr(4548,0,4242,2,0,"else", 0, 2, 0);
	trans[1][4242]	= settr(4549,0,4253,2452,2452,"(1)", 0, 2, 0); /* m: 4249 -> 4253,0 */
	reached1[4249] = 1;
	trans[1][4249]	= settr(4556,0,4253,2453,2453,"j = (j+1)", 0, 2, 0);
	trans[1][4250]	= settr(4557,0,4251,2,0,"else", 0, 2, 0);
	trans[1][4251]	= settr(4558,0,5910,2454,2454,"j = 1", 0, 2, 0);
	trans[1][4252]	= settr(4559,0,5910,1,0,"goto :b30", 0, 2, 0);
	trans[1][4255]	= settr(4562,0,5910,1,0,"break", 0, 2, 0);
	trans[1][4425]	= settr(4732,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][4257]	= settr(4564,0,4423,2,0,"else", 0, 2, 0);
	T = trans[ 1][4423] = settr(4730,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4730,0,4258,0,0,"sub-sequence", 0, 2, 0);
	trans[1][4258]	= settr(4565,0,4420,2455,2455,"j = (3-1)", 0, 2, 0);
	trans[1][4421]	= settr(4728,0,4420,1,0,".(goto)", 0, 2, 0);
	T = trans[1][4420] = settr(4727,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(4727,0,4259,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(4727,0,4417,0,0,"DO", 0, 2, 0);
	trans[1][4259]	= settr(4566,0,4415,2456,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][4415] = settr(4722,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4722,0,4413,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4413] = settr(4720,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4720,0,4260,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4720,0,4299,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4720,0,4337,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4720,0,4375,0,0,"IF", 0, 2, 0);
	trans[1][4260]	= settr(4567,0,4298,2457,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][4298] = settr(4605,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4605,0,4280,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4280] = settr(4587,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4587,2,4278,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4278] = settr(4585,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4585,2,4261,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4585,2,4264,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4585,2,4267,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4585,2,4270,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4585,2,4273,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4585,2,4276,0,0,"IF", 1, 2, 0);
	trans[1][4261]	= settr(4568,4,4281,2458,2458,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4262 -> 4281,0 */
	reached1[4262] = 1;
	trans[1][4262]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4263]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4279]	= settr(4586,0,4281,2459,2459,".(goto)", 1, 2, 0);
	trans[1][4264]	= settr(4571,4,4281,2460,2460,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4265 -> 4281,0 */
	reached1[4265] = 1;
	trans[1][4265]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4266]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4267]	= settr(4574,4,4281,2461,2461,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4268 -> 4281,0 */
	reached1[4268] = 1;
	trans[1][4268]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4269]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4270]	= settr(4577,4,4281,2462,2462,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4271 -> 4281,0 */
	reached1[4271] = 1;
	trans[1][4271]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4272]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4273]	= settr(4580,4,4281,2463,2463,"((START==ABORT))", 1, 2, 0); /* m: 4274 -> 4281,0 */
	reached1[4274] = 1;
	trans[1][4274]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4275]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4276]	= settr(4583,2,4277,2,0,"else", 1, 2, 0);
	trans[1][4277]	= settr(4584,4,4281,2464,2464,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4279 -> 0,4281 */
	reached1[4279] = 1;
	trans[1][4281]	= settr(4588,0,4296,2465,2465,"(run Thread(j))", 0, 2, 0);
	T = trans[1][4296] = settr(4603,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4603,0,4282,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4603,0,4294,0,0,"IF", 0, 2, 0);
	trans[1][4282]	= settr(4589,0,4293,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4293] = settr(4600,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4600,0,4289,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4289] = settr(4596,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4596,0,4283,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4596,0,4285,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4596,0,4287,0,0,"IF", 0, 2, 0);
	trans[1][4283]	= settr(4590,0,4291,2466,2466,"((_pid==0))", 0, 2, 0); /* m: 4284 -> 4291,0 */
	reached1[4284] = 1;
	trans[1][4284]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4290]	= settr(4597,0,4291,1,0,".(goto)", 0, 2, 0);
	trans[1][4285]	= settr(4592,0,4291,2467,2467,"((_pid==1))", 0, 2, 0); /* m: 4286 -> 4291,0 */
	reached1[4286] = 1;
	trans[1][4286]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4287]	= settr(4594,0,4291,2468,2468,"((_pid>1))", 0, 2, 0); /* m: 4288 -> 4291,0 */
	reached1[4288] = 1;
	trans[1][4288]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4291]	= settr(4598,0,4292,2469,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4292]	= settr(4599,0,4420,2470,2470,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4416 -> 0,4420 */
	reached1[4416] = 1;
	trans[1][4297]	= settr(4604,0,4416,1,0,".(goto)", 0, 2, 0); /* m: 4416 -> 0,4420 */
	reached1[4416] = 1;
	trans[1][4294]	= settr(4601,0,4295,2,0,"else", 0, 2, 0);
	trans[1][4295]	= settr(4602,0,4420,2471,2471,"(1)", 0, 2, 0); /* m: 4416 -> 4420,0 */
	reached1[4416] = 1;
	trans[1][4414]	= settr(4721,0,4416,1,0,".(goto)", 0, 2, 0); /* m: 4416 -> 0,4420 */
	reached1[4416] = 1;
	trans[1][4299]	= settr(4606,0,4336,2472,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][4336] = settr(4643,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4643,0,4319,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4319] = settr(4626,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4626,2,4317,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4317] = settr(4624,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4624,2,4300,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4624,2,4303,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4624,2,4306,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4624,2,4309,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4624,2,4312,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4624,2,4315,0,0,"IF", 1, 2, 0);
	trans[1][4300]	= settr(4607,4,4334,2473,2473,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4301 -> 4334,0 */
	reached1[4301] = 1;
	trans[1][4301]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4302]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4318]	= settr(4625,0,4334,2474,2474,".(goto)", 1, 2, 0);
	trans[1][4303]	= settr(4610,4,4334,2475,2475,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4304 -> 4334,0 */
	reached1[4304] = 1;
	trans[1][4304]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4305]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4306]	= settr(4613,4,4334,2476,2476,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4307 -> 4334,0 */
	reached1[4307] = 1;
	trans[1][4307]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4308]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4309]	= settr(4616,4,4334,2477,2477,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4310 -> 4334,0 */
	reached1[4310] = 1;
	trans[1][4310]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4311]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4312]	= settr(4619,4,4334,2478,2478,"((PAUSE==ABORT))", 1, 2, 0); /* m: 4313 -> 4334,0 */
	reached1[4313] = 1;
	trans[1][4313]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4314]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4315]	= settr(4622,2,4316,2,0,"else", 1, 2, 0);
	trans[1][4316]	= settr(4623,4,4334,2479,2479,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4318 -> 0,4334 */
	reached1[4318] = 1;
	T = trans[1][4334] = settr(4641,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4641,0,4320,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4641,0,4332,0,0,"IF", 0, 2, 0);
	trans[1][4320]	= settr(4627,0,4331,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4331] = settr(4638,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4638,0,4327,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4327] = settr(4634,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4634,0,4321,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4634,0,4323,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4634,0,4325,0,0,"IF", 0, 2, 0);
	trans[1][4321]	= settr(4628,0,4329,2480,2480,"((_pid==0))", 0, 2, 0); /* m: 4322 -> 4329,0 */
	reached1[4322] = 1;
	trans[1][4322]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4328]	= settr(4635,0,4329,1,0,".(goto)", 0, 2, 0);
	trans[1][4323]	= settr(4630,0,4329,2481,2481,"((_pid==1))", 0, 2, 0); /* m: 4324 -> 4329,0 */
	reached1[4324] = 1;
	trans[1][4324]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4325]	= settr(4632,0,4329,2482,2482,"((_pid>1))", 0, 2, 0); /* m: 4326 -> 4329,0 */
	reached1[4326] = 1;
	trans[1][4326]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4329]	= settr(4636,0,4330,2483,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4330]	= settr(4637,0,4420,2484,2484,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4416 -> 0,4420 */
	reached1[4416] = 1;
	trans[1][4335]	= settr(4642,0,4416,1,0,".(goto)", 0, 2, 0); /* m: 4416 -> 0,4420 */
	reached1[4416] = 1;
	trans[1][4332]	= settr(4639,0,4333,2,0,"else", 0, 2, 0);
	trans[1][4333]	= settr(4640,0,4420,2485,2485,"(1)", 0, 2, 0); /* m: 4416 -> 4420,0 */
	reached1[4416] = 1;
	trans[1][4337]	= settr(4644,0,4374,2486,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][4374] = settr(4681,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4681,0,4357,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4357] = settr(4664,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4664,2,4355,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4355] = settr(4662,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4662,2,4338,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4662,2,4341,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4662,2,4344,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4662,2,4347,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4662,2,4350,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4662,2,4353,0,0,"IF", 1, 2, 0);
	trans[1][4338]	= settr(4645,4,4372,2487,2487,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4339 -> 4372,0 */
	reached1[4339] = 1;
	trans[1][4339]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4340]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4356]	= settr(4663,0,4372,2488,2488,".(goto)", 1, 2, 0);
	trans[1][4341]	= settr(4648,4,4372,2489,2489,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4342 -> 4372,0 */
	reached1[4342] = 1;
	trans[1][4342]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4343]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4344]	= settr(4651,4,4372,2490,2490,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4345 -> 4372,0 */
	reached1[4345] = 1;
	trans[1][4345]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4346]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4347]	= settr(4654,4,4372,2491,2491,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4348 -> 4372,0 */
	reached1[4348] = 1;
	trans[1][4348]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4349]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4350]	= settr(4657,4,4372,2492,2492,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 4351 -> 4372,0 */
	reached1[4351] = 1;
	trans[1][4351]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4352]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4353]	= settr(4660,2,4354,2,0,"else", 1, 2, 0);
	trans[1][4354]	= settr(4661,4,4372,2493,2493,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4356 -> 0,4372 */
	reached1[4356] = 1;
	T = trans[1][4372] = settr(4679,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4679,0,4358,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4679,0,4370,0,0,"IF", 0, 2, 0);
	trans[1][4358]	= settr(4665,0,4369,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4369] = settr(4676,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4676,0,4365,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4365] = settr(4672,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4672,0,4359,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4672,0,4361,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4672,0,4363,0,0,"IF", 0, 2, 0);
	trans[1][4359]	= settr(4666,0,4367,2494,2494,"((_pid==0))", 0, 2, 0); /* m: 4360 -> 4367,0 */
	reached1[4360] = 1;
	trans[1][4360]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4366]	= settr(4673,0,4367,1,0,".(goto)", 0, 2, 0);
	trans[1][4361]	= settr(4668,0,4367,2495,2495,"((_pid==1))", 0, 2, 0); /* m: 4362 -> 4367,0 */
	reached1[4362] = 1;
	trans[1][4362]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4363]	= settr(4670,0,4367,2496,2496,"((_pid>1))", 0, 2, 0); /* m: 4364 -> 4367,0 */
	reached1[4364] = 1;
	trans[1][4364]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4367]	= settr(4674,0,4368,2497,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4368]	= settr(4675,0,4420,2498,2498,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4416 -> 0,4420 */
	reached1[4416] = 1;
	trans[1][4373]	= settr(4680,0,4416,1,0,".(goto)", 0, 2, 0); /* m: 4416 -> 0,4420 */
	reached1[4416] = 1;
	trans[1][4370]	= settr(4677,0,4371,2,0,"else", 0, 2, 0);
	trans[1][4371]	= settr(4678,0,4420,2499,2499,"(1)", 0, 2, 0); /* m: 4416 -> 4420,0 */
	reached1[4416] = 1;
	trans[1][4375]	= settr(4682,0,4412,2500,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][4412] = settr(4719,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4719,0,4395,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4395] = settr(4702,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4702,2,4393,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4393] = settr(4700,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4700,2,4376,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4700,2,4379,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4700,2,4382,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4700,2,4385,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4700,2,4388,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4700,2,4391,0,0,"IF", 1, 2, 0);
	trans[1][4376]	= settr(4683,4,4410,2501,2501,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4377 -> 4410,0 */
	reached1[4377] = 1;
	trans[1][4377]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4378]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4394]	= settr(4701,0,4410,2502,2502,".(goto)", 1, 2, 0);
	trans[1][4379]	= settr(4686,4,4410,2503,2503,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4380 -> 4410,0 */
	reached1[4380] = 1;
	trans[1][4380]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4381]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4382]	= settr(4689,4,4410,2504,2504,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4383 -> 4410,0 */
	reached1[4383] = 1;
	trans[1][4383]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4384]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4385]	= settr(4692,4,4410,2505,2505,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4386 -> 4410,0 */
	reached1[4386] = 1;
	trans[1][4386]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4387]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4388]	= settr(4695,4,4410,2506,2506,"((STOP==ABORT))", 1, 2, 0); /* m: 4389 -> 4410,0 */
	reached1[4389] = 1;
	trans[1][4389]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4390]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4391]	= settr(4698,2,4392,2,0,"else", 1, 2, 0);
	trans[1][4392]	= settr(4699,4,4410,2507,2507,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4394 -> 0,4410 */
	reached1[4394] = 1;
	T = trans[1][4410] = settr(4717,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4717,0,4396,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4717,0,4408,0,0,"IF", 0, 2, 0);
	trans[1][4396]	= settr(4703,0,4407,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4407] = settr(4714,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4714,0,4403,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4403] = settr(4710,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4710,0,4397,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4710,0,4399,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4710,0,4401,0,0,"IF", 0, 2, 0);
	trans[1][4397]	= settr(4704,0,4405,2508,2508,"((_pid==0))", 0, 2, 0); /* m: 4398 -> 4405,0 */
	reached1[4398] = 1;
	trans[1][4398]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4404]	= settr(4711,0,4405,1,0,".(goto)", 0, 2, 0);
	trans[1][4399]	= settr(4706,0,4405,2509,2509,"((_pid==1))", 0, 2, 0); /* m: 4400 -> 4405,0 */
	reached1[4400] = 1;
	trans[1][4400]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4401]	= settr(4708,0,4405,2510,2510,"((_pid>1))", 0, 2, 0); /* m: 4402 -> 4405,0 */
	reached1[4402] = 1;
	trans[1][4402]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4405]	= settr(4712,0,4406,2511,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4406]	= settr(4713,0,4420,2512,2512,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4416 -> 0,4420 */
	reached1[4416] = 1;
	trans[1][4411]	= settr(4718,0,4416,1,0,".(goto)", 0, 2, 0); /* m: 4416 -> 0,4420 */
	reached1[4416] = 1;
	trans[1][4408]	= settr(4715,0,4409,2,0,"else", 0, 2, 0);
	trans[1][4409]	= settr(4716,0,4420,2513,2513,"(1)", 0, 2, 0); /* m: 4416 -> 4420,0 */
	reached1[4416] = 1;
	trans[1][4416]	= settr(4723,0,4420,2514,2514,"j = (j-1)", 0, 2, 0);
	trans[1][4417]	= settr(4724,0,4418,2,0,"else", 0, 2, 0);
	trans[1][4418]	= settr(4725,0,5910,2515,2515,"j = 1", 0, 2, 0);
	trans[1][4419]	= settr(4726,0,5910,1,0,"goto :b31", 0, 2, 0);
	trans[1][4422]	= settr(4729,0,5910,1,0,"break", 0, 2, 0);
	trans[1][4654]	= settr(4961,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][4427]	= settr(4734,0,4652,2,0,"else", 0, 2, 0);
	T = trans[ 1][4652] = settr(4959,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4959,0,4428,0,0,"sub-sequence", 0, 2, 0);
	trans[1][4428]	= settr(4735,0,4593,2516,0,"printf('Supervisor propagating command %e...\\n',6)", 0, 2, 0);
	T = trans[ 1][4593] = settr(4900,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4900,0,4590,0,0,"sub-sequence", 0, 2, 0);
	trans[1][4591]	= settr(4898,0,4590,1,0,".(goto)", 0, 2, 0);
	T = trans[1][4590] = settr(4897,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(4897,0,4429,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(4897,0,4587,0,0,"DO", 0, 2, 0);
	trans[1][4429]	= settr(4736,0,4585,2517,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][4585] = settr(4892,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4892,0,4583,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4583] = settr(4890,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4890,0,4430,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4890,0,4469,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4890,0,4507,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4890,0,4545,0,0,"IF", 0, 2, 0);
	trans[1][4430]	= settr(4737,0,4468,2518,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][4468] = settr(4775,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4775,0,4450,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4450] = settr(4757,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4757,2,4448,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4448] = settr(4755,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4755,2,4431,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4755,2,4434,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4755,2,4437,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4755,2,4440,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4755,2,4443,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4755,2,4446,0,0,"IF", 1, 2, 0);
	trans[1][4431]	= settr(4738,4,4451,2519,2519,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4432 -> 4451,0 */
	reached1[4432] = 1;
	trans[1][4432]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4433]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4449]	= settr(4756,0,4451,2520,2520,".(goto)", 1, 2, 0);
	trans[1][4434]	= settr(4741,4,4451,2521,2521,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4435 -> 4451,0 */
	reached1[4435] = 1;
	trans[1][4435]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4436]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4437]	= settr(4744,4,4451,2522,2522,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4438 -> 4451,0 */
	reached1[4438] = 1;
	trans[1][4438]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4439]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4440]	= settr(4747,4,4451,2523,2523,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4441 -> 4451,0 */
	reached1[4441] = 1;
	trans[1][4441]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4442]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4443]	= settr(4750,4,4451,2524,2524,"((START==ABORT))", 1, 2, 0); /* m: 4444 -> 4451,0 */
	reached1[4444] = 1;
	trans[1][4444]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4445]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4446]	= settr(4753,2,4447,2,0,"else", 1, 2, 0);
	trans[1][4447]	= settr(4754,4,4451,2525,2525,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4449 -> 0,4451 */
	reached1[4449] = 1;
	trans[1][4451]	= settr(4758,0,4466,2526,2526,"(run Thread(j))", 0, 2, 0);
	T = trans[1][4466] = settr(4773,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(4773,0,4452,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(4773,0,4464,0,0,"IF", 0, 2, 0);
	trans[1][4452]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][4463] = settr(4770,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4770,0,4459,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4459] = settr(4766,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4766,0,4453,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4766,0,4455,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4766,0,4457,0,0,"IF", 0, 2, 0);
	trans[1][4453]	= settr(4760,0,4461,2527,2527,"((_pid==0))", 0, 2, 0); /* m: 4454 -> 4461,0 */
	reached1[4454] = 1;
	trans[1][4454]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4460]	= settr(4767,0,4461,1,0,".(goto)", 0, 2, 0);
	trans[1][4455]	= settr(4762,0,4461,2528,2528,"((_pid==1))", 0, 2, 0); /* m: 4456 -> 4461,0 */
	reached1[4456] = 1;
	trans[1][4456]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4457]	= settr(4764,0,4461,2529,2529,"((_pid>1))", 0, 2, 0); /* m: 4458 -> 4461,0 */
	reached1[4458] = 1;
	trans[1][4458]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4461]	= settr(4768,0,4462,2530,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4462]	= settr(4769,0,4590,2531,2531,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4586 -> 0,4590 */
	reached1[4586] = 1;
	trans[1][4467]	= settr(4774,0,4586,1,0,".(goto)", 0, 2, 0); /* m: 4586 -> 0,4590 */
	reached1[4586] = 1;
	trans[1][4464]	= settr(4771,0,4465,2,0,"else", 0, 2, 0);
	trans[1][4465]	= settr(4772,0,4590,2532,2532,"(1)", 0, 2, 0); /* m: 4586 -> 4590,0 */
	reached1[4586] = 1;
	trans[1][4584]	= settr(4891,0,4586,1,0,".(goto)", 0, 2, 0); /* m: 4586 -> 0,4590 */
	reached1[4586] = 1;
	trans[1][4469]	= settr(4776,0,4506,2533,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][4506] = settr(4813,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4813,0,4489,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4489] = settr(4796,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4796,2,4487,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4487] = settr(4794,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4794,2,4470,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4794,2,4473,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4794,2,4476,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4794,2,4479,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4794,2,4482,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4794,2,4485,0,0,"IF", 1, 2, 0);
	trans[1][4470]	= settr(4777,4,4504,2534,2534,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4471 -> 4504,0 */
	reached1[4471] = 1;
	trans[1][4471]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4472]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4488]	= settr(4795,0,4504,2535,2535,".(goto)", 1, 2, 0);
	trans[1][4473]	= settr(4780,4,4504,2536,2536,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4474 -> 4504,0 */
	reached1[4474] = 1;
	trans[1][4474]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4475]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4476]	= settr(4783,4,4504,2537,2537,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4477 -> 4504,0 */
	reached1[4477] = 1;
	trans[1][4477]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4478]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4479]	= settr(4786,4,4504,2538,2538,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4480 -> 4504,0 */
	reached1[4480] = 1;
	trans[1][4480]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4481]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4482]	= settr(4789,4,4504,2539,2539,"((PAUSE==ABORT))", 1, 2, 0); /* m: 4483 -> 4504,0 */
	reached1[4483] = 1;
	trans[1][4483]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4484]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4485]	= settr(4792,2,4486,2,0,"else", 1, 2, 0);
	trans[1][4486]	= settr(4793,4,4504,2540,2540,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4488 -> 0,4504 */
	reached1[4488] = 1;
	T = trans[1][4504] = settr(4811,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(4811,0,4490,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(4811,0,4502,0,0,"IF", 0, 2, 0);
	trans[1][4490]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][4501] = settr(4808,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4808,0,4497,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4497] = settr(4804,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4804,0,4491,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4804,0,4493,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4804,0,4495,0,0,"IF", 0, 2, 0);
	trans[1][4491]	= settr(4798,0,4499,2541,2541,"((_pid==0))", 0, 2, 0); /* m: 4492 -> 4499,0 */
	reached1[4492] = 1;
	trans[1][4492]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4498]	= settr(4805,0,4499,1,0,".(goto)", 0, 2, 0);
	trans[1][4493]	= settr(4800,0,4499,2542,2542,"((_pid==1))", 0, 2, 0); /* m: 4494 -> 4499,0 */
	reached1[4494] = 1;
	trans[1][4494]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4495]	= settr(4802,0,4499,2543,2543,"((_pid>1))", 0, 2, 0); /* m: 4496 -> 4499,0 */
	reached1[4496] = 1;
	trans[1][4496]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4499]	= settr(4806,0,4500,2544,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4500]	= settr(4807,0,4590,2545,2545,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4586 -> 0,4590 */
	reached1[4586] = 1;
	trans[1][4505]	= settr(4812,0,4586,1,0,".(goto)", 0, 2, 0); /* m: 4586 -> 0,4590 */
	reached1[4586] = 1;
	trans[1][4502]	= settr(4809,0,4503,2,0,"else", 0, 2, 0);
	trans[1][4503]	= settr(4810,0,4590,2546,2546,"(1)", 0, 2, 0); /* m: 4586 -> 4590,0 */
	reached1[4586] = 1;
	trans[1][4507]	= settr(4814,0,4544,2547,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][4544] = settr(4851,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4851,0,4527,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4527] = settr(4834,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4834,2,4525,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4525] = settr(4832,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4832,2,4508,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4832,2,4511,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4832,2,4514,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4832,2,4517,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4832,2,4520,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4832,2,4523,0,0,"IF", 1, 2, 0);
	trans[1][4508]	= settr(4815,4,4542,2548,2548,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4509 -> 4542,0 */
	reached1[4509] = 1;
	trans[1][4509]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4510]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4526]	= settr(4833,0,4542,2549,2549,".(goto)", 1, 2, 0);
	trans[1][4511]	= settr(4818,4,4542,2550,2550,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4512 -> 4542,0 */
	reached1[4512] = 1;
	trans[1][4512]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4513]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4514]	= settr(4821,4,4542,2551,2551,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4515 -> 4542,0 */
	reached1[4515] = 1;
	trans[1][4515]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4516]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4517]	= settr(4824,4,4542,2552,2552,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4518 -> 4542,0 */
	reached1[4518] = 1;
	trans[1][4518]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4519]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4520]	= settr(4827,4,4542,2553,2553,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 4521 -> 4542,0 */
	reached1[4521] = 1;
	trans[1][4521]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4522]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4523]	= settr(4830,2,4524,2,0,"else", 1, 2, 0);
	trans[1][4524]	= settr(4831,4,4542,2554,2554,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4526 -> 0,4542 */
	reached1[4526] = 1;
	T = trans[1][4542] = settr(4849,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(4849,0,4528,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(4849,0,4540,0,0,"IF", 0, 2, 0);
	trans[1][4528]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][4539] = settr(4846,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4846,0,4535,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4535] = settr(4842,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4842,0,4529,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4842,0,4531,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4842,0,4533,0,0,"IF", 0, 2, 0);
	trans[1][4529]	= settr(4836,0,4537,2555,2555,"((_pid==0))", 0, 2, 0); /* m: 4530 -> 4537,0 */
	reached1[4530] = 1;
	trans[1][4530]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4536]	= settr(4843,0,4537,1,0,".(goto)", 0, 2, 0);
	trans[1][4531]	= settr(4838,0,4537,2556,2556,"((_pid==1))", 0, 2, 0); /* m: 4532 -> 4537,0 */
	reached1[4532] = 1;
	trans[1][4532]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4533]	= settr(4840,0,4537,2557,2557,"((_pid>1))", 0, 2, 0); /* m: 4534 -> 4537,0 */
	reached1[4534] = 1;
	trans[1][4534]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4537]	= settr(4844,0,4538,2558,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4538]	= settr(4845,0,4590,2559,2559,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4586 -> 0,4590 */
	reached1[4586] = 1;
	trans[1][4543]	= settr(4850,0,4586,1,0,".(goto)", 0, 2, 0); /* m: 4586 -> 0,4590 */
	reached1[4586] = 1;
	trans[1][4540]	= settr(4847,0,4541,2,0,"else", 0, 2, 0);
	trans[1][4541]	= settr(4848,0,4590,2560,2560,"(1)", 0, 2, 0); /* m: 4586 -> 4590,0 */
	reached1[4586] = 1;
	trans[1][4545]	= settr(4852,0,4582,2561,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][4582] = settr(4889,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4889,0,4565,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4565] = settr(4872,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4872,2,4563,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4563] = settr(4870,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4870,2,4546,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4870,2,4549,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4870,2,4552,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4870,2,4555,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4870,2,4558,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4870,2,4561,0,0,"IF", 1, 2, 0);
	trans[1][4546]	= settr(4853,4,4580,2562,2562,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4547 -> 4580,0 */
	reached1[4547] = 1;
	trans[1][4547]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4548]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4564]	= settr(4871,0,4580,2563,2563,".(goto)", 1, 2, 0);
	trans[1][4549]	= settr(4856,4,4580,2564,2564,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4550 -> 4580,0 */
	reached1[4550] = 1;
	trans[1][4550]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4551]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4552]	= settr(4859,4,4580,2565,2565,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4553 -> 4580,0 */
	reached1[4553] = 1;
	trans[1][4553]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4554]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4555]	= settr(4862,4,4580,2566,2566,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4556 -> 4580,0 */
	reached1[4556] = 1;
	trans[1][4556]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4557]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4558]	= settr(4865,4,4580,2567,2567,"((STOP==ABORT))", 1, 2, 0); /* m: 4559 -> 4580,0 */
	reached1[4559] = 1;
	trans[1][4559]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4560]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4561]	= settr(4868,2,4562,2,0,"else", 1, 2, 0);
	trans[1][4562]	= settr(4869,4,4580,2568,2568,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4564 -> 0,4580 */
	reached1[4564] = 1;
	T = trans[1][4580] = settr(4887,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(4887,0,4566,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(4887,0,4578,0,0,"IF", 0, 2, 0);
	trans[1][4566]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][4577] = settr(4884,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4884,0,4573,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4573] = settr(4880,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4880,0,4567,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4880,0,4569,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4880,0,4571,0,0,"IF", 0, 2, 0);
	trans[1][4567]	= settr(4874,0,4575,2569,2569,"((_pid==0))", 0, 2, 0); /* m: 4568 -> 4575,0 */
	reached1[4568] = 1;
	trans[1][4568]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4574]	= settr(4881,0,4575,1,0,".(goto)", 0, 2, 0);
	trans[1][4569]	= settr(4876,0,4575,2570,2570,"((_pid==1))", 0, 2, 0); /* m: 4570 -> 4575,0 */
	reached1[4570] = 1;
	trans[1][4570]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4571]	= settr(4878,0,4575,2571,2571,"((_pid>1))", 0, 2, 0); /* m: 4572 -> 4575,0 */
	reached1[4572] = 1;
	trans[1][4572]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4575]	= settr(4882,0,4576,2572,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4576]	= settr(4883,0,4590,2573,2573,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4586 -> 0,4590 */
	reached1[4586] = 1;
	trans[1][4581]	= settr(4888,0,4586,1,0,".(goto)", 0, 2, 0); /* m: 4586 -> 0,4590 */
	reached1[4586] = 1;
	trans[1][4578]	= settr(4885,0,4579,2,0,"else", 0, 2, 0);
	trans[1][4579]	= settr(4886,0,4590,2574,2574,"(1)", 0, 2, 0); /* m: 4586 -> 4590,0 */
	reached1[4586] = 1;
	trans[1][4586]	= settr(4893,0,4590,2575,2575,"j = (j+1)", 0, 2, 0);
	trans[1][4587]	= settr(4894,0,4588,2,0,"else", 0, 2, 0);
	trans[1][4588]	= settr(4895,0,4649,2576,2576,"j = 1", 0, 2, 0);
	trans[1][4589]	= settr(4896,0,4649,1,0,"goto :b32", 0, 2, 0);
	trans[1][4592]	= settr(4899,0,4649,1,0,"break", 0, 2, 0);
	trans[1][4650]	= settr(4957,0,4649,1,0,".(goto)", 0, 2, 0);
	T = trans[1][4649] = settr(4956,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(4956,0,4594,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(4956,0,4646,0,0,"DO", 0, 2, 0);
	trans[1][4594]	= settr(4901,0,4643,2577,0,"((j<3))", 0, 2, 0);
	T = trans[1][4643] = settr(4950,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4950,0,4595,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4950,0,4607,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4950,0,4619,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4950,0,4631,0,0,"IF", 0, 2, 0);
	trans[1][4595]	= settr(4902,0,4606,2578,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][4606] = settr(4913,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4913,0,4602,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4602] = settr(4909,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4909,0,4596,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4909,0,4598,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4909,0,4600,0,0,"IF", 0, 2, 0);
	trans[1][4596]	= settr(4903,0,4604,2579,2579,"((_pid==0))", 0, 2, 0); /* m: 4597 -> 4604,0 */
	reached1[4597] = 1;
	trans[1][4597]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4603]	= settr(4910,0,4604,1,0,".(goto)", 0, 2, 0);
	trans[1][4598]	= settr(4905,0,4604,2580,2580,"((_pid==1))", 0, 2, 0); /* m: 4599 -> 4604,0 */
	reached1[4599] = 1;
	trans[1][4599]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4600]	= settr(4907,0,4604,2581,2581,"((_pid>1))", 0, 2, 0); /* m: 4601 -> 4604,0 */
	reached1[4601] = 1;
	trans[1][4601]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4604]	= settr(4911,0,4605,2582,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4605]	= settr(4912,0,4649,2583,2583,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4645 -> 0,4649 */
	reached1[4645] = 1;
	trans[1][4644]	= settr(4951,0,4645,1,0,".(goto)", 0, 2, 0); /* m: 4645 -> 0,4649 */
	reached1[4645] = 1;
	trans[1][4607]	= settr(4914,0,4618,2584,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][4618] = settr(4925,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4925,0,4614,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4614] = settr(4921,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4921,0,4608,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4921,0,4610,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4921,0,4612,0,0,"IF", 0, 2, 0);
	trans[1][4608]	= settr(4915,0,4616,2585,2585,"((_pid==0))", 0, 2, 0); /* m: 4609 -> 4616,0 */
	reached1[4609] = 1;
	trans[1][4609]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4615]	= settr(4922,0,4616,1,0,".(goto)", 0, 2, 0);
	trans[1][4610]	= settr(4917,0,4616,2586,2586,"((_pid==1))", 0, 2, 0); /* m: 4611 -> 4616,0 */
	reached1[4611] = 1;
	trans[1][4611]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4612]	= settr(4919,0,4616,2587,2587,"((_pid>1))", 0, 2, 0); /* m: 4613 -> 4616,0 */
	reached1[4613] = 1;
	trans[1][4613]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4616]	= settr(4923,0,4617,2588,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4617]	= settr(4924,0,4649,2589,2589,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4645 -> 0,4649 */
	reached1[4645] = 1;
	trans[1][4619]	= settr(4926,0,4630,2590,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][4630] = settr(4937,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4937,0,4626,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4626] = settr(4933,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4933,0,4620,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4933,0,4622,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4933,0,4624,0,0,"IF", 0, 2, 0);
	trans[1][4620]	= settr(4927,0,4628,2591,2591,"((_pid==0))", 0, 2, 0); /* m: 4621 -> 4628,0 */
	reached1[4621] = 1;
	trans[1][4621]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4627]	= settr(4934,0,4628,1,0,".(goto)", 0, 2, 0);
	trans[1][4622]	= settr(4929,0,4628,2592,2592,"((_pid==1))", 0, 2, 0); /* m: 4623 -> 4628,0 */
	reached1[4623] = 1;
	trans[1][4623]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4624]	= settr(4931,0,4628,2593,2593,"((_pid>1))", 0, 2, 0); /* m: 4625 -> 4628,0 */
	reached1[4625] = 1;
	trans[1][4625]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4628]	= settr(4935,0,4629,2594,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4629]	= settr(4936,0,4649,2595,2595,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4645 -> 0,4649 */
	reached1[4645] = 1;
	trans[1][4631]	= settr(4938,0,4642,2596,0,"((6==STOP))", 0, 2, 0);
	T = trans[ 1][4642] = settr(4949,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(4949,0,4638,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4638] = settr(4945,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4945,0,4632,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(4945,0,4634,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(4945,0,4636,0,0,"IF", 0, 2, 0);
	trans[1][4632]	= settr(4939,0,4640,2597,2597,"((_pid==0))", 0, 2, 0); /* m: 4633 -> 4640,0 */
	reached1[4633] = 1;
	trans[1][4633]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4639]	= settr(4946,0,4640,1,0,".(goto)", 0, 2, 0);
	trans[1][4634]	= settr(4941,0,4640,2598,2598,"((_pid==1))", 0, 2, 0); /* m: 4635 -> 4640,0 */
	reached1[4635] = 1;
	trans[1][4635]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4636]	= settr(4943,0,4640,2599,2599,"((_pid>1))", 0, 2, 0); /* m: 4637 -> 4640,0 */
	reached1[4637] = 1;
	trans[1][4637]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4640]	= settr(4947,0,4641,2600,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4641]	= settr(4948,0,4649,2601,2601,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4645 -> 0,4649 */
	reached1[4645] = 1;
	trans[1][4645]	= settr(4952,0,4649,2602,2602,"j = (j+1)", 0, 2, 0);
	trans[1][4646]	= settr(4953,0,4647,2,0,"else", 0, 2, 0);
	trans[1][4647]	= settr(4954,0,5910,2603,2603,"j = 1", 0, 2, 0);
	trans[1][4648]	= settr(4955,0,5910,1,0,"goto :b33", 0, 2, 0);
	trans[1][4651]	= settr(4958,0,5910,1,0,"break", 0, 2, 0);
	trans[1][5807]	= settr(6114,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][4658]	= settr(4965,0,5230,2604,0,"((3==PAUSED))", 0, 2, 0);
	T = trans[ 1][5230] = settr(5537,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5537,0,5228,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5228] = settr(5535,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5535,0,4659,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5535,0,4662,0,0,"IF", 0, 2, 0);
	trans[1][4659]	= settr(4966,0,4660,2605,0,"(((8==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][4660]	= settr(4967,0,4661,2606,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][4661]	= settr(4968,0,5910,2607,2607,"supervisor_started = 1", 1, 2, 0);
	trans[1][5229]	= settr(5536,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][4662]	= settr(4969,0,5226,2,0,"else", 0, 2, 0);
	T = trans[1][5226] = settr(5533,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5533,0,4663,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5533,0,5000,0,0,"IF", 0, 2, 0);
	trans[1][4663]	= settr(4970,0,4999,2608,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][4999] = settr(5306,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5306,0,4997,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4997] = settr(5304,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5304,0,4664,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5304,0,4830,0,0,"IF", 0, 2, 0);
	trans[1][4664]	= settr(4971,0,4829,2609,0,"(((8==START)||(8==PAUSED)))", 0, 2, 0);
	T = trans[ 1][4829] = settr(5136,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5136,0,4826,0,0,"sub-sequence", 0, 2, 0);
	trans[1][4827]	= settr(5134,0,4826,1,0,".(goto)", 0, 2, 0);
	T = trans[1][4826] = settr(5133,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(5133,0,4665,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(5133,0,4823,0,0,"DO", 0, 2, 0);
	trans[1][4665]	= settr(4972,0,4821,2610,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][4821] = settr(5128,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5128,0,4819,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4819] = settr(5126,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5126,0,4666,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5126,0,4705,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5126,0,4743,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5126,0,4781,0,0,"IF", 0, 2, 0);
	trans[1][4666]	= settr(4973,0,4704,2611,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][4704] = settr(5011,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5011,0,4686,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4686] = settr(4993,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(4993,2,4684,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4684] = settr(4991,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4991,2,4667,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4991,2,4670,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4991,2,4673,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4991,2,4676,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(4991,2,4679,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(4991,2,4682,0,0,"IF", 1, 2, 0);
	trans[1][4667]	= settr(4974,4,4687,2612,2612,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4668 -> 4687,0 */
	reached1[4668] = 1;
	trans[1][4668]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4669]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4685]	= settr(4992,0,4687,2613,2613,".(goto)", 1, 2, 0);
	trans[1][4670]	= settr(4977,4,4687,2614,2614,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4671 -> 4687,0 */
	reached1[4671] = 1;
	trans[1][4671]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4672]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4673]	= settr(4980,4,4687,2615,2615,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4674 -> 4687,0 */
	reached1[4674] = 1;
	trans[1][4674]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4675]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4676]	= settr(4983,4,4687,2616,2616,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4677 -> 4687,0 */
	reached1[4677] = 1;
	trans[1][4677]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4678]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4679]	= settr(4986,4,4687,2617,2617,"((START==ABORT))", 1, 2, 0); /* m: 4680 -> 4687,0 */
	reached1[4680] = 1;
	trans[1][4680]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4681]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4682]	= settr(4989,2,4683,2,0,"else", 1, 2, 0);
	trans[1][4683]	= settr(4990,4,4687,2618,2618,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4685 -> 0,4687 */
	reached1[4685] = 1;
	trans[1][4687]	= settr(4994,0,4702,2619,2619,"(run Thread(j))", 0, 2, 0);
	T = trans[1][4702] = settr(5009,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5009,0,4688,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5009,0,4700,0,0,"IF", 0, 2, 0);
	trans[1][4688]	= settr(4995,0,4699,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4699] = settr(5006,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5006,0,4695,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4695] = settr(5002,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5002,0,4689,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5002,0,4691,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5002,0,4693,0,0,"IF", 0, 2, 0);
	trans[1][4689]	= settr(4996,0,4697,2620,2620,"((_pid==0))", 0, 2, 0); /* m: 4690 -> 4697,0 */
	reached1[4690] = 1;
	trans[1][4690]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4696]	= settr(5003,0,4697,1,0,".(goto)", 0, 2, 0);
	trans[1][4691]	= settr(4998,0,4697,2621,2621,"((_pid==1))", 0, 2, 0); /* m: 4692 -> 4697,0 */
	reached1[4692] = 1;
	trans[1][4692]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4693]	= settr(5000,0,4697,2622,2622,"((_pid>1))", 0, 2, 0); /* m: 4694 -> 4697,0 */
	reached1[4694] = 1;
	trans[1][4694]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4697]	= settr(5004,0,4698,2623,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4698]	= settr(5005,0,4826,2624,2624,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4822 -> 0,4826 */
	reached1[4822] = 1;
	trans[1][4703]	= settr(5010,0,4822,1,0,".(goto)", 0, 2, 0); /* m: 4822 -> 0,4826 */
	reached1[4822] = 1;
	trans[1][4700]	= settr(5007,0,4701,2,0,"else", 0, 2, 0);
	trans[1][4701]	= settr(5008,0,4826,2625,2625,"(1)", 0, 2, 0); /* m: 4822 -> 4826,0 */
	reached1[4822] = 1;
	trans[1][4820]	= settr(5127,0,4822,1,0,".(goto)", 0, 2, 0); /* m: 4822 -> 0,4826 */
	reached1[4822] = 1;
	trans[1][4705]	= settr(5012,0,4742,2626,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][4742] = settr(5049,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5049,0,4725,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4725] = settr(5032,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5032,2,4723,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4723] = settr(5030,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5030,2,4706,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5030,2,4709,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5030,2,4712,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5030,2,4715,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5030,2,4718,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5030,2,4721,0,0,"IF", 1, 2, 0);
	trans[1][4706]	= settr(5013,4,4740,2627,2627,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4707 -> 4740,0 */
	reached1[4707] = 1;
	trans[1][4707]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4708]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4724]	= settr(5031,0,4740,2628,2628,".(goto)", 1, 2, 0);
	trans[1][4709]	= settr(5016,4,4740,2629,2629,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4710 -> 4740,0 */
	reached1[4710] = 1;
	trans[1][4710]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4711]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4712]	= settr(5019,4,4740,2630,2630,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4713 -> 4740,0 */
	reached1[4713] = 1;
	trans[1][4713]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4714]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4715]	= settr(5022,4,4740,2631,2631,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4716 -> 4740,0 */
	reached1[4716] = 1;
	trans[1][4716]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4717]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4718]	= settr(5025,4,4740,2632,2632,"((PAUSE==ABORT))", 1, 2, 0); /* m: 4719 -> 4740,0 */
	reached1[4719] = 1;
	trans[1][4719]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4720]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4721]	= settr(5028,2,4722,2,0,"else", 1, 2, 0);
	trans[1][4722]	= settr(5029,4,4740,2633,2633,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4724 -> 0,4740 */
	reached1[4724] = 1;
	T = trans[1][4740] = settr(5047,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5047,0,4726,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5047,0,4738,0,0,"IF", 0, 2, 0);
	trans[1][4726]	= settr(5033,0,4737,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4737] = settr(5044,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5044,0,4733,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4733] = settr(5040,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5040,0,4727,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5040,0,4729,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5040,0,4731,0,0,"IF", 0, 2, 0);
	trans[1][4727]	= settr(5034,0,4735,2634,2634,"((_pid==0))", 0, 2, 0); /* m: 4728 -> 4735,0 */
	reached1[4728] = 1;
	trans[1][4728]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4734]	= settr(5041,0,4735,1,0,".(goto)", 0, 2, 0);
	trans[1][4729]	= settr(5036,0,4735,2635,2635,"((_pid==1))", 0, 2, 0); /* m: 4730 -> 4735,0 */
	reached1[4730] = 1;
	trans[1][4730]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4731]	= settr(5038,0,4735,2636,2636,"((_pid>1))", 0, 2, 0); /* m: 4732 -> 4735,0 */
	reached1[4732] = 1;
	trans[1][4732]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4735]	= settr(5042,0,4736,2637,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4736]	= settr(5043,0,4826,2638,2638,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4822 -> 0,4826 */
	reached1[4822] = 1;
	trans[1][4741]	= settr(5048,0,4822,1,0,".(goto)", 0, 2, 0); /* m: 4822 -> 0,4826 */
	reached1[4822] = 1;
	trans[1][4738]	= settr(5045,0,4739,2,0,"else", 0, 2, 0);
	trans[1][4739]	= settr(5046,0,4826,2639,2639,"(1)", 0, 2, 0); /* m: 4822 -> 4826,0 */
	reached1[4822] = 1;
	trans[1][4743]	= settr(5050,0,4780,2640,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][4780] = settr(5087,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5087,0,4763,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4763] = settr(5070,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5070,2,4761,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4761] = settr(5068,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5068,2,4744,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5068,2,4747,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5068,2,4750,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5068,2,4753,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5068,2,4756,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5068,2,4759,0,0,"IF", 1, 2, 0);
	trans[1][4744]	= settr(5051,4,4778,2641,2641,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4745 -> 4778,0 */
	reached1[4745] = 1;
	trans[1][4745]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4746]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4762]	= settr(5069,0,4778,2642,2642,".(goto)", 1, 2, 0);
	trans[1][4747]	= settr(5054,4,4778,2643,2643,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4748 -> 4778,0 */
	reached1[4748] = 1;
	trans[1][4748]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4749]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4750]	= settr(5057,4,4778,2644,2644,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4751 -> 4778,0 */
	reached1[4751] = 1;
	trans[1][4751]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4752]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4753]	= settr(5060,4,4778,2645,2645,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4754 -> 4778,0 */
	reached1[4754] = 1;
	trans[1][4754]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4755]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4756]	= settr(5063,4,4778,2646,2646,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 4757 -> 4778,0 */
	reached1[4757] = 1;
	trans[1][4757]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4758]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4759]	= settr(5066,2,4760,2,0,"else", 1, 2, 0);
	trans[1][4760]	= settr(5067,4,4778,2647,2647,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4762 -> 0,4778 */
	reached1[4762] = 1;
	T = trans[1][4778] = settr(5085,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5085,0,4764,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5085,0,4776,0,0,"IF", 0, 2, 0);
	trans[1][4764]	= settr(5071,0,4775,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4775] = settr(5082,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5082,0,4771,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4771] = settr(5078,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5078,0,4765,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5078,0,4767,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5078,0,4769,0,0,"IF", 0, 2, 0);
	trans[1][4765]	= settr(5072,0,4773,2648,2648,"((_pid==0))", 0, 2, 0); /* m: 4766 -> 4773,0 */
	reached1[4766] = 1;
	trans[1][4766]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4772]	= settr(5079,0,4773,1,0,".(goto)", 0, 2, 0);
	trans[1][4767]	= settr(5074,0,4773,2649,2649,"((_pid==1))", 0, 2, 0); /* m: 4768 -> 4773,0 */
	reached1[4768] = 1;
	trans[1][4768]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4769]	= settr(5076,0,4773,2650,2650,"((_pid>1))", 0, 2, 0); /* m: 4770 -> 4773,0 */
	reached1[4770] = 1;
	trans[1][4770]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4773]	= settr(5080,0,4774,2651,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4774]	= settr(5081,0,4826,2652,2652,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4822 -> 0,4826 */
	reached1[4822] = 1;
	trans[1][4779]	= settr(5086,0,4822,1,0,".(goto)", 0, 2, 0); /* m: 4822 -> 0,4826 */
	reached1[4822] = 1;
	trans[1][4776]	= settr(5083,0,4777,2,0,"else", 0, 2, 0);
	trans[1][4777]	= settr(5084,0,4826,2653,2653,"(1)", 0, 2, 0); /* m: 4822 -> 4826,0 */
	reached1[4822] = 1;
	trans[1][4781]	= settr(5088,0,4818,2654,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][4818] = settr(5125,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5125,0,4801,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4801] = settr(5108,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5108,2,4799,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4799] = settr(5106,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5106,2,4782,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5106,2,4785,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5106,2,4788,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5106,2,4791,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5106,2,4794,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5106,2,4797,0,0,"IF", 1, 2, 0);
	trans[1][4782]	= settr(5089,4,4816,2655,2655,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4783 -> 4816,0 */
	reached1[4783] = 1;
	trans[1][4783]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4784]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4800]	= settr(5107,0,4816,2656,2656,".(goto)", 1, 2, 0);
	trans[1][4785]	= settr(5092,4,4816,2657,2657,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4786 -> 4816,0 */
	reached1[4786] = 1;
	trans[1][4786]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4787]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4788]	= settr(5095,4,4816,2658,2658,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4789 -> 4816,0 */
	reached1[4789] = 1;
	trans[1][4789]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4790]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4791]	= settr(5098,4,4816,2659,2659,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4792 -> 4816,0 */
	reached1[4792] = 1;
	trans[1][4792]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4793]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4794]	= settr(5101,4,4816,2660,2660,"((STOP==ABORT))", 1, 2, 0); /* m: 4795 -> 4816,0 */
	reached1[4795] = 1;
	trans[1][4795]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4796]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4797]	= settr(5104,2,4798,2,0,"else", 1, 2, 0);
	trans[1][4798]	= settr(5105,4,4816,2661,2661,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4800 -> 0,4816 */
	reached1[4800] = 1;
	T = trans[1][4816] = settr(5123,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5123,0,4802,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5123,0,4814,0,0,"IF", 0, 2, 0);
	trans[1][4802]	= settr(5109,0,4813,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4813] = settr(5120,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5120,0,4809,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4809] = settr(5116,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5116,0,4803,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5116,0,4805,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5116,0,4807,0,0,"IF", 0, 2, 0);
	trans[1][4803]	= settr(5110,0,4811,2662,2662,"((_pid==0))", 0, 2, 0); /* m: 4804 -> 4811,0 */
	reached1[4804] = 1;
	trans[1][4804]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4810]	= settr(5117,0,4811,1,0,".(goto)", 0, 2, 0);
	trans[1][4805]	= settr(5112,0,4811,2663,2663,"((_pid==1))", 0, 2, 0); /* m: 4806 -> 4811,0 */
	reached1[4806] = 1;
	trans[1][4806]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4807]	= settr(5114,0,4811,2664,2664,"((_pid>1))", 0, 2, 0); /* m: 4808 -> 4811,0 */
	reached1[4808] = 1;
	trans[1][4808]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4811]	= settr(5118,0,4812,2665,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4812]	= settr(5119,0,4826,2666,2666,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4822 -> 0,4826 */
	reached1[4822] = 1;
	trans[1][4817]	= settr(5124,0,4822,1,0,".(goto)", 0, 2, 0); /* m: 4822 -> 0,4826 */
	reached1[4822] = 1;
	trans[1][4814]	= settr(5121,0,4815,2,0,"else", 0, 2, 0);
	trans[1][4815]	= settr(5122,0,4826,2667,2667,"(1)", 0, 2, 0); /* m: 4822 -> 4826,0 */
	reached1[4822] = 1;
	trans[1][4822]	= settr(5129,0,4826,2668,2668,"j = (j+1)", 0, 2, 0);
	trans[1][4823]	= settr(5130,0,4824,2,0,"else", 0, 2, 0);
	trans[1][4824]	= settr(5131,0,5910,2669,2669,"j = 1", 0, 2, 0);
	trans[1][4825]	= settr(5132,0,5910,1,0,"goto :b34", 0, 2, 0);
	trans[1][4828]	= settr(5135,0,5910,1,0,"break", 0, 2, 0);
	trans[1][4998]	= settr(5305,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][4830]	= settr(5137,0,4996,2,0,"else", 0, 2, 0);
	T = trans[ 1][4996] = settr(5303,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5303,0,4831,0,0,"sub-sequence", 0, 2, 0);
	trans[1][4831]	= settr(5138,0,4993,2670,2670,"j = (3-1)", 0, 2, 0);
	trans[1][4994]	= settr(5301,0,4993,1,0,".(goto)", 0, 2, 0);
	T = trans[1][4993] = settr(5300,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(5300,0,4832,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(5300,0,4990,0,0,"DO", 0, 2, 0);
	trans[1][4832]	= settr(5139,0,4988,2671,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][4988] = settr(5295,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5295,0,4986,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4986] = settr(5293,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5293,0,4833,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5293,0,4872,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5293,0,4910,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5293,0,4948,0,0,"IF", 0, 2, 0);
	trans[1][4833]	= settr(5140,0,4871,2672,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][4871] = settr(5178,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5178,0,4853,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4853] = settr(5160,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5160,2,4851,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4851] = settr(5158,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5158,2,4834,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5158,2,4837,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5158,2,4840,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5158,2,4843,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5158,2,4846,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5158,2,4849,0,0,"IF", 1, 2, 0);
	trans[1][4834]	= settr(5141,4,4854,2673,2673,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4835 -> 4854,0 */
	reached1[4835] = 1;
	trans[1][4835]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4836]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4852]	= settr(5159,0,4854,2674,2674,".(goto)", 1, 2, 0);
	trans[1][4837]	= settr(5144,4,4854,2675,2675,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4838 -> 4854,0 */
	reached1[4838] = 1;
	trans[1][4838]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4839]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4840]	= settr(5147,4,4854,2676,2676,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4841 -> 4854,0 */
	reached1[4841] = 1;
	trans[1][4841]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4842]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4843]	= settr(5150,4,4854,2677,2677,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4844 -> 4854,0 */
	reached1[4844] = 1;
	trans[1][4844]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4845]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4846]	= settr(5153,4,4854,2678,2678,"((START==ABORT))", 1, 2, 0); /* m: 4847 -> 4854,0 */
	reached1[4847] = 1;
	trans[1][4847]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4848]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4849]	= settr(5156,2,4850,2,0,"else", 1, 2, 0);
	trans[1][4850]	= settr(5157,4,4854,2679,2679,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4852 -> 0,4854 */
	reached1[4852] = 1;
	trans[1][4854]	= settr(5161,0,4869,2680,2680,"(run Thread(j))", 0, 2, 0);
	T = trans[1][4869] = settr(5176,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5176,0,4855,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5176,0,4867,0,0,"IF", 0, 2, 0);
	trans[1][4855]	= settr(5162,0,4866,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4866] = settr(5173,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5173,0,4862,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4862] = settr(5169,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5169,0,4856,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5169,0,4858,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5169,0,4860,0,0,"IF", 0, 2, 0);
	trans[1][4856]	= settr(5163,0,4864,2681,2681,"((_pid==0))", 0, 2, 0); /* m: 4857 -> 4864,0 */
	reached1[4857] = 1;
	trans[1][4857]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4863]	= settr(5170,0,4864,1,0,".(goto)", 0, 2, 0);
	trans[1][4858]	= settr(5165,0,4864,2682,2682,"((_pid==1))", 0, 2, 0); /* m: 4859 -> 4864,0 */
	reached1[4859] = 1;
	trans[1][4859]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4860]	= settr(5167,0,4864,2683,2683,"((_pid>1))", 0, 2, 0); /* m: 4861 -> 4864,0 */
	reached1[4861] = 1;
	trans[1][4861]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4864]	= settr(5171,0,4865,2684,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4865]	= settr(5172,0,4993,2685,2685,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4989 -> 0,4993 */
	reached1[4989] = 1;
	trans[1][4870]	= settr(5177,0,4989,1,0,".(goto)", 0, 2, 0); /* m: 4989 -> 0,4993 */
	reached1[4989] = 1;
	trans[1][4867]	= settr(5174,0,4868,2,0,"else", 0, 2, 0);
	trans[1][4868]	= settr(5175,0,4993,2686,2686,"(1)", 0, 2, 0); /* m: 4989 -> 4993,0 */
	reached1[4989] = 1;
	trans[1][4987]	= settr(5294,0,4989,1,0,".(goto)", 0, 2, 0); /* m: 4989 -> 0,4993 */
	reached1[4989] = 1;
	trans[1][4872]	= settr(5179,0,4909,2687,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][4909] = settr(5216,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5216,0,4892,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4892] = settr(5199,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5199,2,4890,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4890] = settr(5197,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5197,2,4873,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5197,2,4876,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5197,2,4879,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5197,2,4882,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5197,2,4885,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5197,2,4888,0,0,"IF", 1, 2, 0);
	trans[1][4873]	= settr(5180,4,4907,2688,2688,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4874 -> 4907,0 */
	reached1[4874] = 1;
	trans[1][4874]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4875]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4891]	= settr(5198,0,4907,2689,2689,".(goto)", 1, 2, 0);
	trans[1][4876]	= settr(5183,4,4907,2690,2690,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4877 -> 4907,0 */
	reached1[4877] = 1;
	trans[1][4877]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4878]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4879]	= settr(5186,4,4907,2691,2691,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4880 -> 4907,0 */
	reached1[4880] = 1;
	trans[1][4880]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4881]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4882]	= settr(5189,4,4907,2692,2692,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4883 -> 4907,0 */
	reached1[4883] = 1;
	trans[1][4883]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4884]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4885]	= settr(5192,4,4907,2693,2693,"((PAUSE==ABORT))", 1, 2, 0); /* m: 4886 -> 4907,0 */
	reached1[4886] = 1;
	trans[1][4886]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4887]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4888]	= settr(5195,2,4889,2,0,"else", 1, 2, 0);
	trans[1][4889]	= settr(5196,4,4907,2694,2694,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4891 -> 0,4907 */
	reached1[4891] = 1;
	T = trans[1][4907] = settr(5214,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5214,0,4893,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5214,0,4905,0,0,"IF", 0, 2, 0);
	trans[1][4893]	= settr(5200,0,4904,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4904] = settr(5211,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5211,0,4900,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4900] = settr(5207,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5207,0,4894,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5207,0,4896,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5207,0,4898,0,0,"IF", 0, 2, 0);
	trans[1][4894]	= settr(5201,0,4902,2695,2695,"((_pid==0))", 0, 2, 0); /* m: 4895 -> 4902,0 */
	reached1[4895] = 1;
	trans[1][4895]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4901]	= settr(5208,0,4902,1,0,".(goto)", 0, 2, 0);
	trans[1][4896]	= settr(5203,0,4902,2696,2696,"((_pid==1))", 0, 2, 0); /* m: 4897 -> 4902,0 */
	reached1[4897] = 1;
	trans[1][4897]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4898]	= settr(5205,0,4902,2697,2697,"((_pid>1))", 0, 2, 0); /* m: 4899 -> 4902,0 */
	reached1[4899] = 1;
	trans[1][4899]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4902]	= settr(5209,0,4903,2698,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4903]	= settr(5210,0,4993,2699,2699,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4989 -> 0,4993 */
	reached1[4989] = 1;
	trans[1][4908]	= settr(5215,0,4989,1,0,".(goto)", 0, 2, 0); /* m: 4989 -> 0,4993 */
	reached1[4989] = 1;
	trans[1][4905]	= settr(5212,0,4906,2,0,"else", 0, 2, 0);
	trans[1][4906]	= settr(5213,0,4993,2700,2700,"(1)", 0, 2, 0); /* m: 4989 -> 4993,0 */
	reached1[4989] = 1;
	trans[1][4910]	= settr(5217,0,4947,2701,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][4947] = settr(5254,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5254,0,4930,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4930] = settr(5237,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5237,2,4928,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4928] = settr(5235,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5235,2,4911,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5235,2,4914,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5235,2,4917,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5235,2,4920,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5235,2,4923,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5235,2,4926,0,0,"IF", 1, 2, 0);
	trans[1][4911]	= settr(5218,4,4945,2702,2702,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4912 -> 4945,0 */
	reached1[4912] = 1;
	trans[1][4912]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4913]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4929]	= settr(5236,0,4945,2703,2703,".(goto)", 1, 2, 0);
	trans[1][4914]	= settr(5221,4,4945,2704,2704,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4915 -> 4945,0 */
	reached1[4915] = 1;
	trans[1][4915]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4916]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4917]	= settr(5224,4,4945,2705,2705,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4918 -> 4945,0 */
	reached1[4918] = 1;
	trans[1][4918]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4919]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4920]	= settr(5227,4,4945,2706,2706,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4921 -> 4945,0 */
	reached1[4921] = 1;
	trans[1][4921]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4922]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4923]	= settr(5230,4,4945,2707,2707,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 4924 -> 4945,0 */
	reached1[4924] = 1;
	trans[1][4924]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4925]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4926]	= settr(5233,2,4927,2,0,"else", 1, 2, 0);
	trans[1][4927]	= settr(5234,4,4945,2708,2708,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4929 -> 0,4945 */
	reached1[4929] = 1;
	T = trans[1][4945] = settr(5252,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5252,0,4931,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5252,0,4943,0,0,"IF", 0, 2, 0);
	trans[1][4931]	= settr(5238,0,4942,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4942] = settr(5249,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5249,0,4938,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4938] = settr(5245,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5245,0,4932,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5245,0,4934,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5245,0,4936,0,0,"IF", 0, 2, 0);
	trans[1][4932]	= settr(5239,0,4940,2709,2709,"((_pid==0))", 0, 2, 0); /* m: 4933 -> 4940,0 */
	reached1[4933] = 1;
	trans[1][4933]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4939]	= settr(5246,0,4940,1,0,".(goto)", 0, 2, 0);
	trans[1][4934]	= settr(5241,0,4940,2710,2710,"((_pid==1))", 0, 2, 0); /* m: 4935 -> 4940,0 */
	reached1[4935] = 1;
	trans[1][4935]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4936]	= settr(5243,0,4940,2711,2711,"((_pid>1))", 0, 2, 0); /* m: 4937 -> 4940,0 */
	reached1[4937] = 1;
	trans[1][4937]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4940]	= settr(5247,0,4941,2712,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4941]	= settr(5248,0,4993,2713,2713,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4989 -> 0,4993 */
	reached1[4989] = 1;
	trans[1][4946]	= settr(5253,0,4989,1,0,".(goto)", 0, 2, 0); /* m: 4989 -> 0,4993 */
	reached1[4989] = 1;
	trans[1][4943]	= settr(5250,0,4944,2,0,"else", 0, 2, 0);
	trans[1][4944]	= settr(5251,0,4993,2714,2714,"(1)", 0, 2, 0); /* m: 4989 -> 4993,0 */
	reached1[4989] = 1;
	trans[1][4948]	= settr(5255,0,4985,2715,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][4985] = settr(5292,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5292,0,4968,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][4968] = settr(5275,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5275,2,4966,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][4966] = settr(5273,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5273,2,4949,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5273,2,4952,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5273,2,4955,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5273,2,4958,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5273,2,4961,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5273,2,4964,0,0,"IF", 1, 2, 0);
	trans[1][4949]	= settr(5256,4,4983,2716,2716,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4950 -> 4983,0 */
	reached1[4950] = 1;
	trans[1][4950]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][4951]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][4967]	= settr(5274,0,4983,2717,2717,".(goto)", 1, 2, 0);
	trans[1][4952]	= settr(5259,4,4983,2718,2718,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 4953 -> 4983,0 */
	reached1[4953] = 1;
	trans[1][4953]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][4954]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][4955]	= settr(5262,4,4983,2719,2719,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4956 -> 4983,0 */
	reached1[4956] = 1;
	trans[1][4956]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][4957]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][4958]	= settr(5265,4,4983,2720,2720,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 4959 -> 4983,0 */
	reached1[4959] = 1;
	trans[1][4959]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][4960]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][4961]	= settr(5268,4,4983,2721,2721,"((STOP==ABORT))", 1, 2, 0); /* m: 4962 -> 4983,0 */
	reached1[4962] = 1;
	trans[1][4962]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][4963]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][4964]	= settr(5271,2,4965,2,0,"else", 1, 2, 0);
	trans[1][4965]	= settr(5272,4,4983,2722,2722,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 4967 -> 0,4983 */
	reached1[4967] = 1;
	T = trans[1][4983] = settr(5290,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5290,0,4969,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5290,0,4981,0,0,"IF", 0, 2, 0);
	trans[1][4969]	= settr(5276,0,4980,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][4980] = settr(5287,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5287,0,4976,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][4976] = settr(5283,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5283,0,4970,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5283,0,4972,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5283,0,4974,0,0,"IF", 0, 2, 0);
	trans[1][4970]	= settr(5277,0,4978,2723,2723,"((_pid==0))", 0, 2, 0); /* m: 4971 -> 4978,0 */
	reached1[4971] = 1;
	trans[1][4971]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4977]	= settr(5284,0,4978,1,0,".(goto)", 0, 2, 0);
	trans[1][4972]	= settr(5279,0,4978,2724,2724,"((_pid==1))", 0, 2, 0); /* m: 4973 -> 4978,0 */
	reached1[4973] = 1;
	trans[1][4973]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][4974]	= settr(5281,0,4978,2725,2725,"((_pid>1))", 0, 2, 0); /* m: 4975 -> 4978,0 */
	reached1[4975] = 1;
	trans[1][4975]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][4978]	= settr(5285,0,4979,2726,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][4979]	= settr(5286,0,4993,2727,2727,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 4989 -> 0,4993 */
	reached1[4989] = 1;
	trans[1][4984]	= settr(5291,0,4989,1,0,".(goto)", 0, 2, 0); /* m: 4989 -> 0,4993 */
	reached1[4989] = 1;
	trans[1][4981]	= settr(5288,0,4982,2,0,"else", 0, 2, 0);
	trans[1][4982]	= settr(5289,0,4993,2728,2728,"(1)", 0, 2, 0); /* m: 4989 -> 4993,0 */
	reached1[4989] = 1;
	trans[1][4989]	= settr(5296,0,4993,2729,2729,"j = (j-1)", 0, 2, 0);
	trans[1][4990]	= settr(5297,0,4991,2,0,"else", 0, 2, 0);
	trans[1][4991]	= settr(5298,0,5910,2730,2730,"j = 1", 0, 2, 0);
	trans[1][4992]	= settr(5299,0,5910,1,0,"goto :b35", 0, 2, 0);
	trans[1][4995]	= settr(5302,0,5910,1,0,"break", 0, 2, 0);
	trans[1][5227]	= settr(5534,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][5000]	= settr(5307,0,5225,2,0,"else", 0, 2, 0);
	T = trans[ 1][5225] = settr(5532,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5532,0,5001,0,0,"sub-sequence", 0, 2, 0);
	trans[1][5001]	= settr(5308,0,5166,2731,0,"printf('Supervisor propagating command %e...\\n',8)", 0, 2, 0);
	T = trans[ 1][5166] = settr(5473,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5473,0,5163,0,0,"sub-sequence", 0, 2, 0);
	trans[1][5164]	= settr(5471,0,5163,1,0,".(goto)", 0, 2, 0);
	T = trans[1][5163] = settr(5470,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(5470,0,5002,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(5470,0,5160,0,0,"DO", 0, 2, 0);
	trans[1][5002]	= settr(5309,0,5158,2732,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][5158] = settr(5465,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5465,0,5156,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5156] = settr(5463,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5463,0,5003,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5463,0,5042,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5463,0,5080,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5463,0,5118,0,0,"IF", 0, 2, 0);
	trans[1][5003]	= settr(5310,0,5041,2733,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][5041] = settr(5348,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5348,0,5023,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5023] = settr(5330,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5330,2,5021,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5021] = settr(5328,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5328,2,5004,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5328,2,5007,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5328,2,5010,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5328,2,5013,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5328,2,5016,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5328,2,5019,0,0,"IF", 1, 2, 0);
	trans[1][5004]	= settr(5311,4,5024,2734,2734,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5005 -> 5024,0 */
	reached1[5005] = 1;
	trans[1][5005]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5006]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5022]	= settr(5329,0,5024,2735,2735,".(goto)", 1, 2, 0);
	trans[1][5007]	= settr(5314,4,5024,2736,2736,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5008 -> 5024,0 */
	reached1[5008] = 1;
	trans[1][5008]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5009]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5010]	= settr(5317,4,5024,2737,2737,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5011 -> 5024,0 */
	reached1[5011] = 1;
	trans[1][5011]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5012]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5013]	= settr(5320,4,5024,2738,2738,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5014 -> 5024,0 */
	reached1[5014] = 1;
	trans[1][5014]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5015]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5016]	= settr(5323,4,5024,2739,2739,"((START==ABORT))", 1, 2, 0); /* m: 5017 -> 5024,0 */
	reached1[5017] = 1;
	trans[1][5017]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5018]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5019]	= settr(5326,2,5020,2,0,"else", 1, 2, 0);
	trans[1][5020]	= settr(5327,4,5024,2740,2740,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5022 -> 0,5024 */
	reached1[5022] = 1;
	trans[1][5024]	= settr(5331,0,5039,2741,2741,"(run Thread(j))", 0, 2, 0);
	T = trans[1][5039] = settr(5346,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(5346,0,5025,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(5346,0,5037,0,0,"IF", 0, 2, 0);
	trans[1][5025]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][5036] = settr(5343,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5343,0,5032,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5032] = settr(5339,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5339,0,5026,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5339,0,5028,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5339,0,5030,0,0,"IF", 0, 2, 0);
	trans[1][5026]	= settr(5333,0,5034,2742,2742,"((_pid==0))", 0, 2, 0); /* m: 5027 -> 5034,0 */
	reached1[5027] = 1;
	trans[1][5027]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5033]	= settr(5340,0,5034,1,0,".(goto)", 0, 2, 0);
	trans[1][5028]	= settr(5335,0,5034,2743,2743,"((_pid==1))", 0, 2, 0); /* m: 5029 -> 5034,0 */
	reached1[5029] = 1;
	trans[1][5029]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5030]	= settr(5337,0,5034,2744,2744,"((_pid>1))", 0, 2, 0); /* m: 5031 -> 5034,0 */
	reached1[5031] = 1;
	trans[1][5031]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5034]	= settr(5341,0,5035,2745,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5035]	= settr(5342,0,5163,2746,2746,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5159 -> 0,5163 */
	reached1[5159] = 1;
	trans[1][5040]	= settr(5347,0,5159,1,0,".(goto)", 0, 2, 0); /* m: 5159 -> 0,5163 */
	reached1[5159] = 1;
	trans[1][5037]	= settr(5344,0,5038,2,0,"else", 0, 2, 0);
	trans[1][5038]	= settr(5345,0,5163,2747,2747,"(1)", 0, 2, 0); /* m: 5159 -> 5163,0 */
	reached1[5159] = 1;
	trans[1][5157]	= settr(5464,0,5159,1,0,".(goto)", 0, 2, 0); /* m: 5159 -> 0,5163 */
	reached1[5159] = 1;
	trans[1][5042]	= settr(5349,0,5079,2748,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][5079] = settr(5386,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5386,0,5062,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5062] = settr(5369,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5369,2,5060,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5060] = settr(5367,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5367,2,5043,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5367,2,5046,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5367,2,5049,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5367,2,5052,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5367,2,5055,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5367,2,5058,0,0,"IF", 1, 2, 0);
	trans[1][5043]	= settr(5350,4,5077,2749,2749,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5044 -> 5077,0 */
	reached1[5044] = 1;
	trans[1][5044]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5045]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5061]	= settr(5368,0,5077,2750,2750,".(goto)", 1, 2, 0);
	trans[1][5046]	= settr(5353,4,5077,2751,2751,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5047 -> 5077,0 */
	reached1[5047] = 1;
	trans[1][5047]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5048]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5049]	= settr(5356,4,5077,2752,2752,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5050 -> 5077,0 */
	reached1[5050] = 1;
	trans[1][5050]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5051]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5052]	= settr(5359,4,5077,2753,2753,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5053 -> 5077,0 */
	reached1[5053] = 1;
	trans[1][5053]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5054]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5055]	= settr(5362,4,5077,2754,2754,"((PAUSE==ABORT))", 1, 2, 0); /* m: 5056 -> 5077,0 */
	reached1[5056] = 1;
	trans[1][5056]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5057]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5058]	= settr(5365,2,5059,2,0,"else", 1, 2, 0);
	trans[1][5059]	= settr(5366,4,5077,2755,2755,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5061 -> 0,5077 */
	reached1[5061] = 1;
	T = trans[1][5077] = settr(5384,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(5384,0,5063,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(5384,0,5075,0,0,"IF", 0, 2, 0);
	trans[1][5063]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][5074] = settr(5381,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5381,0,5070,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5070] = settr(5377,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5377,0,5064,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5377,0,5066,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5377,0,5068,0,0,"IF", 0, 2, 0);
	trans[1][5064]	= settr(5371,0,5072,2756,2756,"((_pid==0))", 0, 2, 0); /* m: 5065 -> 5072,0 */
	reached1[5065] = 1;
	trans[1][5065]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5071]	= settr(5378,0,5072,1,0,".(goto)", 0, 2, 0);
	trans[1][5066]	= settr(5373,0,5072,2757,2757,"((_pid==1))", 0, 2, 0); /* m: 5067 -> 5072,0 */
	reached1[5067] = 1;
	trans[1][5067]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5068]	= settr(5375,0,5072,2758,2758,"((_pid>1))", 0, 2, 0); /* m: 5069 -> 5072,0 */
	reached1[5069] = 1;
	trans[1][5069]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5072]	= settr(5379,0,5073,2759,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5073]	= settr(5380,0,5163,2760,2760,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5159 -> 0,5163 */
	reached1[5159] = 1;
	trans[1][5078]	= settr(5385,0,5159,1,0,".(goto)", 0, 2, 0); /* m: 5159 -> 0,5163 */
	reached1[5159] = 1;
	trans[1][5075]	= settr(5382,0,5076,2,0,"else", 0, 2, 0);
	trans[1][5076]	= settr(5383,0,5163,2761,2761,"(1)", 0, 2, 0); /* m: 5159 -> 5163,0 */
	reached1[5159] = 1;
	trans[1][5080]	= settr(5387,0,5117,2762,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][5117] = settr(5424,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5424,0,5100,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5100] = settr(5407,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5407,2,5098,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5098] = settr(5405,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5405,2,5081,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5405,2,5084,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5405,2,5087,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5405,2,5090,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5405,2,5093,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5405,2,5096,0,0,"IF", 1, 2, 0);
	trans[1][5081]	= settr(5388,4,5115,2763,2763,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5082 -> 5115,0 */
	reached1[5082] = 1;
	trans[1][5082]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5083]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5099]	= settr(5406,0,5115,2764,2764,".(goto)", 1, 2, 0);
	trans[1][5084]	= settr(5391,4,5115,2765,2765,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5085 -> 5115,0 */
	reached1[5085] = 1;
	trans[1][5085]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5086]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5087]	= settr(5394,4,5115,2766,2766,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5088 -> 5115,0 */
	reached1[5088] = 1;
	trans[1][5088]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5089]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5090]	= settr(5397,4,5115,2767,2767,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5091 -> 5115,0 */
	reached1[5091] = 1;
	trans[1][5091]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5092]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5093]	= settr(5400,4,5115,2768,2768,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 5094 -> 5115,0 */
	reached1[5094] = 1;
	trans[1][5094]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5095]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5096]	= settr(5403,2,5097,2,0,"else", 1, 2, 0);
	trans[1][5097]	= settr(5404,4,5115,2769,2769,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5099 -> 0,5115 */
	reached1[5099] = 1;
	T = trans[1][5115] = settr(5422,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(5422,0,5101,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(5422,0,5113,0,0,"IF", 0, 2, 0);
	trans[1][5101]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][5112] = settr(5419,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5419,0,5108,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5108] = settr(5415,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5415,0,5102,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5415,0,5104,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5415,0,5106,0,0,"IF", 0, 2, 0);
	trans[1][5102]	= settr(5409,0,5110,2770,2770,"((_pid==0))", 0, 2, 0); /* m: 5103 -> 5110,0 */
	reached1[5103] = 1;
	trans[1][5103]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5109]	= settr(5416,0,5110,1,0,".(goto)", 0, 2, 0);
	trans[1][5104]	= settr(5411,0,5110,2771,2771,"((_pid==1))", 0, 2, 0); /* m: 5105 -> 5110,0 */
	reached1[5105] = 1;
	trans[1][5105]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5106]	= settr(5413,0,5110,2772,2772,"((_pid>1))", 0, 2, 0); /* m: 5107 -> 5110,0 */
	reached1[5107] = 1;
	trans[1][5107]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5110]	= settr(5417,0,5111,2773,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5111]	= settr(5418,0,5163,2774,2774,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5159 -> 0,5163 */
	reached1[5159] = 1;
	trans[1][5116]	= settr(5423,0,5159,1,0,".(goto)", 0, 2, 0); /* m: 5159 -> 0,5163 */
	reached1[5159] = 1;
	trans[1][5113]	= settr(5420,0,5114,2,0,"else", 0, 2, 0);
	trans[1][5114]	= settr(5421,0,5163,2775,2775,"(1)", 0, 2, 0); /* m: 5159 -> 5163,0 */
	reached1[5159] = 1;
	trans[1][5118]	= settr(5425,0,5155,2776,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][5155] = settr(5462,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5462,0,5138,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5138] = settr(5445,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5445,2,5136,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5136] = settr(5443,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5443,2,5119,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5443,2,5122,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5443,2,5125,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5443,2,5128,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5443,2,5131,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5443,2,5134,0,0,"IF", 1, 2, 0);
	trans[1][5119]	= settr(5426,4,5153,2777,2777,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5120 -> 5153,0 */
	reached1[5120] = 1;
	trans[1][5120]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5121]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5137]	= settr(5444,0,5153,2778,2778,".(goto)", 1, 2, 0);
	trans[1][5122]	= settr(5429,4,5153,2779,2779,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5123 -> 5153,0 */
	reached1[5123] = 1;
	trans[1][5123]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5124]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5125]	= settr(5432,4,5153,2780,2780,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5126 -> 5153,0 */
	reached1[5126] = 1;
	trans[1][5126]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5127]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5128]	= settr(5435,4,5153,2781,2781,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5129 -> 5153,0 */
	reached1[5129] = 1;
	trans[1][5129]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5130]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5131]	= settr(5438,4,5153,2782,2782,"((STOP==ABORT))", 1, 2, 0); /* m: 5132 -> 5153,0 */
	reached1[5132] = 1;
	trans[1][5132]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5133]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5134]	= settr(5441,2,5135,2,0,"else", 1, 2, 0);
	trans[1][5135]	= settr(5442,4,5153,2783,2783,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5137 -> 0,5153 */
	reached1[5137] = 1;
	T = trans[1][5153] = settr(5460,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(5460,0,5139,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(5460,0,5151,0,0,"IF", 0, 2, 0);
	trans[1][5139]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][5150] = settr(5457,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5457,0,5146,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5146] = settr(5453,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5453,0,5140,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5453,0,5142,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5453,0,5144,0,0,"IF", 0, 2, 0);
	trans[1][5140]	= settr(5447,0,5148,2784,2784,"((_pid==0))", 0, 2, 0); /* m: 5141 -> 5148,0 */
	reached1[5141] = 1;
	trans[1][5141]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5147]	= settr(5454,0,5148,1,0,".(goto)", 0, 2, 0);
	trans[1][5142]	= settr(5449,0,5148,2785,2785,"((_pid==1))", 0, 2, 0); /* m: 5143 -> 5148,0 */
	reached1[5143] = 1;
	trans[1][5143]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5144]	= settr(5451,0,5148,2786,2786,"((_pid>1))", 0, 2, 0); /* m: 5145 -> 5148,0 */
	reached1[5145] = 1;
	trans[1][5145]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5148]	= settr(5455,0,5149,2787,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5149]	= settr(5456,0,5163,2788,2788,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5159 -> 0,5163 */
	reached1[5159] = 1;
	trans[1][5154]	= settr(5461,0,5159,1,0,".(goto)", 0, 2, 0); /* m: 5159 -> 0,5163 */
	reached1[5159] = 1;
	trans[1][5151]	= settr(5458,0,5152,2,0,"else", 0, 2, 0);
	trans[1][5152]	= settr(5459,0,5163,2789,2789,"(1)", 0, 2, 0); /* m: 5159 -> 5163,0 */
	reached1[5159] = 1;
	trans[1][5159]	= settr(5466,0,5163,2790,2790,"j = (j+1)", 0, 2, 0);
	trans[1][5160]	= settr(5467,0,5161,2,0,"else", 0, 2, 0);
	trans[1][5161]	= settr(5468,0,5222,2791,2791,"j = 1", 0, 2, 0);
	trans[1][5162]	= settr(5469,0,5222,1,0,"goto :b36", 0, 2, 0);
	trans[1][5165]	= settr(5472,0,5222,1,0,"break", 0, 2, 0);
	trans[1][5223]	= settr(5530,0,5222,1,0,".(goto)", 0, 2, 0);
	T = trans[1][5222] = settr(5529,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(5529,0,5167,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(5529,0,5219,0,0,"DO", 0, 2, 0);
	trans[1][5167]	= settr(5474,0,5216,2792,0,"((j<3))", 0, 2, 0);
	T = trans[1][5216] = settr(5523,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5523,0,5168,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5523,0,5180,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5523,0,5192,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5523,0,5204,0,0,"IF", 0, 2, 0);
	trans[1][5168]	= settr(5475,0,5179,2793,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][5179] = settr(5486,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5486,0,5175,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5175] = settr(5482,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5482,0,5169,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5482,0,5171,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5482,0,5173,0,0,"IF", 0, 2, 0);
	trans[1][5169]	= settr(5476,0,5177,2794,2794,"((_pid==0))", 0, 2, 0); /* m: 5170 -> 5177,0 */
	reached1[5170] = 1;
	trans[1][5170]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5176]	= settr(5483,0,5177,1,0,".(goto)", 0, 2, 0);
	trans[1][5171]	= settr(5478,0,5177,2795,2795,"((_pid==1))", 0, 2, 0); /* m: 5172 -> 5177,0 */
	reached1[5172] = 1;
	trans[1][5172]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5173]	= settr(5480,0,5177,2796,2796,"((_pid>1))", 0, 2, 0); /* m: 5174 -> 5177,0 */
	reached1[5174] = 1;
	trans[1][5174]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5177]	= settr(5484,0,5178,2797,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5178]	= settr(5485,0,5222,2798,2798,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5218 -> 0,5222 */
	reached1[5218] = 1;
	trans[1][5217]	= settr(5524,0,5218,1,0,".(goto)", 0, 2, 0); /* m: 5218 -> 0,5222 */
	reached1[5218] = 1;
	trans[1][5180]	= settr(5487,0,5191,2799,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][5191] = settr(5498,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5498,0,5187,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5187] = settr(5494,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5494,0,5181,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5494,0,5183,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5494,0,5185,0,0,"IF", 0, 2, 0);
	trans[1][5181]	= settr(5488,0,5189,2800,2800,"((_pid==0))", 0, 2, 0); /* m: 5182 -> 5189,0 */
	reached1[5182] = 1;
	trans[1][5182]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5188]	= settr(5495,0,5189,1,0,".(goto)", 0, 2, 0);
	trans[1][5183]	= settr(5490,0,5189,2801,2801,"((_pid==1))", 0, 2, 0); /* m: 5184 -> 5189,0 */
	reached1[5184] = 1;
	trans[1][5184]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5185]	= settr(5492,0,5189,2802,2802,"((_pid>1))", 0, 2, 0); /* m: 5186 -> 5189,0 */
	reached1[5186] = 1;
	trans[1][5186]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5189]	= settr(5496,0,5190,2803,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5190]	= settr(5497,0,5222,2804,2804,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5218 -> 0,5222 */
	reached1[5218] = 1;
	trans[1][5192]	= settr(5499,0,5203,2805,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][5203] = settr(5510,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5510,0,5199,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5199] = settr(5506,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5506,0,5193,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5506,0,5195,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5506,0,5197,0,0,"IF", 0, 2, 0);
	trans[1][5193]	= settr(5500,0,5201,2806,2806,"((_pid==0))", 0, 2, 0); /* m: 5194 -> 5201,0 */
	reached1[5194] = 1;
	trans[1][5194]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5200]	= settr(5507,0,5201,1,0,".(goto)", 0, 2, 0);
	trans[1][5195]	= settr(5502,0,5201,2807,2807,"((_pid==1))", 0, 2, 0); /* m: 5196 -> 5201,0 */
	reached1[5196] = 1;
	trans[1][5196]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5197]	= settr(5504,0,5201,2808,2808,"((_pid>1))", 0, 2, 0); /* m: 5198 -> 5201,0 */
	reached1[5198] = 1;
	trans[1][5198]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5201]	= settr(5508,0,5202,2809,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5202]	= settr(5509,0,5222,2810,2810,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5218 -> 0,5222 */
	reached1[5218] = 1;
	trans[1][5204]	= settr(5511,0,5215,2811,0,"((8==STOP))", 0, 2, 0);
	T = trans[ 1][5215] = settr(5522,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5522,0,5211,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5211] = settr(5518,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5518,0,5205,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5518,0,5207,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5518,0,5209,0,0,"IF", 0, 2, 0);
	trans[1][5205]	= settr(5512,0,5213,2812,2812,"((_pid==0))", 0, 2, 0); /* m: 5206 -> 5213,0 */
	reached1[5206] = 1;
	trans[1][5206]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5212]	= settr(5519,0,5213,1,0,".(goto)", 0, 2, 0);
	trans[1][5207]	= settr(5514,0,5213,2813,2813,"((_pid==1))", 0, 2, 0); /* m: 5208 -> 5213,0 */
	reached1[5208] = 1;
	trans[1][5208]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5209]	= settr(5516,0,5213,2814,2814,"((_pid>1))", 0, 2, 0); /* m: 5210 -> 5213,0 */
	reached1[5210] = 1;
	trans[1][5210]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5213]	= settr(5520,0,5214,2815,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5214]	= settr(5521,0,5222,2816,2816,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5218 -> 0,5222 */
	reached1[5218] = 1;
	trans[1][5218]	= settr(5525,0,5222,2817,2817,"j = (j+1)", 0, 2, 0);
	trans[1][5219]	= settr(5526,0,5220,2,0,"else", 0, 2, 0);
	trans[1][5220]	= settr(5527,0,5910,2818,2818,"j = 1", 0, 2, 0);
	trans[1][5221]	= settr(5528,0,5910,1,0,"goto :b37", 0, 2, 0);
	trans[1][5224]	= settr(5531,0,5910,1,0,"break", 0, 2, 0);
	trans[1][5231]	= settr(5538,0,5803,2819,0,"(((3==ABORTING)||(3==STOPPING)))", 0, 2, 0);
	T = trans[ 1][5803] = settr(6110,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6110,0,5801,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5801] = settr(6108,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6108,0,5232,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6108,0,5235,0,0,"IF", 0, 2, 0);
	trans[1][5232]	= settr(5539,0,5233,2820,0,"(((12==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][5233]	= settr(5540,0,5234,2821,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][5234]	= settr(5541,0,5910,2822,2822,"supervisor_started = 1", 1, 2, 0);
	trans[1][5802]	= settr(6109,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][5235]	= settr(5542,0,5799,2,0,"else", 0, 2, 0);
	T = trans[1][5799] = settr(6106,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6106,0,5236,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6106,0,5573,0,0,"IF", 0, 2, 0);
	trans[1][5236]	= settr(5543,0,5572,2823,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][5572] = settr(5879,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5879,0,5570,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5570] = settr(5877,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5877,0,5237,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5877,0,5403,0,0,"IF", 0, 2, 0);
	trans[1][5237]	= settr(5544,0,5402,2824,0,"(((12==START)||(12==PAUSED)))", 0, 2, 0);
	T = trans[ 1][5402] = settr(5709,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5709,0,5399,0,0,"sub-sequence", 0, 2, 0);
	trans[1][5400]	= settr(5707,0,5399,1,0,".(goto)", 0, 2, 0);
	T = trans[1][5399] = settr(5706,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(5706,0,5238,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(5706,0,5396,0,0,"DO", 0, 2, 0);
	trans[1][5238]	= settr(5545,0,5394,2825,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][5394] = settr(5701,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5701,0,5392,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5392] = settr(5699,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5699,0,5239,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5699,0,5278,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5699,0,5316,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5699,0,5354,0,0,"IF", 0, 2, 0);
	trans[1][5239]	= settr(5546,0,5277,2826,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][5277] = settr(5584,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5584,0,5259,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5259] = settr(5566,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5566,2,5257,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5257] = settr(5564,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5564,2,5240,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5564,2,5243,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5564,2,5246,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5564,2,5249,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5564,2,5252,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5564,2,5255,0,0,"IF", 1, 2, 0);
	trans[1][5240]	= settr(5547,4,5260,2827,2827,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5241 -> 5260,0 */
	reached1[5241] = 1;
	trans[1][5241]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5242]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5258]	= settr(5565,0,5260,2828,2828,".(goto)", 1, 2, 0);
	trans[1][5243]	= settr(5550,4,5260,2829,2829,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5244 -> 5260,0 */
	reached1[5244] = 1;
	trans[1][5244]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5245]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5246]	= settr(5553,4,5260,2830,2830,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5247 -> 5260,0 */
	reached1[5247] = 1;
	trans[1][5247]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5248]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5249]	= settr(5556,4,5260,2831,2831,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5250 -> 5260,0 */
	reached1[5250] = 1;
	trans[1][5250]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5251]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5252]	= settr(5559,4,5260,2832,2832,"((START==ABORT))", 1, 2, 0); /* m: 5253 -> 5260,0 */
	reached1[5253] = 1;
	trans[1][5253]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5254]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5255]	= settr(5562,2,5256,2,0,"else", 1, 2, 0);
	trans[1][5256]	= settr(5563,4,5260,2833,2833,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5258 -> 0,5260 */
	reached1[5258] = 1;
	trans[1][5260]	= settr(5567,0,5275,2834,2834,"(run Thread(j))", 0, 2, 0);
	T = trans[1][5275] = settr(5582,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5582,0,5261,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5582,0,5273,0,0,"IF", 0, 2, 0);
	trans[1][5261]	= settr(5568,0,5272,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][5272] = settr(5579,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5579,0,5268,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5268] = settr(5575,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5575,0,5262,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5575,0,5264,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5575,0,5266,0,0,"IF", 0, 2, 0);
	trans[1][5262]	= settr(5569,0,5270,2835,2835,"((_pid==0))", 0, 2, 0); /* m: 5263 -> 5270,0 */
	reached1[5263] = 1;
	trans[1][5263]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5269]	= settr(5576,0,5270,1,0,".(goto)", 0, 2, 0);
	trans[1][5264]	= settr(5571,0,5270,2836,2836,"((_pid==1))", 0, 2, 0); /* m: 5265 -> 5270,0 */
	reached1[5265] = 1;
	trans[1][5265]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5266]	= settr(5573,0,5270,2837,2837,"((_pid>1))", 0, 2, 0); /* m: 5267 -> 5270,0 */
	reached1[5267] = 1;
	trans[1][5267]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5270]	= settr(5577,0,5271,2838,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5271]	= settr(5578,0,5399,2839,2839,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5395 -> 0,5399 */
	reached1[5395] = 1;
	trans[1][5276]	= settr(5583,0,5395,1,0,".(goto)", 0, 2, 0); /* m: 5395 -> 0,5399 */
	reached1[5395] = 1;
	trans[1][5273]	= settr(5580,0,5274,2,0,"else", 0, 2, 0);
	trans[1][5274]	= settr(5581,0,5399,2840,2840,"(1)", 0, 2, 0); /* m: 5395 -> 5399,0 */
	reached1[5395] = 1;
	trans[1][5393]	= settr(5700,0,5395,1,0,".(goto)", 0, 2, 0); /* m: 5395 -> 0,5399 */
	reached1[5395] = 1;
	trans[1][5278]	= settr(5585,0,5315,2841,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][5315] = settr(5622,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5622,0,5298,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5298] = settr(5605,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5605,2,5296,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5296] = settr(5603,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5603,2,5279,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5603,2,5282,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5603,2,5285,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5603,2,5288,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5603,2,5291,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5603,2,5294,0,0,"IF", 1, 2, 0);
	trans[1][5279]	= settr(5586,4,5313,2842,2842,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5280 -> 5313,0 */
	reached1[5280] = 1;
	trans[1][5280]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5281]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5297]	= settr(5604,0,5313,2843,2843,".(goto)", 1, 2, 0);
	trans[1][5282]	= settr(5589,4,5313,2844,2844,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5283 -> 5313,0 */
	reached1[5283] = 1;
	trans[1][5283]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5284]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5285]	= settr(5592,4,5313,2845,2845,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5286 -> 5313,0 */
	reached1[5286] = 1;
	trans[1][5286]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5287]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5288]	= settr(5595,4,5313,2846,2846,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5289 -> 5313,0 */
	reached1[5289] = 1;
	trans[1][5289]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5290]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5291]	= settr(5598,4,5313,2847,2847,"((PAUSE==ABORT))", 1, 2, 0); /* m: 5292 -> 5313,0 */
	reached1[5292] = 1;
	trans[1][5292]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5293]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5294]	= settr(5601,2,5295,2,0,"else", 1, 2, 0);
	trans[1][5295]	= settr(5602,4,5313,2848,2848,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5297 -> 0,5313 */
	reached1[5297] = 1;
	T = trans[1][5313] = settr(5620,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5620,0,5299,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5620,0,5311,0,0,"IF", 0, 2, 0);
	trans[1][5299]	= settr(5606,0,5310,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][5310] = settr(5617,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5617,0,5306,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5306] = settr(5613,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5613,0,5300,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5613,0,5302,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5613,0,5304,0,0,"IF", 0, 2, 0);
	trans[1][5300]	= settr(5607,0,5308,2849,2849,"((_pid==0))", 0, 2, 0); /* m: 5301 -> 5308,0 */
	reached1[5301] = 1;
	trans[1][5301]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5307]	= settr(5614,0,5308,1,0,".(goto)", 0, 2, 0);
	trans[1][5302]	= settr(5609,0,5308,2850,2850,"((_pid==1))", 0, 2, 0); /* m: 5303 -> 5308,0 */
	reached1[5303] = 1;
	trans[1][5303]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5304]	= settr(5611,0,5308,2851,2851,"((_pid>1))", 0, 2, 0); /* m: 5305 -> 5308,0 */
	reached1[5305] = 1;
	trans[1][5305]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5308]	= settr(5615,0,5309,2852,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5309]	= settr(5616,0,5399,2853,2853,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5395 -> 0,5399 */
	reached1[5395] = 1;
	trans[1][5314]	= settr(5621,0,5395,1,0,".(goto)", 0, 2, 0); /* m: 5395 -> 0,5399 */
	reached1[5395] = 1;
	trans[1][5311]	= settr(5618,0,5312,2,0,"else", 0, 2, 0);
	trans[1][5312]	= settr(5619,0,5399,2854,2854,"(1)", 0, 2, 0); /* m: 5395 -> 5399,0 */
	reached1[5395] = 1;
	trans[1][5316]	= settr(5623,0,5353,2855,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][5353] = settr(5660,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5660,0,5336,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5336] = settr(5643,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5643,2,5334,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5334] = settr(5641,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5641,2,5317,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5641,2,5320,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5641,2,5323,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5641,2,5326,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5641,2,5329,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5641,2,5332,0,0,"IF", 1, 2, 0);
	trans[1][5317]	= settr(5624,4,5351,2856,2856,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5318 -> 5351,0 */
	reached1[5318] = 1;
	trans[1][5318]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5319]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5335]	= settr(5642,0,5351,2857,2857,".(goto)", 1, 2, 0);
	trans[1][5320]	= settr(5627,4,5351,2858,2858,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5321 -> 5351,0 */
	reached1[5321] = 1;
	trans[1][5321]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5322]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5323]	= settr(5630,4,5351,2859,2859,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5324 -> 5351,0 */
	reached1[5324] = 1;
	trans[1][5324]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5325]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5326]	= settr(5633,4,5351,2860,2860,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5327 -> 5351,0 */
	reached1[5327] = 1;
	trans[1][5327]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5328]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5329]	= settr(5636,4,5351,2861,2861,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 5330 -> 5351,0 */
	reached1[5330] = 1;
	trans[1][5330]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5331]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5332]	= settr(5639,2,5333,2,0,"else", 1, 2, 0);
	trans[1][5333]	= settr(5640,4,5351,2862,2862,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5335 -> 0,5351 */
	reached1[5335] = 1;
	T = trans[1][5351] = settr(5658,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5658,0,5337,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5658,0,5349,0,0,"IF", 0, 2, 0);
	trans[1][5337]	= settr(5644,0,5348,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][5348] = settr(5655,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5655,0,5344,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5344] = settr(5651,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5651,0,5338,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5651,0,5340,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5651,0,5342,0,0,"IF", 0, 2, 0);
	trans[1][5338]	= settr(5645,0,5346,2863,2863,"((_pid==0))", 0, 2, 0); /* m: 5339 -> 5346,0 */
	reached1[5339] = 1;
	trans[1][5339]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5345]	= settr(5652,0,5346,1,0,".(goto)", 0, 2, 0);
	trans[1][5340]	= settr(5647,0,5346,2864,2864,"((_pid==1))", 0, 2, 0); /* m: 5341 -> 5346,0 */
	reached1[5341] = 1;
	trans[1][5341]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5342]	= settr(5649,0,5346,2865,2865,"((_pid>1))", 0, 2, 0); /* m: 5343 -> 5346,0 */
	reached1[5343] = 1;
	trans[1][5343]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5346]	= settr(5653,0,5347,2866,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5347]	= settr(5654,0,5399,2867,2867,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5395 -> 0,5399 */
	reached1[5395] = 1;
	trans[1][5352]	= settr(5659,0,5395,1,0,".(goto)", 0, 2, 0); /* m: 5395 -> 0,5399 */
	reached1[5395] = 1;
	trans[1][5349]	= settr(5656,0,5350,2,0,"else", 0, 2, 0);
	trans[1][5350]	= settr(5657,0,5399,2868,2868,"(1)", 0, 2, 0); /* m: 5395 -> 5399,0 */
	reached1[5395] = 1;
	trans[1][5354]	= settr(5661,0,5391,2869,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][5391] = settr(5698,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5698,0,5374,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5374] = settr(5681,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5681,2,5372,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5372] = settr(5679,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5679,2,5355,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5679,2,5358,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5679,2,5361,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5679,2,5364,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5679,2,5367,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5679,2,5370,0,0,"IF", 1, 2, 0);
	trans[1][5355]	= settr(5662,4,5389,2870,2870,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5356 -> 5389,0 */
	reached1[5356] = 1;
	trans[1][5356]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5357]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5373]	= settr(5680,0,5389,2871,2871,".(goto)", 1, 2, 0);
	trans[1][5358]	= settr(5665,4,5389,2872,2872,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5359 -> 5389,0 */
	reached1[5359] = 1;
	trans[1][5359]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5360]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5361]	= settr(5668,4,5389,2873,2873,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5362 -> 5389,0 */
	reached1[5362] = 1;
	trans[1][5362]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5363]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5364]	= settr(5671,4,5389,2874,2874,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5365 -> 5389,0 */
	reached1[5365] = 1;
	trans[1][5365]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5366]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5367]	= settr(5674,4,5389,2875,2875,"((STOP==ABORT))", 1, 2, 0); /* m: 5368 -> 5389,0 */
	reached1[5368] = 1;
	trans[1][5368]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5369]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5370]	= settr(5677,2,5371,2,0,"else", 1, 2, 0);
	trans[1][5371]	= settr(5678,4,5389,2876,2876,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5373 -> 0,5389 */
	reached1[5373] = 1;
	T = trans[1][5389] = settr(5696,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5696,0,5375,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5696,0,5387,0,0,"IF", 0, 2, 0);
	trans[1][5375]	= settr(5682,0,5386,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][5386] = settr(5693,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5693,0,5382,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5382] = settr(5689,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5689,0,5376,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5689,0,5378,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5689,0,5380,0,0,"IF", 0, 2, 0);
	trans[1][5376]	= settr(5683,0,5384,2877,2877,"((_pid==0))", 0, 2, 0); /* m: 5377 -> 5384,0 */
	reached1[5377] = 1;
	trans[1][5377]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5383]	= settr(5690,0,5384,1,0,".(goto)", 0, 2, 0);
	trans[1][5378]	= settr(5685,0,5384,2878,2878,"((_pid==1))", 0, 2, 0); /* m: 5379 -> 5384,0 */
	reached1[5379] = 1;
	trans[1][5379]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5380]	= settr(5687,0,5384,2879,2879,"((_pid>1))", 0, 2, 0); /* m: 5381 -> 5384,0 */
	reached1[5381] = 1;
	trans[1][5381]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5384]	= settr(5691,0,5385,2880,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5385]	= settr(5692,0,5399,2881,2881,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5395 -> 0,5399 */
	reached1[5395] = 1;
	trans[1][5390]	= settr(5697,0,5395,1,0,".(goto)", 0, 2, 0); /* m: 5395 -> 0,5399 */
	reached1[5395] = 1;
	trans[1][5387]	= settr(5694,0,5388,2,0,"else", 0, 2, 0);
	trans[1][5388]	= settr(5695,0,5399,2882,2882,"(1)", 0, 2, 0); /* m: 5395 -> 5399,0 */
	reached1[5395] = 1;
	trans[1][5395]	= settr(5702,0,5399,2883,2883,"j = (j+1)", 0, 2, 0);
	trans[1][5396]	= settr(5703,0,5397,2,0,"else", 0, 2, 0);
	trans[1][5397]	= settr(5704,0,5910,2884,2884,"j = 1", 0, 2, 0);
	trans[1][5398]	= settr(5705,0,5910,1,0,"goto :b38", 0, 2, 0);
	trans[1][5401]	= settr(5708,0,5910,1,0,"break", 0, 2, 0);
	trans[1][5571]	= settr(5878,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][5403]	= settr(5710,0,5569,2,0,"else", 0, 2, 0);
	T = trans[ 1][5569] = settr(5876,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5876,0,5404,0,0,"sub-sequence", 0, 2, 0);
	trans[1][5404]	= settr(5711,0,5566,2885,2885,"j = (3-1)", 0, 2, 0);
	trans[1][5567]	= settr(5874,0,5566,1,0,".(goto)", 0, 2, 0);
	T = trans[1][5566] = settr(5873,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(5873,0,5405,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(5873,0,5563,0,0,"DO", 0, 2, 0);
	trans[1][5405]	= settr(5712,0,5561,2886,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][5561] = settr(5868,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5868,0,5559,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5559] = settr(5866,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5866,0,5406,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5866,0,5445,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5866,0,5483,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5866,0,5521,0,0,"IF", 0, 2, 0);
	trans[1][5406]	= settr(5713,0,5444,2887,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][5444] = settr(5751,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5751,0,5426,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5426] = settr(5733,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5733,2,5424,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5424] = settr(5731,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5731,2,5407,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5731,2,5410,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5731,2,5413,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5731,2,5416,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5731,2,5419,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5731,2,5422,0,0,"IF", 1, 2, 0);
	trans[1][5407]	= settr(5714,4,5427,2888,2888,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5408 -> 5427,0 */
	reached1[5408] = 1;
	trans[1][5408]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5409]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5425]	= settr(5732,0,5427,2889,2889,".(goto)", 1, 2, 0);
	trans[1][5410]	= settr(5717,4,5427,2890,2890,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5411 -> 5427,0 */
	reached1[5411] = 1;
	trans[1][5411]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5412]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5413]	= settr(5720,4,5427,2891,2891,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5414 -> 5427,0 */
	reached1[5414] = 1;
	trans[1][5414]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5415]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5416]	= settr(5723,4,5427,2892,2892,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5417 -> 5427,0 */
	reached1[5417] = 1;
	trans[1][5417]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5418]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5419]	= settr(5726,4,5427,2893,2893,"((START==ABORT))", 1, 2, 0); /* m: 5420 -> 5427,0 */
	reached1[5420] = 1;
	trans[1][5420]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5421]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5422]	= settr(5729,2,5423,2,0,"else", 1, 2, 0);
	trans[1][5423]	= settr(5730,4,5427,2894,2894,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5425 -> 0,5427 */
	reached1[5425] = 1;
	trans[1][5427]	= settr(5734,0,5442,2895,2895,"(run Thread(j))", 0, 2, 0);
	T = trans[1][5442] = settr(5749,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5749,0,5428,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5749,0,5440,0,0,"IF", 0, 2, 0);
	trans[1][5428]	= settr(5735,0,5439,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][5439] = settr(5746,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5746,0,5435,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5435] = settr(5742,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5742,0,5429,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5742,0,5431,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5742,0,5433,0,0,"IF", 0, 2, 0);
	trans[1][5429]	= settr(5736,0,5437,2896,2896,"((_pid==0))", 0, 2, 0); /* m: 5430 -> 5437,0 */
	reached1[5430] = 1;
	trans[1][5430]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5436]	= settr(5743,0,5437,1,0,".(goto)", 0, 2, 0);
	trans[1][5431]	= settr(5738,0,5437,2897,2897,"((_pid==1))", 0, 2, 0); /* m: 5432 -> 5437,0 */
	reached1[5432] = 1;
	trans[1][5432]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5433]	= settr(5740,0,5437,2898,2898,"((_pid>1))", 0, 2, 0); /* m: 5434 -> 5437,0 */
	reached1[5434] = 1;
	trans[1][5434]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5437]	= settr(5744,0,5438,2899,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5438]	= settr(5745,0,5566,2900,2900,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5562 -> 0,5566 */
	reached1[5562] = 1;
	trans[1][5443]	= settr(5750,0,5562,1,0,".(goto)", 0, 2, 0); /* m: 5562 -> 0,5566 */
	reached1[5562] = 1;
	trans[1][5440]	= settr(5747,0,5441,2,0,"else", 0, 2, 0);
	trans[1][5441]	= settr(5748,0,5566,2901,2901,"(1)", 0, 2, 0); /* m: 5562 -> 5566,0 */
	reached1[5562] = 1;
	trans[1][5560]	= settr(5867,0,5562,1,0,".(goto)", 0, 2, 0); /* m: 5562 -> 0,5566 */
	reached1[5562] = 1;
	trans[1][5445]	= settr(5752,0,5482,2902,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][5482] = settr(5789,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5789,0,5465,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5465] = settr(5772,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5772,2,5463,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5463] = settr(5770,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5770,2,5446,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5770,2,5449,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5770,2,5452,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5770,2,5455,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5770,2,5458,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5770,2,5461,0,0,"IF", 1, 2, 0);
	trans[1][5446]	= settr(5753,4,5480,2903,2903,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5447 -> 5480,0 */
	reached1[5447] = 1;
	trans[1][5447]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5448]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5464]	= settr(5771,0,5480,2904,2904,".(goto)", 1, 2, 0);
	trans[1][5449]	= settr(5756,4,5480,2905,2905,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5450 -> 5480,0 */
	reached1[5450] = 1;
	trans[1][5450]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5451]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5452]	= settr(5759,4,5480,2906,2906,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5453 -> 5480,0 */
	reached1[5453] = 1;
	trans[1][5453]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5454]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5455]	= settr(5762,4,5480,2907,2907,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5456 -> 5480,0 */
	reached1[5456] = 1;
	trans[1][5456]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5457]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5458]	= settr(5765,4,5480,2908,2908,"((PAUSE==ABORT))", 1, 2, 0); /* m: 5459 -> 5480,0 */
	reached1[5459] = 1;
	trans[1][5459]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5460]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5461]	= settr(5768,2,5462,2,0,"else", 1, 2, 0);
	trans[1][5462]	= settr(5769,4,5480,2909,2909,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5464 -> 0,5480 */
	reached1[5464] = 1;
	T = trans[1][5480] = settr(5787,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5787,0,5466,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5787,0,5478,0,0,"IF", 0, 2, 0);
	trans[1][5466]	= settr(5773,0,5477,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][5477] = settr(5784,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5784,0,5473,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5473] = settr(5780,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5780,0,5467,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5780,0,5469,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5780,0,5471,0,0,"IF", 0, 2, 0);
	trans[1][5467]	= settr(5774,0,5475,2910,2910,"((_pid==0))", 0, 2, 0); /* m: 5468 -> 5475,0 */
	reached1[5468] = 1;
	trans[1][5468]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5474]	= settr(5781,0,5475,1,0,".(goto)", 0, 2, 0);
	trans[1][5469]	= settr(5776,0,5475,2911,2911,"((_pid==1))", 0, 2, 0); /* m: 5470 -> 5475,0 */
	reached1[5470] = 1;
	trans[1][5470]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5471]	= settr(5778,0,5475,2912,2912,"((_pid>1))", 0, 2, 0); /* m: 5472 -> 5475,0 */
	reached1[5472] = 1;
	trans[1][5472]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5475]	= settr(5782,0,5476,2913,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5476]	= settr(5783,0,5566,2914,2914,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5562 -> 0,5566 */
	reached1[5562] = 1;
	trans[1][5481]	= settr(5788,0,5562,1,0,".(goto)", 0, 2, 0); /* m: 5562 -> 0,5566 */
	reached1[5562] = 1;
	trans[1][5478]	= settr(5785,0,5479,2,0,"else", 0, 2, 0);
	trans[1][5479]	= settr(5786,0,5566,2915,2915,"(1)", 0, 2, 0); /* m: 5562 -> 5566,0 */
	reached1[5562] = 1;
	trans[1][5483]	= settr(5790,0,5520,2916,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][5520] = settr(5827,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5827,0,5503,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5503] = settr(5810,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5810,2,5501,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5501] = settr(5808,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5808,2,5484,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5808,2,5487,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5808,2,5490,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5808,2,5493,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5808,2,5496,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5808,2,5499,0,0,"IF", 1, 2, 0);
	trans[1][5484]	= settr(5791,4,5518,2917,2917,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5485 -> 5518,0 */
	reached1[5485] = 1;
	trans[1][5485]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5486]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5502]	= settr(5809,0,5518,2918,2918,".(goto)", 1, 2, 0);
	trans[1][5487]	= settr(5794,4,5518,2919,2919,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5488 -> 5518,0 */
	reached1[5488] = 1;
	trans[1][5488]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5489]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5490]	= settr(5797,4,5518,2920,2920,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5491 -> 5518,0 */
	reached1[5491] = 1;
	trans[1][5491]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5492]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5493]	= settr(5800,4,5518,2921,2921,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5494 -> 5518,0 */
	reached1[5494] = 1;
	trans[1][5494]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5495]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5496]	= settr(5803,4,5518,2922,2922,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 5497 -> 5518,0 */
	reached1[5497] = 1;
	trans[1][5497]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5498]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5499]	= settr(5806,2,5500,2,0,"else", 1, 2, 0);
	trans[1][5500]	= settr(5807,4,5518,2923,2923,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5502 -> 0,5518 */
	reached1[5502] = 1;
	T = trans[1][5518] = settr(5825,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5825,0,5504,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5825,0,5516,0,0,"IF", 0, 2, 0);
	trans[1][5504]	= settr(5811,0,5515,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][5515] = settr(5822,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5822,0,5511,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5511] = settr(5818,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5818,0,5505,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5818,0,5507,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5818,0,5509,0,0,"IF", 0, 2, 0);
	trans[1][5505]	= settr(5812,0,5513,2924,2924,"((_pid==0))", 0, 2, 0); /* m: 5506 -> 5513,0 */
	reached1[5506] = 1;
	trans[1][5506]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5512]	= settr(5819,0,5513,1,0,".(goto)", 0, 2, 0);
	trans[1][5507]	= settr(5814,0,5513,2925,2925,"((_pid==1))", 0, 2, 0); /* m: 5508 -> 5513,0 */
	reached1[5508] = 1;
	trans[1][5508]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5509]	= settr(5816,0,5513,2926,2926,"((_pid>1))", 0, 2, 0); /* m: 5510 -> 5513,0 */
	reached1[5510] = 1;
	trans[1][5510]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5513]	= settr(5820,0,5514,2927,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5514]	= settr(5821,0,5566,2928,2928,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5562 -> 0,5566 */
	reached1[5562] = 1;
	trans[1][5519]	= settr(5826,0,5562,1,0,".(goto)", 0, 2, 0); /* m: 5562 -> 0,5566 */
	reached1[5562] = 1;
	trans[1][5516]	= settr(5823,0,5517,2,0,"else", 0, 2, 0);
	trans[1][5517]	= settr(5824,0,5566,2929,2929,"(1)", 0, 2, 0); /* m: 5562 -> 5566,0 */
	reached1[5562] = 1;
	trans[1][5521]	= settr(5828,0,5558,2930,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][5558] = settr(5865,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5865,0,5541,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5541] = settr(5848,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5848,2,5539,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5539] = settr(5846,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5846,2,5522,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5846,2,5525,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5846,2,5528,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5846,2,5531,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5846,2,5534,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5846,2,5537,0,0,"IF", 1, 2, 0);
	trans[1][5522]	= settr(5829,4,5556,2931,2931,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5523 -> 5556,0 */
	reached1[5523] = 1;
	trans[1][5523]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5524]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5540]	= settr(5847,0,5556,2932,2932,".(goto)", 1, 2, 0);
	trans[1][5525]	= settr(5832,4,5556,2933,2933,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5526 -> 5556,0 */
	reached1[5526] = 1;
	trans[1][5526]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5527]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5528]	= settr(5835,4,5556,2934,2934,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5529 -> 5556,0 */
	reached1[5529] = 1;
	trans[1][5529]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5530]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5531]	= settr(5838,4,5556,2935,2935,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5532 -> 5556,0 */
	reached1[5532] = 1;
	trans[1][5532]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5533]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5534]	= settr(5841,4,5556,2936,2936,"((STOP==ABORT))", 1, 2, 0); /* m: 5535 -> 5556,0 */
	reached1[5535] = 1;
	trans[1][5535]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5536]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5537]	= settr(5844,2,5538,2,0,"else", 1, 2, 0);
	trans[1][5538]	= settr(5845,4,5556,2937,2937,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5540 -> 0,5556 */
	reached1[5540] = 1;
	T = trans[1][5556] = settr(5863,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5863,0,5542,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5863,0,5554,0,0,"IF", 0, 2, 0);
	trans[1][5542]	= settr(5849,0,5553,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][5553] = settr(5860,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5860,0,5549,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5549] = settr(5856,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5856,0,5543,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5856,0,5545,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5856,0,5547,0,0,"IF", 0, 2, 0);
	trans[1][5543]	= settr(5850,0,5551,2938,2938,"((_pid==0))", 0, 2, 0); /* m: 5544 -> 5551,0 */
	reached1[5544] = 1;
	trans[1][5544]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5550]	= settr(5857,0,5551,1,0,".(goto)", 0, 2, 0);
	trans[1][5545]	= settr(5852,0,5551,2939,2939,"((_pid==1))", 0, 2, 0); /* m: 5546 -> 5551,0 */
	reached1[5546] = 1;
	trans[1][5546]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5547]	= settr(5854,0,5551,2940,2940,"((_pid>1))", 0, 2, 0); /* m: 5548 -> 5551,0 */
	reached1[5548] = 1;
	trans[1][5548]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5551]	= settr(5858,0,5552,2941,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5552]	= settr(5859,0,5566,2942,2942,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5562 -> 0,5566 */
	reached1[5562] = 1;
	trans[1][5557]	= settr(5864,0,5562,1,0,".(goto)", 0, 2, 0); /* m: 5562 -> 0,5566 */
	reached1[5562] = 1;
	trans[1][5554]	= settr(5861,0,5555,2,0,"else", 0, 2, 0);
	trans[1][5555]	= settr(5862,0,5566,2943,2943,"(1)", 0, 2, 0); /* m: 5562 -> 5566,0 */
	reached1[5562] = 1;
	trans[1][5562]	= settr(5869,0,5566,2944,2944,"j = (j-1)", 0, 2, 0);
	trans[1][5563]	= settr(5870,0,5564,2,0,"else", 0, 2, 0);
	trans[1][5564]	= settr(5871,0,5910,2945,2945,"j = 1", 0, 2, 0);
	trans[1][5565]	= settr(5872,0,5910,1,0,"goto :b39", 0, 2, 0);
	trans[1][5568]	= settr(5875,0,5910,1,0,"break", 0, 2, 0);
	trans[1][5800]	= settr(6107,0,5910,1,0,".(goto)", 0, 2, 0);
	trans[1][5573]	= settr(5880,0,5798,2,0,"else", 0, 2, 0);
	T = trans[ 1][5798] = settr(6105,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6105,0,5574,0,0,"sub-sequence", 0, 2, 0);
	trans[1][5574]	= settr(5881,0,5739,2946,0,"printf('Supervisor propagating command %e...\\n',12)", 0, 2, 0);
	T = trans[ 1][5739] = settr(6046,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6046,0,5736,0,0,"sub-sequence", 0, 2, 0);
	trans[1][5737]	= settr(6044,0,5736,1,0,".(goto)", 0, 2, 0);
	T = trans[1][5736] = settr(6043,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(6043,0,5575,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(6043,0,5733,0,0,"DO", 0, 2, 0);
	trans[1][5575]	= settr(5882,0,5731,2947,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][5731] = settr(6038,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6038,0,5729,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5729] = settr(6036,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6036,0,5576,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6036,0,5615,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6036,0,5653,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6036,0,5691,0,0,"IF", 0, 2, 0);
	trans[1][5576]	= settr(5883,0,5614,2948,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][5614] = settr(5921,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5921,0,5596,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5596] = settr(5903,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5903,2,5594,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5594] = settr(5901,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5901,2,5577,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5901,2,5580,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5901,2,5583,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5901,2,5586,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5901,2,5589,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5901,2,5592,0,0,"IF", 1, 2, 0);
	trans[1][5577]	= settr(5884,4,5597,2949,2949,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5578 -> 5597,0 */
	reached1[5578] = 1;
	trans[1][5578]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5579]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5595]	= settr(5902,0,5597,2950,2950,".(goto)", 1, 2, 0);
	trans[1][5580]	= settr(5887,4,5597,2951,2951,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5581 -> 5597,0 */
	reached1[5581] = 1;
	trans[1][5581]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5582]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5583]	= settr(5890,4,5597,2952,2952,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5584 -> 5597,0 */
	reached1[5584] = 1;
	trans[1][5584]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5585]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5586]	= settr(5893,4,5597,2953,2953,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5587 -> 5597,0 */
	reached1[5587] = 1;
	trans[1][5587]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5588]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5589]	= settr(5896,4,5597,2954,2954,"((START==ABORT))", 1, 2, 0); /* m: 5590 -> 5597,0 */
	reached1[5590] = 1;
	trans[1][5590]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5591]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5592]	= settr(5899,2,5593,2,0,"else", 1, 2, 0);
	trans[1][5593]	= settr(5900,4,5597,2955,2955,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5595 -> 0,5597 */
	reached1[5595] = 1;
	trans[1][5597]	= settr(5904,0,5612,2956,2956,"(run Thread(j))", 0, 2, 0);
	T = trans[1][5612] = settr(5919,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(5919,0,5598,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(5919,0,5610,0,0,"IF", 0, 2, 0);
	trans[1][5598]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][5609] = settr(5916,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5916,0,5605,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5605] = settr(5912,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5912,0,5599,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5912,0,5601,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5912,0,5603,0,0,"IF", 0, 2, 0);
	trans[1][5599]	= settr(5906,0,5607,2957,2957,"((_pid==0))", 0, 2, 0); /* m: 5600 -> 5607,0 */
	reached1[5600] = 1;
	trans[1][5600]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5606]	= settr(5913,0,5607,1,0,".(goto)", 0, 2, 0);
	trans[1][5601]	= settr(5908,0,5607,2958,2958,"((_pid==1))", 0, 2, 0); /* m: 5602 -> 5607,0 */
	reached1[5602] = 1;
	trans[1][5602]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5603]	= settr(5910,0,5607,2959,2959,"((_pid>1))", 0, 2, 0); /* m: 5604 -> 5607,0 */
	reached1[5604] = 1;
	trans[1][5604]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5607]	= settr(5914,0,5608,2960,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5608]	= settr(5915,0,5736,2961,2961,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5732 -> 0,5736 */
	reached1[5732] = 1;
	trans[1][5613]	= settr(5920,0,5732,1,0,".(goto)", 0, 2, 0); /* m: 5732 -> 0,5736 */
	reached1[5732] = 1;
	trans[1][5610]	= settr(5917,0,5611,2,0,"else", 0, 2, 0);
	trans[1][5611]	= settr(5918,0,5736,2962,2962,"(1)", 0, 2, 0); /* m: 5732 -> 5736,0 */
	reached1[5732] = 1;
	trans[1][5730]	= settr(6037,0,5732,1,0,".(goto)", 0, 2, 0); /* m: 5732 -> 0,5736 */
	reached1[5732] = 1;
	trans[1][5615]	= settr(5922,0,5652,2963,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][5652] = settr(5959,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5959,0,5635,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5635] = settr(5942,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5942,2,5633,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5633] = settr(5940,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5940,2,5616,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5940,2,5619,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5940,2,5622,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5940,2,5625,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5940,2,5628,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5940,2,5631,0,0,"IF", 1, 2, 0);
	trans[1][5616]	= settr(5923,4,5650,2964,2964,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5617 -> 5650,0 */
	reached1[5617] = 1;
	trans[1][5617]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5618]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5634]	= settr(5941,0,5650,2965,2965,".(goto)", 1, 2, 0);
	trans[1][5619]	= settr(5926,4,5650,2966,2966,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5620 -> 5650,0 */
	reached1[5620] = 1;
	trans[1][5620]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5621]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5622]	= settr(5929,4,5650,2967,2967,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5623 -> 5650,0 */
	reached1[5623] = 1;
	trans[1][5623]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5624]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5625]	= settr(5932,4,5650,2968,2968,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5626 -> 5650,0 */
	reached1[5626] = 1;
	trans[1][5626]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5627]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5628]	= settr(5935,4,5650,2969,2969,"((PAUSE==ABORT))", 1, 2, 0); /* m: 5629 -> 5650,0 */
	reached1[5629] = 1;
	trans[1][5629]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5630]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5631]	= settr(5938,2,5632,2,0,"else", 1, 2, 0);
	trans[1][5632]	= settr(5939,4,5650,2970,2970,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5634 -> 0,5650 */
	reached1[5634] = 1;
	T = trans[1][5650] = settr(5957,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(5957,0,5636,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(5957,0,5648,0,0,"IF", 0, 2, 0);
	trans[1][5636]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][5647] = settr(5954,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5954,0,5643,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5643] = settr(5950,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5950,0,5637,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5950,0,5639,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5950,0,5641,0,0,"IF", 0, 2, 0);
	trans[1][5637]	= settr(5944,0,5645,2971,2971,"((_pid==0))", 0, 2, 0); /* m: 5638 -> 5645,0 */
	reached1[5638] = 1;
	trans[1][5638]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5644]	= settr(5951,0,5645,1,0,".(goto)", 0, 2, 0);
	trans[1][5639]	= settr(5946,0,5645,2972,2972,"((_pid==1))", 0, 2, 0); /* m: 5640 -> 5645,0 */
	reached1[5640] = 1;
	trans[1][5640]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5641]	= settr(5948,0,5645,2973,2973,"((_pid>1))", 0, 2, 0); /* m: 5642 -> 5645,0 */
	reached1[5642] = 1;
	trans[1][5642]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5645]	= settr(5952,0,5646,2974,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5646]	= settr(5953,0,5736,2975,2975,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5732 -> 0,5736 */
	reached1[5732] = 1;
	trans[1][5651]	= settr(5958,0,5732,1,0,".(goto)", 0, 2, 0); /* m: 5732 -> 0,5736 */
	reached1[5732] = 1;
	trans[1][5648]	= settr(5955,0,5649,2,0,"else", 0, 2, 0);
	trans[1][5649]	= settr(5956,0,5736,2976,2976,"(1)", 0, 2, 0); /* m: 5732 -> 5736,0 */
	reached1[5732] = 1;
	trans[1][5653]	= settr(5960,0,5690,2977,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][5690] = settr(5997,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5997,0,5673,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5673] = settr(5980,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(5980,2,5671,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5671] = settr(5978,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5978,2,5654,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5978,2,5657,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5978,2,5660,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5978,2,5663,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(5978,2,5666,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(5978,2,5669,0,0,"IF", 1, 2, 0);
	trans[1][5654]	= settr(5961,4,5688,2978,2978,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5655 -> 5688,0 */
	reached1[5655] = 1;
	trans[1][5655]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5656]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5672]	= settr(5979,0,5688,2979,2979,".(goto)", 1, 2, 0);
	trans[1][5657]	= settr(5964,4,5688,2980,2980,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5658 -> 5688,0 */
	reached1[5658] = 1;
	trans[1][5658]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5659]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5660]	= settr(5967,4,5688,2981,2981,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5661 -> 5688,0 */
	reached1[5661] = 1;
	trans[1][5661]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5662]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5663]	= settr(5970,4,5688,2982,2982,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5664 -> 5688,0 */
	reached1[5664] = 1;
	trans[1][5664]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5665]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5666]	= settr(5973,4,5688,2983,2983,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 5667 -> 5688,0 */
	reached1[5667] = 1;
	trans[1][5667]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5668]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5669]	= settr(5976,2,5670,2,0,"else", 1, 2, 0);
	trans[1][5670]	= settr(5977,4,5688,2984,2984,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5672 -> 0,5688 */
	reached1[5672] = 1;
	T = trans[1][5688] = settr(5995,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(5995,0,5674,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(5995,0,5686,0,0,"IF", 0, 2, 0);
	trans[1][5674]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][5685] = settr(5992,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(5992,0,5681,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5681] = settr(5988,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5988,0,5675,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(5988,0,5677,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(5988,0,5679,0,0,"IF", 0, 2, 0);
	trans[1][5675]	= settr(5982,0,5683,2985,2985,"((_pid==0))", 0, 2, 0); /* m: 5676 -> 5683,0 */
	reached1[5676] = 1;
	trans[1][5676]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5682]	= settr(5989,0,5683,1,0,".(goto)", 0, 2, 0);
	trans[1][5677]	= settr(5984,0,5683,2986,2986,"((_pid==1))", 0, 2, 0); /* m: 5678 -> 5683,0 */
	reached1[5678] = 1;
	trans[1][5678]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5679]	= settr(5986,0,5683,2987,2987,"((_pid>1))", 0, 2, 0); /* m: 5680 -> 5683,0 */
	reached1[5680] = 1;
	trans[1][5680]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5683]	= settr(5990,0,5684,2988,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5684]	= settr(5991,0,5736,2989,2989,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5732 -> 0,5736 */
	reached1[5732] = 1;
	trans[1][5689]	= settr(5996,0,5732,1,0,".(goto)", 0, 2, 0); /* m: 5732 -> 0,5736 */
	reached1[5732] = 1;
	trans[1][5686]	= settr(5993,0,5687,2,0,"else", 0, 2, 0);
	trans[1][5687]	= settr(5994,0,5736,2990,2990,"(1)", 0, 2, 0); /* m: 5732 -> 5736,0 */
	reached1[5732] = 1;
	trans[1][5691]	= settr(5998,0,5728,2991,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][5728] = settr(6035,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6035,0,5711,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5711] = settr(6018,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6018,2,5709,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5709] = settr(6016,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6016,2,5692,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6016,2,5695,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6016,2,5698,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6016,2,5701,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6016,2,5704,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6016,2,5707,0,0,"IF", 1, 2, 0);
	trans[1][5692]	= settr(5999,4,5726,2992,2992,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5693 -> 5726,0 */
	reached1[5693] = 1;
	trans[1][5693]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5694]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5710]	= settr(6017,0,5726,2993,2993,".(goto)", 1, 2, 0);
	trans[1][5695]	= settr(6002,4,5726,2994,2994,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5696 -> 5726,0 */
	reached1[5696] = 1;
	trans[1][5696]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5697]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5698]	= settr(6005,4,5726,2995,2995,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5699 -> 5726,0 */
	reached1[5699] = 1;
	trans[1][5699]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5700]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5701]	= settr(6008,4,5726,2996,2996,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5702 -> 5726,0 */
	reached1[5702] = 1;
	trans[1][5702]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5703]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5704]	= settr(6011,4,5726,2997,2997,"((STOP==ABORT))", 1, 2, 0); /* m: 5705 -> 5726,0 */
	reached1[5705] = 1;
	trans[1][5705]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5706]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5707]	= settr(6014,2,5708,2,0,"else", 1, 2, 0);
	trans[1][5708]	= settr(6015,4,5726,2998,2998,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5710 -> 0,5726 */
	reached1[5710] = 1;
	T = trans[1][5726] = settr(6033,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(6033,0,5712,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(6033,0,5724,0,0,"IF", 0, 2, 0);
	trans[1][5712]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][5723] = settr(6030,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6030,0,5719,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5719] = settr(6026,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6026,0,5713,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6026,0,5715,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6026,0,5717,0,0,"IF", 0, 2, 0);
	trans[1][5713]	= settr(6020,0,5721,2999,2999,"((_pid==0))", 0, 2, 0); /* m: 5714 -> 5721,0 */
	reached1[5714] = 1;
	trans[1][5714]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5720]	= settr(6027,0,5721,1,0,".(goto)", 0, 2, 0);
	trans[1][5715]	= settr(6022,0,5721,3000,3000,"((_pid==1))", 0, 2, 0); /* m: 5716 -> 5721,0 */
	reached1[5716] = 1;
	trans[1][5716]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5717]	= settr(6024,0,5721,3001,3001,"((_pid>1))", 0, 2, 0); /* m: 5718 -> 5721,0 */
	reached1[5718] = 1;
	trans[1][5718]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5721]	= settr(6028,0,5722,3002,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5722]	= settr(6029,0,5736,3003,3003,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5732 -> 0,5736 */
	reached1[5732] = 1;
	trans[1][5727]	= settr(6034,0,5732,1,0,".(goto)", 0, 2, 0); /* m: 5732 -> 0,5736 */
	reached1[5732] = 1;
	trans[1][5724]	= settr(6031,0,5725,2,0,"else", 0, 2, 0);
	trans[1][5725]	= settr(6032,0,5736,3004,3004,"(1)", 0, 2, 0); /* m: 5732 -> 5736,0 */
	reached1[5732] = 1;
	trans[1][5732]	= settr(6039,0,5736,3005,3005,"j = (j+1)", 0, 2, 0);
	trans[1][5733]	= settr(6040,0,5734,2,0,"else", 0, 2, 0);
	trans[1][5734]	= settr(6041,0,5795,3006,3006,"j = 1", 0, 2, 0);
	trans[1][5735]	= settr(6042,0,5795,1,0,"goto :b40", 0, 2, 0);
	trans[1][5738]	= settr(6045,0,5795,1,0,"break", 0, 2, 0);
	trans[1][5796]	= settr(6103,0,5795,1,0,".(goto)", 0, 2, 0);
	T = trans[1][5795] = settr(6102,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(6102,0,5740,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(6102,0,5792,0,0,"DO", 0, 2, 0);
	trans[1][5740]	= settr(6047,0,5789,3007,0,"((j<3))", 0, 2, 0);
	T = trans[1][5789] = settr(6096,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6096,0,5741,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6096,0,5753,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6096,0,5765,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6096,0,5777,0,0,"IF", 0, 2, 0);
	trans[1][5741]	= settr(6048,0,5752,3008,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][5752] = settr(6059,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6059,0,5748,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5748] = settr(6055,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6055,0,5742,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6055,0,5744,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6055,0,5746,0,0,"IF", 0, 2, 0);
	trans[1][5742]	= settr(6049,0,5750,3009,3009,"((_pid==0))", 0, 2, 0); /* m: 5743 -> 5750,0 */
	reached1[5743] = 1;
	trans[1][5743]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5749]	= settr(6056,0,5750,1,0,".(goto)", 0, 2, 0);
	trans[1][5744]	= settr(6051,0,5750,3010,3010,"((_pid==1))", 0, 2, 0); /* m: 5745 -> 5750,0 */
	reached1[5745] = 1;
	trans[1][5745]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5746]	= settr(6053,0,5750,3011,3011,"((_pid>1))", 0, 2, 0); /* m: 5747 -> 5750,0 */
	reached1[5747] = 1;
	trans[1][5747]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5750]	= settr(6057,0,5751,3012,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5751]	= settr(6058,0,5795,3013,3013,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5791 -> 0,5795 */
	reached1[5791] = 1;
	trans[1][5790]	= settr(6097,0,5791,1,0,".(goto)", 0, 2, 0); /* m: 5791 -> 0,5795 */
	reached1[5791] = 1;
	trans[1][5753]	= settr(6060,0,5764,3014,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][5764] = settr(6071,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6071,0,5760,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5760] = settr(6067,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6067,0,5754,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6067,0,5756,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6067,0,5758,0,0,"IF", 0, 2, 0);
	trans[1][5754]	= settr(6061,0,5762,3015,3015,"((_pid==0))", 0, 2, 0); /* m: 5755 -> 5762,0 */
	reached1[5755] = 1;
	trans[1][5755]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5761]	= settr(6068,0,5762,1,0,".(goto)", 0, 2, 0);
	trans[1][5756]	= settr(6063,0,5762,3016,3016,"((_pid==1))", 0, 2, 0); /* m: 5757 -> 5762,0 */
	reached1[5757] = 1;
	trans[1][5757]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5758]	= settr(6065,0,5762,3017,3017,"((_pid>1))", 0, 2, 0); /* m: 5759 -> 5762,0 */
	reached1[5759] = 1;
	trans[1][5759]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5762]	= settr(6069,0,5763,3018,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5763]	= settr(6070,0,5795,3019,3019,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5791 -> 0,5795 */
	reached1[5791] = 1;
	trans[1][5765]	= settr(6072,0,5776,3020,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][5776] = settr(6083,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6083,0,5772,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5772] = settr(6079,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6079,0,5766,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6079,0,5768,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6079,0,5770,0,0,"IF", 0, 2, 0);
	trans[1][5766]	= settr(6073,0,5774,3021,3021,"((_pid==0))", 0, 2, 0); /* m: 5767 -> 5774,0 */
	reached1[5767] = 1;
	trans[1][5767]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5773]	= settr(6080,0,5774,1,0,".(goto)", 0, 2, 0);
	trans[1][5768]	= settr(6075,0,5774,3022,3022,"((_pid==1))", 0, 2, 0); /* m: 5769 -> 5774,0 */
	reached1[5769] = 1;
	trans[1][5769]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5770]	= settr(6077,0,5774,3023,3023,"((_pid>1))", 0, 2, 0); /* m: 5771 -> 5774,0 */
	reached1[5771] = 1;
	trans[1][5771]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5774]	= settr(6081,0,5775,3024,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5775]	= settr(6082,0,5795,3025,3025,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5791 -> 0,5795 */
	reached1[5791] = 1;
	trans[1][5777]	= settr(6084,0,5788,3026,0,"((12==STOP))", 0, 2, 0);
	T = trans[ 1][5788] = settr(6095,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6095,0,5784,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5784] = settr(6091,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6091,0,5778,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6091,0,5780,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6091,0,5782,0,0,"IF", 0, 2, 0);
	trans[1][5778]	= settr(6085,0,5786,3027,3027,"((_pid==0))", 0, 2, 0); /* m: 5779 -> 5786,0 */
	reached1[5779] = 1;
	trans[1][5779]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5785]	= settr(6092,0,5786,1,0,".(goto)", 0, 2, 0);
	trans[1][5780]	= settr(6087,0,5786,3028,3028,"((_pid==1))", 0, 2, 0); /* m: 5781 -> 5786,0 */
	reached1[5781] = 1;
	trans[1][5781]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5782]	= settr(6089,0,5786,3029,3029,"((_pid>1))", 0, 2, 0); /* m: 5783 -> 5786,0 */
	reached1[5783] = 1;
	trans[1][5783]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5786]	= settr(6093,0,5787,3030,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5787]	= settr(6094,0,5795,3031,3031,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 5791 -> 0,5795 */
	reached1[5791] = 1;
	trans[1][5791]	= settr(6098,0,5795,3032,3032,"j = (j+1)", 0, 2, 0);
	trans[1][5792]	= settr(6099,0,5793,2,0,"else", 0, 2, 0);
	trans[1][5793]	= settr(6100,0,5910,3033,3033,"j = 1", 0, 2, 0);
	trans[1][5794]	= settr(6101,0,5910,1,0,"goto :b41", 0, 2, 0);
	trans[1][5797]	= settr(6104,0,5910,1,0,"break", 0, 2, 0);
	trans[1][5804]	= settr(6111,0,5805,2,0,"else", 0, 2, 0);
	trans[1][5805]	= settr(6112,0,5910,1,0,"(1)", 0, 2, 0);
	trans[1][5810]	= settr(6117,0,5811,2,0,"else", 0, 2, 0);
	trans[1][5811]	= settr(6118,0,5910,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][5910] = settr(6217,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6217,0,5814,0,0,"sub-sequence", 0, 2, 0);
	trans[1][5814]	= settr(6121,0,5826,3034,3034,"executing[0] = 1", 1, 2, 0);
	T = trans[ 1][5826] = settr(6133,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6133,0,5815,0,0,"sub-sequence", 0, 2, 0);
	trans[1][5815]	= settr(6122,0,5823,3035,3035,"all_workers_stopped = 1", 1, 2, 0);
	trans[1][5824]	= settr(6131,0,5823,1,0,".(goto)", 0, 2, 0);
	T = trans[1][5823] = settr(6130,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(6130,0,5816,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(6130,0,5820,0,0,"DO", 0, 2, 0);
	trans[1][5816]	= settr(6123,0,5817,3036,0,"((j<3))", 0, 2, 0);
	trans[1][5817]	= settr(6124,0,5818,3037,3037,"all_workers_stopped = (all_workers_stopped&&(states[j]==STOPPED))", 1, 2, 0);
	trans[1][5818]	= settr(6125,0,5819,3038,3038,"exists_aborted_worker = (exists_aborted_worker||(states[j]==ABORTED))", 1, 2, 0);
	trans[1][5819]	= settr(6126,0,5823,3039,3039,"j = (j+1)", 0, 2, 0);
	trans[1][5820]	= settr(6127,0,5821,2,0,"else", 0, 2, 0);
	trans[1][5821]	= settr(6128,0,5907,3040,3040,"j = 1", 0, 2, 0);
	trans[1][5822]	= settr(6129,0,5907,1,0,"goto :b42", 0, 2, 0);
	trans[1][5825]	= settr(6132,0,5907,1,0,"break", 0, 2, 0);
	T = trans[1][5907] = settr(6214,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6214,0,5827,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6214,0,5866,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6214,0,5905,0,0,"IF", 0, 2, 0);
	trans[1][5827]	= settr(6134,0,5828,3041,0,"(all_workers_stopped)", 1, 2, 0);
	trans[1][5828]	= settr(6135,0,5865,3042,0,"printf('Supervisor will stop because all Workers have stopped...\\n')", 0, 2, 0);
	T = trans[ 1][5865] = settr(6172,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6172,0,5848,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5848] = settr(6155,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6155,2,5846,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5846] = settr(6153,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6153,2,5829,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6153,2,5832,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6153,2,5835,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6153,2,5838,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6153,2,5841,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6153,2,5844,0,0,"IF", 1, 2, 0);
	trans[1][5829]	= settr(6136,4,5863,3043,3043,"(((STOP==START)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 5830 -> 5863,0 */
	reached1[5830] = 1;
	trans[1][5830]	= settr(0,0,0,0,0,"assert((states[0]==READY))",0,0,0);
	trans[1][5831]	= settr(0,0,0,0,0,"commands[0] = START",0,0,0);
	trans[1][5847]	= settr(6154,0,5863,3044,3044,".(goto)", 1, 2, 0);
	trans[1][5832]	= settr(6139,4,5863,3045,3045,"(((STOP==PAUSE)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 5833 -> 5863,0 */
	reached1[5833] = 1;
	trans[1][5833]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==RUNNING)))",0,0,0);
	trans[1][5834]	= settr(0,0,0,0,0,"commands[0] = PAUSE",0,0,0);
	trans[1][5835]	= settr(6142,4,5863,3046,3046,"(((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 5836 -> 5863,0 */
	reached1[5836] = 1;
	trans[1][5836]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==PAUSED)))",0,0,0);
	trans[1][5837]	= settr(0,0,0,0,0,"commands[0] = CONTINUE",0,0,0);
	trans[1][5838]	= settr(6145,4,5863,3047,3047,"(((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 5839 -> 5863,0 */
	reached1[5839] = 1;
	trans[1][5839]	= settr(0,0,0,0,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))",0,0,0);
	trans[1][5840]	= settr(0,0,0,0,0,"commands[0] = STOP",0,0,0);
	trans[1][5841]	= settr(6148,4,5863,3048,3048,"((STOP==ABORT))", 1, 2, 0); /* m: 5842 -> 5863,0 */
	reached1[5842] = 1;
	trans[1][5842]	= settr(0,0,0,0,0,"assert((states[0]!=READY))",0,0,0);
	trans[1][5843]	= settr(0,0,0,0,0,"commands[0] = ABORT",0,0,0);
	trans[1][5844]	= settr(6151,2,5845,2,0,"else", 1, 2, 0);
	trans[1][5845]	= settr(6152,4,5863,3049,3049,"printf('Thread %d ignores command %e.\\n',0,commands[0])", 1, 2, 0); /* m: 5847 -> 0,5863 */
	reached1[5847] = 1;
	T = trans[1][5863] = settr(6170,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(6170,0,5849,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(6170,0,5861,0,0,"IF", 0, 2, 0);
	trans[1][5849]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][5860] = settr(6167,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6167,0,5856,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5856] = settr(6163,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6163,0,5850,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6163,0,5852,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6163,0,5854,0,0,"IF", 0, 2, 0);
	trans[1][5850]	= settr(6157,0,5858,3050,3050,"((_pid==0))", 0, 2, 0); /* m: 5851 -> 5858,0 */
	reached1[5851] = 1;
	trans[1][5851]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',0)",0,0,0);
	trans[1][5857]	= settr(6164,0,5858,1,0,".(goto)", 0, 2, 0);
	trans[1][5852]	= settr(6159,0,5858,3051,3051,"((_pid==1))", 0, 2, 0); /* m: 5853 -> 5858,0 */
	reached1[5853] = 1;
	trans[1][5853]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',0)",0,0,0);
	trans[1][5854]	= settr(6161,0,5858,3052,3052,"((_pid>1))", 0, 2, 0); /* m: 5855 -> 5858,0 */
	reached1[5855] = 1;
	trans[1][5855]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),0)",0,0,0);
	trans[1][5858]	= settr(6165,0,5859,3053,0,"(((states[0]==STOPPED)||(states[0]==ABORTED)))", 1, 2, 0);
	trans[1][5859]	= settr(6166,0,5909,3054,0,"printf('waiiting ended.\\n')", 0, 2, 0);
	trans[1][5864]	= settr(6171,0,5909,1,0,".(goto)", 0, 2, 0);
	trans[1][5861]	= settr(6168,0,5862,2,0,"else", 0, 2, 0);
	trans[1][5862]	= settr(6169,0,5909,1,0,"(1)", 0, 2, 0);
	trans[1][5908]	= settr(6215,0,5909,1,0,".(goto)", 0, 2, 0);
	trans[1][5866]	= settr(6173,0,5867,3055,0,"(exists_aborted_worker)", 1, 2, 0);
	trans[1][5867]	= settr(6174,0,5904,3056,0,"printf('Supervisor will stop because some Workers have aborted...\\n')", 0, 2, 0);
	T = trans[ 1][5904] = settr(6211,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6211,0,5887,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5887] = settr(6194,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6194,2,5885,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5885] = settr(6192,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6192,2,5868,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6192,2,5871,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6192,2,5874,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6192,2,5877,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6192,2,5880,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6192,2,5883,0,0,"IF", 1, 2, 0);
	trans[1][5868]	= settr(6175,4,5902,3057,3057,"(((STOP==START)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 5869 -> 5902,0 */
	reached1[5869] = 1;
	trans[1][5869]	= settr(0,0,0,0,0,"assert((states[0]==READY))",0,0,0);
	trans[1][5870]	= settr(0,0,0,0,0,"commands[0] = START",0,0,0);
	trans[1][5886]	= settr(6193,0,5902,3058,3058,".(goto)", 1, 2, 0);
	trans[1][5871]	= settr(6178,4,5902,3059,3059,"(((STOP==PAUSE)&&(commands[0]==CONTINUE)))", 1, 2, 0); /* m: 5872 -> 5902,0 */
	reached1[5872] = 1;
	trans[1][5872]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==RUNNING)))",0,0,0);
	trans[1][5873]	= settr(0,0,0,0,0,"commands[0] = PAUSE",0,0,0);
	trans[1][5874]	= settr(6181,4,5902,3060,3060,"(((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 5875 -> 5902,0 */
	reached1[5875] = 1;
	trans[1][5875]	= settr(0,0,0,0,0,"assert(((states[0]==STARTING)||(states[0]==PAUSED)))",0,0,0);
	trans[1][5876]	= settr(0,0,0,0,0,"commands[0] = CONTINUE",0,0,0);
	trans[1][5877]	= settr(6184,4,5902,3061,3061,"(((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))", 1, 2, 0); /* m: 5878 -> 5902,0 */
	reached1[5878] = 1;
	trans[1][5878]	= settr(0,0,0,0,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))",0,0,0);
	trans[1][5879]	= settr(0,0,0,0,0,"commands[0] = STOP",0,0,0);
	trans[1][5880]	= settr(6187,4,5902,3062,3062,"((STOP==ABORT))", 1, 2, 0); /* m: 5881 -> 5902,0 */
	reached1[5881] = 1;
	trans[1][5881]	= settr(0,0,0,0,0,"assert((states[0]!=READY))",0,0,0);
	trans[1][5882]	= settr(0,0,0,0,0,"commands[0] = ABORT",0,0,0);
	trans[1][5883]	= settr(6190,2,5884,2,0,"else", 1, 2, 0);
	trans[1][5884]	= settr(6191,4,5902,3063,3063,"printf('Thread %d ignores command %e.\\n',0,commands[0])", 1, 2, 0); /* m: 5886 -> 0,5902 */
	reached1[5886] = 1;
	T = trans[1][5902] = settr(6209,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(6209,0,5888,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(6209,0,5900,0,0,"IF", 0, 2, 0);
	trans[1][5888]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][5899] = settr(6206,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6206,0,5895,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5895] = settr(6202,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6202,0,5889,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6202,0,5891,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6202,0,5893,0,0,"IF", 0, 2, 0);
	trans[1][5889]	= settr(6196,0,5897,3064,3064,"((_pid==0))", 0, 2, 0); /* m: 5890 -> 5897,0 */
	reached1[5890] = 1;
	trans[1][5890]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',0)",0,0,0);
	trans[1][5896]	= settr(6203,0,5897,1,0,".(goto)", 0, 2, 0);
	trans[1][5891]	= settr(6198,0,5897,3065,3065,"((_pid==1))", 0, 2, 0); /* m: 5892 -> 5897,0 */
	reached1[5892] = 1;
	trans[1][5892]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',0)",0,0,0);
	trans[1][5893]	= settr(6200,0,5897,3066,3066,"((_pid>1))", 0, 2, 0); /* m: 5894 -> 5897,0 */
	reached1[5894] = 1;
	trans[1][5894]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),0)",0,0,0);
	trans[1][5897]	= settr(6204,0,5898,3067,0,"(((states[0]==STOPPED)||(states[0]==ABORTED)))", 1, 2, 0);
	trans[1][5898]	= settr(6205,0,5909,3068,0,"printf('waiiting ended.\\n')", 0, 2, 0);
	trans[1][5903]	= settr(6210,0,5909,1,0,".(goto)", 0, 2, 0);
	trans[1][5900]	= settr(6207,0,5901,2,0,"else", 0, 2, 0);
	trans[1][5901]	= settr(6208,0,5909,1,0,"(1)", 0, 2, 0);
	trans[1][5905]	= settr(6212,0,5906,2,0,"else", 0, 2, 0);
	trans[1][5906]	= settr(6213,0,5909,1,0,"(1)", 0, 2, 0);
	trans[1][5909]	= settr(6216,0,7662,3069,3069,"executing[0] = 0", 1, 2, 0);
	trans[1][5911]	= settr(6218,0,7658,3070,0,"((commands[0]==PAUSE))", 1, 2, 0);
	T = trans[1][7658] = settr(7965,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7965,0,5912,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7965,0,5914,0,0,"IF", 0, 2, 0);
	trans[1][5912]	= settr(6219,0,5913,3071,0,"((states[0]==PAUSED))", 1, 2, 0);
	trans[1][5913]	= settr(6220,0,7662,3072,0,"((commands[0]!=PAUSED))", 1, 2, 0);
	trans[1][7659]	= settr(7966,0,7662,1,0,".(goto)", 0, 2, 0);
	trans[1][5914]	= settr(6221,0,5915,2,0,"else", 0, 2, 0);
	trans[1][5915]	= settr(6222,0,7656,3073,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==STARTING)))", 1, 2, 0);
	T = trans[1][7656] = settr(7963,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7963,0,5916,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7963,0,7654,0,0,"IF", 0, 2, 0);
	trans[1][5916]	= settr(6223,0,7653,3074,0,"(((states[0]==STARTING)||(states[0]==RUNNING)))", 1, 2, 0);
	T = trans[ 1][7653] = settr(7960,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7960,0,7640,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7640] = settr(7947,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7947,0,7638,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7638] = settr(7945,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7945,0,5917,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7945,0,6490,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7945,0,7063,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7945,0,7636,0,0,"IF", 0, 2, 0);
	trans[1][5917]	= settr(6224,0,6489,3075,0,"((4==RUNNING))", 0, 2, 0);
	T = trans[ 1][6489] = settr(6796,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6796,0,6487,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6487] = settr(6794,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6794,0,5918,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6794,0,5921,0,0,"IF", 0, 2, 0);
	trans[1][5918]	= settr(6225,0,5919,3076,0,"(((6==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][5919]	= settr(6226,0,5920,3077,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][5920]	= settr(6227,0,7651,3078,3078,"supervisor_started = 1", 1, 2, 0);
	trans[1][6488]	= settr(6795,0,7651,1,0,".(goto)", 0, 2, 0);
	trans[1][5921]	= settr(6228,0,6485,2,0,"else", 0, 2, 0);
	T = trans[1][6485] = settr(6792,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6792,0,5922,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6792,0,6259,0,0,"IF", 0, 2, 0);
	trans[1][5922]	= settr(6229,0,6258,3079,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][6258] = settr(6565,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6565,0,6256,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6256] = settr(6563,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6563,0,5923,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6563,0,6089,0,0,"IF", 0, 2, 0);
	trans[1][5923]	= settr(6230,0,6088,3080,0,"(((6==START)||(6==PAUSED)))", 0, 2, 0);
	T = trans[ 1][6088] = settr(6395,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6395,0,6085,0,0,"sub-sequence", 0, 2, 0);
	trans[1][6086]	= settr(6393,0,6085,1,0,".(goto)", 0, 2, 0);
	T = trans[1][6085] = settr(6392,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(6392,0,5924,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(6392,0,6082,0,0,"DO", 0, 2, 0);
	trans[1][5924]	= settr(6231,0,6080,3081,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][6080] = settr(6387,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6387,0,6078,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6078] = settr(6385,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6385,0,5925,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6385,0,5964,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6385,0,6002,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6385,0,6040,0,0,"IF", 0, 2, 0);
	trans[1][5925]	= settr(6232,0,5963,3082,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][5963] = settr(6270,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6270,0,5945,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5945] = settr(6252,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6252,2,5943,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5943] = settr(6250,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6250,2,5926,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6250,2,5929,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6250,2,5932,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6250,2,5935,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6250,2,5938,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6250,2,5941,0,0,"IF", 1, 2, 0);
	trans[1][5926]	= settr(6233,4,5946,3083,3083,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5927 -> 5946,0 */
	reached1[5927] = 1;
	trans[1][5927]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5928]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5944]	= settr(6251,0,5946,3084,3084,".(goto)", 1, 2, 0);
	trans[1][5929]	= settr(6236,4,5946,3085,3085,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5930 -> 5946,0 */
	reached1[5930] = 1;
	trans[1][5930]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5931]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5932]	= settr(6239,4,5946,3086,3086,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5933 -> 5946,0 */
	reached1[5933] = 1;
	trans[1][5933]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5934]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5935]	= settr(6242,4,5946,3087,3087,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5936 -> 5946,0 */
	reached1[5936] = 1;
	trans[1][5936]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5937]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5938]	= settr(6245,4,5946,3088,3088,"((START==ABORT))", 1, 2, 0); /* m: 5939 -> 5946,0 */
	reached1[5939] = 1;
	trans[1][5939]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5940]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5941]	= settr(6248,2,5942,2,0,"else", 1, 2, 0);
	trans[1][5942]	= settr(6249,4,5946,3089,3089,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5944 -> 0,5946 */
	reached1[5944] = 1;
	trans[1][5946]	= settr(6253,0,5961,3090,3090,"(run Thread(j))", 0, 2, 0);
	T = trans[1][5961] = settr(6268,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6268,0,5947,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6268,0,5959,0,0,"IF", 0, 2, 0);
	trans[1][5947]	= settr(6254,0,5958,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][5958] = settr(6265,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6265,0,5954,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5954] = settr(6261,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6261,0,5948,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6261,0,5950,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6261,0,5952,0,0,"IF", 0, 2, 0);
	trans[1][5948]	= settr(6255,0,5956,3091,3091,"((_pid==0))", 0, 2, 0); /* m: 5949 -> 5956,0 */
	reached1[5949] = 1;
	trans[1][5949]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5955]	= settr(6262,0,5956,1,0,".(goto)", 0, 2, 0);
	trans[1][5950]	= settr(6257,0,5956,3092,3092,"((_pid==1))", 0, 2, 0); /* m: 5951 -> 5956,0 */
	reached1[5951] = 1;
	trans[1][5951]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5952]	= settr(6259,0,5956,3093,3093,"((_pid>1))", 0, 2, 0); /* m: 5953 -> 5956,0 */
	reached1[5953] = 1;
	trans[1][5953]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5956]	= settr(6263,0,5957,3094,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5957]	= settr(6264,0,6085,3095,3095,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6081 -> 0,6085 */
	reached1[6081] = 1;
	trans[1][5962]	= settr(6269,0,6081,1,0,".(goto)", 0, 2, 0); /* m: 6081 -> 0,6085 */
	reached1[6081] = 1;
	trans[1][5959]	= settr(6266,0,5960,2,0,"else", 0, 2, 0);
	trans[1][5960]	= settr(6267,0,6085,3096,3096,"(1)", 0, 2, 0); /* m: 6081 -> 6085,0 */
	reached1[6081] = 1;
	trans[1][6079]	= settr(6386,0,6081,1,0,".(goto)", 0, 2, 0); /* m: 6081 -> 0,6085 */
	reached1[6081] = 1;
	trans[1][5964]	= settr(6271,0,6001,3097,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][6001] = settr(6308,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6308,0,5984,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][5984] = settr(6291,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6291,2,5982,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][5982] = settr(6289,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6289,2,5965,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6289,2,5968,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6289,2,5971,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6289,2,5974,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6289,2,5977,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6289,2,5980,0,0,"IF", 1, 2, 0);
	trans[1][5965]	= settr(6272,4,5999,3098,3098,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5966 -> 5999,0 */
	reached1[5966] = 1;
	trans[1][5966]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][5967]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][5983]	= settr(6290,0,5999,3099,3099,".(goto)", 1, 2, 0);
	trans[1][5968]	= settr(6275,4,5999,3100,3100,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 5969 -> 5999,0 */
	reached1[5969] = 1;
	trans[1][5969]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][5970]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][5971]	= settr(6278,4,5999,3101,3101,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5972 -> 5999,0 */
	reached1[5972] = 1;
	trans[1][5972]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][5973]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][5974]	= settr(6281,4,5999,3102,3102,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 5975 -> 5999,0 */
	reached1[5975] = 1;
	trans[1][5975]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][5976]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][5977]	= settr(6284,4,5999,3103,3103,"((PAUSE==ABORT))", 1, 2, 0); /* m: 5978 -> 5999,0 */
	reached1[5978] = 1;
	trans[1][5978]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][5979]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][5980]	= settr(6287,2,5981,2,0,"else", 1, 2, 0);
	trans[1][5981]	= settr(6288,4,5999,3104,3104,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 5983 -> 0,5999 */
	reached1[5983] = 1;
	T = trans[1][5999] = settr(6306,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6306,0,5985,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6306,0,5997,0,0,"IF", 0, 2, 0);
	trans[1][5985]	= settr(6292,0,5996,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][5996] = settr(6303,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6303,0,5992,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][5992] = settr(6299,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6299,0,5986,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6299,0,5988,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6299,0,5990,0,0,"IF", 0, 2, 0);
	trans[1][5986]	= settr(6293,0,5994,3105,3105,"((_pid==0))", 0, 2, 0); /* m: 5987 -> 5994,0 */
	reached1[5987] = 1;
	trans[1][5987]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5993]	= settr(6300,0,5994,1,0,".(goto)", 0, 2, 0);
	trans[1][5988]	= settr(6295,0,5994,3106,3106,"((_pid==1))", 0, 2, 0); /* m: 5989 -> 5994,0 */
	reached1[5989] = 1;
	trans[1][5989]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][5990]	= settr(6297,0,5994,3107,3107,"((_pid>1))", 0, 2, 0); /* m: 5991 -> 5994,0 */
	reached1[5991] = 1;
	trans[1][5991]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][5994]	= settr(6301,0,5995,3108,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][5995]	= settr(6302,0,6085,3109,3109,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6081 -> 0,6085 */
	reached1[6081] = 1;
	trans[1][6000]	= settr(6307,0,6081,1,0,".(goto)", 0, 2, 0); /* m: 6081 -> 0,6085 */
	reached1[6081] = 1;
	trans[1][5997]	= settr(6304,0,5998,2,0,"else", 0, 2, 0);
	trans[1][5998]	= settr(6305,0,6085,3110,3110,"(1)", 0, 2, 0); /* m: 6081 -> 6085,0 */
	reached1[6081] = 1;
	trans[1][6002]	= settr(6309,0,6039,3111,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][6039] = settr(6346,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6346,0,6022,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6022] = settr(6329,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6329,2,6020,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6020] = settr(6327,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6327,2,6003,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6327,2,6006,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6327,2,6009,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6327,2,6012,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6327,2,6015,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6327,2,6018,0,0,"IF", 1, 2, 0);
	trans[1][6003]	= settr(6310,4,6037,3112,3112,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6004 -> 6037,0 */
	reached1[6004] = 1;
	trans[1][6004]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6005]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6021]	= settr(6328,0,6037,3113,3113,".(goto)", 1, 2, 0);
	trans[1][6006]	= settr(6313,4,6037,3114,3114,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6007 -> 6037,0 */
	reached1[6007] = 1;
	trans[1][6007]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6008]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6009]	= settr(6316,4,6037,3115,3115,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6010 -> 6037,0 */
	reached1[6010] = 1;
	trans[1][6010]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6011]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6012]	= settr(6319,4,6037,3116,3116,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6013 -> 6037,0 */
	reached1[6013] = 1;
	trans[1][6013]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6014]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6015]	= settr(6322,4,6037,3117,3117,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 6016 -> 6037,0 */
	reached1[6016] = 1;
	trans[1][6016]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6017]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6018]	= settr(6325,2,6019,2,0,"else", 1, 2, 0);
	trans[1][6019]	= settr(6326,4,6037,3118,3118,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6021 -> 0,6037 */
	reached1[6021] = 1;
	T = trans[1][6037] = settr(6344,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6344,0,6023,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6344,0,6035,0,0,"IF", 0, 2, 0);
	trans[1][6023]	= settr(6330,0,6034,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6034] = settr(6341,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6341,0,6030,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6030] = settr(6337,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6337,0,6024,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6337,0,6026,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6337,0,6028,0,0,"IF", 0, 2, 0);
	trans[1][6024]	= settr(6331,0,6032,3119,3119,"((_pid==0))", 0, 2, 0); /* m: 6025 -> 6032,0 */
	reached1[6025] = 1;
	trans[1][6025]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6031]	= settr(6338,0,6032,1,0,".(goto)", 0, 2, 0);
	trans[1][6026]	= settr(6333,0,6032,3120,3120,"((_pid==1))", 0, 2, 0); /* m: 6027 -> 6032,0 */
	reached1[6027] = 1;
	trans[1][6027]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6028]	= settr(6335,0,6032,3121,3121,"((_pid>1))", 0, 2, 0); /* m: 6029 -> 6032,0 */
	reached1[6029] = 1;
	trans[1][6029]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6032]	= settr(6339,0,6033,3122,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6033]	= settr(6340,0,6085,3123,3123,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6081 -> 0,6085 */
	reached1[6081] = 1;
	trans[1][6038]	= settr(6345,0,6081,1,0,".(goto)", 0, 2, 0); /* m: 6081 -> 0,6085 */
	reached1[6081] = 1;
	trans[1][6035]	= settr(6342,0,6036,2,0,"else", 0, 2, 0);
	trans[1][6036]	= settr(6343,0,6085,3124,3124,"(1)", 0, 2, 0); /* m: 6081 -> 6085,0 */
	reached1[6081] = 1;
	trans[1][6040]	= settr(6347,0,6077,3125,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][6077] = settr(6384,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6384,0,6060,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6060] = settr(6367,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6367,2,6058,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6058] = settr(6365,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6365,2,6041,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6365,2,6044,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6365,2,6047,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6365,2,6050,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6365,2,6053,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6365,2,6056,0,0,"IF", 1, 2, 0);
	trans[1][6041]	= settr(6348,4,6075,3126,3126,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6042 -> 6075,0 */
	reached1[6042] = 1;
	trans[1][6042]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6043]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6059]	= settr(6366,0,6075,3127,3127,".(goto)", 1, 2, 0);
	trans[1][6044]	= settr(6351,4,6075,3128,3128,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6045 -> 6075,0 */
	reached1[6045] = 1;
	trans[1][6045]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6046]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6047]	= settr(6354,4,6075,3129,3129,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6048 -> 6075,0 */
	reached1[6048] = 1;
	trans[1][6048]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6049]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6050]	= settr(6357,4,6075,3130,3130,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6051 -> 6075,0 */
	reached1[6051] = 1;
	trans[1][6051]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6052]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6053]	= settr(6360,4,6075,3131,3131,"((STOP==ABORT))", 1, 2, 0); /* m: 6054 -> 6075,0 */
	reached1[6054] = 1;
	trans[1][6054]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6055]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6056]	= settr(6363,2,6057,2,0,"else", 1, 2, 0);
	trans[1][6057]	= settr(6364,4,6075,3132,3132,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6059 -> 0,6075 */
	reached1[6059] = 1;
	T = trans[1][6075] = settr(6382,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6382,0,6061,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6382,0,6073,0,0,"IF", 0, 2, 0);
	trans[1][6061]	= settr(6368,0,6072,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6072] = settr(6379,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6379,0,6068,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6068] = settr(6375,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6375,0,6062,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6375,0,6064,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6375,0,6066,0,0,"IF", 0, 2, 0);
	trans[1][6062]	= settr(6369,0,6070,3133,3133,"((_pid==0))", 0, 2, 0); /* m: 6063 -> 6070,0 */
	reached1[6063] = 1;
	trans[1][6063]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6069]	= settr(6376,0,6070,1,0,".(goto)", 0, 2, 0);
	trans[1][6064]	= settr(6371,0,6070,3134,3134,"((_pid==1))", 0, 2, 0); /* m: 6065 -> 6070,0 */
	reached1[6065] = 1;
	trans[1][6065]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6066]	= settr(6373,0,6070,3135,3135,"((_pid>1))", 0, 2, 0); /* m: 6067 -> 6070,0 */
	reached1[6067] = 1;
	trans[1][6067]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6070]	= settr(6377,0,6071,3136,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6071]	= settr(6378,0,6085,3137,3137,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6081 -> 0,6085 */
	reached1[6081] = 1;
	trans[1][6076]	= settr(6383,0,6081,1,0,".(goto)", 0, 2, 0); /* m: 6081 -> 0,6085 */
	reached1[6081] = 1;
	trans[1][6073]	= settr(6380,0,6074,2,0,"else", 0, 2, 0);
	trans[1][6074]	= settr(6381,0,6085,3138,3138,"(1)", 0, 2, 0); /* m: 6081 -> 6085,0 */
	reached1[6081] = 1;
	trans[1][6081]	= settr(6388,0,6085,3139,3139,"j = (j+1)", 0, 2, 0);
	trans[1][6082]	= settr(6389,0,6083,2,0,"else", 0, 2, 0);
	trans[1][6083]	= settr(6390,0,7651,3140,3140,"j = 1", 0, 2, 0);
	trans[1][6084]	= settr(6391,0,7651,1,0,"goto :b43", 0, 2, 0);
	trans[1][6087]	= settr(6394,0,7651,1,0,"break", 0, 2, 0);
	trans[1][6257]	= settr(6564,0,7651,1,0,".(goto)", 0, 2, 0);
	trans[1][6089]	= settr(6396,0,6255,2,0,"else", 0, 2, 0);
	T = trans[ 1][6255] = settr(6562,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6562,0,6090,0,0,"sub-sequence", 0, 2, 0);
	trans[1][6090]	= settr(6397,0,6252,3141,3141,"j = (3-1)", 0, 2, 0);
	trans[1][6253]	= settr(6560,0,6252,1,0,".(goto)", 0, 2, 0);
	T = trans[1][6252] = settr(6559,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(6559,0,6091,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(6559,0,6249,0,0,"DO", 0, 2, 0);
	trans[1][6091]	= settr(6398,0,6247,3142,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][6247] = settr(6554,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6554,0,6245,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6245] = settr(6552,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6552,0,6092,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6552,0,6131,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6552,0,6169,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6552,0,6207,0,0,"IF", 0, 2, 0);
	trans[1][6092]	= settr(6399,0,6130,3143,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][6130] = settr(6437,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6437,0,6112,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6112] = settr(6419,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6419,2,6110,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6110] = settr(6417,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6417,2,6093,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6417,2,6096,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6417,2,6099,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6417,2,6102,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6417,2,6105,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6417,2,6108,0,0,"IF", 1, 2, 0);
	trans[1][6093]	= settr(6400,4,6113,3144,3144,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6094 -> 6113,0 */
	reached1[6094] = 1;
	trans[1][6094]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6095]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6111]	= settr(6418,0,6113,3145,3145,".(goto)", 1, 2, 0);
	trans[1][6096]	= settr(6403,4,6113,3146,3146,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6097 -> 6113,0 */
	reached1[6097] = 1;
	trans[1][6097]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6098]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6099]	= settr(6406,4,6113,3147,3147,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6100 -> 6113,0 */
	reached1[6100] = 1;
	trans[1][6100]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6101]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6102]	= settr(6409,4,6113,3148,3148,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6103 -> 6113,0 */
	reached1[6103] = 1;
	trans[1][6103]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6104]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6105]	= settr(6412,4,6113,3149,3149,"((START==ABORT))", 1, 2, 0); /* m: 6106 -> 6113,0 */
	reached1[6106] = 1;
	trans[1][6106]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6107]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6108]	= settr(6415,2,6109,2,0,"else", 1, 2, 0);
	trans[1][6109]	= settr(6416,4,6113,3150,3150,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6111 -> 0,6113 */
	reached1[6111] = 1;
	trans[1][6113]	= settr(6420,0,6128,3151,3151,"(run Thread(j))", 0, 2, 0);
	T = trans[1][6128] = settr(6435,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6435,0,6114,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6435,0,6126,0,0,"IF", 0, 2, 0);
	trans[1][6114]	= settr(6421,0,6125,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6125] = settr(6432,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6432,0,6121,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6121] = settr(6428,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6428,0,6115,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6428,0,6117,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6428,0,6119,0,0,"IF", 0, 2, 0);
	trans[1][6115]	= settr(6422,0,6123,3152,3152,"((_pid==0))", 0, 2, 0); /* m: 6116 -> 6123,0 */
	reached1[6116] = 1;
	trans[1][6116]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6122]	= settr(6429,0,6123,1,0,".(goto)", 0, 2, 0);
	trans[1][6117]	= settr(6424,0,6123,3153,3153,"((_pid==1))", 0, 2, 0); /* m: 6118 -> 6123,0 */
	reached1[6118] = 1;
	trans[1][6118]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6119]	= settr(6426,0,6123,3154,3154,"((_pid>1))", 0, 2, 0); /* m: 6120 -> 6123,0 */
	reached1[6120] = 1;
	trans[1][6120]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6123]	= settr(6430,0,6124,3155,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6124]	= settr(6431,0,6252,3156,3156,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6248 -> 0,6252 */
	reached1[6248] = 1;
	trans[1][6129]	= settr(6436,0,6248,1,0,".(goto)", 0, 2, 0); /* m: 6248 -> 0,6252 */
	reached1[6248] = 1;
	trans[1][6126]	= settr(6433,0,6127,2,0,"else", 0, 2, 0);
	trans[1][6127]	= settr(6434,0,6252,3157,3157,"(1)", 0, 2, 0); /* m: 6248 -> 6252,0 */
	reached1[6248] = 1;
	trans[1][6246]	= settr(6553,0,6248,1,0,".(goto)", 0, 2, 0); /* m: 6248 -> 0,6252 */
	reached1[6248] = 1;
	trans[1][6131]	= settr(6438,0,6168,3158,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][6168] = settr(6475,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6475,0,6151,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6151] = settr(6458,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6458,2,6149,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6149] = settr(6456,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6456,2,6132,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6456,2,6135,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6456,2,6138,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6456,2,6141,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6456,2,6144,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6456,2,6147,0,0,"IF", 1, 2, 0);
	trans[1][6132]	= settr(6439,4,6166,3159,3159,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6133 -> 6166,0 */
	reached1[6133] = 1;
	trans[1][6133]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6134]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6150]	= settr(6457,0,6166,3160,3160,".(goto)", 1, 2, 0);
	trans[1][6135]	= settr(6442,4,6166,3161,3161,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6136 -> 6166,0 */
	reached1[6136] = 1;
	trans[1][6136]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6137]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6138]	= settr(6445,4,6166,3162,3162,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6139 -> 6166,0 */
	reached1[6139] = 1;
	trans[1][6139]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6140]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6141]	= settr(6448,4,6166,3163,3163,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6142 -> 6166,0 */
	reached1[6142] = 1;
	trans[1][6142]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6143]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6144]	= settr(6451,4,6166,3164,3164,"((PAUSE==ABORT))", 1, 2, 0); /* m: 6145 -> 6166,0 */
	reached1[6145] = 1;
	trans[1][6145]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6146]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6147]	= settr(6454,2,6148,2,0,"else", 1, 2, 0);
	trans[1][6148]	= settr(6455,4,6166,3165,3165,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6150 -> 0,6166 */
	reached1[6150] = 1;
	T = trans[1][6166] = settr(6473,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6473,0,6152,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6473,0,6164,0,0,"IF", 0, 2, 0);
	trans[1][6152]	= settr(6459,0,6163,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6163] = settr(6470,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6470,0,6159,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6159] = settr(6466,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6466,0,6153,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6466,0,6155,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6466,0,6157,0,0,"IF", 0, 2, 0);
	trans[1][6153]	= settr(6460,0,6161,3166,3166,"((_pid==0))", 0, 2, 0); /* m: 6154 -> 6161,0 */
	reached1[6154] = 1;
	trans[1][6154]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6160]	= settr(6467,0,6161,1,0,".(goto)", 0, 2, 0);
	trans[1][6155]	= settr(6462,0,6161,3167,3167,"((_pid==1))", 0, 2, 0); /* m: 6156 -> 6161,0 */
	reached1[6156] = 1;
	trans[1][6156]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6157]	= settr(6464,0,6161,3168,3168,"((_pid>1))", 0, 2, 0); /* m: 6158 -> 6161,0 */
	reached1[6158] = 1;
	trans[1][6158]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6161]	= settr(6468,0,6162,3169,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6162]	= settr(6469,0,6252,3170,3170,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6248 -> 0,6252 */
	reached1[6248] = 1;
	trans[1][6167]	= settr(6474,0,6248,1,0,".(goto)", 0, 2, 0); /* m: 6248 -> 0,6252 */
	reached1[6248] = 1;
	trans[1][6164]	= settr(6471,0,6165,2,0,"else", 0, 2, 0);
	trans[1][6165]	= settr(6472,0,6252,3171,3171,"(1)", 0, 2, 0); /* m: 6248 -> 6252,0 */
	reached1[6248] = 1;
	trans[1][6169]	= settr(6476,0,6206,3172,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][6206] = settr(6513,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6513,0,6189,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6189] = settr(6496,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6496,2,6187,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6187] = settr(6494,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6494,2,6170,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6494,2,6173,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6494,2,6176,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6494,2,6179,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6494,2,6182,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6494,2,6185,0,0,"IF", 1, 2, 0);
	trans[1][6170]	= settr(6477,4,6204,3173,3173,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6171 -> 6204,0 */
	reached1[6171] = 1;
	trans[1][6171]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6172]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6188]	= settr(6495,0,6204,3174,3174,".(goto)", 1, 2, 0);
	trans[1][6173]	= settr(6480,4,6204,3175,3175,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6174 -> 6204,0 */
	reached1[6174] = 1;
	trans[1][6174]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6175]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6176]	= settr(6483,4,6204,3176,3176,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6177 -> 6204,0 */
	reached1[6177] = 1;
	trans[1][6177]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6178]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6179]	= settr(6486,4,6204,3177,3177,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6180 -> 6204,0 */
	reached1[6180] = 1;
	trans[1][6180]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6181]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6182]	= settr(6489,4,6204,3178,3178,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 6183 -> 6204,0 */
	reached1[6183] = 1;
	trans[1][6183]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6184]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6185]	= settr(6492,2,6186,2,0,"else", 1, 2, 0);
	trans[1][6186]	= settr(6493,4,6204,3179,3179,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6188 -> 0,6204 */
	reached1[6188] = 1;
	T = trans[1][6204] = settr(6511,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6511,0,6190,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6511,0,6202,0,0,"IF", 0, 2, 0);
	trans[1][6190]	= settr(6497,0,6201,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6201] = settr(6508,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6508,0,6197,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6197] = settr(6504,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6504,0,6191,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6504,0,6193,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6504,0,6195,0,0,"IF", 0, 2, 0);
	trans[1][6191]	= settr(6498,0,6199,3180,3180,"((_pid==0))", 0, 2, 0); /* m: 6192 -> 6199,0 */
	reached1[6192] = 1;
	trans[1][6192]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6198]	= settr(6505,0,6199,1,0,".(goto)", 0, 2, 0);
	trans[1][6193]	= settr(6500,0,6199,3181,3181,"((_pid==1))", 0, 2, 0); /* m: 6194 -> 6199,0 */
	reached1[6194] = 1;
	trans[1][6194]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6195]	= settr(6502,0,6199,3182,3182,"((_pid>1))", 0, 2, 0); /* m: 6196 -> 6199,0 */
	reached1[6196] = 1;
	trans[1][6196]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6199]	= settr(6506,0,6200,3183,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6200]	= settr(6507,0,6252,3184,3184,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6248 -> 0,6252 */
	reached1[6248] = 1;
	trans[1][6205]	= settr(6512,0,6248,1,0,".(goto)", 0, 2, 0); /* m: 6248 -> 0,6252 */
	reached1[6248] = 1;
	trans[1][6202]	= settr(6509,0,6203,2,0,"else", 0, 2, 0);
	trans[1][6203]	= settr(6510,0,6252,3185,3185,"(1)", 0, 2, 0); /* m: 6248 -> 6252,0 */
	reached1[6248] = 1;
	trans[1][6207]	= settr(6514,0,6244,3186,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][6244] = settr(6551,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6551,0,6227,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6227] = settr(6534,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6534,2,6225,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6225] = settr(6532,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6532,2,6208,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6532,2,6211,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6532,2,6214,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6532,2,6217,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6532,2,6220,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6532,2,6223,0,0,"IF", 1, 2, 0);
	trans[1][6208]	= settr(6515,4,6242,3187,3187,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6209 -> 6242,0 */
	reached1[6209] = 1;
	trans[1][6209]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6210]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6226]	= settr(6533,0,6242,3188,3188,".(goto)", 1, 2, 0);
	trans[1][6211]	= settr(6518,4,6242,3189,3189,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6212 -> 6242,0 */
	reached1[6212] = 1;
	trans[1][6212]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6213]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6214]	= settr(6521,4,6242,3190,3190,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6215 -> 6242,0 */
	reached1[6215] = 1;
	trans[1][6215]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6216]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6217]	= settr(6524,4,6242,3191,3191,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6218 -> 6242,0 */
	reached1[6218] = 1;
	trans[1][6218]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6219]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6220]	= settr(6527,4,6242,3192,3192,"((STOP==ABORT))", 1, 2, 0); /* m: 6221 -> 6242,0 */
	reached1[6221] = 1;
	trans[1][6221]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6222]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6223]	= settr(6530,2,6224,2,0,"else", 1, 2, 0);
	trans[1][6224]	= settr(6531,4,6242,3193,3193,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6226 -> 0,6242 */
	reached1[6226] = 1;
	T = trans[1][6242] = settr(6549,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6549,0,6228,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6549,0,6240,0,0,"IF", 0, 2, 0);
	trans[1][6228]	= settr(6535,0,6239,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6239] = settr(6546,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6546,0,6235,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6235] = settr(6542,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6542,0,6229,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6542,0,6231,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6542,0,6233,0,0,"IF", 0, 2, 0);
	trans[1][6229]	= settr(6536,0,6237,3194,3194,"((_pid==0))", 0, 2, 0); /* m: 6230 -> 6237,0 */
	reached1[6230] = 1;
	trans[1][6230]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6236]	= settr(6543,0,6237,1,0,".(goto)", 0, 2, 0);
	trans[1][6231]	= settr(6538,0,6237,3195,3195,"((_pid==1))", 0, 2, 0); /* m: 6232 -> 6237,0 */
	reached1[6232] = 1;
	trans[1][6232]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6233]	= settr(6540,0,6237,3196,3196,"((_pid>1))", 0, 2, 0); /* m: 6234 -> 6237,0 */
	reached1[6234] = 1;
	trans[1][6234]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6237]	= settr(6544,0,6238,3197,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6238]	= settr(6545,0,6252,3198,3198,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6248 -> 0,6252 */
	reached1[6248] = 1;
	trans[1][6243]	= settr(6550,0,6248,1,0,".(goto)", 0, 2, 0); /* m: 6248 -> 0,6252 */
	reached1[6248] = 1;
	trans[1][6240]	= settr(6547,0,6241,2,0,"else", 0, 2, 0);
	trans[1][6241]	= settr(6548,0,6252,3199,3199,"(1)", 0, 2, 0); /* m: 6248 -> 6252,0 */
	reached1[6248] = 1;
	trans[1][6248]	= settr(6555,0,6252,3200,3200,"j = (j-1)", 0, 2, 0);
	trans[1][6249]	= settr(6556,0,6250,2,0,"else", 0, 2, 0);
	trans[1][6250]	= settr(6557,0,7651,3201,3201,"j = 1", 0, 2, 0);
	trans[1][6251]	= settr(6558,0,7651,1,0,"goto :b44", 0, 2, 0);
	trans[1][6254]	= settr(6561,0,7651,1,0,"break", 0, 2, 0);
	trans[1][6486]	= settr(6793,0,7651,1,0,".(goto)", 0, 2, 0);
	trans[1][6259]	= settr(6566,0,6484,2,0,"else", 0, 2, 0);
	T = trans[ 1][6484] = settr(6791,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6791,0,6260,0,0,"sub-sequence", 0, 2, 0);
	trans[1][6260]	= settr(6567,0,6425,3202,0,"printf('Supervisor propagating command %e...\\n',6)", 0, 2, 0);
	T = trans[ 1][6425] = settr(6732,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6732,0,6422,0,0,"sub-sequence", 0, 2, 0);
	trans[1][6423]	= settr(6730,0,6422,1,0,".(goto)", 0, 2, 0);
	T = trans[1][6422] = settr(6729,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(6729,0,6261,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(6729,0,6419,0,0,"DO", 0, 2, 0);
	trans[1][6261]	= settr(6568,0,6417,3203,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][6417] = settr(6724,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6724,0,6415,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6415] = settr(6722,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6722,0,6262,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6722,0,6301,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6722,0,6339,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6722,0,6377,0,0,"IF", 0, 2, 0);
	trans[1][6262]	= settr(6569,0,6300,3204,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][6300] = settr(6607,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6607,0,6282,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6282] = settr(6589,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6589,2,6280,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6280] = settr(6587,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6587,2,6263,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6587,2,6266,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6587,2,6269,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6587,2,6272,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6587,2,6275,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6587,2,6278,0,0,"IF", 1, 2, 0);
	trans[1][6263]	= settr(6570,4,6283,3205,3205,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6264 -> 6283,0 */
	reached1[6264] = 1;
	trans[1][6264]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6265]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6281]	= settr(6588,0,6283,3206,3206,".(goto)", 1, 2, 0);
	trans[1][6266]	= settr(6573,4,6283,3207,3207,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6267 -> 6283,0 */
	reached1[6267] = 1;
	trans[1][6267]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6268]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6269]	= settr(6576,4,6283,3208,3208,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6270 -> 6283,0 */
	reached1[6270] = 1;
	trans[1][6270]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6271]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6272]	= settr(6579,4,6283,3209,3209,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6273 -> 6283,0 */
	reached1[6273] = 1;
	trans[1][6273]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6274]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6275]	= settr(6582,4,6283,3210,3210,"((START==ABORT))", 1, 2, 0); /* m: 6276 -> 6283,0 */
	reached1[6276] = 1;
	trans[1][6276]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6277]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6278]	= settr(6585,2,6279,2,0,"else", 1, 2, 0);
	trans[1][6279]	= settr(6586,4,6283,3211,3211,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6281 -> 0,6283 */
	reached1[6281] = 1;
	trans[1][6283]	= settr(6590,0,6298,3212,3212,"(run Thread(j))", 0, 2, 0);
	T = trans[1][6298] = settr(6605,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(6605,0,6284,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(6605,0,6296,0,0,"IF", 0, 2, 0);
	trans[1][6284]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][6295] = settr(6602,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6602,0,6291,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6291] = settr(6598,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6598,0,6285,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6598,0,6287,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6598,0,6289,0,0,"IF", 0, 2, 0);
	trans[1][6285]	= settr(6592,0,6293,3213,3213,"((_pid==0))", 0, 2, 0); /* m: 6286 -> 6293,0 */
	reached1[6286] = 1;
	trans[1][6286]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6292]	= settr(6599,0,6293,1,0,".(goto)", 0, 2, 0);
	trans[1][6287]	= settr(6594,0,6293,3214,3214,"((_pid==1))", 0, 2, 0); /* m: 6288 -> 6293,0 */
	reached1[6288] = 1;
	trans[1][6288]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6289]	= settr(6596,0,6293,3215,3215,"((_pid>1))", 0, 2, 0); /* m: 6290 -> 6293,0 */
	reached1[6290] = 1;
	trans[1][6290]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6293]	= settr(6600,0,6294,3216,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6294]	= settr(6601,0,6422,3217,3217,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6418 -> 0,6422 */
	reached1[6418] = 1;
	trans[1][6299]	= settr(6606,0,6418,1,0,".(goto)", 0, 2, 0); /* m: 6418 -> 0,6422 */
	reached1[6418] = 1;
	trans[1][6296]	= settr(6603,0,6297,2,0,"else", 0, 2, 0);
	trans[1][6297]	= settr(6604,0,6422,3218,3218,"(1)", 0, 2, 0); /* m: 6418 -> 6422,0 */
	reached1[6418] = 1;
	trans[1][6416]	= settr(6723,0,6418,1,0,".(goto)", 0, 2, 0); /* m: 6418 -> 0,6422 */
	reached1[6418] = 1;
	trans[1][6301]	= settr(6608,0,6338,3219,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][6338] = settr(6645,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6645,0,6321,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6321] = settr(6628,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6628,2,6319,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6319] = settr(6626,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6626,2,6302,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6626,2,6305,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6626,2,6308,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6626,2,6311,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6626,2,6314,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6626,2,6317,0,0,"IF", 1, 2, 0);
	trans[1][6302]	= settr(6609,4,6336,3220,3220,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6303 -> 6336,0 */
	reached1[6303] = 1;
	trans[1][6303]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6304]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6320]	= settr(6627,0,6336,3221,3221,".(goto)", 1, 2, 0);
	trans[1][6305]	= settr(6612,4,6336,3222,3222,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6306 -> 6336,0 */
	reached1[6306] = 1;
	trans[1][6306]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6307]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6308]	= settr(6615,4,6336,3223,3223,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6309 -> 6336,0 */
	reached1[6309] = 1;
	trans[1][6309]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6310]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6311]	= settr(6618,4,6336,3224,3224,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6312 -> 6336,0 */
	reached1[6312] = 1;
	trans[1][6312]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6313]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6314]	= settr(6621,4,6336,3225,3225,"((PAUSE==ABORT))", 1, 2, 0); /* m: 6315 -> 6336,0 */
	reached1[6315] = 1;
	trans[1][6315]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6316]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6317]	= settr(6624,2,6318,2,0,"else", 1, 2, 0);
	trans[1][6318]	= settr(6625,4,6336,3226,3226,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6320 -> 0,6336 */
	reached1[6320] = 1;
	T = trans[1][6336] = settr(6643,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(6643,0,6322,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(6643,0,6334,0,0,"IF", 0, 2, 0);
	trans[1][6322]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][6333] = settr(6640,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6640,0,6329,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6329] = settr(6636,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6636,0,6323,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6636,0,6325,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6636,0,6327,0,0,"IF", 0, 2, 0);
	trans[1][6323]	= settr(6630,0,6331,3227,3227,"((_pid==0))", 0, 2, 0); /* m: 6324 -> 6331,0 */
	reached1[6324] = 1;
	trans[1][6324]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6330]	= settr(6637,0,6331,1,0,".(goto)", 0, 2, 0);
	trans[1][6325]	= settr(6632,0,6331,3228,3228,"((_pid==1))", 0, 2, 0); /* m: 6326 -> 6331,0 */
	reached1[6326] = 1;
	trans[1][6326]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6327]	= settr(6634,0,6331,3229,3229,"((_pid>1))", 0, 2, 0); /* m: 6328 -> 6331,0 */
	reached1[6328] = 1;
	trans[1][6328]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6331]	= settr(6638,0,6332,3230,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6332]	= settr(6639,0,6422,3231,3231,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6418 -> 0,6422 */
	reached1[6418] = 1;
	trans[1][6337]	= settr(6644,0,6418,1,0,".(goto)", 0, 2, 0); /* m: 6418 -> 0,6422 */
	reached1[6418] = 1;
	trans[1][6334]	= settr(6641,0,6335,2,0,"else", 0, 2, 0);
	trans[1][6335]	= settr(6642,0,6422,3232,3232,"(1)", 0, 2, 0); /* m: 6418 -> 6422,0 */
	reached1[6418] = 1;
	trans[1][6339]	= settr(6646,0,6376,3233,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][6376] = settr(6683,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6683,0,6359,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6359] = settr(6666,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6666,2,6357,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6357] = settr(6664,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6664,2,6340,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6664,2,6343,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6664,2,6346,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6664,2,6349,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6664,2,6352,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6664,2,6355,0,0,"IF", 1, 2, 0);
	trans[1][6340]	= settr(6647,4,6374,3234,3234,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6341 -> 6374,0 */
	reached1[6341] = 1;
	trans[1][6341]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6342]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6358]	= settr(6665,0,6374,3235,3235,".(goto)", 1, 2, 0);
	trans[1][6343]	= settr(6650,4,6374,3236,3236,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6344 -> 6374,0 */
	reached1[6344] = 1;
	trans[1][6344]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6345]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6346]	= settr(6653,4,6374,3237,3237,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6347 -> 6374,0 */
	reached1[6347] = 1;
	trans[1][6347]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6348]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6349]	= settr(6656,4,6374,3238,3238,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6350 -> 6374,0 */
	reached1[6350] = 1;
	trans[1][6350]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6351]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6352]	= settr(6659,4,6374,3239,3239,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 6353 -> 6374,0 */
	reached1[6353] = 1;
	trans[1][6353]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6354]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6355]	= settr(6662,2,6356,2,0,"else", 1, 2, 0);
	trans[1][6356]	= settr(6663,4,6374,3240,3240,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6358 -> 0,6374 */
	reached1[6358] = 1;
	T = trans[1][6374] = settr(6681,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(6681,0,6360,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(6681,0,6372,0,0,"IF", 0, 2, 0);
	trans[1][6360]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][6371] = settr(6678,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6678,0,6367,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6367] = settr(6674,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6674,0,6361,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6674,0,6363,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6674,0,6365,0,0,"IF", 0, 2, 0);
	trans[1][6361]	= settr(6668,0,6369,3241,3241,"((_pid==0))", 0, 2, 0); /* m: 6362 -> 6369,0 */
	reached1[6362] = 1;
	trans[1][6362]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6368]	= settr(6675,0,6369,1,0,".(goto)", 0, 2, 0);
	trans[1][6363]	= settr(6670,0,6369,3242,3242,"((_pid==1))", 0, 2, 0); /* m: 6364 -> 6369,0 */
	reached1[6364] = 1;
	trans[1][6364]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6365]	= settr(6672,0,6369,3243,3243,"((_pid>1))", 0, 2, 0); /* m: 6366 -> 6369,0 */
	reached1[6366] = 1;
	trans[1][6366]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6369]	= settr(6676,0,6370,3244,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6370]	= settr(6677,0,6422,3245,3245,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6418 -> 0,6422 */
	reached1[6418] = 1;
	trans[1][6375]	= settr(6682,0,6418,1,0,".(goto)", 0, 2, 0); /* m: 6418 -> 0,6422 */
	reached1[6418] = 1;
	trans[1][6372]	= settr(6679,0,6373,2,0,"else", 0, 2, 0);
	trans[1][6373]	= settr(6680,0,6422,3246,3246,"(1)", 0, 2, 0); /* m: 6418 -> 6422,0 */
	reached1[6418] = 1;
	trans[1][6377]	= settr(6684,0,6414,3247,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][6414] = settr(6721,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6721,0,6397,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6397] = settr(6704,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6704,2,6395,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6395] = settr(6702,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6702,2,6378,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6702,2,6381,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6702,2,6384,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6702,2,6387,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6702,2,6390,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6702,2,6393,0,0,"IF", 1, 2, 0);
	trans[1][6378]	= settr(6685,4,6412,3248,3248,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6379 -> 6412,0 */
	reached1[6379] = 1;
	trans[1][6379]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6380]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6396]	= settr(6703,0,6412,3249,3249,".(goto)", 1, 2, 0);
	trans[1][6381]	= settr(6688,4,6412,3250,3250,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6382 -> 6412,0 */
	reached1[6382] = 1;
	trans[1][6382]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6383]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6384]	= settr(6691,4,6412,3251,3251,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6385 -> 6412,0 */
	reached1[6385] = 1;
	trans[1][6385]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6386]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6387]	= settr(6694,4,6412,3252,3252,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6388 -> 6412,0 */
	reached1[6388] = 1;
	trans[1][6388]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6389]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6390]	= settr(6697,4,6412,3253,3253,"((STOP==ABORT))", 1, 2, 0); /* m: 6391 -> 6412,0 */
	reached1[6391] = 1;
	trans[1][6391]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6392]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6393]	= settr(6700,2,6394,2,0,"else", 1, 2, 0);
	trans[1][6394]	= settr(6701,4,6412,3254,3254,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6396 -> 0,6412 */
	reached1[6396] = 1;
	T = trans[1][6412] = settr(6719,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(6719,0,6398,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(6719,0,6410,0,0,"IF", 0, 2, 0);
	trans[1][6398]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][6409] = settr(6716,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6716,0,6405,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6405] = settr(6712,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6712,0,6399,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6712,0,6401,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6712,0,6403,0,0,"IF", 0, 2, 0);
	trans[1][6399]	= settr(6706,0,6407,3255,3255,"((_pid==0))", 0, 2, 0); /* m: 6400 -> 6407,0 */
	reached1[6400] = 1;
	trans[1][6400]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6406]	= settr(6713,0,6407,1,0,".(goto)", 0, 2, 0);
	trans[1][6401]	= settr(6708,0,6407,3256,3256,"((_pid==1))", 0, 2, 0); /* m: 6402 -> 6407,0 */
	reached1[6402] = 1;
	trans[1][6402]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6403]	= settr(6710,0,6407,3257,3257,"((_pid>1))", 0, 2, 0); /* m: 6404 -> 6407,0 */
	reached1[6404] = 1;
	trans[1][6404]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6407]	= settr(6714,0,6408,3258,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6408]	= settr(6715,0,6422,3259,3259,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6418 -> 0,6422 */
	reached1[6418] = 1;
	trans[1][6413]	= settr(6720,0,6418,1,0,".(goto)", 0, 2, 0); /* m: 6418 -> 0,6422 */
	reached1[6418] = 1;
	trans[1][6410]	= settr(6717,0,6411,2,0,"else", 0, 2, 0);
	trans[1][6411]	= settr(6718,0,6422,3260,3260,"(1)", 0, 2, 0); /* m: 6418 -> 6422,0 */
	reached1[6418] = 1;
	trans[1][6418]	= settr(6725,0,6422,3261,3261,"j = (j+1)", 0, 2, 0);
	trans[1][6419]	= settr(6726,0,6420,2,0,"else", 0, 2, 0);
	trans[1][6420]	= settr(6727,0,6481,3262,3262,"j = 1", 0, 2, 0);
	trans[1][6421]	= settr(6728,0,6481,1,0,"goto :b45", 0, 2, 0);
	trans[1][6424]	= settr(6731,0,6481,1,0,"break", 0, 2, 0);
	trans[1][6482]	= settr(6789,0,6481,1,0,".(goto)", 0, 2, 0);
	T = trans[1][6481] = settr(6788,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(6788,0,6426,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(6788,0,6478,0,0,"DO", 0, 2, 0);
	trans[1][6426]	= settr(6733,0,6475,3263,0,"((j<3))", 0, 2, 0);
	T = trans[1][6475] = settr(6782,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6782,0,6427,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6782,0,6439,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6782,0,6451,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6782,0,6463,0,0,"IF", 0, 2, 0);
	trans[1][6427]	= settr(6734,0,6438,3264,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][6438] = settr(6745,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6745,0,6434,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6434] = settr(6741,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6741,0,6428,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6741,0,6430,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6741,0,6432,0,0,"IF", 0, 2, 0);
	trans[1][6428]	= settr(6735,0,6436,3265,3265,"((_pid==0))", 0, 2, 0); /* m: 6429 -> 6436,0 */
	reached1[6429] = 1;
	trans[1][6429]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6435]	= settr(6742,0,6436,1,0,".(goto)", 0, 2, 0);
	trans[1][6430]	= settr(6737,0,6436,3266,3266,"((_pid==1))", 0, 2, 0); /* m: 6431 -> 6436,0 */
	reached1[6431] = 1;
	trans[1][6431]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6432]	= settr(6739,0,6436,3267,3267,"((_pid>1))", 0, 2, 0); /* m: 6433 -> 6436,0 */
	reached1[6433] = 1;
	trans[1][6433]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6436]	= settr(6743,0,6437,3268,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6437]	= settr(6744,0,6481,3269,3269,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6477 -> 0,6481 */
	reached1[6477] = 1;
	trans[1][6476]	= settr(6783,0,6477,1,0,".(goto)", 0, 2, 0); /* m: 6477 -> 0,6481 */
	reached1[6477] = 1;
	trans[1][6439]	= settr(6746,0,6450,3270,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][6450] = settr(6757,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6757,0,6446,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6446] = settr(6753,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6753,0,6440,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6753,0,6442,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6753,0,6444,0,0,"IF", 0, 2, 0);
	trans[1][6440]	= settr(6747,0,6448,3271,3271,"((_pid==0))", 0, 2, 0); /* m: 6441 -> 6448,0 */
	reached1[6441] = 1;
	trans[1][6441]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6447]	= settr(6754,0,6448,1,0,".(goto)", 0, 2, 0);
	trans[1][6442]	= settr(6749,0,6448,3272,3272,"((_pid==1))", 0, 2, 0); /* m: 6443 -> 6448,0 */
	reached1[6443] = 1;
	trans[1][6443]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6444]	= settr(6751,0,6448,3273,3273,"((_pid>1))", 0, 2, 0); /* m: 6445 -> 6448,0 */
	reached1[6445] = 1;
	trans[1][6445]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6448]	= settr(6755,0,6449,3274,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6449]	= settr(6756,0,6481,3275,3275,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6477 -> 0,6481 */
	reached1[6477] = 1;
	trans[1][6451]	= settr(6758,0,6462,3276,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][6462] = settr(6769,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6769,0,6458,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6458] = settr(6765,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6765,0,6452,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6765,0,6454,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6765,0,6456,0,0,"IF", 0, 2, 0);
	trans[1][6452]	= settr(6759,0,6460,3277,3277,"((_pid==0))", 0, 2, 0); /* m: 6453 -> 6460,0 */
	reached1[6453] = 1;
	trans[1][6453]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6459]	= settr(6766,0,6460,1,0,".(goto)", 0, 2, 0);
	trans[1][6454]	= settr(6761,0,6460,3278,3278,"((_pid==1))", 0, 2, 0); /* m: 6455 -> 6460,0 */
	reached1[6455] = 1;
	trans[1][6455]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6456]	= settr(6763,0,6460,3279,3279,"((_pid>1))", 0, 2, 0); /* m: 6457 -> 6460,0 */
	reached1[6457] = 1;
	trans[1][6457]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6460]	= settr(6767,0,6461,3280,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6461]	= settr(6768,0,6481,3281,3281,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6477 -> 0,6481 */
	reached1[6477] = 1;
	trans[1][6463]	= settr(6770,0,6474,3282,0,"((6==STOP))", 0, 2, 0);
	T = trans[ 1][6474] = settr(6781,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6781,0,6470,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6470] = settr(6777,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6777,0,6464,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6777,0,6466,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6777,0,6468,0,0,"IF", 0, 2, 0);
	trans[1][6464]	= settr(6771,0,6472,3283,3283,"((_pid==0))", 0, 2, 0); /* m: 6465 -> 6472,0 */
	reached1[6465] = 1;
	trans[1][6465]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6471]	= settr(6778,0,6472,1,0,".(goto)", 0, 2, 0);
	trans[1][6466]	= settr(6773,0,6472,3284,3284,"((_pid==1))", 0, 2, 0); /* m: 6467 -> 6472,0 */
	reached1[6467] = 1;
	trans[1][6467]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6468]	= settr(6775,0,6472,3285,3285,"((_pid>1))", 0, 2, 0); /* m: 6469 -> 6472,0 */
	reached1[6469] = 1;
	trans[1][6469]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6472]	= settr(6779,0,6473,3286,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6473]	= settr(6780,0,6481,3287,3287,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6477 -> 0,6481 */
	reached1[6477] = 1;
	trans[1][6477]	= settr(6784,0,6481,3288,3288,"j = (j+1)", 0, 2, 0);
	trans[1][6478]	= settr(6785,0,6479,2,0,"else", 0, 2, 0);
	trans[1][6479]	= settr(6786,0,7651,3289,3289,"j = 1", 0, 2, 0);
	trans[1][6480]	= settr(6787,0,7651,1,0,"goto :b46", 0, 2, 0);
	trans[1][6483]	= settr(6790,0,7651,1,0,"break", 0, 2, 0);
	trans[1][7639]	= settr(7946,0,7651,1,0,".(goto)", 0, 2, 0);
	trans[1][6490]	= settr(6797,0,7062,3290,0,"((4==PAUSED))", 0, 2, 0);
	T = trans[ 1][7062] = settr(7369,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7369,0,7060,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7060] = settr(7367,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7367,0,6491,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7367,0,6494,0,0,"IF", 0, 2, 0);
	trans[1][6491]	= settr(6798,0,6492,3291,0,"(((8==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][6492]	= settr(6799,0,6493,3292,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][6493]	= settr(6800,0,7651,3293,3293,"supervisor_started = 1", 1, 2, 0);
	trans[1][7061]	= settr(7368,0,7651,1,0,".(goto)", 0, 2, 0);
	trans[1][6494]	= settr(6801,0,7058,2,0,"else", 0, 2, 0);
	T = trans[1][7058] = settr(7365,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7365,0,6495,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7365,0,6832,0,0,"IF", 0, 2, 0);
	trans[1][6495]	= settr(6802,0,6831,3294,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][6831] = settr(7138,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7138,0,6829,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6829] = settr(7136,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7136,0,6496,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7136,0,6662,0,0,"IF", 0, 2, 0);
	trans[1][6496]	= settr(6803,0,6661,3295,0,"(((8==START)||(8==PAUSED)))", 0, 2, 0);
	T = trans[ 1][6661] = settr(6968,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6968,0,6658,0,0,"sub-sequence", 0, 2, 0);
	trans[1][6659]	= settr(6966,0,6658,1,0,".(goto)", 0, 2, 0);
	T = trans[1][6658] = settr(6965,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(6965,0,6497,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(6965,0,6655,0,0,"DO", 0, 2, 0);
	trans[1][6497]	= settr(6804,0,6653,3296,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][6653] = settr(6960,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6960,0,6651,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6651] = settr(6958,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6958,0,6498,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6958,0,6537,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6958,0,6575,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6958,0,6613,0,0,"IF", 0, 2, 0);
	trans[1][6498]	= settr(6805,0,6536,3297,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][6536] = settr(6843,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6843,0,6518,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6518] = settr(6825,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6825,2,6516,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6516] = settr(6823,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6823,2,6499,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6823,2,6502,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6823,2,6505,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6823,2,6508,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6823,2,6511,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6823,2,6514,0,0,"IF", 1, 2, 0);
	trans[1][6499]	= settr(6806,4,6519,3298,3298,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6500 -> 6519,0 */
	reached1[6500] = 1;
	trans[1][6500]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6501]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6517]	= settr(6824,0,6519,3299,3299,".(goto)", 1, 2, 0);
	trans[1][6502]	= settr(6809,4,6519,3300,3300,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6503 -> 6519,0 */
	reached1[6503] = 1;
	trans[1][6503]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6504]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6505]	= settr(6812,4,6519,3301,3301,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6506 -> 6519,0 */
	reached1[6506] = 1;
	trans[1][6506]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6507]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6508]	= settr(6815,4,6519,3302,3302,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6509 -> 6519,0 */
	reached1[6509] = 1;
	trans[1][6509]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6510]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6511]	= settr(6818,4,6519,3303,3303,"((START==ABORT))", 1, 2, 0); /* m: 6512 -> 6519,0 */
	reached1[6512] = 1;
	trans[1][6512]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6513]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6514]	= settr(6821,2,6515,2,0,"else", 1, 2, 0);
	trans[1][6515]	= settr(6822,4,6519,3304,3304,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6517 -> 0,6519 */
	reached1[6517] = 1;
	trans[1][6519]	= settr(6826,0,6534,3305,3305,"(run Thread(j))", 0, 2, 0);
	T = trans[1][6534] = settr(6841,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6841,0,6520,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6841,0,6532,0,0,"IF", 0, 2, 0);
	trans[1][6520]	= settr(6827,0,6531,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6531] = settr(6838,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6838,0,6527,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6527] = settr(6834,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6834,0,6521,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6834,0,6523,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6834,0,6525,0,0,"IF", 0, 2, 0);
	trans[1][6521]	= settr(6828,0,6529,3306,3306,"((_pid==0))", 0, 2, 0); /* m: 6522 -> 6529,0 */
	reached1[6522] = 1;
	trans[1][6522]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6528]	= settr(6835,0,6529,1,0,".(goto)", 0, 2, 0);
	trans[1][6523]	= settr(6830,0,6529,3307,3307,"((_pid==1))", 0, 2, 0); /* m: 6524 -> 6529,0 */
	reached1[6524] = 1;
	trans[1][6524]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6525]	= settr(6832,0,6529,3308,3308,"((_pid>1))", 0, 2, 0); /* m: 6526 -> 6529,0 */
	reached1[6526] = 1;
	trans[1][6526]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6529]	= settr(6836,0,6530,3309,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6530]	= settr(6837,0,6658,3310,3310,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6654 -> 0,6658 */
	reached1[6654] = 1;
	trans[1][6535]	= settr(6842,0,6654,1,0,".(goto)", 0, 2, 0); /* m: 6654 -> 0,6658 */
	reached1[6654] = 1;
	trans[1][6532]	= settr(6839,0,6533,2,0,"else", 0, 2, 0);
	trans[1][6533]	= settr(6840,0,6658,3311,3311,"(1)", 0, 2, 0); /* m: 6654 -> 6658,0 */
	reached1[6654] = 1;
	trans[1][6652]	= settr(6959,0,6654,1,0,".(goto)", 0, 2, 0); /* m: 6654 -> 0,6658 */
	reached1[6654] = 1;
	trans[1][6537]	= settr(6844,0,6574,3312,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][6574] = settr(6881,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6881,0,6557,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6557] = settr(6864,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6864,2,6555,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6555] = settr(6862,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6862,2,6538,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6862,2,6541,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6862,2,6544,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6862,2,6547,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6862,2,6550,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6862,2,6553,0,0,"IF", 1, 2, 0);
	trans[1][6538]	= settr(6845,4,6572,3313,3313,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6539 -> 6572,0 */
	reached1[6539] = 1;
	trans[1][6539]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6540]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6556]	= settr(6863,0,6572,3314,3314,".(goto)", 1, 2, 0);
	trans[1][6541]	= settr(6848,4,6572,3315,3315,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6542 -> 6572,0 */
	reached1[6542] = 1;
	trans[1][6542]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6543]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6544]	= settr(6851,4,6572,3316,3316,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6545 -> 6572,0 */
	reached1[6545] = 1;
	trans[1][6545]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6546]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6547]	= settr(6854,4,6572,3317,3317,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6548 -> 6572,0 */
	reached1[6548] = 1;
	trans[1][6548]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6549]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6550]	= settr(6857,4,6572,3318,3318,"((PAUSE==ABORT))", 1, 2, 0); /* m: 6551 -> 6572,0 */
	reached1[6551] = 1;
	trans[1][6551]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6552]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6553]	= settr(6860,2,6554,2,0,"else", 1, 2, 0);
	trans[1][6554]	= settr(6861,4,6572,3319,3319,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6556 -> 0,6572 */
	reached1[6556] = 1;
	T = trans[1][6572] = settr(6879,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6879,0,6558,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6879,0,6570,0,0,"IF", 0, 2, 0);
	trans[1][6558]	= settr(6865,0,6569,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6569] = settr(6876,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6876,0,6565,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6565] = settr(6872,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6872,0,6559,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6872,0,6561,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6872,0,6563,0,0,"IF", 0, 2, 0);
	trans[1][6559]	= settr(6866,0,6567,3320,3320,"((_pid==0))", 0, 2, 0); /* m: 6560 -> 6567,0 */
	reached1[6560] = 1;
	trans[1][6560]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6566]	= settr(6873,0,6567,1,0,".(goto)", 0, 2, 0);
	trans[1][6561]	= settr(6868,0,6567,3321,3321,"((_pid==1))", 0, 2, 0); /* m: 6562 -> 6567,0 */
	reached1[6562] = 1;
	trans[1][6562]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6563]	= settr(6870,0,6567,3322,3322,"((_pid>1))", 0, 2, 0); /* m: 6564 -> 6567,0 */
	reached1[6564] = 1;
	trans[1][6564]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6567]	= settr(6874,0,6568,3323,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6568]	= settr(6875,0,6658,3324,3324,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6654 -> 0,6658 */
	reached1[6654] = 1;
	trans[1][6573]	= settr(6880,0,6654,1,0,".(goto)", 0, 2, 0); /* m: 6654 -> 0,6658 */
	reached1[6654] = 1;
	trans[1][6570]	= settr(6877,0,6571,2,0,"else", 0, 2, 0);
	trans[1][6571]	= settr(6878,0,6658,3325,3325,"(1)", 0, 2, 0); /* m: 6654 -> 6658,0 */
	reached1[6654] = 1;
	trans[1][6575]	= settr(6882,0,6612,3326,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][6612] = settr(6919,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6919,0,6595,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6595] = settr(6902,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6902,2,6593,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6593] = settr(6900,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6900,2,6576,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6900,2,6579,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6900,2,6582,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6900,2,6585,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6900,2,6588,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6900,2,6591,0,0,"IF", 1, 2, 0);
	trans[1][6576]	= settr(6883,4,6610,3327,3327,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6577 -> 6610,0 */
	reached1[6577] = 1;
	trans[1][6577]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6578]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6594]	= settr(6901,0,6610,3328,3328,".(goto)", 1, 2, 0);
	trans[1][6579]	= settr(6886,4,6610,3329,3329,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6580 -> 6610,0 */
	reached1[6580] = 1;
	trans[1][6580]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6581]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6582]	= settr(6889,4,6610,3330,3330,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6583 -> 6610,0 */
	reached1[6583] = 1;
	trans[1][6583]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6584]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6585]	= settr(6892,4,6610,3331,3331,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6586 -> 6610,0 */
	reached1[6586] = 1;
	trans[1][6586]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6587]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6588]	= settr(6895,4,6610,3332,3332,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 6589 -> 6610,0 */
	reached1[6589] = 1;
	trans[1][6589]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6590]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6591]	= settr(6898,2,6592,2,0,"else", 1, 2, 0);
	trans[1][6592]	= settr(6899,4,6610,3333,3333,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6594 -> 0,6610 */
	reached1[6594] = 1;
	T = trans[1][6610] = settr(6917,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6917,0,6596,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6917,0,6608,0,0,"IF", 0, 2, 0);
	trans[1][6596]	= settr(6903,0,6607,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6607] = settr(6914,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6914,0,6603,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6603] = settr(6910,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6910,0,6597,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6910,0,6599,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6910,0,6601,0,0,"IF", 0, 2, 0);
	trans[1][6597]	= settr(6904,0,6605,3334,3334,"((_pid==0))", 0, 2, 0); /* m: 6598 -> 6605,0 */
	reached1[6598] = 1;
	trans[1][6598]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6604]	= settr(6911,0,6605,1,0,".(goto)", 0, 2, 0);
	trans[1][6599]	= settr(6906,0,6605,3335,3335,"((_pid==1))", 0, 2, 0); /* m: 6600 -> 6605,0 */
	reached1[6600] = 1;
	trans[1][6600]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6601]	= settr(6908,0,6605,3336,3336,"((_pid>1))", 0, 2, 0); /* m: 6602 -> 6605,0 */
	reached1[6602] = 1;
	trans[1][6602]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6605]	= settr(6912,0,6606,3337,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6606]	= settr(6913,0,6658,3338,3338,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6654 -> 0,6658 */
	reached1[6654] = 1;
	trans[1][6611]	= settr(6918,0,6654,1,0,".(goto)", 0, 2, 0); /* m: 6654 -> 0,6658 */
	reached1[6654] = 1;
	trans[1][6608]	= settr(6915,0,6609,2,0,"else", 0, 2, 0);
	trans[1][6609]	= settr(6916,0,6658,3339,3339,"(1)", 0, 2, 0); /* m: 6654 -> 6658,0 */
	reached1[6654] = 1;
	trans[1][6613]	= settr(6920,0,6650,3340,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][6650] = settr(6957,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6957,0,6633,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6633] = settr(6940,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6940,2,6631,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6631] = settr(6938,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6938,2,6614,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6938,2,6617,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6938,2,6620,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6938,2,6623,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6938,2,6626,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6938,2,6629,0,0,"IF", 1, 2, 0);
	trans[1][6614]	= settr(6921,4,6648,3341,3341,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6615 -> 6648,0 */
	reached1[6615] = 1;
	trans[1][6615]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6616]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6632]	= settr(6939,0,6648,3342,3342,".(goto)", 1, 2, 0);
	trans[1][6617]	= settr(6924,4,6648,3343,3343,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6618 -> 6648,0 */
	reached1[6618] = 1;
	trans[1][6618]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6619]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6620]	= settr(6927,4,6648,3344,3344,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6621 -> 6648,0 */
	reached1[6621] = 1;
	trans[1][6621]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6622]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6623]	= settr(6930,4,6648,3345,3345,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6624 -> 6648,0 */
	reached1[6624] = 1;
	trans[1][6624]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6625]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6626]	= settr(6933,4,6648,3346,3346,"((STOP==ABORT))", 1, 2, 0); /* m: 6627 -> 6648,0 */
	reached1[6627] = 1;
	trans[1][6627]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6628]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6629]	= settr(6936,2,6630,2,0,"else", 1, 2, 0);
	trans[1][6630]	= settr(6937,4,6648,3347,3347,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6632 -> 0,6648 */
	reached1[6632] = 1;
	T = trans[1][6648] = settr(6955,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6955,0,6634,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6955,0,6646,0,0,"IF", 0, 2, 0);
	trans[1][6634]	= settr(6941,0,6645,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6645] = settr(6952,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(6952,0,6641,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6641] = settr(6948,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6948,0,6635,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(6948,0,6637,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(6948,0,6639,0,0,"IF", 0, 2, 0);
	trans[1][6635]	= settr(6942,0,6643,3348,3348,"((_pid==0))", 0, 2, 0); /* m: 6636 -> 6643,0 */
	reached1[6636] = 1;
	trans[1][6636]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6642]	= settr(6949,0,6643,1,0,".(goto)", 0, 2, 0);
	trans[1][6637]	= settr(6944,0,6643,3349,3349,"((_pid==1))", 0, 2, 0); /* m: 6638 -> 6643,0 */
	reached1[6638] = 1;
	trans[1][6638]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6639]	= settr(6946,0,6643,3350,3350,"((_pid>1))", 0, 2, 0); /* m: 6640 -> 6643,0 */
	reached1[6640] = 1;
	trans[1][6640]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6643]	= settr(6950,0,6644,3351,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6644]	= settr(6951,0,6658,3352,3352,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6654 -> 0,6658 */
	reached1[6654] = 1;
	trans[1][6649]	= settr(6956,0,6654,1,0,".(goto)", 0, 2, 0); /* m: 6654 -> 0,6658 */
	reached1[6654] = 1;
	trans[1][6646]	= settr(6953,0,6647,2,0,"else", 0, 2, 0);
	trans[1][6647]	= settr(6954,0,6658,3353,3353,"(1)", 0, 2, 0); /* m: 6654 -> 6658,0 */
	reached1[6654] = 1;
	trans[1][6654]	= settr(6961,0,6658,3354,3354,"j = (j+1)", 0, 2, 0);
	trans[1][6655]	= settr(6962,0,6656,2,0,"else", 0, 2, 0);
	trans[1][6656]	= settr(6963,0,7651,3355,3355,"j = 1", 0, 2, 0);
	trans[1][6657]	= settr(6964,0,7651,1,0,"goto :b47", 0, 2, 0);
	trans[1][6660]	= settr(6967,0,7651,1,0,"break", 0, 2, 0);
	trans[1][6830]	= settr(7137,0,7651,1,0,".(goto)", 0, 2, 0);
	trans[1][6662]	= settr(6969,0,6828,2,0,"else", 0, 2, 0);
	T = trans[ 1][6828] = settr(7135,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7135,0,6663,0,0,"sub-sequence", 0, 2, 0);
	trans[1][6663]	= settr(6970,0,6825,3356,3356,"j = (3-1)", 0, 2, 0);
	trans[1][6826]	= settr(7133,0,6825,1,0,".(goto)", 0, 2, 0);
	T = trans[1][6825] = settr(7132,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(7132,0,6664,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(7132,0,6822,0,0,"DO", 0, 2, 0);
	trans[1][6664]	= settr(6971,0,6820,3357,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][6820] = settr(7127,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7127,0,6818,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6818] = settr(7125,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7125,0,6665,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7125,0,6704,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7125,0,6742,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7125,0,6780,0,0,"IF", 0, 2, 0);
	trans[1][6665]	= settr(6972,0,6703,3358,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][6703] = settr(7010,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7010,0,6685,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6685] = settr(6992,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(6992,2,6683,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6683] = settr(6990,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6990,2,6666,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6990,2,6669,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6990,2,6672,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6990,2,6675,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(6990,2,6678,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(6990,2,6681,0,0,"IF", 1, 2, 0);
	trans[1][6666]	= settr(6973,4,6686,3359,3359,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6667 -> 6686,0 */
	reached1[6667] = 1;
	trans[1][6667]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6668]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6684]	= settr(6991,0,6686,3360,3360,".(goto)", 1, 2, 0);
	trans[1][6669]	= settr(6976,4,6686,3361,3361,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6670 -> 6686,0 */
	reached1[6670] = 1;
	trans[1][6670]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6671]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6672]	= settr(6979,4,6686,3362,3362,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6673 -> 6686,0 */
	reached1[6673] = 1;
	trans[1][6673]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6674]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6675]	= settr(6982,4,6686,3363,3363,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6676 -> 6686,0 */
	reached1[6676] = 1;
	trans[1][6676]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6677]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6678]	= settr(6985,4,6686,3364,3364,"((START==ABORT))", 1, 2, 0); /* m: 6679 -> 6686,0 */
	reached1[6679] = 1;
	trans[1][6679]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6680]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6681]	= settr(6988,2,6682,2,0,"else", 1, 2, 0);
	trans[1][6682]	= settr(6989,4,6686,3365,3365,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6684 -> 0,6686 */
	reached1[6684] = 1;
	trans[1][6686]	= settr(6993,0,6701,3366,3366,"(run Thread(j))", 0, 2, 0);
	T = trans[1][6701] = settr(7008,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7008,0,6687,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7008,0,6699,0,0,"IF", 0, 2, 0);
	trans[1][6687]	= settr(6994,0,6698,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6698] = settr(7005,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7005,0,6694,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6694] = settr(7001,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7001,0,6688,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7001,0,6690,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7001,0,6692,0,0,"IF", 0, 2, 0);
	trans[1][6688]	= settr(6995,0,6696,3367,3367,"((_pid==0))", 0, 2, 0); /* m: 6689 -> 6696,0 */
	reached1[6689] = 1;
	trans[1][6689]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6695]	= settr(7002,0,6696,1,0,".(goto)", 0, 2, 0);
	trans[1][6690]	= settr(6997,0,6696,3368,3368,"((_pid==1))", 0, 2, 0); /* m: 6691 -> 6696,0 */
	reached1[6691] = 1;
	trans[1][6691]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6692]	= settr(6999,0,6696,3369,3369,"((_pid>1))", 0, 2, 0); /* m: 6693 -> 6696,0 */
	reached1[6693] = 1;
	trans[1][6693]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6696]	= settr(7003,0,6697,3370,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6697]	= settr(7004,0,6825,3371,3371,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6821 -> 0,6825 */
	reached1[6821] = 1;
	trans[1][6702]	= settr(7009,0,6821,1,0,".(goto)", 0, 2, 0); /* m: 6821 -> 0,6825 */
	reached1[6821] = 1;
	trans[1][6699]	= settr(7006,0,6700,2,0,"else", 0, 2, 0);
	trans[1][6700]	= settr(7007,0,6825,3372,3372,"(1)", 0, 2, 0); /* m: 6821 -> 6825,0 */
	reached1[6821] = 1;
	trans[1][6819]	= settr(7126,0,6821,1,0,".(goto)", 0, 2, 0); /* m: 6821 -> 0,6825 */
	reached1[6821] = 1;
	trans[1][6704]	= settr(7011,0,6741,3373,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][6741] = settr(7048,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7048,0,6724,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6724] = settr(7031,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7031,2,6722,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6722] = settr(7029,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7029,2,6705,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7029,2,6708,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7029,2,6711,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7029,2,6714,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7029,2,6717,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7029,2,6720,0,0,"IF", 1, 2, 0);
	trans[1][6705]	= settr(7012,4,6739,3374,3374,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6706 -> 6739,0 */
	reached1[6706] = 1;
	trans[1][6706]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6707]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6723]	= settr(7030,0,6739,3375,3375,".(goto)", 1, 2, 0);
	trans[1][6708]	= settr(7015,4,6739,3376,3376,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6709 -> 6739,0 */
	reached1[6709] = 1;
	trans[1][6709]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6710]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6711]	= settr(7018,4,6739,3377,3377,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6712 -> 6739,0 */
	reached1[6712] = 1;
	trans[1][6712]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6713]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6714]	= settr(7021,4,6739,3378,3378,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6715 -> 6739,0 */
	reached1[6715] = 1;
	trans[1][6715]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6716]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6717]	= settr(7024,4,6739,3379,3379,"((PAUSE==ABORT))", 1, 2, 0); /* m: 6718 -> 6739,0 */
	reached1[6718] = 1;
	trans[1][6718]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6719]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6720]	= settr(7027,2,6721,2,0,"else", 1, 2, 0);
	trans[1][6721]	= settr(7028,4,6739,3380,3380,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6723 -> 0,6739 */
	reached1[6723] = 1;
	T = trans[1][6739] = settr(7046,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7046,0,6725,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7046,0,6737,0,0,"IF", 0, 2, 0);
	trans[1][6725]	= settr(7032,0,6736,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6736] = settr(7043,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7043,0,6732,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6732] = settr(7039,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7039,0,6726,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7039,0,6728,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7039,0,6730,0,0,"IF", 0, 2, 0);
	trans[1][6726]	= settr(7033,0,6734,3381,3381,"((_pid==0))", 0, 2, 0); /* m: 6727 -> 6734,0 */
	reached1[6727] = 1;
	trans[1][6727]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6733]	= settr(7040,0,6734,1,0,".(goto)", 0, 2, 0);
	trans[1][6728]	= settr(7035,0,6734,3382,3382,"((_pid==1))", 0, 2, 0); /* m: 6729 -> 6734,0 */
	reached1[6729] = 1;
	trans[1][6729]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6730]	= settr(7037,0,6734,3383,3383,"((_pid>1))", 0, 2, 0); /* m: 6731 -> 6734,0 */
	reached1[6731] = 1;
	trans[1][6731]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6734]	= settr(7041,0,6735,3384,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6735]	= settr(7042,0,6825,3385,3385,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6821 -> 0,6825 */
	reached1[6821] = 1;
	trans[1][6740]	= settr(7047,0,6821,1,0,".(goto)", 0, 2, 0); /* m: 6821 -> 0,6825 */
	reached1[6821] = 1;
	trans[1][6737]	= settr(7044,0,6738,2,0,"else", 0, 2, 0);
	trans[1][6738]	= settr(7045,0,6825,3386,3386,"(1)", 0, 2, 0); /* m: 6821 -> 6825,0 */
	reached1[6821] = 1;
	trans[1][6742]	= settr(7049,0,6779,3387,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][6779] = settr(7086,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7086,0,6762,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6762] = settr(7069,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7069,2,6760,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6760] = settr(7067,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7067,2,6743,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7067,2,6746,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7067,2,6749,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7067,2,6752,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7067,2,6755,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7067,2,6758,0,0,"IF", 1, 2, 0);
	trans[1][6743]	= settr(7050,4,6777,3388,3388,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6744 -> 6777,0 */
	reached1[6744] = 1;
	trans[1][6744]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6745]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6761]	= settr(7068,0,6777,3389,3389,".(goto)", 1, 2, 0);
	trans[1][6746]	= settr(7053,4,6777,3390,3390,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6747 -> 6777,0 */
	reached1[6747] = 1;
	trans[1][6747]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6748]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6749]	= settr(7056,4,6777,3391,3391,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6750 -> 6777,0 */
	reached1[6750] = 1;
	trans[1][6750]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6751]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6752]	= settr(7059,4,6777,3392,3392,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6753 -> 6777,0 */
	reached1[6753] = 1;
	trans[1][6753]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6754]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6755]	= settr(7062,4,6777,3393,3393,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 6756 -> 6777,0 */
	reached1[6756] = 1;
	trans[1][6756]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6757]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6758]	= settr(7065,2,6759,2,0,"else", 1, 2, 0);
	trans[1][6759]	= settr(7066,4,6777,3394,3394,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6761 -> 0,6777 */
	reached1[6761] = 1;
	T = trans[1][6777] = settr(7084,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7084,0,6763,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7084,0,6775,0,0,"IF", 0, 2, 0);
	trans[1][6763]	= settr(7070,0,6774,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6774] = settr(7081,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7081,0,6770,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6770] = settr(7077,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7077,0,6764,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7077,0,6766,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7077,0,6768,0,0,"IF", 0, 2, 0);
	trans[1][6764]	= settr(7071,0,6772,3395,3395,"((_pid==0))", 0, 2, 0); /* m: 6765 -> 6772,0 */
	reached1[6765] = 1;
	trans[1][6765]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6771]	= settr(7078,0,6772,1,0,".(goto)", 0, 2, 0);
	trans[1][6766]	= settr(7073,0,6772,3396,3396,"((_pid==1))", 0, 2, 0); /* m: 6767 -> 6772,0 */
	reached1[6767] = 1;
	trans[1][6767]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6768]	= settr(7075,0,6772,3397,3397,"((_pid>1))", 0, 2, 0); /* m: 6769 -> 6772,0 */
	reached1[6769] = 1;
	trans[1][6769]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6772]	= settr(7079,0,6773,3398,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6773]	= settr(7080,0,6825,3399,3399,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6821 -> 0,6825 */
	reached1[6821] = 1;
	trans[1][6778]	= settr(7085,0,6821,1,0,".(goto)", 0, 2, 0); /* m: 6821 -> 0,6825 */
	reached1[6821] = 1;
	trans[1][6775]	= settr(7082,0,6776,2,0,"else", 0, 2, 0);
	trans[1][6776]	= settr(7083,0,6825,3400,3400,"(1)", 0, 2, 0); /* m: 6821 -> 6825,0 */
	reached1[6821] = 1;
	trans[1][6780]	= settr(7087,0,6817,3401,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][6817] = settr(7124,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7124,0,6800,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6800] = settr(7107,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7107,2,6798,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6798] = settr(7105,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7105,2,6781,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7105,2,6784,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7105,2,6787,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7105,2,6790,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7105,2,6793,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7105,2,6796,0,0,"IF", 1, 2, 0);
	trans[1][6781]	= settr(7088,4,6815,3402,3402,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6782 -> 6815,0 */
	reached1[6782] = 1;
	trans[1][6782]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6783]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6799]	= settr(7106,0,6815,3403,3403,".(goto)", 1, 2, 0);
	trans[1][6784]	= settr(7091,4,6815,3404,3404,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6785 -> 6815,0 */
	reached1[6785] = 1;
	trans[1][6785]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6786]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6787]	= settr(7094,4,6815,3405,3405,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6788 -> 6815,0 */
	reached1[6788] = 1;
	trans[1][6788]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6789]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6790]	= settr(7097,4,6815,3406,3406,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6791 -> 6815,0 */
	reached1[6791] = 1;
	trans[1][6791]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6792]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6793]	= settr(7100,4,6815,3407,3407,"((STOP==ABORT))", 1, 2, 0); /* m: 6794 -> 6815,0 */
	reached1[6794] = 1;
	trans[1][6794]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6795]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6796]	= settr(7103,2,6797,2,0,"else", 1, 2, 0);
	trans[1][6797]	= settr(7104,4,6815,3408,3408,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6799 -> 0,6815 */
	reached1[6799] = 1;
	T = trans[1][6815] = settr(7122,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7122,0,6801,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7122,0,6813,0,0,"IF", 0, 2, 0);
	trans[1][6801]	= settr(7108,0,6812,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][6812] = settr(7119,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7119,0,6808,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6808] = settr(7115,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7115,0,6802,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7115,0,6804,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7115,0,6806,0,0,"IF", 0, 2, 0);
	trans[1][6802]	= settr(7109,0,6810,3409,3409,"((_pid==0))", 0, 2, 0); /* m: 6803 -> 6810,0 */
	reached1[6803] = 1;
	trans[1][6803]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6809]	= settr(7116,0,6810,1,0,".(goto)", 0, 2, 0);
	trans[1][6804]	= settr(7111,0,6810,3410,3410,"((_pid==1))", 0, 2, 0); /* m: 6805 -> 6810,0 */
	reached1[6805] = 1;
	trans[1][6805]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6806]	= settr(7113,0,6810,3411,3411,"((_pid>1))", 0, 2, 0); /* m: 6807 -> 6810,0 */
	reached1[6807] = 1;
	trans[1][6807]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6810]	= settr(7117,0,6811,3412,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6811]	= settr(7118,0,6825,3413,3413,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6821 -> 0,6825 */
	reached1[6821] = 1;
	trans[1][6816]	= settr(7123,0,6821,1,0,".(goto)", 0, 2, 0); /* m: 6821 -> 0,6825 */
	reached1[6821] = 1;
	trans[1][6813]	= settr(7120,0,6814,2,0,"else", 0, 2, 0);
	trans[1][6814]	= settr(7121,0,6825,3414,3414,"(1)", 0, 2, 0); /* m: 6821 -> 6825,0 */
	reached1[6821] = 1;
	trans[1][6821]	= settr(7128,0,6825,3415,3415,"j = (j-1)", 0, 2, 0);
	trans[1][6822]	= settr(7129,0,6823,2,0,"else", 0, 2, 0);
	trans[1][6823]	= settr(7130,0,7651,3416,3416,"j = 1", 0, 2, 0);
	trans[1][6824]	= settr(7131,0,7651,1,0,"goto :b48", 0, 2, 0);
	trans[1][6827]	= settr(7134,0,7651,1,0,"break", 0, 2, 0);
	trans[1][7059]	= settr(7366,0,7651,1,0,".(goto)", 0, 2, 0);
	trans[1][6832]	= settr(7139,0,7057,2,0,"else", 0, 2, 0);
	T = trans[ 1][7057] = settr(7364,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7364,0,6833,0,0,"sub-sequence", 0, 2, 0);
	trans[1][6833]	= settr(7140,0,6998,3417,0,"printf('Supervisor propagating command %e...\\n',8)", 0, 2, 0);
	T = trans[ 1][6998] = settr(7305,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7305,0,6995,0,0,"sub-sequence", 0, 2, 0);
	trans[1][6996]	= settr(7303,0,6995,1,0,".(goto)", 0, 2, 0);
	T = trans[1][6995] = settr(7302,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(7302,0,6834,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(7302,0,6992,0,0,"DO", 0, 2, 0);
	trans[1][6834]	= settr(7141,0,6990,3418,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][6990] = settr(7297,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7297,0,6988,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6988] = settr(7295,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7295,0,6835,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7295,0,6874,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7295,0,6912,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7295,0,6950,0,0,"IF", 0, 2, 0);
	trans[1][6835]	= settr(7142,0,6873,3419,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][6873] = settr(7180,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7180,0,6855,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6855] = settr(7162,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7162,2,6853,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6853] = settr(7160,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7160,2,6836,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7160,2,6839,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7160,2,6842,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7160,2,6845,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7160,2,6848,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7160,2,6851,0,0,"IF", 1, 2, 0);
	trans[1][6836]	= settr(7143,4,6856,3420,3420,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6837 -> 6856,0 */
	reached1[6837] = 1;
	trans[1][6837]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6838]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6854]	= settr(7161,0,6856,3421,3421,".(goto)", 1, 2, 0);
	trans[1][6839]	= settr(7146,4,6856,3422,3422,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6840 -> 6856,0 */
	reached1[6840] = 1;
	trans[1][6840]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6841]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6842]	= settr(7149,4,6856,3423,3423,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6843 -> 6856,0 */
	reached1[6843] = 1;
	trans[1][6843]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6844]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6845]	= settr(7152,4,6856,3424,3424,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6846 -> 6856,0 */
	reached1[6846] = 1;
	trans[1][6846]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6847]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6848]	= settr(7155,4,6856,3425,3425,"((START==ABORT))", 1, 2, 0); /* m: 6849 -> 6856,0 */
	reached1[6849] = 1;
	trans[1][6849]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6850]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6851]	= settr(7158,2,6852,2,0,"else", 1, 2, 0);
	trans[1][6852]	= settr(7159,4,6856,3426,3426,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6854 -> 0,6856 */
	reached1[6854] = 1;
	trans[1][6856]	= settr(7163,0,6871,3427,3427,"(run Thread(j))", 0, 2, 0);
	T = trans[1][6871] = settr(7178,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(7178,0,6857,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(7178,0,6869,0,0,"IF", 0, 2, 0);
	trans[1][6857]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][6868] = settr(7175,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7175,0,6864,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6864] = settr(7171,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7171,0,6858,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7171,0,6860,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7171,0,6862,0,0,"IF", 0, 2, 0);
	trans[1][6858]	= settr(7165,0,6866,3428,3428,"((_pid==0))", 0, 2, 0); /* m: 6859 -> 6866,0 */
	reached1[6859] = 1;
	trans[1][6859]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6865]	= settr(7172,0,6866,1,0,".(goto)", 0, 2, 0);
	trans[1][6860]	= settr(7167,0,6866,3429,3429,"((_pid==1))", 0, 2, 0); /* m: 6861 -> 6866,0 */
	reached1[6861] = 1;
	trans[1][6861]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6862]	= settr(7169,0,6866,3430,3430,"((_pid>1))", 0, 2, 0); /* m: 6863 -> 6866,0 */
	reached1[6863] = 1;
	trans[1][6863]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6866]	= settr(7173,0,6867,3431,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6867]	= settr(7174,0,6995,3432,3432,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6991 -> 0,6995 */
	reached1[6991] = 1;
	trans[1][6872]	= settr(7179,0,6991,1,0,".(goto)", 0, 2, 0); /* m: 6991 -> 0,6995 */
	reached1[6991] = 1;
	trans[1][6869]	= settr(7176,0,6870,2,0,"else", 0, 2, 0);
	trans[1][6870]	= settr(7177,0,6995,3433,3433,"(1)", 0, 2, 0); /* m: 6991 -> 6995,0 */
	reached1[6991] = 1;
	trans[1][6989]	= settr(7296,0,6991,1,0,".(goto)", 0, 2, 0); /* m: 6991 -> 0,6995 */
	reached1[6991] = 1;
	trans[1][6874]	= settr(7181,0,6911,3434,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][6911] = settr(7218,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7218,0,6894,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6894] = settr(7201,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7201,2,6892,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6892] = settr(7199,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7199,2,6875,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7199,2,6878,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7199,2,6881,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7199,2,6884,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7199,2,6887,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7199,2,6890,0,0,"IF", 1, 2, 0);
	trans[1][6875]	= settr(7182,4,6909,3435,3435,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6876 -> 6909,0 */
	reached1[6876] = 1;
	trans[1][6876]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6877]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6893]	= settr(7200,0,6909,3436,3436,".(goto)", 1, 2, 0);
	trans[1][6878]	= settr(7185,4,6909,3437,3437,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6879 -> 6909,0 */
	reached1[6879] = 1;
	trans[1][6879]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6880]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6881]	= settr(7188,4,6909,3438,3438,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6882 -> 6909,0 */
	reached1[6882] = 1;
	trans[1][6882]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6883]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6884]	= settr(7191,4,6909,3439,3439,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6885 -> 6909,0 */
	reached1[6885] = 1;
	trans[1][6885]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6886]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6887]	= settr(7194,4,6909,3440,3440,"((PAUSE==ABORT))", 1, 2, 0); /* m: 6888 -> 6909,0 */
	reached1[6888] = 1;
	trans[1][6888]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6889]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6890]	= settr(7197,2,6891,2,0,"else", 1, 2, 0);
	trans[1][6891]	= settr(7198,4,6909,3441,3441,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6893 -> 0,6909 */
	reached1[6893] = 1;
	T = trans[1][6909] = settr(7216,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(7216,0,6895,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(7216,0,6907,0,0,"IF", 0, 2, 0);
	trans[1][6895]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][6906] = settr(7213,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7213,0,6902,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6902] = settr(7209,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7209,0,6896,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7209,0,6898,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7209,0,6900,0,0,"IF", 0, 2, 0);
	trans[1][6896]	= settr(7203,0,6904,3442,3442,"((_pid==0))", 0, 2, 0); /* m: 6897 -> 6904,0 */
	reached1[6897] = 1;
	trans[1][6897]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6903]	= settr(7210,0,6904,1,0,".(goto)", 0, 2, 0);
	trans[1][6898]	= settr(7205,0,6904,3443,3443,"((_pid==1))", 0, 2, 0); /* m: 6899 -> 6904,0 */
	reached1[6899] = 1;
	trans[1][6899]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6900]	= settr(7207,0,6904,3444,3444,"((_pid>1))", 0, 2, 0); /* m: 6901 -> 6904,0 */
	reached1[6901] = 1;
	trans[1][6901]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6904]	= settr(7211,0,6905,3445,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6905]	= settr(7212,0,6995,3446,3446,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6991 -> 0,6995 */
	reached1[6991] = 1;
	trans[1][6910]	= settr(7217,0,6991,1,0,".(goto)", 0, 2, 0); /* m: 6991 -> 0,6995 */
	reached1[6991] = 1;
	trans[1][6907]	= settr(7214,0,6908,2,0,"else", 0, 2, 0);
	trans[1][6908]	= settr(7215,0,6995,3447,3447,"(1)", 0, 2, 0); /* m: 6991 -> 6995,0 */
	reached1[6991] = 1;
	trans[1][6912]	= settr(7219,0,6949,3448,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][6949] = settr(7256,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7256,0,6932,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6932] = settr(7239,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7239,2,6930,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6930] = settr(7237,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7237,2,6913,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7237,2,6916,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7237,2,6919,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7237,2,6922,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7237,2,6925,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7237,2,6928,0,0,"IF", 1, 2, 0);
	trans[1][6913]	= settr(7220,4,6947,3449,3449,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6914 -> 6947,0 */
	reached1[6914] = 1;
	trans[1][6914]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6915]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6931]	= settr(7238,0,6947,3450,3450,".(goto)", 1, 2, 0);
	trans[1][6916]	= settr(7223,4,6947,3451,3451,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6917 -> 6947,0 */
	reached1[6917] = 1;
	trans[1][6917]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6918]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6919]	= settr(7226,4,6947,3452,3452,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6920 -> 6947,0 */
	reached1[6920] = 1;
	trans[1][6920]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6921]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6922]	= settr(7229,4,6947,3453,3453,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6923 -> 6947,0 */
	reached1[6923] = 1;
	trans[1][6923]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6924]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6925]	= settr(7232,4,6947,3454,3454,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 6926 -> 6947,0 */
	reached1[6926] = 1;
	trans[1][6926]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6927]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6928]	= settr(7235,2,6929,2,0,"else", 1, 2, 0);
	trans[1][6929]	= settr(7236,4,6947,3455,3455,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6931 -> 0,6947 */
	reached1[6931] = 1;
	T = trans[1][6947] = settr(7254,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(7254,0,6933,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(7254,0,6945,0,0,"IF", 0, 2, 0);
	trans[1][6933]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][6944] = settr(7251,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7251,0,6940,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6940] = settr(7247,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7247,0,6934,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7247,0,6936,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7247,0,6938,0,0,"IF", 0, 2, 0);
	trans[1][6934]	= settr(7241,0,6942,3456,3456,"((_pid==0))", 0, 2, 0); /* m: 6935 -> 6942,0 */
	reached1[6935] = 1;
	trans[1][6935]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6941]	= settr(7248,0,6942,1,0,".(goto)", 0, 2, 0);
	trans[1][6936]	= settr(7243,0,6942,3457,3457,"((_pid==1))", 0, 2, 0); /* m: 6937 -> 6942,0 */
	reached1[6937] = 1;
	trans[1][6937]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6938]	= settr(7245,0,6942,3458,3458,"((_pid>1))", 0, 2, 0); /* m: 6939 -> 6942,0 */
	reached1[6939] = 1;
	trans[1][6939]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6942]	= settr(7249,0,6943,3459,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6943]	= settr(7250,0,6995,3460,3460,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6991 -> 0,6995 */
	reached1[6991] = 1;
	trans[1][6948]	= settr(7255,0,6991,1,0,".(goto)", 0, 2, 0); /* m: 6991 -> 0,6995 */
	reached1[6991] = 1;
	trans[1][6945]	= settr(7252,0,6946,2,0,"else", 0, 2, 0);
	trans[1][6946]	= settr(7253,0,6995,3461,3461,"(1)", 0, 2, 0); /* m: 6991 -> 6995,0 */
	reached1[6991] = 1;
	trans[1][6950]	= settr(7257,0,6987,3462,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][6987] = settr(7294,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7294,0,6970,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][6970] = settr(7277,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7277,2,6968,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][6968] = settr(7275,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7275,2,6951,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7275,2,6954,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7275,2,6957,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7275,2,6960,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7275,2,6963,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7275,2,6966,0,0,"IF", 1, 2, 0);
	trans[1][6951]	= settr(7258,4,6985,3463,3463,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6952 -> 6985,0 */
	reached1[6952] = 1;
	trans[1][6952]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][6953]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][6969]	= settr(7276,0,6985,3464,3464,".(goto)", 1, 2, 0);
	trans[1][6954]	= settr(7261,4,6985,3465,3465,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 6955 -> 6985,0 */
	reached1[6955] = 1;
	trans[1][6955]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][6956]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][6957]	= settr(7264,4,6985,3466,3466,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6958 -> 6985,0 */
	reached1[6958] = 1;
	trans[1][6958]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][6959]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][6960]	= settr(7267,4,6985,3467,3467,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 6961 -> 6985,0 */
	reached1[6961] = 1;
	trans[1][6961]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][6962]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][6963]	= settr(7270,4,6985,3468,3468,"((STOP==ABORT))", 1, 2, 0); /* m: 6964 -> 6985,0 */
	reached1[6964] = 1;
	trans[1][6964]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][6965]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][6966]	= settr(7273,2,6967,2,0,"else", 1, 2, 0);
	trans[1][6967]	= settr(7274,4,6985,3469,3469,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 6969 -> 0,6985 */
	reached1[6969] = 1;
	T = trans[1][6985] = settr(7292,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(7292,0,6971,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(7292,0,6983,0,0,"IF", 0, 2, 0);
	trans[1][6971]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][6982] = settr(7289,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7289,0,6978,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][6978] = settr(7285,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7285,0,6972,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7285,0,6974,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7285,0,6976,0,0,"IF", 0, 2, 0);
	trans[1][6972]	= settr(7279,0,6980,3470,3470,"((_pid==0))", 0, 2, 0); /* m: 6973 -> 6980,0 */
	reached1[6973] = 1;
	trans[1][6973]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6979]	= settr(7286,0,6980,1,0,".(goto)", 0, 2, 0);
	trans[1][6974]	= settr(7281,0,6980,3471,3471,"((_pid==1))", 0, 2, 0); /* m: 6975 -> 6980,0 */
	reached1[6975] = 1;
	trans[1][6975]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][6976]	= settr(7283,0,6980,3472,3472,"((_pid>1))", 0, 2, 0); /* m: 6977 -> 6980,0 */
	reached1[6977] = 1;
	trans[1][6977]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][6980]	= settr(7287,0,6981,3473,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][6981]	= settr(7288,0,6995,3474,3474,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 6991 -> 0,6995 */
	reached1[6991] = 1;
	trans[1][6986]	= settr(7293,0,6991,1,0,".(goto)", 0, 2, 0); /* m: 6991 -> 0,6995 */
	reached1[6991] = 1;
	trans[1][6983]	= settr(7290,0,6984,2,0,"else", 0, 2, 0);
	trans[1][6984]	= settr(7291,0,6995,3475,3475,"(1)", 0, 2, 0); /* m: 6991 -> 6995,0 */
	reached1[6991] = 1;
	trans[1][6991]	= settr(7298,0,6995,3476,3476,"j = (j+1)", 0, 2, 0);
	trans[1][6992]	= settr(7299,0,6993,2,0,"else", 0, 2, 0);
	trans[1][6993]	= settr(7300,0,7054,3477,3477,"j = 1", 0, 2, 0);
	trans[1][6994]	= settr(7301,0,7054,1,0,"goto :b49", 0, 2, 0);
	trans[1][6997]	= settr(7304,0,7054,1,0,"break", 0, 2, 0);
	trans[1][7055]	= settr(7362,0,7054,1,0,".(goto)", 0, 2, 0);
	T = trans[1][7054] = settr(7361,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(7361,0,6999,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(7361,0,7051,0,0,"DO", 0, 2, 0);
	trans[1][6999]	= settr(7306,0,7048,3478,0,"((j<3))", 0, 2, 0);
	T = trans[1][7048] = settr(7355,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7355,0,7000,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7355,0,7012,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7355,0,7024,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7355,0,7036,0,0,"IF", 0, 2, 0);
	trans[1][7000]	= settr(7307,0,7011,3479,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][7011] = settr(7318,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7318,0,7007,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7007] = settr(7314,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7314,0,7001,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7314,0,7003,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7314,0,7005,0,0,"IF", 0, 2, 0);
	trans[1][7001]	= settr(7308,0,7009,3480,3480,"((_pid==0))", 0, 2, 0); /* m: 7002 -> 7009,0 */
	reached1[7002] = 1;
	trans[1][7002]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7008]	= settr(7315,0,7009,1,0,".(goto)", 0, 2, 0);
	trans[1][7003]	= settr(7310,0,7009,3481,3481,"((_pid==1))", 0, 2, 0); /* m: 7004 -> 7009,0 */
	reached1[7004] = 1;
	trans[1][7004]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7005]	= settr(7312,0,7009,3482,3482,"((_pid>1))", 0, 2, 0); /* m: 7006 -> 7009,0 */
	reached1[7006] = 1;
	trans[1][7006]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7009]	= settr(7316,0,7010,3483,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7010]	= settr(7317,0,7054,3484,3484,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7050 -> 0,7054 */
	reached1[7050] = 1;
	trans[1][7049]	= settr(7356,0,7050,1,0,".(goto)", 0, 2, 0); /* m: 7050 -> 0,7054 */
	reached1[7050] = 1;
	trans[1][7012]	= settr(7319,0,7023,3485,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][7023] = settr(7330,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7330,0,7019,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7019] = settr(7326,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7326,0,7013,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7326,0,7015,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7326,0,7017,0,0,"IF", 0, 2, 0);
	trans[1][7013]	= settr(7320,0,7021,3486,3486,"((_pid==0))", 0, 2, 0); /* m: 7014 -> 7021,0 */
	reached1[7014] = 1;
	trans[1][7014]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7020]	= settr(7327,0,7021,1,0,".(goto)", 0, 2, 0);
	trans[1][7015]	= settr(7322,0,7021,3487,3487,"((_pid==1))", 0, 2, 0); /* m: 7016 -> 7021,0 */
	reached1[7016] = 1;
	trans[1][7016]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7017]	= settr(7324,0,7021,3488,3488,"((_pid>1))", 0, 2, 0); /* m: 7018 -> 7021,0 */
	reached1[7018] = 1;
	trans[1][7018]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7021]	= settr(7328,0,7022,3489,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7022]	= settr(7329,0,7054,3490,3490,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7050 -> 0,7054 */
	reached1[7050] = 1;
	trans[1][7024]	= settr(7331,0,7035,3491,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][7035] = settr(7342,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7342,0,7031,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7031] = settr(7338,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7338,0,7025,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7338,0,7027,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7338,0,7029,0,0,"IF", 0, 2, 0);
	trans[1][7025]	= settr(7332,0,7033,3492,3492,"((_pid==0))", 0, 2, 0); /* m: 7026 -> 7033,0 */
	reached1[7026] = 1;
	trans[1][7026]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7032]	= settr(7339,0,7033,1,0,".(goto)", 0, 2, 0);
	trans[1][7027]	= settr(7334,0,7033,3493,3493,"((_pid==1))", 0, 2, 0); /* m: 7028 -> 7033,0 */
	reached1[7028] = 1;
	trans[1][7028]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7029]	= settr(7336,0,7033,3494,3494,"((_pid>1))", 0, 2, 0); /* m: 7030 -> 7033,0 */
	reached1[7030] = 1;
	trans[1][7030]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7033]	= settr(7340,0,7034,3495,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7034]	= settr(7341,0,7054,3496,3496,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7050 -> 0,7054 */
	reached1[7050] = 1;
	trans[1][7036]	= settr(7343,0,7047,3497,0,"((8==STOP))", 0, 2, 0);
	T = trans[ 1][7047] = settr(7354,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7354,0,7043,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7043] = settr(7350,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7350,0,7037,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7350,0,7039,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7350,0,7041,0,0,"IF", 0, 2, 0);
	trans[1][7037]	= settr(7344,0,7045,3498,3498,"((_pid==0))", 0, 2, 0); /* m: 7038 -> 7045,0 */
	reached1[7038] = 1;
	trans[1][7038]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7044]	= settr(7351,0,7045,1,0,".(goto)", 0, 2, 0);
	trans[1][7039]	= settr(7346,0,7045,3499,3499,"((_pid==1))", 0, 2, 0); /* m: 7040 -> 7045,0 */
	reached1[7040] = 1;
	trans[1][7040]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7041]	= settr(7348,0,7045,3500,3500,"((_pid>1))", 0, 2, 0); /* m: 7042 -> 7045,0 */
	reached1[7042] = 1;
	trans[1][7042]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7045]	= settr(7352,0,7046,3501,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7046]	= settr(7353,0,7054,3502,3502,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7050 -> 0,7054 */
	reached1[7050] = 1;
	trans[1][7050]	= settr(7357,0,7054,3503,3503,"j = (j+1)", 0, 2, 0);
	trans[1][7051]	= settr(7358,0,7052,2,0,"else", 0, 2, 0);
	trans[1][7052]	= settr(7359,0,7651,3504,3504,"j = 1", 0, 2, 0);
	trans[1][7053]	= settr(7360,0,7651,1,0,"goto :b50", 0, 2, 0);
	trans[1][7056]	= settr(7363,0,7651,1,0,"break", 0, 2, 0);
	trans[1][7063]	= settr(7370,0,7635,3505,0,"(((4==ABORTING)||(4==STOPPING)))", 0, 2, 0);
	T = trans[ 1][7635] = settr(7942,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7942,0,7633,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7633] = settr(7940,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7940,0,7064,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7940,0,7067,0,0,"IF", 0, 2, 0);
	trans[1][7064]	= settr(7371,0,7065,3506,0,"(((12==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][7065]	= settr(7372,0,7066,3507,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][7066]	= settr(7373,0,7651,3508,3508,"supervisor_started = 1", 1, 2, 0);
	trans[1][7634]	= settr(7941,0,7651,1,0,".(goto)", 0, 2, 0);
	trans[1][7067]	= settr(7374,0,7631,2,0,"else", 0, 2, 0);
	T = trans[1][7631] = settr(7938,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7938,0,7068,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7938,0,7405,0,0,"IF", 0, 2, 0);
	trans[1][7068]	= settr(7375,0,7404,3509,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][7404] = settr(7711,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7711,0,7402,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7402] = settr(7709,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7709,0,7069,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7709,0,7235,0,0,"IF", 0, 2, 0);
	trans[1][7069]	= settr(7376,0,7234,3510,0,"(((12==START)||(12==PAUSED)))", 0, 2, 0);
	T = trans[ 1][7234] = settr(7541,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7541,0,7231,0,0,"sub-sequence", 0, 2, 0);
	trans[1][7232]	= settr(7539,0,7231,1,0,".(goto)", 0, 2, 0);
	T = trans[1][7231] = settr(7538,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(7538,0,7070,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(7538,0,7228,0,0,"DO", 0, 2, 0);
	trans[1][7070]	= settr(7377,0,7226,3511,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][7226] = settr(7533,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7533,0,7224,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7224] = settr(7531,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7531,0,7071,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7531,0,7110,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7531,0,7148,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7531,0,7186,0,0,"IF", 0, 2, 0);
	trans[1][7071]	= settr(7378,0,7109,3512,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][7109] = settr(7416,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7416,0,7091,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7091] = settr(7398,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7398,2,7089,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7089] = settr(7396,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7396,2,7072,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7396,2,7075,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7396,2,7078,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7396,2,7081,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7396,2,7084,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7396,2,7087,0,0,"IF", 1, 2, 0);
	trans[1][7072]	= settr(7379,4,7092,3513,3513,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7073 -> 7092,0 */
	reached1[7073] = 1;
	trans[1][7073]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7074]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7090]	= settr(7397,0,7092,3514,3514,".(goto)", 1, 2, 0);
	trans[1][7075]	= settr(7382,4,7092,3515,3515,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7076 -> 7092,0 */
	reached1[7076] = 1;
	trans[1][7076]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7077]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7078]	= settr(7385,4,7092,3516,3516,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7079 -> 7092,0 */
	reached1[7079] = 1;
	trans[1][7079]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7080]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7081]	= settr(7388,4,7092,3517,3517,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7082 -> 7092,0 */
	reached1[7082] = 1;
	trans[1][7082]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7083]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7084]	= settr(7391,4,7092,3518,3518,"((START==ABORT))", 1, 2, 0); /* m: 7085 -> 7092,0 */
	reached1[7085] = 1;
	trans[1][7085]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7086]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7087]	= settr(7394,2,7088,2,0,"else", 1, 2, 0);
	trans[1][7088]	= settr(7395,4,7092,3519,3519,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7090 -> 0,7092 */
	reached1[7090] = 1;
	trans[1][7092]	= settr(7399,0,7107,3520,3520,"(run Thread(j))", 0, 2, 0);
	T = trans[1][7107] = settr(7414,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7414,0,7093,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7414,0,7105,0,0,"IF", 0, 2, 0);
	trans[1][7093]	= settr(7400,0,7104,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7104] = settr(7411,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7411,0,7100,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7100] = settr(7407,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7407,0,7094,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7407,0,7096,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7407,0,7098,0,0,"IF", 0, 2, 0);
	trans[1][7094]	= settr(7401,0,7102,3521,3521,"((_pid==0))", 0, 2, 0); /* m: 7095 -> 7102,0 */
	reached1[7095] = 1;
	trans[1][7095]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7101]	= settr(7408,0,7102,1,0,".(goto)", 0, 2, 0);
	trans[1][7096]	= settr(7403,0,7102,3522,3522,"((_pid==1))", 0, 2, 0); /* m: 7097 -> 7102,0 */
	reached1[7097] = 1;
	trans[1][7097]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7098]	= settr(7405,0,7102,3523,3523,"((_pid>1))", 0, 2, 0); /* m: 7099 -> 7102,0 */
	reached1[7099] = 1;
	trans[1][7099]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7102]	= settr(7409,0,7103,3524,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7103]	= settr(7410,0,7231,3525,3525,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7227 -> 0,7231 */
	reached1[7227] = 1;
	trans[1][7108]	= settr(7415,0,7227,1,0,".(goto)", 0, 2, 0); /* m: 7227 -> 0,7231 */
	reached1[7227] = 1;
	trans[1][7105]	= settr(7412,0,7106,2,0,"else", 0, 2, 0);
	trans[1][7106]	= settr(7413,0,7231,3526,3526,"(1)", 0, 2, 0); /* m: 7227 -> 7231,0 */
	reached1[7227] = 1;
	trans[1][7225]	= settr(7532,0,7227,1,0,".(goto)", 0, 2, 0); /* m: 7227 -> 0,7231 */
	reached1[7227] = 1;
	trans[1][7110]	= settr(7417,0,7147,3527,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][7147] = settr(7454,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7454,0,7130,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7130] = settr(7437,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7437,2,7128,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7128] = settr(7435,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7435,2,7111,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7435,2,7114,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7435,2,7117,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7435,2,7120,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7435,2,7123,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7435,2,7126,0,0,"IF", 1, 2, 0);
	trans[1][7111]	= settr(7418,4,7145,3528,3528,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7112 -> 7145,0 */
	reached1[7112] = 1;
	trans[1][7112]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7113]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7129]	= settr(7436,0,7145,3529,3529,".(goto)", 1, 2, 0);
	trans[1][7114]	= settr(7421,4,7145,3530,3530,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7115 -> 7145,0 */
	reached1[7115] = 1;
	trans[1][7115]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7116]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7117]	= settr(7424,4,7145,3531,3531,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7118 -> 7145,0 */
	reached1[7118] = 1;
	trans[1][7118]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7119]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7120]	= settr(7427,4,7145,3532,3532,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7121 -> 7145,0 */
	reached1[7121] = 1;
	trans[1][7121]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7122]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7123]	= settr(7430,4,7145,3533,3533,"((PAUSE==ABORT))", 1, 2, 0); /* m: 7124 -> 7145,0 */
	reached1[7124] = 1;
	trans[1][7124]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7125]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7126]	= settr(7433,2,7127,2,0,"else", 1, 2, 0);
	trans[1][7127]	= settr(7434,4,7145,3534,3534,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7129 -> 0,7145 */
	reached1[7129] = 1;
	T = trans[1][7145] = settr(7452,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7452,0,7131,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7452,0,7143,0,0,"IF", 0, 2, 0);
	trans[1][7131]	= settr(7438,0,7142,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7142] = settr(7449,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7449,0,7138,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7138] = settr(7445,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7445,0,7132,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7445,0,7134,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7445,0,7136,0,0,"IF", 0, 2, 0);
	trans[1][7132]	= settr(7439,0,7140,3535,3535,"((_pid==0))", 0, 2, 0); /* m: 7133 -> 7140,0 */
	reached1[7133] = 1;
	trans[1][7133]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7139]	= settr(7446,0,7140,1,0,".(goto)", 0, 2, 0);
	trans[1][7134]	= settr(7441,0,7140,3536,3536,"((_pid==1))", 0, 2, 0); /* m: 7135 -> 7140,0 */
	reached1[7135] = 1;
	trans[1][7135]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7136]	= settr(7443,0,7140,3537,3537,"((_pid>1))", 0, 2, 0); /* m: 7137 -> 7140,0 */
	reached1[7137] = 1;
	trans[1][7137]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7140]	= settr(7447,0,7141,3538,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7141]	= settr(7448,0,7231,3539,3539,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7227 -> 0,7231 */
	reached1[7227] = 1;
	trans[1][7146]	= settr(7453,0,7227,1,0,".(goto)", 0, 2, 0); /* m: 7227 -> 0,7231 */
	reached1[7227] = 1;
	trans[1][7143]	= settr(7450,0,7144,2,0,"else", 0, 2, 0);
	trans[1][7144]	= settr(7451,0,7231,3540,3540,"(1)", 0, 2, 0); /* m: 7227 -> 7231,0 */
	reached1[7227] = 1;
	trans[1][7148]	= settr(7455,0,7185,3541,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][7185] = settr(7492,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7492,0,7168,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7168] = settr(7475,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7475,2,7166,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7166] = settr(7473,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7473,2,7149,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7473,2,7152,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7473,2,7155,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7473,2,7158,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7473,2,7161,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7473,2,7164,0,0,"IF", 1, 2, 0);
	trans[1][7149]	= settr(7456,4,7183,3542,3542,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7150 -> 7183,0 */
	reached1[7150] = 1;
	trans[1][7150]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7151]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7167]	= settr(7474,0,7183,3543,3543,".(goto)", 1, 2, 0);
	trans[1][7152]	= settr(7459,4,7183,3544,3544,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7153 -> 7183,0 */
	reached1[7153] = 1;
	trans[1][7153]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7154]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7155]	= settr(7462,4,7183,3545,3545,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7156 -> 7183,0 */
	reached1[7156] = 1;
	trans[1][7156]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7157]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7158]	= settr(7465,4,7183,3546,3546,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7159 -> 7183,0 */
	reached1[7159] = 1;
	trans[1][7159]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7160]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7161]	= settr(7468,4,7183,3547,3547,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 7162 -> 7183,0 */
	reached1[7162] = 1;
	trans[1][7162]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7163]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7164]	= settr(7471,2,7165,2,0,"else", 1, 2, 0);
	trans[1][7165]	= settr(7472,4,7183,3548,3548,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7167 -> 0,7183 */
	reached1[7167] = 1;
	T = trans[1][7183] = settr(7490,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7490,0,7169,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7490,0,7181,0,0,"IF", 0, 2, 0);
	trans[1][7169]	= settr(7476,0,7180,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7180] = settr(7487,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7487,0,7176,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7176] = settr(7483,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7483,0,7170,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7483,0,7172,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7483,0,7174,0,0,"IF", 0, 2, 0);
	trans[1][7170]	= settr(7477,0,7178,3549,3549,"((_pid==0))", 0, 2, 0); /* m: 7171 -> 7178,0 */
	reached1[7171] = 1;
	trans[1][7171]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7177]	= settr(7484,0,7178,1,0,".(goto)", 0, 2, 0);
	trans[1][7172]	= settr(7479,0,7178,3550,3550,"((_pid==1))", 0, 2, 0); /* m: 7173 -> 7178,0 */
	reached1[7173] = 1;
	trans[1][7173]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7174]	= settr(7481,0,7178,3551,3551,"((_pid>1))", 0, 2, 0); /* m: 7175 -> 7178,0 */
	reached1[7175] = 1;
	trans[1][7175]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7178]	= settr(7485,0,7179,3552,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7179]	= settr(7486,0,7231,3553,3553,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7227 -> 0,7231 */
	reached1[7227] = 1;
	trans[1][7184]	= settr(7491,0,7227,1,0,".(goto)", 0, 2, 0); /* m: 7227 -> 0,7231 */
	reached1[7227] = 1;
	trans[1][7181]	= settr(7488,0,7182,2,0,"else", 0, 2, 0);
	trans[1][7182]	= settr(7489,0,7231,3554,3554,"(1)", 0, 2, 0); /* m: 7227 -> 7231,0 */
	reached1[7227] = 1;
	trans[1][7186]	= settr(7493,0,7223,3555,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][7223] = settr(7530,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7530,0,7206,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7206] = settr(7513,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7513,2,7204,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7204] = settr(7511,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7511,2,7187,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7511,2,7190,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7511,2,7193,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7511,2,7196,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7511,2,7199,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7511,2,7202,0,0,"IF", 1, 2, 0);
	trans[1][7187]	= settr(7494,4,7221,3556,3556,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7188 -> 7221,0 */
	reached1[7188] = 1;
	trans[1][7188]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7189]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7205]	= settr(7512,0,7221,3557,3557,".(goto)", 1, 2, 0);
	trans[1][7190]	= settr(7497,4,7221,3558,3558,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7191 -> 7221,0 */
	reached1[7191] = 1;
	trans[1][7191]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7192]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7193]	= settr(7500,4,7221,3559,3559,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7194 -> 7221,0 */
	reached1[7194] = 1;
	trans[1][7194]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7195]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7196]	= settr(7503,4,7221,3560,3560,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7197 -> 7221,0 */
	reached1[7197] = 1;
	trans[1][7197]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7198]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7199]	= settr(7506,4,7221,3561,3561,"((STOP==ABORT))", 1, 2, 0); /* m: 7200 -> 7221,0 */
	reached1[7200] = 1;
	trans[1][7200]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7201]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7202]	= settr(7509,2,7203,2,0,"else", 1, 2, 0);
	trans[1][7203]	= settr(7510,4,7221,3562,3562,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7205 -> 0,7221 */
	reached1[7205] = 1;
	T = trans[1][7221] = settr(7528,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7528,0,7207,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7528,0,7219,0,0,"IF", 0, 2, 0);
	trans[1][7207]	= settr(7514,0,7218,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7218] = settr(7525,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7525,0,7214,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7214] = settr(7521,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7521,0,7208,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7521,0,7210,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7521,0,7212,0,0,"IF", 0, 2, 0);
	trans[1][7208]	= settr(7515,0,7216,3563,3563,"((_pid==0))", 0, 2, 0); /* m: 7209 -> 7216,0 */
	reached1[7209] = 1;
	trans[1][7209]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7215]	= settr(7522,0,7216,1,0,".(goto)", 0, 2, 0);
	trans[1][7210]	= settr(7517,0,7216,3564,3564,"((_pid==1))", 0, 2, 0); /* m: 7211 -> 7216,0 */
	reached1[7211] = 1;
	trans[1][7211]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7212]	= settr(7519,0,7216,3565,3565,"((_pid>1))", 0, 2, 0); /* m: 7213 -> 7216,0 */
	reached1[7213] = 1;
	trans[1][7213]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7216]	= settr(7523,0,7217,3566,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7217]	= settr(7524,0,7231,3567,3567,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7227 -> 0,7231 */
	reached1[7227] = 1;
	trans[1][7222]	= settr(7529,0,7227,1,0,".(goto)", 0, 2, 0); /* m: 7227 -> 0,7231 */
	reached1[7227] = 1;
	trans[1][7219]	= settr(7526,0,7220,2,0,"else", 0, 2, 0);
	trans[1][7220]	= settr(7527,0,7231,3568,3568,"(1)", 0, 2, 0); /* m: 7227 -> 7231,0 */
	reached1[7227] = 1;
	trans[1][7227]	= settr(7534,0,7231,3569,3569,"j = (j+1)", 0, 2, 0);
	trans[1][7228]	= settr(7535,0,7229,2,0,"else", 0, 2, 0);
	trans[1][7229]	= settr(7536,0,7651,3570,3570,"j = 1", 0, 2, 0);
	trans[1][7230]	= settr(7537,0,7651,1,0,"goto :b51", 0, 2, 0);
	trans[1][7233]	= settr(7540,0,7651,1,0,"break", 0, 2, 0);
	trans[1][7403]	= settr(7710,0,7651,1,0,".(goto)", 0, 2, 0);
	trans[1][7235]	= settr(7542,0,7401,2,0,"else", 0, 2, 0);
	T = trans[ 1][7401] = settr(7708,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7708,0,7236,0,0,"sub-sequence", 0, 2, 0);
	trans[1][7236]	= settr(7543,0,7398,3571,3571,"j = (3-1)", 0, 2, 0);
	trans[1][7399]	= settr(7706,0,7398,1,0,".(goto)", 0, 2, 0);
	T = trans[1][7398] = settr(7705,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(7705,0,7237,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(7705,0,7395,0,0,"DO", 0, 2, 0);
	trans[1][7237]	= settr(7544,0,7393,3572,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][7393] = settr(7700,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7700,0,7391,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7391] = settr(7698,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7698,0,7238,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7698,0,7277,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7698,0,7315,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7698,0,7353,0,0,"IF", 0, 2, 0);
	trans[1][7238]	= settr(7545,0,7276,3573,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][7276] = settr(7583,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7583,0,7258,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7258] = settr(7565,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7565,2,7256,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7256] = settr(7563,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7563,2,7239,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7563,2,7242,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7563,2,7245,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7563,2,7248,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7563,2,7251,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7563,2,7254,0,0,"IF", 1, 2, 0);
	trans[1][7239]	= settr(7546,4,7259,3574,3574,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7240 -> 7259,0 */
	reached1[7240] = 1;
	trans[1][7240]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7241]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7257]	= settr(7564,0,7259,3575,3575,".(goto)", 1, 2, 0);
	trans[1][7242]	= settr(7549,4,7259,3576,3576,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7243 -> 7259,0 */
	reached1[7243] = 1;
	trans[1][7243]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7244]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7245]	= settr(7552,4,7259,3577,3577,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7246 -> 7259,0 */
	reached1[7246] = 1;
	trans[1][7246]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7247]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7248]	= settr(7555,4,7259,3578,3578,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7249 -> 7259,0 */
	reached1[7249] = 1;
	trans[1][7249]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7250]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7251]	= settr(7558,4,7259,3579,3579,"((START==ABORT))", 1, 2, 0); /* m: 7252 -> 7259,0 */
	reached1[7252] = 1;
	trans[1][7252]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7253]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7254]	= settr(7561,2,7255,2,0,"else", 1, 2, 0);
	trans[1][7255]	= settr(7562,4,7259,3580,3580,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7257 -> 0,7259 */
	reached1[7257] = 1;
	trans[1][7259]	= settr(7566,0,7274,3581,3581,"(run Thread(j))", 0, 2, 0);
	T = trans[1][7274] = settr(7581,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7581,0,7260,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7581,0,7272,0,0,"IF", 0, 2, 0);
	trans[1][7260]	= settr(7567,0,7271,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7271] = settr(7578,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7578,0,7267,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7267] = settr(7574,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7574,0,7261,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7574,0,7263,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7574,0,7265,0,0,"IF", 0, 2, 0);
	trans[1][7261]	= settr(7568,0,7269,3582,3582,"((_pid==0))", 0, 2, 0); /* m: 7262 -> 7269,0 */
	reached1[7262] = 1;
	trans[1][7262]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7268]	= settr(7575,0,7269,1,0,".(goto)", 0, 2, 0);
	trans[1][7263]	= settr(7570,0,7269,3583,3583,"((_pid==1))", 0, 2, 0); /* m: 7264 -> 7269,0 */
	reached1[7264] = 1;
	trans[1][7264]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7265]	= settr(7572,0,7269,3584,3584,"((_pid>1))", 0, 2, 0); /* m: 7266 -> 7269,0 */
	reached1[7266] = 1;
	trans[1][7266]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7269]	= settr(7576,0,7270,3585,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7270]	= settr(7577,0,7398,3586,3586,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7394 -> 0,7398 */
	reached1[7394] = 1;
	trans[1][7275]	= settr(7582,0,7394,1,0,".(goto)", 0, 2, 0); /* m: 7394 -> 0,7398 */
	reached1[7394] = 1;
	trans[1][7272]	= settr(7579,0,7273,2,0,"else", 0, 2, 0);
	trans[1][7273]	= settr(7580,0,7398,3587,3587,"(1)", 0, 2, 0); /* m: 7394 -> 7398,0 */
	reached1[7394] = 1;
	trans[1][7392]	= settr(7699,0,7394,1,0,".(goto)", 0, 2, 0); /* m: 7394 -> 0,7398 */
	reached1[7394] = 1;
	trans[1][7277]	= settr(7584,0,7314,3588,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][7314] = settr(7621,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7621,0,7297,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7297] = settr(7604,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7604,2,7295,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7295] = settr(7602,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7602,2,7278,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7602,2,7281,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7602,2,7284,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7602,2,7287,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7602,2,7290,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7602,2,7293,0,0,"IF", 1, 2, 0);
	trans[1][7278]	= settr(7585,4,7312,3589,3589,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7279 -> 7312,0 */
	reached1[7279] = 1;
	trans[1][7279]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7280]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7296]	= settr(7603,0,7312,3590,3590,".(goto)", 1, 2, 0);
	trans[1][7281]	= settr(7588,4,7312,3591,3591,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7282 -> 7312,0 */
	reached1[7282] = 1;
	trans[1][7282]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7283]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7284]	= settr(7591,4,7312,3592,3592,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7285 -> 7312,0 */
	reached1[7285] = 1;
	trans[1][7285]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7286]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7287]	= settr(7594,4,7312,3593,3593,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7288 -> 7312,0 */
	reached1[7288] = 1;
	trans[1][7288]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7289]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7290]	= settr(7597,4,7312,3594,3594,"((PAUSE==ABORT))", 1, 2, 0); /* m: 7291 -> 7312,0 */
	reached1[7291] = 1;
	trans[1][7291]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7292]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7293]	= settr(7600,2,7294,2,0,"else", 1, 2, 0);
	trans[1][7294]	= settr(7601,4,7312,3595,3595,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7296 -> 0,7312 */
	reached1[7296] = 1;
	T = trans[1][7312] = settr(7619,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7619,0,7298,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7619,0,7310,0,0,"IF", 0, 2, 0);
	trans[1][7298]	= settr(7605,0,7309,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7309] = settr(7616,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7616,0,7305,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7305] = settr(7612,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7612,0,7299,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7612,0,7301,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7612,0,7303,0,0,"IF", 0, 2, 0);
	trans[1][7299]	= settr(7606,0,7307,3596,3596,"((_pid==0))", 0, 2, 0); /* m: 7300 -> 7307,0 */
	reached1[7300] = 1;
	trans[1][7300]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7306]	= settr(7613,0,7307,1,0,".(goto)", 0, 2, 0);
	trans[1][7301]	= settr(7608,0,7307,3597,3597,"((_pid==1))", 0, 2, 0); /* m: 7302 -> 7307,0 */
	reached1[7302] = 1;
	trans[1][7302]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7303]	= settr(7610,0,7307,3598,3598,"((_pid>1))", 0, 2, 0); /* m: 7304 -> 7307,0 */
	reached1[7304] = 1;
	trans[1][7304]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7307]	= settr(7614,0,7308,3599,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7308]	= settr(7615,0,7398,3600,3600,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7394 -> 0,7398 */
	reached1[7394] = 1;
	trans[1][7313]	= settr(7620,0,7394,1,0,".(goto)", 0, 2, 0); /* m: 7394 -> 0,7398 */
	reached1[7394] = 1;
	trans[1][7310]	= settr(7617,0,7311,2,0,"else", 0, 2, 0);
	trans[1][7311]	= settr(7618,0,7398,3601,3601,"(1)", 0, 2, 0); /* m: 7394 -> 7398,0 */
	reached1[7394] = 1;
	trans[1][7315]	= settr(7622,0,7352,3602,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][7352] = settr(7659,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7659,0,7335,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7335] = settr(7642,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7642,2,7333,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7333] = settr(7640,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7640,2,7316,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7640,2,7319,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7640,2,7322,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7640,2,7325,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7640,2,7328,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7640,2,7331,0,0,"IF", 1, 2, 0);
	trans[1][7316]	= settr(7623,4,7350,3603,3603,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7317 -> 7350,0 */
	reached1[7317] = 1;
	trans[1][7317]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7318]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7334]	= settr(7641,0,7350,3604,3604,".(goto)", 1, 2, 0);
	trans[1][7319]	= settr(7626,4,7350,3605,3605,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7320 -> 7350,0 */
	reached1[7320] = 1;
	trans[1][7320]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7321]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7322]	= settr(7629,4,7350,3606,3606,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7323 -> 7350,0 */
	reached1[7323] = 1;
	trans[1][7323]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7324]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7325]	= settr(7632,4,7350,3607,3607,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7326 -> 7350,0 */
	reached1[7326] = 1;
	trans[1][7326]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7327]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7328]	= settr(7635,4,7350,3608,3608,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 7329 -> 7350,0 */
	reached1[7329] = 1;
	trans[1][7329]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7330]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7331]	= settr(7638,2,7332,2,0,"else", 1, 2, 0);
	trans[1][7332]	= settr(7639,4,7350,3609,3609,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7334 -> 0,7350 */
	reached1[7334] = 1;
	T = trans[1][7350] = settr(7657,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7657,0,7336,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7657,0,7348,0,0,"IF", 0, 2, 0);
	trans[1][7336]	= settr(7643,0,7347,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7347] = settr(7654,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7654,0,7343,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7343] = settr(7650,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7650,0,7337,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7650,0,7339,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7650,0,7341,0,0,"IF", 0, 2, 0);
	trans[1][7337]	= settr(7644,0,7345,3610,3610,"((_pid==0))", 0, 2, 0); /* m: 7338 -> 7345,0 */
	reached1[7338] = 1;
	trans[1][7338]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7344]	= settr(7651,0,7345,1,0,".(goto)", 0, 2, 0);
	trans[1][7339]	= settr(7646,0,7345,3611,3611,"((_pid==1))", 0, 2, 0); /* m: 7340 -> 7345,0 */
	reached1[7340] = 1;
	trans[1][7340]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7341]	= settr(7648,0,7345,3612,3612,"((_pid>1))", 0, 2, 0); /* m: 7342 -> 7345,0 */
	reached1[7342] = 1;
	trans[1][7342]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7345]	= settr(7652,0,7346,3613,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7346]	= settr(7653,0,7398,3614,3614,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7394 -> 0,7398 */
	reached1[7394] = 1;
	trans[1][7351]	= settr(7658,0,7394,1,0,".(goto)", 0, 2, 0); /* m: 7394 -> 0,7398 */
	reached1[7394] = 1;
	trans[1][7348]	= settr(7655,0,7349,2,0,"else", 0, 2, 0);
	trans[1][7349]	= settr(7656,0,7398,3615,3615,"(1)", 0, 2, 0); /* m: 7394 -> 7398,0 */
	reached1[7394] = 1;
	trans[1][7353]	= settr(7660,0,7390,3616,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][7390] = settr(7697,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7697,0,7373,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7373] = settr(7680,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7680,2,7371,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7371] = settr(7678,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7678,2,7354,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7678,2,7357,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7678,2,7360,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7678,2,7363,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7678,2,7366,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7678,2,7369,0,0,"IF", 1, 2, 0);
	trans[1][7354]	= settr(7661,4,7388,3617,3617,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7355 -> 7388,0 */
	reached1[7355] = 1;
	trans[1][7355]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7356]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7372]	= settr(7679,0,7388,3618,3618,".(goto)", 1, 2, 0);
	trans[1][7357]	= settr(7664,4,7388,3619,3619,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7358 -> 7388,0 */
	reached1[7358] = 1;
	trans[1][7358]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7359]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7360]	= settr(7667,4,7388,3620,3620,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7361 -> 7388,0 */
	reached1[7361] = 1;
	trans[1][7361]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7362]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7363]	= settr(7670,4,7388,3621,3621,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7364 -> 7388,0 */
	reached1[7364] = 1;
	trans[1][7364]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7365]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7366]	= settr(7673,4,7388,3622,3622,"((STOP==ABORT))", 1, 2, 0); /* m: 7367 -> 7388,0 */
	reached1[7367] = 1;
	trans[1][7367]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7368]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7369]	= settr(7676,2,7370,2,0,"else", 1, 2, 0);
	trans[1][7370]	= settr(7677,4,7388,3623,3623,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7372 -> 0,7388 */
	reached1[7372] = 1;
	T = trans[1][7388] = settr(7695,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7695,0,7374,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7695,0,7386,0,0,"IF", 0, 2, 0);
	trans[1][7374]	= settr(7681,0,7385,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7385] = settr(7692,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7692,0,7381,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7381] = settr(7688,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7688,0,7375,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7688,0,7377,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7688,0,7379,0,0,"IF", 0, 2, 0);
	trans[1][7375]	= settr(7682,0,7383,3624,3624,"((_pid==0))", 0, 2, 0); /* m: 7376 -> 7383,0 */
	reached1[7376] = 1;
	trans[1][7376]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7382]	= settr(7689,0,7383,1,0,".(goto)", 0, 2, 0);
	trans[1][7377]	= settr(7684,0,7383,3625,3625,"((_pid==1))", 0, 2, 0); /* m: 7378 -> 7383,0 */
	reached1[7378] = 1;
	trans[1][7378]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7379]	= settr(7686,0,7383,3626,3626,"((_pid>1))", 0, 2, 0); /* m: 7380 -> 7383,0 */
	reached1[7380] = 1;
	trans[1][7380]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7383]	= settr(7690,0,7384,3627,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7384]	= settr(7691,0,7398,3628,3628,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7394 -> 0,7398 */
	reached1[7394] = 1;
	trans[1][7389]	= settr(7696,0,7394,1,0,".(goto)", 0, 2, 0); /* m: 7394 -> 0,7398 */
	reached1[7394] = 1;
	trans[1][7386]	= settr(7693,0,7387,2,0,"else", 0, 2, 0);
	trans[1][7387]	= settr(7694,0,7398,3629,3629,"(1)", 0, 2, 0); /* m: 7394 -> 7398,0 */
	reached1[7394] = 1;
	trans[1][7394]	= settr(7701,0,7398,3630,3630,"j = (j-1)", 0, 2, 0);
	trans[1][7395]	= settr(7702,0,7396,2,0,"else", 0, 2, 0);
	trans[1][7396]	= settr(7703,0,7651,3631,3631,"j = 1", 0, 2, 0);
	trans[1][7397]	= settr(7704,0,7651,1,0,"goto :b52", 0, 2, 0);
	trans[1][7400]	= settr(7707,0,7651,1,0,"break", 0, 2, 0);
	trans[1][7632]	= settr(7939,0,7651,1,0,".(goto)", 0, 2, 0);
	trans[1][7405]	= settr(7712,0,7630,2,0,"else", 0, 2, 0);
	T = trans[ 1][7630] = settr(7937,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7937,0,7406,0,0,"sub-sequence", 0, 2, 0);
	trans[1][7406]	= settr(7713,0,7571,3632,0,"printf('Supervisor propagating command %e...\\n',12)", 0, 2, 0);
	T = trans[ 1][7571] = settr(7878,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7878,0,7568,0,0,"sub-sequence", 0, 2, 0);
	trans[1][7569]	= settr(7876,0,7568,1,0,".(goto)", 0, 2, 0);
	T = trans[1][7568] = settr(7875,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(7875,0,7407,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(7875,0,7565,0,0,"DO", 0, 2, 0);
	trans[1][7407]	= settr(7714,0,7563,3633,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][7563] = settr(7870,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7870,0,7561,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7561] = settr(7868,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7868,0,7408,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7868,0,7447,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7868,0,7485,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7868,0,7523,0,0,"IF", 0, 2, 0);
	trans[1][7408]	= settr(7715,0,7446,3634,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][7446] = settr(7753,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7753,0,7428,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7428] = settr(7735,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7735,2,7426,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7426] = settr(7733,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7733,2,7409,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7733,2,7412,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7733,2,7415,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7733,2,7418,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7733,2,7421,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7733,2,7424,0,0,"IF", 1, 2, 0);
	trans[1][7409]	= settr(7716,4,7429,3635,3635,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7410 -> 7429,0 */
	reached1[7410] = 1;
	trans[1][7410]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7411]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7427]	= settr(7734,0,7429,3636,3636,".(goto)", 1, 2, 0);
	trans[1][7412]	= settr(7719,4,7429,3637,3637,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7413 -> 7429,0 */
	reached1[7413] = 1;
	trans[1][7413]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7414]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7415]	= settr(7722,4,7429,3638,3638,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7416 -> 7429,0 */
	reached1[7416] = 1;
	trans[1][7416]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7417]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7418]	= settr(7725,4,7429,3639,3639,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7419 -> 7429,0 */
	reached1[7419] = 1;
	trans[1][7419]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7420]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7421]	= settr(7728,4,7429,3640,3640,"((START==ABORT))", 1, 2, 0); /* m: 7422 -> 7429,0 */
	reached1[7422] = 1;
	trans[1][7422]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7423]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7424]	= settr(7731,2,7425,2,0,"else", 1, 2, 0);
	trans[1][7425]	= settr(7732,4,7429,3641,3641,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7427 -> 0,7429 */
	reached1[7427] = 1;
	trans[1][7429]	= settr(7736,0,7444,3642,3642,"(run Thread(j))", 0, 2, 0);
	T = trans[1][7444] = settr(7751,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(7751,0,7430,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(7751,0,7442,0,0,"IF", 0, 2, 0);
	trans[1][7430]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][7441] = settr(7748,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7748,0,7437,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7437] = settr(7744,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7744,0,7431,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7744,0,7433,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7744,0,7435,0,0,"IF", 0, 2, 0);
	trans[1][7431]	= settr(7738,0,7439,3643,3643,"((_pid==0))", 0, 2, 0); /* m: 7432 -> 7439,0 */
	reached1[7432] = 1;
	trans[1][7432]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7438]	= settr(7745,0,7439,1,0,".(goto)", 0, 2, 0);
	trans[1][7433]	= settr(7740,0,7439,3644,3644,"((_pid==1))", 0, 2, 0); /* m: 7434 -> 7439,0 */
	reached1[7434] = 1;
	trans[1][7434]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7435]	= settr(7742,0,7439,3645,3645,"((_pid>1))", 0, 2, 0); /* m: 7436 -> 7439,0 */
	reached1[7436] = 1;
	trans[1][7436]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7439]	= settr(7746,0,7440,3646,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7440]	= settr(7747,0,7568,3647,3647,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7564 -> 0,7568 */
	reached1[7564] = 1;
	trans[1][7445]	= settr(7752,0,7564,1,0,".(goto)", 0, 2, 0); /* m: 7564 -> 0,7568 */
	reached1[7564] = 1;
	trans[1][7442]	= settr(7749,0,7443,2,0,"else", 0, 2, 0);
	trans[1][7443]	= settr(7750,0,7568,3648,3648,"(1)", 0, 2, 0); /* m: 7564 -> 7568,0 */
	reached1[7564] = 1;
	trans[1][7562]	= settr(7869,0,7564,1,0,".(goto)", 0, 2, 0); /* m: 7564 -> 0,7568 */
	reached1[7564] = 1;
	trans[1][7447]	= settr(7754,0,7484,3649,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][7484] = settr(7791,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7791,0,7467,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7467] = settr(7774,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7774,2,7465,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7465] = settr(7772,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7772,2,7448,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7772,2,7451,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7772,2,7454,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7772,2,7457,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7772,2,7460,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7772,2,7463,0,0,"IF", 1, 2, 0);
	trans[1][7448]	= settr(7755,4,7482,3650,3650,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7449 -> 7482,0 */
	reached1[7449] = 1;
	trans[1][7449]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7450]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7466]	= settr(7773,0,7482,3651,3651,".(goto)", 1, 2, 0);
	trans[1][7451]	= settr(7758,4,7482,3652,3652,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7452 -> 7482,0 */
	reached1[7452] = 1;
	trans[1][7452]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7453]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7454]	= settr(7761,4,7482,3653,3653,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7455 -> 7482,0 */
	reached1[7455] = 1;
	trans[1][7455]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7456]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7457]	= settr(7764,4,7482,3654,3654,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7458 -> 7482,0 */
	reached1[7458] = 1;
	trans[1][7458]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7459]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7460]	= settr(7767,4,7482,3655,3655,"((PAUSE==ABORT))", 1, 2, 0); /* m: 7461 -> 7482,0 */
	reached1[7461] = 1;
	trans[1][7461]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7462]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7463]	= settr(7770,2,7464,2,0,"else", 1, 2, 0);
	trans[1][7464]	= settr(7771,4,7482,3656,3656,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7466 -> 0,7482 */
	reached1[7466] = 1;
	T = trans[1][7482] = settr(7789,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(7789,0,7468,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(7789,0,7480,0,0,"IF", 0, 2, 0);
	trans[1][7468]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][7479] = settr(7786,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7786,0,7475,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7475] = settr(7782,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7782,0,7469,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7782,0,7471,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7782,0,7473,0,0,"IF", 0, 2, 0);
	trans[1][7469]	= settr(7776,0,7477,3657,3657,"((_pid==0))", 0, 2, 0); /* m: 7470 -> 7477,0 */
	reached1[7470] = 1;
	trans[1][7470]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7476]	= settr(7783,0,7477,1,0,".(goto)", 0, 2, 0);
	trans[1][7471]	= settr(7778,0,7477,3658,3658,"((_pid==1))", 0, 2, 0); /* m: 7472 -> 7477,0 */
	reached1[7472] = 1;
	trans[1][7472]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7473]	= settr(7780,0,7477,3659,3659,"((_pid>1))", 0, 2, 0); /* m: 7474 -> 7477,0 */
	reached1[7474] = 1;
	trans[1][7474]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7477]	= settr(7784,0,7478,3660,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7478]	= settr(7785,0,7568,3661,3661,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7564 -> 0,7568 */
	reached1[7564] = 1;
	trans[1][7483]	= settr(7790,0,7564,1,0,".(goto)", 0, 2, 0); /* m: 7564 -> 0,7568 */
	reached1[7564] = 1;
	trans[1][7480]	= settr(7787,0,7481,2,0,"else", 0, 2, 0);
	trans[1][7481]	= settr(7788,0,7568,3662,3662,"(1)", 0, 2, 0); /* m: 7564 -> 7568,0 */
	reached1[7564] = 1;
	trans[1][7485]	= settr(7792,0,7522,3663,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][7522] = settr(7829,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7829,0,7505,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7505] = settr(7812,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7812,2,7503,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7503] = settr(7810,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7810,2,7486,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7810,2,7489,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7810,2,7492,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7810,2,7495,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7810,2,7498,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7810,2,7501,0,0,"IF", 1, 2, 0);
	trans[1][7486]	= settr(7793,4,7520,3664,3664,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7487 -> 7520,0 */
	reached1[7487] = 1;
	trans[1][7487]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7488]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7504]	= settr(7811,0,7520,3665,3665,".(goto)", 1, 2, 0);
	trans[1][7489]	= settr(7796,4,7520,3666,3666,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7490 -> 7520,0 */
	reached1[7490] = 1;
	trans[1][7490]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7491]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7492]	= settr(7799,4,7520,3667,3667,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7493 -> 7520,0 */
	reached1[7493] = 1;
	trans[1][7493]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7494]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7495]	= settr(7802,4,7520,3668,3668,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7496 -> 7520,0 */
	reached1[7496] = 1;
	trans[1][7496]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7497]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7498]	= settr(7805,4,7520,3669,3669,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 7499 -> 7520,0 */
	reached1[7499] = 1;
	trans[1][7499]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7500]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7501]	= settr(7808,2,7502,2,0,"else", 1, 2, 0);
	trans[1][7502]	= settr(7809,4,7520,3670,3670,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7504 -> 0,7520 */
	reached1[7504] = 1;
	T = trans[1][7520] = settr(7827,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(7827,0,7506,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(7827,0,7518,0,0,"IF", 0, 2, 0);
	trans[1][7506]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][7517] = settr(7824,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7824,0,7513,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7513] = settr(7820,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7820,0,7507,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7820,0,7509,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7820,0,7511,0,0,"IF", 0, 2, 0);
	trans[1][7507]	= settr(7814,0,7515,3671,3671,"((_pid==0))", 0, 2, 0); /* m: 7508 -> 7515,0 */
	reached1[7508] = 1;
	trans[1][7508]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7514]	= settr(7821,0,7515,1,0,".(goto)", 0, 2, 0);
	trans[1][7509]	= settr(7816,0,7515,3672,3672,"((_pid==1))", 0, 2, 0); /* m: 7510 -> 7515,0 */
	reached1[7510] = 1;
	trans[1][7510]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7511]	= settr(7818,0,7515,3673,3673,"((_pid>1))", 0, 2, 0); /* m: 7512 -> 7515,0 */
	reached1[7512] = 1;
	trans[1][7512]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7515]	= settr(7822,0,7516,3674,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7516]	= settr(7823,0,7568,3675,3675,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7564 -> 0,7568 */
	reached1[7564] = 1;
	trans[1][7521]	= settr(7828,0,7564,1,0,".(goto)", 0, 2, 0); /* m: 7564 -> 0,7568 */
	reached1[7564] = 1;
	trans[1][7518]	= settr(7825,0,7519,2,0,"else", 0, 2, 0);
	trans[1][7519]	= settr(7826,0,7568,3676,3676,"(1)", 0, 2, 0); /* m: 7564 -> 7568,0 */
	reached1[7564] = 1;
	trans[1][7523]	= settr(7830,0,7560,3677,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][7560] = settr(7867,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7867,0,7543,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7543] = settr(7850,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(7850,2,7541,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7541] = settr(7848,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7848,2,7524,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7848,2,7527,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7848,2,7530,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7848,2,7533,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(7848,2,7536,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(7848,2,7539,0,0,"IF", 1, 2, 0);
	trans[1][7524]	= settr(7831,4,7558,3678,3678,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7525 -> 7558,0 */
	reached1[7525] = 1;
	trans[1][7525]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7526]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7542]	= settr(7849,0,7558,3679,3679,".(goto)", 1, 2, 0);
	trans[1][7527]	= settr(7834,4,7558,3680,3680,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7528 -> 7558,0 */
	reached1[7528] = 1;
	trans[1][7528]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7529]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7530]	= settr(7837,4,7558,3681,3681,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7531 -> 7558,0 */
	reached1[7531] = 1;
	trans[1][7531]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7532]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7533]	= settr(7840,4,7558,3682,3682,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7534 -> 7558,0 */
	reached1[7534] = 1;
	trans[1][7534]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7535]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7536]	= settr(7843,4,7558,3683,3683,"((STOP==ABORT))", 1, 2, 0); /* m: 7537 -> 7558,0 */
	reached1[7537] = 1;
	trans[1][7537]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7538]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7539]	= settr(7846,2,7540,2,0,"else", 1, 2, 0);
	trans[1][7540]	= settr(7847,4,7558,3684,3684,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7542 -> 0,7558 */
	reached1[7542] = 1;
	T = trans[1][7558] = settr(7865,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(7865,0,7544,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(7865,0,7556,0,0,"IF", 0, 2, 0);
	trans[1][7544]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][7555] = settr(7862,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7862,0,7551,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7551] = settr(7858,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7858,0,7545,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7858,0,7547,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7858,0,7549,0,0,"IF", 0, 2, 0);
	trans[1][7545]	= settr(7852,0,7553,3685,3685,"((_pid==0))", 0, 2, 0); /* m: 7546 -> 7553,0 */
	reached1[7546] = 1;
	trans[1][7546]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7552]	= settr(7859,0,7553,1,0,".(goto)", 0, 2, 0);
	trans[1][7547]	= settr(7854,0,7553,3686,3686,"((_pid==1))", 0, 2, 0); /* m: 7548 -> 7553,0 */
	reached1[7548] = 1;
	trans[1][7548]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7549]	= settr(7856,0,7553,3687,3687,"((_pid>1))", 0, 2, 0); /* m: 7550 -> 7553,0 */
	reached1[7550] = 1;
	trans[1][7550]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7553]	= settr(7860,0,7554,3688,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7554]	= settr(7861,0,7568,3689,3689,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7564 -> 0,7568 */
	reached1[7564] = 1;
	trans[1][7559]	= settr(7866,0,7564,1,0,".(goto)", 0, 2, 0); /* m: 7564 -> 0,7568 */
	reached1[7564] = 1;
	trans[1][7556]	= settr(7863,0,7557,2,0,"else", 0, 2, 0);
	trans[1][7557]	= settr(7864,0,7568,3690,3690,"(1)", 0, 2, 0); /* m: 7564 -> 7568,0 */
	reached1[7564] = 1;
	trans[1][7564]	= settr(7871,0,7568,3691,3691,"j = (j+1)", 0, 2, 0);
	trans[1][7565]	= settr(7872,0,7566,2,0,"else", 0, 2, 0);
	trans[1][7566]	= settr(7873,0,7627,3692,3692,"j = 1", 0, 2, 0);
	trans[1][7567]	= settr(7874,0,7627,1,0,"goto :b53", 0, 2, 0);
	trans[1][7570]	= settr(7877,0,7627,1,0,"break", 0, 2, 0);
	trans[1][7628]	= settr(7935,0,7627,1,0,".(goto)", 0, 2, 0);
	T = trans[1][7627] = settr(7934,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(7934,0,7572,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(7934,0,7624,0,0,"DO", 0, 2, 0);
	trans[1][7572]	= settr(7879,0,7621,3693,0,"((j<3))", 0, 2, 0);
	T = trans[1][7621] = settr(7928,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7928,0,7573,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7928,0,7585,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7928,0,7597,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7928,0,7609,0,0,"IF", 0, 2, 0);
	trans[1][7573]	= settr(7880,0,7584,3694,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][7584] = settr(7891,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7891,0,7580,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7580] = settr(7887,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7887,0,7574,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7887,0,7576,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7887,0,7578,0,0,"IF", 0, 2, 0);
	trans[1][7574]	= settr(7881,0,7582,3695,3695,"((_pid==0))", 0, 2, 0); /* m: 7575 -> 7582,0 */
	reached1[7575] = 1;
	trans[1][7575]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7581]	= settr(7888,0,7582,1,0,".(goto)", 0, 2, 0);
	trans[1][7576]	= settr(7883,0,7582,3696,3696,"((_pid==1))", 0, 2, 0); /* m: 7577 -> 7582,0 */
	reached1[7577] = 1;
	trans[1][7577]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7578]	= settr(7885,0,7582,3697,3697,"((_pid>1))", 0, 2, 0); /* m: 7579 -> 7582,0 */
	reached1[7579] = 1;
	trans[1][7579]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7582]	= settr(7889,0,7583,3698,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7583]	= settr(7890,0,7627,3699,3699,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7623 -> 0,7627 */
	reached1[7623] = 1;
	trans[1][7622]	= settr(7929,0,7623,1,0,".(goto)", 0, 2, 0); /* m: 7623 -> 0,7627 */
	reached1[7623] = 1;
	trans[1][7585]	= settr(7892,0,7596,3700,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][7596] = settr(7903,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7903,0,7592,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7592] = settr(7899,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7899,0,7586,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7899,0,7588,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7899,0,7590,0,0,"IF", 0, 2, 0);
	trans[1][7586]	= settr(7893,0,7594,3701,3701,"((_pid==0))", 0, 2, 0); /* m: 7587 -> 7594,0 */
	reached1[7587] = 1;
	trans[1][7587]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7593]	= settr(7900,0,7594,1,0,".(goto)", 0, 2, 0);
	trans[1][7588]	= settr(7895,0,7594,3702,3702,"((_pid==1))", 0, 2, 0); /* m: 7589 -> 7594,0 */
	reached1[7589] = 1;
	trans[1][7589]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7590]	= settr(7897,0,7594,3703,3703,"((_pid>1))", 0, 2, 0); /* m: 7591 -> 7594,0 */
	reached1[7591] = 1;
	trans[1][7591]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7594]	= settr(7901,0,7595,3704,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7595]	= settr(7902,0,7627,3705,3705,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7623 -> 0,7627 */
	reached1[7623] = 1;
	trans[1][7597]	= settr(7904,0,7608,3706,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][7608] = settr(7915,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7915,0,7604,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7604] = settr(7911,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7911,0,7598,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7911,0,7600,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7911,0,7602,0,0,"IF", 0, 2, 0);
	trans[1][7598]	= settr(7905,0,7606,3707,3707,"((_pid==0))", 0, 2, 0); /* m: 7599 -> 7606,0 */
	reached1[7599] = 1;
	trans[1][7599]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7605]	= settr(7912,0,7606,1,0,".(goto)", 0, 2, 0);
	trans[1][7600]	= settr(7907,0,7606,3708,3708,"((_pid==1))", 0, 2, 0); /* m: 7601 -> 7606,0 */
	reached1[7601] = 1;
	trans[1][7601]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7602]	= settr(7909,0,7606,3709,3709,"((_pid>1))", 0, 2, 0); /* m: 7603 -> 7606,0 */
	reached1[7603] = 1;
	trans[1][7603]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7606]	= settr(7913,0,7607,3710,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7607]	= settr(7914,0,7627,3711,3711,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7623 -> 0,7627 */
	reached1[7623] = 1;
	trans[1][7609]	= settr(7916,0,7620,3712,0,"((12==STOP))", 0, 2, 0);
	T = trans[ 1][7620] = settr(7927,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7927,0,7616,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7616] = settr(7923,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7923,0,7610,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7923,0,7612,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7923,0,7614,0,0,"IF", 0, 2, 0);
	trans[1][7610]	= settr(7917,0,7618,3713,3713,"((_pid==0))", 0, 2, 0); /* m: 7611 -> 7618,0 */
	reached1[7611] = 1;
	trans[1][7611]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7617]	= settr(7924,0,7618,1,0,".(goto)", 0, 2, 0);
	trans[1][7612]	= settr(7919,0,7618,3714,3714,"((_pid==1))", 0, 2, 0); /* m: 7613 -> 7618,0 */
	reached1[7613] = 1;
	trans[1][7613]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7614]	= settr(7921,0,7618,3715,3715,"((_pid>1))", 0, 2, 0); /* m: 7615 -> 7618,0 */
	reached1[7615] = 1;
	trans[1][7615]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7618]	= settr(7925,0,7619,3716,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7619]	= settr(7926,0,7627,3717,3717,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7623 -> 0,7627 */
	reached1[7623] = 1;
	trans[1][7623]	= settr(7930,0,7627,3718,3718,"j = (j+1)", 0, 2, 0);
	trans[1][7624]	= settr(7931,0,7625,2,0,"else", 0, 2, 0);
	trans[1][7625]	= settr(7932,0,7651,3719,3719,"j = 1", 0, 2, 0);
	trans[1][7626]	= settr(7933,0,7651,1,0,"goto :b54", 0, 2, 0);
	trans[1][7629]	= settr(7936,0,7651,1,0,"break", 0, 2, 0);
	trans[1][7636]	= settr(7943,0,7637,2,0,"else", 0, 2, 0);
	trans[1][7637]	= settr(7944,0,7651,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7651] = settr(7958,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7958,0,7649,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7649] = settr(7956,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7956,0,7641,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7956,0,7643,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7956,0,7645,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7956,0,7647,0,0,"IF", 0, 2, 0);
	trans[1][7641]	= settr(7948,0,7652,3720,3720,"(((0==0)&&(8==0)))", 0, 2, 0); /* m: 7642 -> 7652,0 */
	reached1[7642] = 1;
	trans[1][7642]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, _) -> %e\\n',3,4)",0,0,0);
	trans[1][7650]	= settr(7957,0,7652,1,0,".(goto)", 0, 2, 0);
	trans[1][7643]	= settr(7950,0,7652,3721,3721,"(((0==0)&&(8>0)))", 0, 2, 0); /* m: 7644 -> 7652,0 */
	reached1[7644] = 1;
	trans[1][7644]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, %e) -> %e\\n',3,8,4)",0,0,0);
	trans[1][7645]	= settr(7952,0,7652,3722,3722,"(((0>0)&&(8==0)))", 0, 2, 0); /* m: 7646 -> 7652,0 */
	reached1[7646] = 1;
	trans[1][7646]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, _) -> %e\\n',0,3,4)",0,0,0);
	trans[1][7647]	= settr(7954,0,7652,3723,3723,"(((0>0)&&(8>0)))", 0, 2, 0); /* m: 7648 -> 7652,0 */
	reached1[7648] = 1;
	trans[1][7648]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, %e) -> %e\\n',0,3,8,4)",0,0,0);
	trans[1][7652]	= settr(7959,0,7662,3724,3724,"states[0] = 4", 1, 2, 0);
	trans[1][7657]	= settr(7964,0,7662,1,0,".(goto)", 0, 2, 0);
	trans[1][7654]	= settr(7961,0,7655,2,0,"else", 0, 2, 0);
	trans[1][7655]	= settr(7962,0,7662,1,0,"(1)", 0, 2, 0);
	trans[1][7660]	= settr(7967,0,14619,3725,0,"(((commands[0]==STOP)||(commands[0]==ABORT)))", 1, 2, 0);
	trans[1][7661]	= settr(7968,0,14619,1,0,"goto :b17", 0, 2, 0);
	trans[1][7664]	= settr(7971,0,14619,1,0,"break", 0, 2, 0);
	T = trans[1][14619] = settr(14926,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14926,0,7665,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14926,0,11141,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14926,0,14617,0,0,"IF", 0, 2, 0);
	trans[1][7665]	= settr(7972,0,7666,3726,0,"((commands[0]==STOP))", 1, 2, 0);
	trans[1][7666]	= settr(7973,0,9403,3727,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))", 1, 2, 0);
	T = trans[ 1][9403] = settr(9710,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9710,0,7677,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7677] = settr(7984,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(7984,0,7675,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7675] = settr(7982,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7982,0,7667,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7982,0,7669,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(7982,0,7671,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(7982,0,7673,0,0,"IF", 0, 2, 0);
	trans[1][7667]	= settr(7974,0,7668,3728,0,"(((0==0)&&(12==0)))", 0, 2, 0);
	trans[1][7668]	= settr(7975,0,7678,3729,0,"printf('Supervisor: (%e, _) -> %e\\n',states[0],7)", 1, 2, 0);
	trans[1][7676]	= settr(7983,0,7678,1,0,".(goto)", 0, 2, 0);
	trans[1][7669]	= settr(7976,0,7670,3730,0,"(((0==0)&&(12>0)))", 0, 2, 0);
	trans[1][7670]	= settr(7977,0,7678,3731,0,"printf('Supervisor: (%e, %e) -> %e\\n',states[0],12,7)", 1, 2, 0);
	trans[1][7671]	= settr(7978,0,7672,3732,0,"(((0>0)&&(12==0)))", 0, 2, 0);
	trans[1][7672]	= settr(7979,0,7678,3733,0,"printf('Worker %d: (%e, _) -> %e\\n',0,states[0],7)", 1, 2, 0);
	trans[1][7673]	= settr(7980,0,7674,3734,0,"(((0>0)&&(12>0)))", 0, 2, 0);
	trans[1][7674]	= settr(7981,0,7678,3735,0,"printf('Worker %d: (%e, %e) -> %e\\n',0,states[0],12,7)", 1, 2, 0);
	trans[1][7678]	= settr(7985,0,9402,3736,3736,"states[0] = 7", 1, 2, 0);
	T = trans[ 1][9402] = settr(9709,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9709,0,9400,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9400] = settr(9707,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9707,0,7679,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9707,0,8252,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9707,0,8825,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9707,0,9398,0,0,"IF", 0, 2, 0);
	trans[1][7679]	= settr(7986,0,8251,3737,0,"((7==RUNNING))", 0, 2, 0);
	T = trans[ 1][8251] = settr(8558,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8558,0,8249,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8249] = settr(8556,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8556,0,7680,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8556,0,7683,0,0,"IF", 0, 2, 0);
	trans[1][7680]	= settr(7987,0,7681,3738,0,"(((6==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][7681]	= settr(7988,0,7682,3739,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][7682]	= settr(7989,0,11140,3740,3740,"supervisor_started = 1", 1, 2, 0);
	trans[1][8250]	= settr(8557,0,11140,1,0,".(goto)", 0, 2, 0);
	trans[1][7683]	= settr(7990,0,8247,2,0,"else", 0, 2, 0);
	T = trans[1][8247] = settr(8554,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8554,0,7684,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8554,0,8021,0,0,"IF", 0, 2, 0);
	trans[1][7684]	= settr(7991,0,8020,3741,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][8020] = settr(8327,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8327,0,8018,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8018] = settr(8325,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8325,0,7685,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8325,0,7851,0,0,"IF", 0, 2, 0);
	trans[1][7685]	= settr(7992,0,7850,3742,0,"(((6==START)||(6==PAUSED)))", 0, 2, 0);
	T = trans[ 1][7850] = settr(8157,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8157,0,7847,0,0,"sub-sequence", 0, 2, 0);
	trans[1][7848]	= settr(8155,0,7847,1,0,".(goto)", 0, 2, 0);
	T = trans[1][7847] = settr(8154,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(8154,0,7686,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(8154,0,7844,0,0,"DO", 0, 2, 0);
	trans[1][7686]	= settr(7993,0,7842,3743,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][7842] = settr(8149,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8149,0,7840,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7840] = settr(8147,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8147,0,7687,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8147,0,7726,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8147,0,7764,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8147,0,7802,0,0,"IF", 0, 2, 0);
	trans[1][7687]	= settr(7994,0,7725,3744,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][7725] = settr(8032,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8032,0,7707,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7707] = settr(8014,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8014,2,7705,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7705] = settr(8012,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8012,2,7688,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8012,2,7691,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8012,2,7694,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8012,2,7697,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8012,2,7700,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8012,2,7703,0,0,"IF", 1, 2, 0);
	trans[1][7688]	= settr(7995,4,7708,3745,3745,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7689 -> 7708,0 */
	reached1[7689] = 1;
	trans[1][7689]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7690]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7706]	= settr(8013,0,7708,3746,3746,".(goto)", 1, 2, 0);
	trans[1][7691]	= settr(7998,4,7708,3747,3747,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7692 -> 7708,0 */
	reached1[7692] = 1;
	trans[1][7692]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7693]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7694]	= settr(8001,4,7708,3748,3748,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7695 -> 7708,0 */
	reached1[7695] = 1;
	trans[1][7695]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7696]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7697]	= settr(8004,4,7708,3749,3749,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7698 -> 7708,0 */
	reached1[7698] = 1;
	trans[1][7698]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7699]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7700]	= settr(8007,4,7708,3750,3750,"((START==ABORT))", 1, 2, 0); /* m: 7701 -> 7708,0 */
	reached1[7701] = 1;
	trans[1][7701]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7702]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7703]	= settr(8010,2,7704,2,0,"else", 1, 2, 0);
	trans[1][7704]	= settr(8011,4,7708,3751,3751,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7706 -> 0,7708 */
	reached1[7706] = 1;
	trans[1][7708]	= settr(8015,0,7723,3752,3752,"(run Thread(j))", 0, 2, 0);
	T = trans[1][7723] = settr(8030,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8030,0,7709,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8030,0,7721,0,0,"IF", 0, 2, 0);
	trans[1][7709]	= settr(8016,0,7720,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7720] = settr(8027,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8027,0,7716,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7716] = settr(8023,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8023,0,7710,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8023,0,7712,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8023,0,7714,0,0,"IF", 0, 2, 0);
	trans[1][7710]	= settr(8017,0,7718,3753,3753,"((_pid==0))", 0, 2, 0); /* m: 7711 -> 7718,0 */
	reached1[7711] = 1;
	trans[1][7711]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7717]	= settr(8024,0,7718,1,0,".(goto)", 0, 2, 0);
	trans[1][7712]	= settr(8019,0,7718,3754,3754,"((_pid==1))", 0, 2, 0); /* m: 7713 -> 7718,0 */
	reached1[7713] = 1;
	trans[1][7713]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7714]	= settr(8021,0,7718,3755,3755,"((_pid>1))", 0, 2, 0); /* m: 7715 -> 7718,0 */
	reached1[7715] = 1;
	trans[1][7715]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7718]	= settr(8025,0,7719,3756,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7719]	= settr(8026,0,7847,3757,3757,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7843 -> 0,7847 */
	reached1[7843] = 1;
	trans[1][7724]	= settr(8031,0,7843,1,0,".(goto)", 0, 2, 0); /* m: 7843 -> 0,7847 */
	reached1[7843] = 1;
	trans[1][7721]	= settr(8028,0,7722,2,0,"else", 0, 2, 0);
	trans[1][7722]	= settr(8029,0,7847,3758,3758,"(1)", 0, 2, 0); /* m: 7843 -> 7847,0 */
	reached1[7843] = 1;
	trans[1][7841]	= settr(8148,0,7843,1,0,".(goto)", 0, 2, 0); /* m: 7843 -> 0,7847 */
	reached1[7843] = 1;
	trans[1][7726]	= settr(8033,0,7763,3759,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][7763] = settr(8070,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8070,0,7746,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7746] = settr(8053,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8053,2,7744,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7744] = settr(8051,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8051,2,7727,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8051,2,7730,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8051,2,7733,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8051,2,7736,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8051,2,7739,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8051,2,7742,0,0,"IF", 1, 2, 0);
	trans[1][7727]	= settr(8034,4,7761,3760,3760,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7728 -> 7761,0 */
	reached1[7728] = 1;
	trans[1][7728]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7729]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7745]	= settr(8052,0,7761,3761,3761,".(goto)", 1, 2, 0);
	trans[1][7730]	= settr(8037,4,7761,3762,3762,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7731 -> 7761,0 */
	reached1[7731] = 1;
	trans[1][7731]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7732]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7733]	= settr(8040,4,7761,3763,3763,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7734 -> 7761,0 */
	reached1[7734] = 1;
	trans[1][7734]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7735]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7736]	= settr(8043,4,7761,3764,3764,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7737 -> 7761,0 */
	reached1[7737] = 1;
	trans[1][7737]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7738]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7739]	= settr(8046,4,7761,3765,3765,"((PAUSE==ABORT))", 1, 2, 0); /* m: 7740 -> 7761,0 */
	reached1[7740] = 1;
	trans[1][7740]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7741]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7742]	= settr(8049,2,7743,2,0,"else", 1, 2, 0);
	trans[1][7743]	= settr(8050,4,7761,3766,3766,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7745 -> 0,7761 */
	reached1[7745] = 1;
	T = trans[1][7761] = settr(8068,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8068,0,7747,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8068,0,7759,0,0,"IF", 0, 2, 0);
	trans[1][7747]	= settr(8054,0,7758,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7758] = settr(8065,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8065,0,7754,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7754] = settr(8061,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8061,0,7748,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8061,0,7750,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8061,0,7752,0,0,"IF", 0, 2, 0);
	trans[1][7748]	= settr(8055,0,7756,3767,3767,"((_pid==0))", 0, 2, 0); /* m: 7749 -> 7756,0 */
	reached1[7749] = 1;
	trans[1][7749]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7755]	= settr(8062,0,7756,1,0,".(goto)", 0, 2, 0);
	trans[1][7750]	= settr(8057,0,7756,3768,3768,"((_pid==1))", 0, 2, 0); /* m: 7751 -> 7756,0 */
	reached1[7751] = 1;
	trans[1][7751]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7752]	= settr(8059,0,7756,3769,3769,"((_pid>1))", 0, 2, 0); /* m: 7753 -> 7756,0 */
	reached1[7753] = 1;
	trans[1][7753]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7756]	= settr(8063,0,7757,3770,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7757]	= settr(8064,0,7847,3771,3771,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7843 -> 0,7847 */
	reached1[7843] = 1;
	trans[1][7762]	= settr(8069,0,7843,1,0,".(goto)", 0, 2, 0); /* m: 7843 -> 0,7847 */
	reached1[7843] = 1;
	trans[1][7759]	= settr(8066,0,7760,2,0,"else", 0, 2, 0);
	trans[1][7760]	= settr(8067,0,7847,3772,3772,"(1)", 0, 2, 0); /* m: 7843 -> 7847,0 */
	reached1[7843] = 1;
	trans[1][7764]	= settr(8071,0,7801,3773,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][7801] = settr(8108,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8108,0,7784,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7784] = settr(8091,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8091,2,7782,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7782] = settr(8089,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8089,2,7765,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8089,2,7768,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8089,2,7771,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8089,2,7774,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8089,2,7777,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8089,2,7780,0,0,"IF", 1, 2, 0);
	trans[1][7765]	= settr(8072,4,7799,3774,3774,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7766 -> 7799,0 */
	reached1[7766] = 1;
	trans[1][7766]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7767]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7783]	= settr(8090,0,7799,3775,3775,".(goto)", 1, 2, 0);
	trans[1][7768]	= settr(8075,4,7799,3776,3776,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7769 -> 7799,0 */
	reached1[7769] = 1;
	trans[1][7769]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7770]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7771]	= settr(8078,4,7799,3777,3777,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7772 -> 7799,0 */
	reached1[7772] = 1;
	trans[1][7772]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7773]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7774]	= settr(8081,4,7799,3778,3778,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7775 -> 7799,0 */
	reached1[7775] = 1;
	trans[1][7775]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7776]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7777]	= settr(8084,4,7799,3779,3779,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 7778 -> 7799,0 */
	reached1[7778] = 1;
	trans[1][7778]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7779]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7780]	= settr(8087,2,7781,2,0,"else", 1, 2, 0);
	trans[1][7781]	= settr(8088,4,7799,3780,3780,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7783 -> 0,7799 */
	reached1[7783] = 1;
	T = trans[1][7799] = settr(8106,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8106,0,7785,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8106,0,7797,0,0,"IF", 0, 2, 0);
	trans[1][7785]	= settr(8092,0,7796,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7796] = settr(8103,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8103,0,7792,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7792] = settr(8099,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8099,0,7786,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8099,0,7788,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8099,0,7790,0,0,"IF", 0, 2, 0);
	trans[1][7786]	= settr(8093,0,7794,3781,3781,"((_pid==0))", 0, 2, 0); /* m: 7787 -> 7794,0 */
	reached1[7787] = 1;
	trans[1][7787]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7793]	= settr(8100,0,7794,1,0,".(goto)", 0, 2, 0);
	trans[1][7788]	= settr(8095,0,7794,3782,3782,"((_pid==1))", 0, 2, 0); /* m: 7789 -> 7794,0 */
	reached1[7789] = 1;
	trans[1][7789]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7790]	= settr(8097,0,7794,3783,3783,"((_pid>1))", 0, 2, 0); /* m: 7791 -> 7794,0 */
	reached1[7791] = 1;
	trans[1][7791]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7794]	= settr(8101,0,7795,3784,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7795]	= settr(8102,0,7847,3785,3785,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7843 -> 0,7847 */
	reached1[7843] = 1;
	trans[1][7800]	= settr(8107,0,7843,1,0,".(goto)", 0, 2, 0); /* m: 7843 -> 0,7847 */
	reached1[7843] = 1;
	trans[1][7797]	= settr(8104,0,7798,2,0,"else", 0, 2, 0);
	trans[1][7798]	= settr(8105,0,7847,3786,3786,"(1)", 0, 2, 0); /* m: 7843 -> 7847,0 */
	reached1[7843] = 1;
	trans[1][7802]	= settr(8109,0,7839,3787,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][7839] = settr(8146,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8146,0,7822,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7822] = settr(8129,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8129,2,7820,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7820] = settr(8127,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8127,2,7803,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8127,2,7806,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8127,2,7809,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8127,2,7812,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8127,2,7815,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8127,2,7818,0,0,"IF", 1, 2, 0);
	trans[1][7803]	= settr(8110,4,7837,3788,3788,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7804 -> 7837,0 */
	reached1[7804] = 1;
	trans[1][7804]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7805]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7821]	= settr(8128,0,7837,3789,3789,".(goto)", 1, 2, 0);
	trans[1][7806]	= settr(8113,4,7837,3790,3790,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7807 -> 7837,0 */
	reached1[7807] = 1;
	trans[1][7807]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7808]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7809]	= settr(8116,4,7837,3791,3791,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7810 -> 7837,0 */
	reached1[7810] = 1;
	trans[1][7810]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7811]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7812]	= settr(8119,4,7837,3792,3792,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7813 -> 7837,0 */
	reached1[7813] = 1;
	trans[1][7813]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7814]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7815]	= settr(8122,4,7837,3793,3793,"((STOP==ABORT))", 1, 2, 0); /* m: 7816 -> 7837,0 */
	reached1[7816] = 1;
	trans[1][7816]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7817]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7818]	= settr(8125,2,7819,2,0,"else", 1, 2, 0);
	trans[1][7819]	= settr(8126,4,7837,3794,3794,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7821 -> 0,7837 */
	reached1[7821] = 1;
	T = trans[1][7837] = settr(8144,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8144,0,7823,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8144,0,7835,0,0,"IF", 0, 2, 0);
	trans[1][7823]	= settr(8130,0,7834,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7834] = settr(8141,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8141,0,7830,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7830] = settr(8137,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8137,0,7824,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8137,0,7826,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8137,0,7828,0,0,"IF", 0, 2, 0);
	trans[1][7824]	= settr(8131,0,7832,3795,3795,"((_pid==0))", 0, 2, 0); /* m: 7825 -> 7832,0 */
	reached1[7825] = 1;
	trans[1][7825]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7831]	= settr(8138,0,7832,1,0,".(goto)", 0, 2, 0);
	trans[1][7826]	= settr(8133,0,7832,3796,3796,"((_pid==1))", 0, 2, 0); /* m: 7827 -> 7832,0 */
	reached1[7827] = 1;
	trans[1][7827]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7828]	= settr(8135,0,7832,3797,3797,"((_pid>1))", 0, 2, 0); /* m: 7829 -> 7832,0 */
	reached1[7829] = 1;
	trans[1][7829]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7832]	= settr(8139,0,7833,3798,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7833]	= settr(8140,0,7847,3799,3799,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 7843 -> 0,7847 */
	reached1[7843] = 1;
	trans[1][7838]	= settr(8145,0,7843,1,0,".(goto)", 0, 2, 0); /* m: 7843 -> 0,7847 */
	reached1[7843] = 1;
	trans[1][7835]	= settr(8142,0,7836,2,0,"else", 0, 2, 0);
	trans[1][7836]	= settr(8143,0,7847,3800,3800,"(1)", 0, 2, 0); /* m: 7843 -> 7847,0 */
	reached1[7843] = 1;
	trans[1][7843]	= settr(8150,0,7847,3801,3801,"j = (j+1)", 0, 2, 0);
	trans[1][7844]	= settr(8151,0,7845,2,0,"else", 0, 2, 0);
	trans[1][7845]	= settr(8152,0,11140,3802,3802,"j = 1", 0, 2, 0);
	trans[1][7846]	= settr(8153,0,11140,1,0,"goto :b55", 0, 2, 0);
	trans[1][7849]	= settr(8156,0,11140,1,0,"break", 0, 2, 0);
	trans[1][8019]	= settr(8326,0,11140,1,0,".(goto)", 0, 2, 0);
	trans[1][7851]	= settr(8158,0,8017,2,0,"else", 0, 2, 0);
	T = trans[ 1][8017] = settr(8324,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8324,0,7852,0,0,"sub-sequence", 0, 2, 0);
	trans[1][7852]	= settr(8159,0,8014,3803,3803,"j = (3-1)", 0, 2, 0);
	trans[1][8015]	= settr(8322,0,8014,1,0,".(goto)", 0, 2, 0);
	T = trans[1][8014] = settr(8321,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(8321,0,7853,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(8321,0,8011,0,0,"DO", 0, 2, 0);
	trans[1][7853]	= settr(8160,0,8009,3804,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][8009] = settr(8316,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8316,0,8007,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8007] = settr(8314,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8314,0,7854,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8314,0,7893,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8314,0,7931,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8314,0,7969,0,0,"IF", 0, 2, 0);
	trans[1][7854]	= settr(8161,0,7892,3805,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][7892] = settr(8199,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8199,0,7874,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7874] = settr(8181,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8181,2,7872,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7872] = settr(8179,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8179,2,7855,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8179,2,7858,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8179,2,7861,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8179,2,7864,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8179,2,7867,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8179,2,7870,0,0,"IF", 1, 2, 0);
	trans[1][7855]	= settr(8162,4,7875,3806,3806,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7856 -> 7875,0 */
	reached1[7856] = 1;
	trans[1][7856]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7857]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7873]	= settr(8180,0,7875,3807,3807,".(goto)", 1, 2, 0);
	trans[1][7858]	= settr(8165,4,7875,3808,3808,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7859 -> 7875,0 */
	reached1[7859] = 1;
	trans[1][7859]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7860]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7861]	= settr(8168,4,7875,3809,3809,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7862 -> 7875,0 */
	reached1[7862] = 1;
	trans[1][7862]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7863]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7864]	= settr(8171,4,7875,3810,3810,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7865 -> 7875,0 */
	reached1[7865] = 1;
	trans[1][7865]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7866]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7867]	= settr(8174,4,7875,3811,3811,"((START==ABORT))", 1, 2, 0); /* m: 7868 -> 7875,0 */
	reached1[7868] = 1;
	trans[1][7868]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7869]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7870]	= settr(8177,2,7871,2,0,"else", 1, 2, 0);
	trans[1][7871]	= settr(8178,4,7875,3812,3812,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7873 -> 0,7875 */
	reached1[7873] = 1;
	trans[1][7875]	= settr(8182,0,7890,3813,3813,"(run Thread(j))", 0, 2, 0);
	T = trans[1][7890] = settr(8197,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8197,0,7876,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8197,0,7888,0,0,"IF", 0, 2, 0);
	trans[1][7876]	= settr(8183,0,7887,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7887] = settr(8194,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8194,0,7883,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7883] = settr(8190,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8190,0,7877,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8190,0,7879,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8190,0,7881,0,0,"IF", 0, 2, 0);
	trans[1][7877]	= settr(8184,0,7885,3814,3814,"((_pid==0))", 0, 2, 0); /* m: 7878 -> 7885,0 */
	reached1[7878] = 1;
	trans[1][7878]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7884]	= settr(8191,0,7885,1,0,".(goto)", 0, 2, 0);
	trans[1][7879]	= settr(8186,0,7885,3815,3815,"((_pid==1))", 0, 2, 0); /* m: 7880 -> 7885,0 */
	reached1[7880] = 1;
	trans[1][7880]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7881]	= settr(8188,0,7885,3816,3816,"((_pid>1))", 0, 2, 0); /* m: 7882 -> 7885,0 */
	reached1[7882] = 1;
	trans[1][7882]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7885]	= settr(8192,0,7886,3817,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7886]	= settr(8193,0,8014,3818,3818,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8010 -> 0,8014 */
	reached1[8010] = 1;
	trans[1][7891]	= settr(8198,0,8010,1,0,".(goto)", 0, 2, 0); /* m: 8010 -> 0,8014 */
	reached1[8010] = 1;
	trans[1][7888]	= settr(8195,0,7889,2,0,"else", 0, 2, 0);
	trans[1][7889]	= settr(8196,0,8014,3819,3819,"(1)", 0, 2, 0); /* m: 8010 -> 8014,0 */
	reached1[8010] = 1;
	trans[1][8008]	= settr(8315,0,8010,1,0,".(goto)", 0, 2, 0); /* m: 8010 -> 0,8014 */
	reached1[8010] = 1;
	trans[1][7893]	= settr(8200,0,7930,3820,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][7930] = settr(8237,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8237,0,7913,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7913] = settr(8220,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8220,2,7911,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7911] = settr(8218,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8218,2,7894,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8218,2,7897,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8218,2,7900,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8218,2,7903,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8218,2,7906,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8218,2,7909,0,0,"IF", 1, 2, 0);
	trans[1][7894]	= settr(8201,4,7928,3821,3821,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7895 -> 7928,0 */
	reached1[7895] = 1;
	trans[1][7895]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7896]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7912]	= settr(8219,0,7928,3822,3822,".(goto)", 1, 2, 0);
	trans[1][7897]	= settr(8204,4,7928,3823,3823,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7898 -> 7928,0 */
	reached1[7898] = 1;
	trans[1][7898]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7899]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7900]	= settr(8207,4,7928,3824,3824,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7901 -> 7928,0 */
	reached1[7901] = 1;
	trans[1][7901]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7902]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7903]	= settr(8210,4,7928,3825,3825,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7904 -> 7928,0 */
	reached1[7904] = 1;
	trans[1][7904]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7905]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7906]	= settr(8213,4,7928,3826,3826,"((PAUSE==ABORT))", 1, 2, 0); /* m: 7907 -> 7928,0 */
	reached1[7907] = 1;
	trans[1][7907]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7908]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7909]	= settr(8216,2,7910,2,0,"else", 1, 2, 0);
	trans[1][7910]	= settr(8217,4,7928,3827,3827,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7912 -> 0,7928 */
	reached1[7912] = 1;
	T = trans[1][7928] = settr(8235,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8235,0,7914,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8235,0,7926,0,0,"IF", 0, 2, 0);
	trans[1][7914]	= settr(8221,0,7925,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7925] = settr(8232,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8232,0,7921,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7921] = settr(8228,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8228,0,7915,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8228,0,7917,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8228,0,7919,0,0,"IF", 0, 2, 0);
	trans[1][7915]	= settr(8222,0,7923,3828,3828,"((_pid==0))", 0, 2, 0); /* m: 7916 -> 7923,0 */
	reached1[7916] = 1;
	trans[1][7916]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7922]	= settr(8229,0,7923,1,0,".(goto)", 0, 2, 0);
	trans[1][7917]	= settr(8224,0,7923,3829,3829,"((_pid==1))", 0, 2, 0); /* m: 7918 -> 7923,0 */
	reached1[7918] = 1;
	trans[1][7918]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7919]	= settr(8226,0,7923,3830,3830,"((_pid>1))", 0, 2, 0); /* m: 7920 -> 7923,0 */
	reached1[7920] = 1;
	trans[1][7920]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7923]	= settr(8230,0,7924,3831,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7924]	= settr(8231,0,8014,3832,3832,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8010 -> 0,8014 */
	reached1[8010] = 1;
	trans[1][7929]	= settr(8236,0,8010,1,0,".(goto)", 0, 2, 0); /* m: 8010 -> 0,8014 */
	reached1[8010] = 1;
	trans[1][7926]	= settr(8233,0,7927,2,0,"else", 0, 2, 0);
	trans[1][7927]	= settr(8234,0,8014,3833,3833,"(1)", 0, 2, 0); /* m: 8010 -> 8014,0 */
	reached1[8010] = 1;
	trans[1][7931]	= settr(8238,0,7968,3834,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][7968] = settr(8275,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8275,0,7951,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7951] = settr(8258,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8258,2,7949,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7949] = settr(8256,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8256,2,7932,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8256,2,7935,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8256,2,7938,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8256,2,7941,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8256,2,7944,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8256,2,7947,0,0,"IF", 1, 2, 0);
	trans[1][7932]	= settr(8239,4,7966,3835,3835,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7933 -> 7966,0 */
	reached1[7933] = 1;
	trans[1][7933]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7934]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7950]	= settr(8257,0,7966,3836,3836,".(goto)", 1, 2, 0);
	trans[1][7935]	= settr(8242,4,7966,3837,3837,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7936 -> 7966,0 */
	reached1[7936] = 1;
	trans[1][7936]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7937]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7938]	= settr(8245,4,7966,3838,3838,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7939 -> 7966,0 */
	reached1[7939] = 1;
	trans[1][7939]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7940]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7941]	= settr(8248,4,7966,3839,3839,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7942 -> 7966,0 */
	reached1[7942] = 1;
	trans[1][7942]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7943]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7944]	= settr(8251,4,7966,3840,3840,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 7945 -> 7966,0 */
	reached1[7945] = 1;
	trans[1][7945]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7946]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7947]	= settr(8254,2,7948,2,0,"else", 1, 2, 0);
	trans[1][7948]	= settr(8255,4,7966,3841,3841,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7950 -> 0,7966 */
	reached1[7950] = 1;
	T = trans[1][7966] = settr(8273,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8273,0,7952,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8273,0,7964,0,0,"IF", 0, 2, 0);
	trans[1][7952]	= settr(8259,0,7963,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][7963] = settr(8270,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8270,0,7959,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7959] = settr(8266,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8266,0,7953,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8266,0,7955,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8266,0,7957,0,0,"IF", 0, 2, 0);
	trans[1][7953]	= settr(8260,0,7961,3842,3842,"((_pid==0))", 0, 2, 0); /* m: 7954 -> 7961,0 */
	reached1[7954] = 1;
	trans[1][7954]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7960]	= settr(8267,0,7961,1,0,".(goto)", 0, 2, 0);
	trans[1][7955]	= settr(8262,0,7961,3843,3843,"((_pid==1))", 0, 2, 0); /* m: 7956 -> 7961,0 */
	reached1[7956] = 1;
	trans[1][7956]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7957]	= settr(8264,0,7961,3844,3844,"((_pid>1))", 0, 2, 0); /* m: 7958 -> 7961,0 */
	reached1[7958] = 1;
	trans[1][7958]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7961]	= settr(8268,0,7962,3845,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][7962]	= settr(8269,0,8014,3846,3846,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8010 -> 0,8014 */
	reached1[8010] = 1;
	trans[1][7967]	= settr(8274,0,8010,1,0,".(goto)", 0, 2, 0); /* m: 8010 -> 0,8014 */
	reached1[8010] = 1;
	trans[1][7964]	= settr(8271,0,7965,2,0,"else", 0, 2, 0);
	trans[1][7965]	= settr(8272,0,8014,3847,3847,"(1)", 0, 2, 0); /* m: 8010 -> 8014,0 */
	reached1[8010] = 1;
	trans[1][7969]	= settr(8276,0,8006,3848,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][8006] = settr(8313,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8313,0,7989,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][7989] = settr(8296,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8296,2,7987,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][7987] = settr(8294,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8294,2,7970,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8294,2,7973,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8294,2,7976,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8294,2,7979,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8294,2,7982,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8294,2,7985,0,0,"IF", 1, 2, 0);
	trans[1][7970]	= settr(8277,4,8004,3849,3849,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7971 -> 8004,0 */
	reached1[7971] = 1;
	trans[1][7971]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][7972]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][7988]	= settr(8295,0,8004,3850,3850,".(goto)", 1, 2, 0);
	trans[1][7973]	= settr(8280,4,8004,3851,3851,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 7974 -> 8004,0 */
	reached1[7974] = 1;
	trans[1][7974]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][7975]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][7976]	= settr(8283,4,8004,3852,3852,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7977 -> 8004,0 */
	reached1[7977] = 1;
	trans[1][7977]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][7978]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][7979]	= settr(8286,4,8004,3853,3853,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 7980 -> 8004,0 */
	reached1[7980] = 1;
	trans[1][7980]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][7981]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][7982]	= settr(8289,4,8004,3854,3854,"((STOP==ABORT))", 1, 2, 0); /* m: 7983 -> 8004,0 */
	reached1[7983] = 1;
	trans[1][7983]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][7984]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][7985]	= settr(8292,2,7986,2,0,"else", 1, 2, 0);
	trans[1][7986]	= settr(8293,4,8004,3855,3855,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 7988 -> 0,8004 */
	reached1[7988] = 1;
	T = trans[1][8004] = settr(8311,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8311,0,7990,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8311,0,8002,0,0,"IF", 0, 2, 0);
	trans[1][7990]	= settr(8297,0,8001,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][8001] = settr(8308,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8308,0,7997,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][7997] = settr(8304,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8304,0,7991,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8304,0,7993,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8304,0,7995,0,0,"IF", 0, 2, 0);
	trans[1][7991]	= settr(8298,0,7999,3856,3856,"((_pid==0))", 0, 2, 0); /* m: 7992 -> 7999,0 */
	reached1[7992] = 1;
	trans[1][7992]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7998]	= settr(8305,0,7999,1,0,".(goto)", 0, 2, 0);
	trans[1][7993]	= settr(8300,0,7999,3857,3857,"((_pid==1))", 0, 2, 0); /* m: 7994 -> 7999,0 */
	reached1[7994] = 1;
	trans[1][7994]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][7995]	= settr(8302,0,7999,3858,3858,"((_pid>1))", 0, 2, 0); /* m: 7996 -> 7999,0 */
	reached1[7996] = 1;
	trans[1][7996]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][7999]	= settr(8306,0,8000,3859,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8000]	= settr(8307,0,8014,3860,3860,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8010 -> 0,8014 */
	reached1[8010] = 1;
	trans[1][8005]	= settr(8312,0,8010,1,0,".(goto)", 0, 2, 0); /* m: 8010 -> 0,8014 */
	reached1[8010] = 1;
	trans[1][8002]	= settr(8309,0,8003,2,0,"else", 0, 2, 0);
	trans[1][8003]	= settr(8310,0,8014,3861,3861,"(1)", 0, 2, 0); /* m: 8010 -> 8014,0 */
	reached1[8010] = 1;
	trans[1][8010]	= settr(8317,0,8014,3862,3862,"j = (j-1)", 0, 2, 0);
	trans[1][8011]	= settr(8318,0,8012,2,0,"else", 0, 2, 0);
	trans[1][8012]	= settr(8319,0,11140,3863,3863,"j = 1", 0, 2, 0);
	trans[1][8013]	= settr(8320,0,11140,1,0,"goto :b56", 0, 2, 0);
	trans[1][8016]	= settr(8323,0,11140,1,0,"break", 0, 2, 0);
	trans[1][8248]	= settr(8555,0,11140,1,0,".(goto)", 0, 2, 0);
	trans[1][8021]	= settr(8328,0,8246,2,0,"else", 0, 2, 0);
	T = trans[ 1][8246] = settr(8553,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8553,0,8022,0,0,"sub-sequence", 0, 2, 0);
	trans[1][8022]	= settr(8329,0,8187,3864,0,"printf('Supervisor propagating command %e...\\n',6)", 0, 2, 0);
	T = trans[ 1][8187] = settr(8494,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8494,0,8184,0,0,"sub-sequence", 0, 2, 0);
	trans[1][8185]	= settr(8492,0,8184,1,0,".(goto)", 0, 2, 0);
	T = trans[1][8184] = settr(8491,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(8491,0,8023,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(8491,0,8181,0,0,"DO", 0, 2, 0);
	trans[1][8023]	= settr(8330,0,8179,3865,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][8179] = settr(8486,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8486,0,8177,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8177] = settr(8484,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8484,0,8024,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8484,0,8063,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8484,0,8101,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8484,0,8139,0,0,"IF", 0, 2, 0);
	trans[1][8024]	= settr(8331,0,8062,3866,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][8062] = settr(8369,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8369,0,8044,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8044] = settr(8351,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8351,2,8042,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8042] = settr(8349,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8349,2,8025,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8349,2,8028,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8349,2,8031,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8349,2,8034,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8349,2,8037,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8349,2,8040,0,0,"IF", 1, 2, 0);
	trans[1][8025]	= settr(8332,4,8045,3867,3867,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8026 -> 8045,0 */
	reached1[8026] = 1;
	trans[1][8026]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8027]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8043]	= settr(8350,0,8045,3868,3868,".(goto)", 1, 2, 0);
	trans[1][8028]	= settr(8335,4,8045,3869,3869,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8029 -> 8045,0 */
	reached1[8029] = 1;
	trans[1][8029]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8030]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8031]	= settr(8338,4,8045,3870,3870,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8032 -> 8045,0 */
	reached1[8032] = 1;
	trans[1][8032]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8033]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8034]	= settr(8341,4,8045,3871,3871,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8035 -> 8045,0 */
	reached1[8035] = 1;
	trans[1][8035]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8036]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8037]	= settr(8344,4,8045,3872,3872,"((START==ABORT))", 1, 2, 0); /* m: 8038 -> 8045,0 */
	reached1[8038] = 1;
	trans[1][8038]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8039]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8040]	= settr(8347,2,8041,2,0,"else", 1, 2, 0);
	trans[1][8041]	= settr(8348,4,8045,3873,3873,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8043 -> 0,8045 */
	reached1[8043] = 1;
	trans[1][8045]	= settr(8352,0,8060,3874,3874,"(run Thread(j))", 0, 2, 0);
	T = trans[1][8060] = settr(8367,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(8367,0,8046,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(8367,0,8058,0,0,"IF", 0, 2, 0);
	trans[1][8046]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][8057] = settr(8364,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8364,0,8053,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8053] = settr(8360,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8360,0,8047,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8360,0,8049,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8360,0,8051,0,0,"IF", 0, 2, 0);
	trans[1][8047]	= settr(8354,0,8055,3875,3875,"((_pid==0))", 0, 2, 0); /* m: 8048 -> 8055,0 */
	reached1[8048] = 1;
	trans[1][8048]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8054]	= settr(8361,0,8055,1,0,".(goto)", 0, 2, 0);
	trans[1][8049]	= settr(8356,0,8055,3876,3876,"((_pid==1))", 0, 2, 0); /* m: 8050 -> 8055,0 */
	reached1[8050] = 1;
	trans[1][8050]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8051]	= settr(8358,0,8055,3877,3877,"((_pid>1))", 0, 2, 0); /* m: 8052 -> 8055,0 */
	reached1[8052] = 1;
	trans[1][8052]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8055]	= settr(8362,0,8056,3878,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8056]	= settr(8363,0,8184,3879,3879,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8180 -> 0,8184 */
	reached1[8180] = 1;
	trans[1][8061]	= settr(8368,0,8180,1,0,".(goto)", 0, 2, 0); /* m: 8180 -> 0,8184 */
	reached1[8180] = 1;
	trans[1][8058]	= settr(8365,0,8059,2,0,"else", 0, 2, 0);
	trans[1][8059]	= settr(8366,0,8184,3880,3880,"(1)", 0, 2, 0); /* m: 8180 -> 8184,0 */
	reached1[8180] = 1;
	trans[1][8178]	= settr(8485,0,8180,1,0,".(goto)", 0, 2, 0); /* m: 8180 -> 0,8184 */
	reached1[8180] = 1;
	trans[1][8063]	= settr(8370,0,8100,3881,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][8100] = settr(8407,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8407,0,8083,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8083] = settr(8390,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8390,2,8081,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8081] = settr(8388,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8388,2,8064,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8388,2,8067,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8388,2,8070,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8388,2,8073,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8388,2,8076,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8388,2,8079,0,0,"IF", 1, 2, 0);
	trans[1][8064]	= settr(8371,4,8098,3882,3882,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8065 -> 8098,0 */
	reached1[8065] = 1;
	trans[1][8065]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8066]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8082]	= settr(8389,0,8098,3883,3883,".(goto)", 1, 2, 0);
	trans[1][8067]	= settr(8374,4,8098,3884,3884,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8068 -> 8098,0 */
	reached1[8068] = 1;
	trans[1][8068]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8069]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8070]	= settr(8377,4,8098,3885,3885,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8071 -> 8098,0 */
	reached1[8071] = 1;
	trans[1][8071]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8072]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8073]	= settr(8380,4,8098,3886,3886,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8074 -> 8098,0 */
	reached1[8074] = 1;
	trans[1][8074]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8075]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8076]	= settr(8383,4,8098,3887,3887,"((PAUSE==ABORT))", 1, 2, 0); /* m: 8077 -> 8098,0 */
	reached1[8077] = 1;
	trans[1][8077]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8078]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8079]	= settr(8386,2,8080,2,0,"else", 1, 2, 0);
	trans[1][8080]	= settr(8387,4,8098,3888,3888,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8082 -> 0,8098 */
	reached1[8082] = 1;
	T = trans[1][8098] = settr(8405,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(8405,0,8084,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(8405,0,8096,0,0,"IF", 0, 2, 0);
	trans[1][8084]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][8095] = settr(8402,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8402,0,8091,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8091] = settr(8398,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8398,0,8085,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8398,0,8087,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8398,0,8089,0,0,"IF", 0, 2, 0);
	trans[1][8085]	= settr(8392,0,8093,3889,3889,"((_pid==0))", 0, 2, 0); /* m: 8086 -> 8093,0 */
	reached1[8086] = 1;
	trans[1][8086]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8092]	= settr(8399,0,8093,1,0,".(goto)", 0, 2, 0);
	trans[1][8087]	= settr(8394,0,8093,3890,3890,"((_pid==1))", 0, 2, 0); /* m: 8088 -> 8093,0 */
	reached1[8088] = 1;
	trans[1][8088]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8089]	= settr(8396,0,8093,3891,3891,"((_pid>1))", 0, 2, 0); /* m: 8090 -> 8093,0 */
	reached1[8090] = 1;
	trans[1][8090]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8093]	= settr(8400,0,8094,3892,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8094]	= settr(8401,0,8184,3893,3893,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8180 -> 0,8184 */
	reached1[8180] = 1;
	trans[1][8099]	= settr(8406,0,8180,1,0,".(goto)", 0, 2, 0); /* m: 8180 -> 0,8184 */
	reached1[8180] = 1;
	trans[1][8096]	= settr(8403,0,8097,2,0,"else", 0, 2, 0);
	trans[1][8097]	= settr(8404,0,8184,3894,3894,"(1)", 0, 2, 0); /* m: 8180 -> 8184,0 */
	reached1[8180] = 1;
	trans[1][8101]	= settr(8408,0,8138,3895,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][8138] = settr(8445,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8445,0,8121,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8121] = settr(8428,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8428,2,8119,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8119] = settr(8426,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8426,2,8102,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8426,2,8105,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8426,2,8108,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8426,2,8111,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8426,2,8114,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8426,2,8117,0,0,"IF", 1, 2, 0);
	trans[1][8102]	= settr(8409,4,8136,3896,3896,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8103 -> 8136,0 */
	reached1[8103] = 1;
	trans[1][8103]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8104]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8120]	= settr(8427,0,8136,3897,3897,".(goto)", 1, 2, 0);
	trans[1][8105]	= settr(8412,4,8136,3898,3898,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8106 -> 8136,0 */
	reached1[8106] = 1;
	trans[1][8106]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8107]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8108]	= settr(8415,4,8136,3899,3899,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8109 -> 8136,0 */
	reached1[8109] = 1;
	trans[1][8109]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8110]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8111]	= settr(8418,4,8136,3900,3900,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8112 -> 8136,0 */
	reached1[8112] = 1;
	trans[1][8112]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8113]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8114]	= settr(8421,4,8136,3901,3901,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 8115 -> 8136,0 */
	reached1[8115] = 1;
	trans[1][8115]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8116]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8117]	= settr(8424,2,8118,2,0,"else", 1, 2, 0);
	trans[1][8118]	= settr(8425,4,8136,3902,3902,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8120 -> 0,8136 */
	reached1[8120] = 1;
	T = trans[1][8136] = settr(8443,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(8443,0,8122,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(8443,0,8134,0,0,"IF", 0, 2, 0);
	trans[1][8122]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][8133] = settr(8440,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8440,0,8129,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8129] = settr(8436,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8436,0,8123,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8436,0,8125,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8436,0,8127,0,0,"IF", 0, 2, 0);
	trans[1][8123]	= settr(8430,0,8131,3903,3903,"((_pid==0))", 0, 2, 0); /* m: 8124 -> 8131,0 */
	reached1[8124] = 1;
	trans[1][8124]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8130]	= settr(8437,0,8131,1,0,".(goto)", 0, 2, 0);
	trans[1][8125]	= settr(8432,0,8131,3904,3904,"((_pid==1))", 0, 2, 0); /* m: 8126 -> 8131,0 */
	reached1[8126] = 1;
	trans[1][8126]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8127]	= settr(8434,0,8131,3905,3905,"((_pid>1))", 0, 2, 0); /* m: 8128 -> 8131,0 */
	reached1[8128] = 1;
	trans[1][8128]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8131]	= settr(8438,0,8132,3906,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8132]	= settr(8439,0,8184,3907,3907,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8180 -> 0,8184 */
	reached1[8180] = 1;
	trans[1][8137]	= settr(8444,0,8180,1,0,".(goto)", 0, 2, 0); /* m: 8180 -> 0,8184 */
	reached1[8180] = 1;
	trans[1][8134]	= settr(8441,0,8135,2,0,"else", 0, 2, 0);
	trans[1][8135]	= settr(8442,0,8184,3908,3908,"(1)", 0, 2, 0); /* m: 8180 -> 8184,0 */
	reached1[8180] = 1;
	trans[1][8139]	= settr(8446,0,8176,3909,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][8176] = settr(8483,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8483,0,8159,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8159] = settr(8466,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8466,2,8157,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8157] = settr(8464,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8464,2,8140,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8464,2,8143,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8464,2,8146,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8464,2,8149,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8464,2,8152,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8464,2,8155,0,0,"IF", 1, 2, 0);
	trans[1][8140]	= settr(8447,4,8174,3910,3910,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8141 -> 8174,0 */
	reached1[8141] = 1;
	trans[1][8141]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8142]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8158]	= settr(8465,0,8174,3911,3911,".(goto)", 1, 2, 0);
	trans[1][8143]	= settr(8450,4,8174,3912,3912,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8144 -> 8174,0 */
	reached1[8144] = 1;
	trans[1][8144]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8145]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8146]	= settr(8453,4,8174,3913,3913,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8147 -> 8174,0 */
	reached1[8147] = 1;
	trans[1][8147]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8148]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8149]	= settr(8456,4,8174,3914,3914,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8150 -> 8174,0 */
	reached1[8150] = 1;
	trans[1][8150]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8151]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8152]	= settr(8459,4,8174,3915,3915,"((STOP==ABORT))", 1, 2, 0); /* m: 8153 -> 8174,0 */
	reached1[8153] = 1;
	trans[1][8153]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8154]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8155]	= settr(8462,2,8156,2,0,"else", 1, 2, 0);
	trans[1][8156]	= settr(8463,4,8174,3916,3916,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8158 -> 0,8174 */
	reached1[8158] = 1;
	T = trans[1][8174] = settr(8481,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(8481,0,8160,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(8481,0,8172,0,0,"IF", 0, 2, 0);
	trans[1][8160]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][8171] = settr(8478,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8478,0,8167,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8167] = settr(8474,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8474,0,8161,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8474,0,8163,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8474,0,8165,0,0,"IF", 0, 2, 0);
	trans[1][8161]	= settr(8468,0,8169,3917,3917,"((_pid==0))", 0, 2, 0); /* m: 8162 -> 8169,0 */
	reached1[8162] = 1;
	trans[1][8162]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8168]	= settr(8475,0,8169,1,0,".(goto)", 0, 2, 0);
	trans[1][8163]	= settr(8470,0,8169,3918,3918,"((_pid==1))", 0, 2, 0); /* m: 8164 -> 8169,0 */
	reached1[8164] = 1;
	trans[1][8164]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8165]	= settr(8472,0,8169,3919,3919,"((_pid>1))", 0, 2, 0); /* m: 8166 -> 8169,0 */
	reached1[8166] = 1;
	trans[1][8166]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8169]	= settr(8476,0,8170,3920,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8170]	= settr(8477,0,8184,3921,3921,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8180 -> 0,8184 */
	reached1[8180] = 1;
	trans[1][8175]	= settr(8482,0,8180,1,0,".(goto)", 0, 2, 0); /* m: 8180 -> 0,8184 */
	reached1[8180] = 1;
	trans[1][8172]	= settr(8479,0,8173,2,0,"else", 0, 2, 0);
	trans[1][8173]	= settr(8480,0,8184,3922,3922,"(1)", 0, 2, 0); /* m: 8180 -> 8184,0 */
	reached1[8180] = 1;
	trans[1][8180]	= settr(8487,0,8184,3923,3923,"j = (j+1)", 0, 2, 0);
	trans[1][8181]	= settr(8488,0,8182,2,0,"else", 0, 2, 0);
	trans[1][8182]	= settr(8489,0,8243,3924,3924,"j = 1", 0, 2, 0);
	trans[1][8183]	= settr(8490,0,8243,1,0,"goto :b57", 0, 2, 0);
	trans[1][8186]	= settr(8493,0,8243,1,0,"break", 0, 2, 0);
	trans[1][8244]	= settr(8551,0,8243,1,0,".(goto)", 0, 2, 0);
	T = trans[1][8243] = settr(8550,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(8550,0,8188,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(8550,0,8240,0,0,"DO", 0, 2, 0);
	trans[1][8188]	= settr(8495,0,8237,3925,0,"((j<3))", 0, 2, 0);
	T = trans[1][8237] = settr(8544,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8544,0,8189,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8544,0,8201,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8544,0,8213,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8544,0,8225,0,0,"IF", 0, 2, 0);
	trans[1][8189]	= settr(8496,0,8200,3926,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][8200] = settr(8507,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8507,0,8196,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8196] = settr(8503,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8503,0,8190,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8503,0,8192,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8503,0,8194,0,0,"IF", 0, 2, 0);
	trans[1][8190]	= settr(8497,0,8198,3927,3927,"((_pid==0))", 0, 2, 0); /* m: 8191 -> 8198,0 */
	reached1[8191] = 1;
	trans[1][8191]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8197]	= settr(8504,0,8198,1,0,".(goto)", 0, 2, 0);
	trans[1][8192]	= settr(8499,0,8198,3928,3928,"((_pid==1))", 0, 2, 0); /* m: 8193 -> 8198,0 */
	reached1[8193] = 1;
	trans[1][8193]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8194]	= settr(8501,0,8198,3929,3929,"((_pid>1))", 0, 2, 0); /* m: 8195 -> 8198,0 */
	reached1[8195] = 1;
	trans[1][8195]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8198]	= settr(8505,0,8199,3930,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8199]	= settr(8506,0,8243,3931,3931,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8239 -> 0,8243 */
	reached1[8239] = 1;
	trans[1][8238]	= settr(8545,0,8239,1,0,".(goto)", 0, 2, 0); /* m: 8239 -> 0,8243 */
	reached1[8239] = 1;
	trans[1][8201]	= settr(8508,0,8212,3932,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][8212] = settr(8519,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8519,0,8208,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8208] = settr(8515,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8515,0,8202,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8515,0,8204,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8515,0,8206,0,0,"IF", 0, 2, 0);
	trans[1][8202]	= settr(8509,0,8210,3933,3933,"((_pid==0))", 0, 2, 0); /* m: 8203 -> 8210,0 */
	reached1[8203] = 1;
	trans[1][8203]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8209]	= settr(8516,0,8210,1,0,".(goto)", 0, 2, 0);
	trans[1][8204]	= settr(8511,0,8210,3934,3934,"((_pid==1))", 0, 2, 0); /* m: 8205 -> 8210,0 */
	reached1[8205] = 1;
	trans[1][8205]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8206]	= settr(8513,0,8210,3935,3935,"((_pid>1))", 0, 2, 0); /* m: 8207 -> 8210,0 */
	reached1[8207] = 1;
	trans[1][8207]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8210]	= settr(8517,0,8211,3936,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8211]	= settr(8518,0,8243,3937,3937,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8239 -> 0,8243 */
	reached1[8239] = 1;
	trans[1][8213]	= settr(8520,0,8224,3938,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][8224] = settr(8531,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8531,0,8220,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8220] = settr(8527,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8527,0,8214,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8527,0,8216,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8527,0,8218,0,0,"IF", 0, 2, 0);
	trans[1][8214]	= settr(8521,0,8222,3939,3939,"((_pid==0))", 0, 2, 0); /* m: 8215 -> 8222,0 */
	reached1[8215] = 1;
	trans[1][8215]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8221]	= settr(8528,0,8222,1,0,".(goto)", 0, 2, 0);
	trans[1][8216]	= settr(8523,0,8222,3940,3940,"((_pid==1))", 0, 2, 0); /* m: 8217 -> 8222,0 */
	reached1[8217] = 1;
	trans[1][8217]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8218]	= settr(8525,0,8222,3941,3941,"((_pid>1))", 0, 2, 0); /* m: 8219 -> 8222,0 */
	reached1[8219] = 1;
	trans[1][8219]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8222]	= settr(8529,0,8223,3942,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8223]	= settr(8530,0,8243,3943,3943,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8239 -> 0,8243 */
	reached1[8239] = 1;
	trans[1][8225]	= settr(8532,0,8236,3944,0,"((6==STOP))", 0, 2, 0);
	T = trans[ 1][8236] = settr(8543,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8543,0,8232,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8232] = settr(8539,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8539,0,8226,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8539,0,8228,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8539,0,8230,0,0,"IF", 0, 2, 0);
	trans[1][8226]	= settr(8533,0,8234,3945,3945,"((_pid==0))", 0, 2, 0); /* m: 8227 -> 8234,0 */
	reached1[8227] = 1;
	trans[1][8227]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8233]	= settr(8540,0,8234,1,0,".(goto)", 0, 2, 0);
	trans[1][8228]	= settr(8535,0,8234,3946,3946,"((_pid==1))", 0, 2, 0); /* m: 8229 -> 8234,0 */
	reached1[8229] = 1;
	trans[1][8229]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8230]	= settr(8537,0,8234,3947,3947,"((_pid>1))", 0, 2, 0); /* m: 8231 -> 8234,0 */
	reached1[8231] = 1;
	trans[1][8231]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8234]	= settr(8541,0,8235,3948,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8235]	= settr(8542,0,8243,3949,3949,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8239 -> 0,8243 */
	reached1[8239] = 1;
	trans[1][8239]	= settr(8546,0,8243,3950,3950,"j = (j+1)", 0, 2, 0);
	trans[1][8240]	= settr(8547,0,8241,2,0,"else", 0, 2, 0);
	trans[1][8241]	= settr(8548,0,11140,3951,3951,"j = 1", 0, 2, 0);
	trans[1][8242]	= settr(8549,0,11140,1,0,"goto :b58", 0, 2, 0);
	trans[1][8245]	= settr(8552,0,11140,1,0,"break", 0, 2, 0);
	trans[1][9401]	= settr(9708,0,11140,1,0,".(goto)", 0, 2, 0);
	trans[1][8252]	= settr(8559,0,8824,3952,0,"((7==PAUSED))", 0, 2, 0);
	T = trans[ 1][8824] = settr(9131,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9131,0,8822,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8822] = settr(9129,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9129,0,8253,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9129,0,8256,0,0,"IF", 0, 2, 0);
	trans[1][8253]	= settr(8560,0,8254,3953,0,"(((8==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][8254]	= settr(8561,0,8255,3954,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][8255]	= settr(8562,0,11140,3955,3955,"supervisor_started = 1", 1, 2, 0);
	trans[1][8823]	= settr(9130,0,11140,1,0,".(goto)", 0, 2, 0);
	trans[1][8256]	= settr(8563,0,8820,2,0,"else", 0, 2, 0);
	T = trans[1][8820] = settr(9127,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9127,0,8257,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9127,0,8594,0,0,"IF", 0, 2, 0);
	trans[1][8257]	= settr(8564,0,8593,3956,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][8593] = settr(8900,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8900,0,8591,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8591] = settr(8898,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8898,0,8258,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8898,0,8424,0,0,"IF", 0, 2, 0);
	trans[1][8258]	= settr(8565,0,8423,3957,0,"(((8==START)||(8==PAUSED)))", 0, 2, 0);
	T = trans[ 1][8423] = settr(8730,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8730,0,8420,0,0,"sub-sequence", 0, 2, 0);
	trans[1][8421]	= settr(8728,0,8420,1,0,".(goto)", 0, 2, 0);
	T = trans[1][8420] = settr(8727,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(8727,0,8259,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(8727,0,8417,0,0,"DO", 0, 2, 0);
	trans[1][8259]	= settr(8566,0,8415,3958,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][8415] = settr(8722,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8722,0,8413,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8413] = settr(8720,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8720,0,8260,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8720,0,8299,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8720,0,8337,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8720,0,8375,0,0,"IF", 0, 2, 0);
	trans[1][8260]	= settr(8567,0,8298,3959,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][8298] = settr(8605,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8605,0,8280,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8280] = settr(8587,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8587,2,8278,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8278] = settr(8585,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8585,2,8261,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8585,2,8264,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8585,2,8267,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8585,2,8270,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8585,2,8273,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8585,2,8276,0,0,"IF", 1, 2, 0);
	trans[1][8261]	= settr(8568,4,8281,3960,3960,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8262 -> 8281,0 */
	reached1[8262] = 1;
	trans[1][8262]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8263]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8279]	= settr(8586,0,8281,3961,3961,".(goto)", 1, 2, 0);
	trans[1][8264]	= settr(8571,4,8281,3962,3962,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8265 -> 8281,0 */
	reached1[8265] = 1;
	trans[1][8265]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8266]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8267]	= settr(8574,4,8281,3963,3963,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8268 -> 8281,0 */
	reached1[8268] = 1;
	trans[1][8268]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8269]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8270]	= settr(8577,4,8281,3964,3964,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8271 -> 8281,0 */
	reached1[8271] = 1;
	trans[1][8271]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8272]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8273]	= settr(8580,4,8281,3965,3965,"((START==ABORT))", 1, 2, 0); /* m: 8274 -> 8281,0 */
	reached1[8274] = 1;
	trans[1][8274]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8275]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8276]	= settr(8583,2,8277,2,0,"else", 1, 2, 0);
	trans[1][8277]	= settr(8584,4,8281,3966,3966,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8279 -> 0,8281 */
	reached1[8279] = 1;
	trans[1][8281]	= settr(8588,0,8296,3967,3967,"(run Thread(j))", 0, 2, 0);
	T = trans[1][8296] = settr(8603,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8603,0,8282,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8603,0,8294,0,0,"IF", 0, 2, 0);
	trans[1][8282]	= settr(8589,0,8293,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][8293] = settr(8600,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8600,0,8289,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8289] = settr(8596,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8596,0,8283,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8596,0,8285,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8596,0,8287,0,0,"IF", 0, 2, 0);
	trans[1][8283]	= settr(8590,0,8291,3968,3968,"((_pid==0))", 0, 2, 0); /* m: 8284 -> 8291,0 */
	reached1[8284] = 1;
	trans[1][8284]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8290]	= settr(8597,0,8291,1,0,".(goto)", 0, 2, 0);
	trans[1][8285]	= settr(8592,0,8291,3969,3969,"((_pid==1))", 0, 2, 0); /* m: 8286 -> 8291,0 */
	reached1[8286] = 1;
	trans[1][8286]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8287]	= settr(8594,0,8291,3970,3970,"((_pid>1))", 0, 2, 0); /* m: 8288 -> 8291,0 */
	reached1[8288] = 1;
	trans[1][8288]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8291]	= settr(8598,0,8292,3971,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8292]	= settr(8599,0,8420,3972,3972,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8416 -> 0,8420 */
	reached1[8416] = 1;
	trans[1][8297]	= settr(8604,0,8416,1,0,".(goto)", 0, 2, 0); /* m: 8416 -> 0,8420 */
	reached1[8416] = 1;
	trans[1][8294]	= settr(8601,0,8295,2,0,"else", 0, 2, 0);
	trans[1][8295]	= settr(8602,0,8420,3973,3973,"(1)", 0, 2, 0); /* m: 8416 -> 8420,0 */
	reached1[8416] = 1;
	trans[1][8414]	= settr(8721,0,8416,1,0,".(goto)", 0, 2, 0); /* m: 8416 -> 0,8420 */
	reached1[8416] = 1;
	trans[1][8299]	= settr(8606,0,8336,3974,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][8336] = settr(8643,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8643,0,8319,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8319] = settr(8626,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8626,2,8317,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8317] = settr(8624,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8624,2,8300,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8624,2,8303,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8624,2,8306,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8624,2,8309,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8624,2,8312,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8624,2,8315,0,0,"IF", 1, 2, 0);
	trans[1][8300]	= settr(8607,4,8334,3975,3975,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8301 -> 8334,0 */
	reached1[8301] = 1;
	trans[1][8301]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8302]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8318]	= settr(8625,0,8334,3976,3976,".(goto)", 1, 2, 0);
	trans[1][8303]	= settr(8610,4,8334,3977,3977,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8304 -> 8334,0 */
	reached1[8304] = 1;
	trans[1][8304]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8305]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8306]	= settr(8613,4,8334,3978,3978,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8307 -> 8334,0 */
	reached1[8307] = 1;
	trans[1][8307]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8308]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8309]	= settr(8616,4,8334,3979,3979,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8310 -> 8334,0 */
	reached1[8310] = 1;
	trans[1][8310]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8311]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8312]	= settr(8619,4,8334,3980,3980,"((PAUSE==ABORT))", 1, 2, 0); /* m: 8313 -> 8334,0 */
	reached1[8313] = 1;
	trans[1][8313]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8314]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8315]	= settr(8622,2,8316,2,0,"else", 1, 2, 0);
	trans[1][8316]	= settr(8623,4,8334,3981,3981,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8318 -> 0,8334 */
	reached1[8318] = 1;
	T = trans[1][8334] = settr(8641,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8641,0,8320,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8641,0,8332,0,0,"IF", 0, 2, 0);
	trans[1][8320]	= settr(8627,0,8331,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][8331] = settr(8638,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8638,0,8327,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8327] = settr(8634,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8634,0,8321,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8634,0,8323,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8634,0,8325,0,0,"IF", 0, 2, 0);
	trans[1][8321]	= settr(8628,0,8329,3982,3982,"((_pid==0))", 0, 2, 0); /* m: 8322 -> 8329,0 */
	reached1[8322] = 1;
	trans[1][8322]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8328]	= settr(8635,0,8329,1,0,".(goto)", 0, 2, 0);
	trans[1][8323]	= settr(8630,0,8329,3983,3983,"((_pid==1))", 0, 2, 0); /* m: 8324 -> 8329,0 */
	reached1[8324] = 1;
	trans[1][8324]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8325]	= settr(8632,0,8329,3984,3984,"((_pid>1))", 0, 2, 0); /* m: 8326 -> 8329,0 */
	reached1[8326] = 1;
	trans[1][8326]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8329]	= settr(8636,0,8330,3985,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8330]	= settr(8637,0,8420,3986,3986,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8416 -> 0,8420 */
	reached1[8416] = 1;
	trans[1][8335]	= settr(8642,0,8416,1,0,".(goto)", 0, 2, 0); /* m: 8416 -> 0,8420 */
	reached1[8416] = 1;
	trans[1][8332]	= settr(8639,0,8333,2,0,"else", 0, 2, 0);
	trans[1][8333]	= settr(8640,0,8420,3987,3987,"(1)", 0, 2, 0); /* m: 8416 -> 8420,0 */
	reached1[8416] = 1;
	trans[1][8337]	= settr(8644,0,8374,3988,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][8374] = settr(8681,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8681,0,8357,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8357] = settr(8664,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8664,2,8355,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8355] = settr(8662,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8662,2,8338,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8662,2,8341,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8662,2,8344,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8662,2,8347,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8662,2,8350,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8662,2,8353,0,0,"IF", 1, 2, 0);
	trans[1][8338]	= settr(8645,4,8372,3989,3989,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8339 -> 8372,0 */
	reached1[8339] = 1;
	trans[1][8339]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8340]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8356]	= settr(8663,0,8372,3990,3990,".(goto)", 1, 2, 0);
	trans[1][8341]	= settr(8648,4,8372,3991,3991,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8342 -> 8372,0 */
	reached1[8342] = 1;
	trans[1][8342]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8343]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8344]	= settr(8651,4,8372,3992,3992,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8345 -> 8372,0 */
	reached1[8345] = 1;
	trans[1][8345]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8346]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8347]	= settr(8654,4,8372,3993,3993,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8348 -> 8372,0 */
	reached1[8348] = 1;
	trans[1][8348]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8349]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8350]	= settr(8657,4,8372,3994,3994,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 8351 -> 8372,0 */
	reached1[8351] = 1;
	trans[1][8351]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8352]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8353]	= settr(8660,2,8354,2,0,"else", 1, 2, 0);
	trans[1][8354]	= settr(8661,4,8372,3995,3995,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8356 -> 0,8372 */
	reached1[8356] = 1;
	T = trans[1][8372] = settr(8679,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8679,0,8358,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8679,0,8370,0,0,"IF", 0, 2, 0);
	trans[1][8358]	= settr(8665,0,8369,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][8369] = settr(8676,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8676,0,8365,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8365] = settr(8672,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8672,0,8359,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8672,0,8361,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8672,0,8363,0,0,"IF", 0, 2, 0);
	trans[1][8359]	= settr(8666,0,8367,3996,3996,"((_pid==0))", 0, 2, 0); /* m: 8360 -> 8367,0 */
	reached1[8360] = 1;
	trans[1][8360]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8366]	= settr(8673,0,8367,1,0,".(goto)", 0, 2, 0);
	trans[1][8361]	= settr(8668,0,8367,3997,3997,"((_pid==1))", 0, 2, 0); /* m: 8362 -> 8367,0 */
	reached1[8362] = 1;
	trans[1][8362]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8363]	= settr(8670,0,8367,3998,3998,"((_pid>1))", 0, 2, 0); /* m: 8364 -> 8367,0 */
	reached1[8364] = 1;
	trans[1][8364]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8367]	= settr(8674,0,8368,3999,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8368]	= settr(8675,0,8420,4000,4000,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8416 -> 0,8420 */
	reached1[8416] = 1;
	trans[1][8373]	= settr(8680,0,8416,1,0,".(goto)", 0, 2, 0); /* m: 8416 -> 0,8420 */
	reached1[8416] = 1;
	trans[1][8370]	= settr(8677,0,8371,2,0,"else", 0, 2, 0);
	trans[1][8371]	= settr(8678,0,8420,4001,4001,"(1)", 0, 2, 0); /* m: 8416 -> 8420,0 */
	reached1[8416] = 1;
	trans[1][8375]	= settr(8682,0,8412,4002,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][8412] = settr(8719,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8719,0,8395,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8395] = settr(8702,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8702,2,8393,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8393] = settr(8700,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8700,2,8376,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8700,2,8379,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8700,2,8382,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8700,2,8385,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8700,2,8388,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8700,2,8391,0,0,"IF", 1, 2, 0);
	trans[1][8376]	= settr(8683,4,8410,4003,4003,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8377 -> 8410,0 */
	reached1[8377] = 1;
	trans[1][8377]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8378]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8394]	= settr(8701,0,8410,4004,4004,".(goto)", 1, 2, 0);
	trans[1][8379]	= settr(8686,4,8410,4005,4005,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8380 -> 8410,0 */
	reached1[8380] = 1;
	trans[1][8380]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8381]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8382]	= settr(8689,4,8410,4006,4006,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8383 -> 8410,0 */
	reached1[8383] = 1;
	trans[1][8383]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8384]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8385]	= settr(8692,4,8410,4007,4007,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8386 -> 8410,0 */
	reached1[8386] = 1;
	trans[1][8386]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8387]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8388]	= settr(8695,4,8410,4008,4008,"((STOP==ABORT))", 1, 2, 0); /* m: 8389 -> 8410,0 */
	reached1[8389] = 1;
	trans[1][8389]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8390]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8391]	= settr(8698,2,8392,2,0,"else", 1, 2, 0);
	trans[1][8392]	= settr(8699,4,8410,4009,4009,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8394 -> 0,8410 */
	reached1[8394] = 1;
	T = trans[1][8410] = settr(8717,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8717,0,8396,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8717,0,8408,0,0,"IF", 0, 2, 0);
	trans[1][8396]	= settr(8703,0,8407,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][8407] = settr(8714,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8714,0,8403,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8403] = settr(8710,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8710,0,8397,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8710,0,8399,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8710,0,8401,0,0,"IF", 0, 2, 0);
	trans[1][8397]	= settr(8704,0,8405,4010,4010,"((_pid==0))", 0, 2, 0); /* m: 8398 -> 8405,0 */
	reached1[8398] = 1;
	trans[1][8398]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8404]	= settr(8711,0,8405,1,0,".(goto)", 0, 2, 0);
	trans[1][8399]	= settr(8706,0,8405,4011,4011,"((_pid==1))", 0, 2, 0); /* m: 8400 -> 8405,0 */
	reached1[8400] = 1;
	trans[1][8400]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8401]	= settr(8708,0,8405,4012,4012,"((_pid>1))", 0, 2, 0); /* m: 8402 -> 8405,0 */
	reached1[8402] = 1;
	trans[1][8402]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8405]	= settr(8712,0,8406,4013,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8406]	= settr(8713,0,8420,4014,4014,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8416 -> 0,8420 */
	reached1[8416] = 1;
	trans[1][8411]	= settr(8718,0,8416,1,0,".(goto)", 0, 2, 0); /* m: 8416 -> 0,8420 */
	reached1[8416] = 1;
	trans[1][8408]	= settr(8715,0,8409,2,0,"else", 0, 2, 0);
	trans[1][8409]	= settr(8716,0,8420,4015,4015,"(1)", 0, 2, 0); /* m: 8416 -> 8420,0 */
	reached1[8416] = 1;
	trans[1][8416]	= settr(8723,0,8420,4016,4016,"j = (j+1)", 0, 2, 0);
	trans[1][8417]	= settr(8724,0,8418,2,0,"else", 0, 2, 0);
	trans[1][8418]	= settr(8725,0,11140,4017,4017,"j = 1", 0, 2, 0);
	trans[1][8419]	= settr(8726,0,11140,1,0,"goto :b59", 0, 2, 0);
	trans[1][8422]	= settr(8729,0,11140,1,0,"break", 0, 2, 0);
	trans[1][8592]	= settr(8899,0,11140,1,0,".(goto)", 0, 2, 0);
	trans[1][8424]	= settr(8731,0,8590,2,0,"else", 0, 2, 0);
	T = trans[ 1][8590] = settr(8897,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8897,0,8425,0,0,"sub-sequence", 0, 2, 0);
	trans[1][8425]	= settr(8732,0,8587,4018,4018,"j = (3-1)", 0, 2, 0);
	trans[1][8588]	= settr(8895,0,8587,1,0,".(goto)", 0, 2, 0);
	T = trans[1][8587] = settr(8894,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(8894,0,8426,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(8894,0,8584,0,0,"DO", 0, 2, 0);
	trans[1][8426]	= settr(8733,0,8582,4019,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][8582] = settr(8889,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8889,0,8580,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8580] = settr(8887,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8887,0,8427,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8887,0,8466,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8887,0,8504,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8887,0,8542,0,0,"IF", 0, 2, 0);
	trans[1][8427]	= settr(8734,0,8465,4020,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][8465] = settr(8772,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8772,0,8447,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8447] = settr(8754,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8754,2,8445,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8445] = settr(8752,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8752,2,8428,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8752,2,8431,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8752,2,8434,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8752,2,8437,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8752,2,8440,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8752,2,8443,0,0,"IF", 1, 2, 0);
	trans[1][8428]	= settr(8735,4,8448,4021,4021,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8429 -> 8448,0 */
	reached1[8429] = 1;
	trans[1][8429]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8430]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8446]	= settr(8753,0,8448,4022,4022,".(goto)", 1, 2, 0);
	trans[1][8431]	= settr(8738,4,8448,4023,4023,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8432 -> 8448,0 */
	reached1[8432] = 1;
	trans[1][8432]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8433]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8434]	= settr(8741,4,8448,4024,4024,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8435 -> 8448,0 */
	reached1[8435] = 1;
	trans[1][8435]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8436]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8437]	= settr(8744,4,8448,4025,4025,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8438 -> 8448,0 */
	reached1[8438] = 1;
	trans[1][8438]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8439]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8440]	= settr(8747,4,8448,4026,4026,"((START==ABORT))", 1, 2, 0); /* m: 8441 -> 8448,0 */
	reached1[8441] = 1;
	trans[1][8441]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8442]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8443]	= settr(8750,2,8444,2,0,"else", 1, 2, 0);
	trans[1][8444]	= settr(8751,4,8448,4027,4027,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8446 -> 0,8448 */
	reached1[8446] = 1;
	trans[1][8448]	= settr(8755,0,8463,4028,4028,"(run Thread(j))", 0, 2, 0);
	T = trans[1][8463] = settr(8770,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8770,0,8449,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8770,0,8461,0,0,"IF", 0, 2, 0);
	trans[1][8449]	= settr(8756,0,8460,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][8460] = settr(8767,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8767,0,8456,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8456] = settr(8763,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8763,0,8450,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8763,0,8452,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8763,0,8454,0,0,"IF", 0, 2, 0);
	trans[1][8450]	= settr(8757,0,8458,4029,4029,"((_pid==0))", 0, 2, 0); /* m: 8451 -> 8458,0 */
	reached1[8451] = 1;
	trans[1][8451]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8457]	= settr(8764,0,8458,1,0,".(goto)", 0, 2, 0);
	trans[1][8452]	= settr(8759,0,8458,4030,4030,"((_pid==1))", 0, 2, 0); /* m: 8453 -> 8458,0 */
	reached1[8453] = 1;
	trans[1][8453]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8454]	= settr(8761,0,8458,4031,4031,"((_pid>1))", 0, 2, 0); /* m: 8455 -> 8458,0 */
	reached1[8455] = 1;
	trans[1][8455]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8458]	= settr(8765,0,8459,4032,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8459]	= settr(8766,0,8587,4033,4033,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8583 -> 0,8587 */
	reached1[8583] = 1;
	trans[1][8464]	= settr(8771,0,8583,1,0,".(goto)", 0, 2, 0); /* m: 8583 -> 0,8587 */
	reached1[8583] = 1;
	trans[1][8461]	= settr(8768,0,8462,2,0,"else", 0, 2, 0);
	trans[1][8462]	= settr(8769,0,8587,4034,4034,"(1)", 0, 2, 0); /* m: 8583 -> 8587,0 */
	reached1[8583] = 1;
	trans[1][8581]	= settr(8888,0,8583,1,0,".(goto)", 0, 2, 0); /* m: 8583 -> 0,8587 */
	reached1[8583] = 1;
	trans[1][8466]	= settr(8773,0,8503,4035,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][8503] = settr(8810,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8810,0,8486,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8486] = settr(8793,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8793,2,8484,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8484] = settr(8791,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8791,2,8467,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8791,2,8470,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8791,2,8473,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8791,2,8476,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8791,2,8479,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8791,2,8482,0,0,"IF", 1, 2, 0);
	trans[1][8467]	= settr(8774,4,8501,4036,4036,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8468 -> 8501,0 */
	reached1[8468] = 1;
	trans[1][8468]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8469]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8485]	= settr(8792,0,8501,4037,4037,".(goto)", 1, 2, 0);
	trans[1][8470]	= settr(8777,4,8501,4038,4038,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8471 -> 8501,0 */
	reached1[8471] = 1;
	trans[1][8471]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8472]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8473]	= settr(8780,4,8501,4039,4039,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8474 -> 8501,0 */
	reached1[8474] = 1;
	trans[1][8474]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8475]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8476]	= settr(8783,4,8501,4040,4040,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8477 -> 8501,0 */
	reached1[8477] = 1;
	trans[1][8477]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8478]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8479]	= settr(8786,4,8501,4041,4041,"((PAUSE==ABORT))", 1, 2, 0); /* m: 8480 -> 8501,0 */
	reached1[8480] = 1;
	trans[1][8480]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8481]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8482]	= settr(8789,2,8483,2,0,"else", 1, 2, 0);
	trans[1][8483]	= settr(8790,4,8501,4042,4042,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8485 -> 0,8501 */
	reached1[8485] = 1;
	T = trans[1][8501] = settr(8808,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8808,0,8487,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8808,0,8499,0,0,"IF", 0, 2, 0);
	trans[1][8487]	= settr(8794,0,8498,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][8498] = settr(8805,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8805,0,8494,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8494] = settr(8801,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8801,0,8488,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8801,0,8490,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8801,0,8492,0,0,"IF", 0, 2, 0);
	trans[1][8488]	= settr(8795,0,8496,4043,4043,"((_pid==0))", 0, 2, 0); /* m: 8489 -> 8496,0 */
	reached1[8489] = 1;
	trans[1][8489]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8495]	= settr(8802,0,8496,1,0,".(goto)", 0, 2, 0);
	trans[1][8490]	= settr(8797,0,8496,4044,4044,"((_pid==1))", 0, 2, 0); /* m: 8491 -> 8496,0 */
	reached1[8491] = 1;
	trans[1][8491]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8492]	= settr(8799,0,8496,4045,4045,"((_pid>1))", 0, 2, 0); /* m: 8493 -> 8496,0 */
	reached1[8493] = 1;
	trans[1][8493]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8496]	= settr(8803,0,8497,4046,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8497]	= settr(8804,0,8587,4047,4047,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8583 -> 0,8587 */
	reached1[8583] = 1;
	trans[1][8502]	= settr(8809,0,8583,1,0,".(goto)", 0, 2, 0); /* m: 8583 -> 0,8587 */
	reached1[8583] = 1;
	trans[1][8499]	= settr(8806,0,8500,2,0,"else", 0, 2, 0);
	trans[1][8500]	= settr(8807,0,8587,4048,4048,"(1)", 0, 2, 0); /* m: 8583 -> 8587,0 */
	reached1[8583] = 1;
	trans[1][8504]	= settr(8811,0,8541,4049,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][8541] = settr(8848,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8848,0,8524,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8524] = settr(8831,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8831,2,8522,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8522] = settr(8829,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8829,2,8505,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8829,2,8508,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8829,2,8511,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8829,2,8514,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8829,2,8517,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8829,2,8520,0,0,"IF", 1, 2, 0);
	trans[1][8505]	= settr(8812,4,8539,4050,4050,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8506 -> 8539,0 */
	reached1[8506] = 1;
	trans[1][8506]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8507]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8523]	= settr(8830,0,8539,4051,4051,".(goto)", 1, 2, 0);
	trans[1][8508]	= settr(8815,4,8539,4052,4052,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8509 -> 8539,0 */
	reached1[8509] = 1;
	trans[1][8509]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8510]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8511]	= settr(8818,4,8539,4053,4053,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8512 -> 8539,0 */
	reached1[8512] = 1;
	trans[1][8512]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8513]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8514]	= settr(8821,4,8539,4054,4054,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8515 -> 8539,0 */
	reached1[8515] = 1;
	trans[1][8515]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8516]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8517]	= settr(8824,4,8539,4055,4055,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 8518 -> 8539,0 */
	reached1[8518] = 1;
	trans[1][8518]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8519]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8520]	= settr(8827,2,8521,2,0,"else", 1, 2, 0);
	trans[1][8521]	= settr(8828,4,8539,4056,4056,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8523 -> 0,8539 */
	reached1[8523] = 1;
	T = trans[1][8539] = settr(8846,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8846,0,8525,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8846,0,8537,0,0,"IF", 0, 2, 0);
	trans[1][8525]	= settr(8832,0,8536,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][8536] = settr(8843,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8843,0,8532,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8532] = settr(8839,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8839,0,8526,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8839,0,8528,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8839,0,8530,0,0,"IF", 0, 2, 0);
	trans[1][8526]	= settr(8833,0,8534,4057,4057,"((_pid==0))", 0, 2, 0); /* m: 8527 -> 8534,0 */
	reached1[8527] = 1;
	trans[1][8527]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8533]	= settr(8840,0,8534,1,0,".(goto)", 0, 2, 0);
	trans[1][8528]	= settr(8835,0,8534,4058,4058,"((_pid==1))", 0, 2, 0); /* m: 8529 -> 8534,0 */
	reached1[8529] = 1;
	trans[1][8529]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8530]	= settr(8837,0,8534,4059,4059,"((_pid>1))", 0, 2, 0); /* m: 8531 -> 8534,0 */
	reached1[8531] = 1;
	trans[1][8531]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8534]	= settr(8841,0,8535,4060,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8535]	= settr(8842,0,8587,4061,4061,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8583 -> 0,8587 */
	reached1[8583] = 1;
	trans[1][8540]	= settr(8847,0,8583,1,0,".(goto)", 0, 2, 0); /* m: 8583 -> 0,8587 */
	reached1[8583] = 1;
	trans[1][8537]	= settr(8844,0,8538,2,0,"else", 0, 2, 0);
	trans[1][8538]	= settr(8845,0,8587,4062,4062,"(1)", 0, 2, 0); /* m: 8583 -> 8587,0 */
	reached1[8583] = 1;
	trans[1][8542]	= settr(8849,0,8579,4063,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][8579] = settr(8886,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8886,0,8562,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8562] = settr(8869,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8869,2,8560,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8560] = settr(8867,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8867,2,8543,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8867,2,8546,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8867,2,8549,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8867,2,8552,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8867,2,8555,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8867,2,8558,0,0,"IF", 1, 2, 0);
	trans[1][8543]	= settr(8850,4,8577,4064,4064,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8544 -> 8577,0 */
	reached1[8544] = 1;
	trans[1][8544]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8545]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8561]	= settr(8868,0,8577,4065,4065,".(goto)", 1, 2, 0);
	trans[1][8546]	= settr(8853,4,8577,4066,4066,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8547 -> 8577,0 */
	reached1[8547] = 1;
	trans[1][8547]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8548]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8549]	= settr(8856,4,8577,4067,4067,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8550 -> 8577,0 */
	reached1[8550] = 1;
	trans[1][8550]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8551]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8552]	= settr(8859,4,8577,4068,4068,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8553 -> 8577,0 */
	reached1[8553] = 1;
	trans[1][8553]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8554]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8555]	= settr(8862,4,8577,4069,4069,"((STOP==ABORT))", 1, 2, 0); /* m: 8556 -> 8577,0 */
	reached1[8556] = 1;
	trans[1][8556]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8557]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8558]	= settr(8865,2,8559,2,0,"else", 1, 2, 0);
	trans[1][8559]	= settr(8866,4,8577,4070,4070,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8561 -> 0,8577 */
	reached1[8561] = 1;
	T = trans[1][8577] = settr(8884,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8884,0,8563,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8884,0,8575,0,0,"IF", 0, 2, 0);
	trans[1][8563]	= settr(8870,0,8574,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][8574] = settr(8881,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8881,0,8570,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8570] = settr(8877,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8877,0,8564,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8877,0,8566,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8877,0,8568,0,0,"IF", 0, 2, 0);
	trans[1][8564]	= settr(8871,0,8572,4071,4071,"((_pid==0))", 0, 2, 0); /* m: 8565 -> 8572,0 */
	reached1[8565] = 1;
	trans[1][8565]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8571]	= settr(8878,0,8572,1,0,".(goto)", 0, 2, 0);
	trans[1][8566]	= settr(8873,0,8572,4072,4072,"((_pid==1))", 0, 2, 0); /* m: 8567 -> 8572,0 */
	reached1[8567] = 1;
	trans[1][8567]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8568]	= settr(8875,0,8572,4073,4073,"((_pid>1))", 0, 2, 0); /* m: 8569 -> 8572,0 */
	reached1[8569] = 1;
	trans[1][8569]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8572]	= settr(8879,0,8573,4074,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8573]	= settr(8880,0,8587,4075,4075,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8583 -> 0,8587 */
	reached1[8583] = 1;
	trans[1][8578]	= settr(8885,0,8583,1,0,".(goto)", 0, 2, 0); /* m: 8583 -> 0,8587 */
	reached1[8583] = 1;
	trans[1][8575]	= settr(8882,0,8576,2,0,"else", 0, 2, 0);
	trans[1][8576]	= settr(8883,0,8587,4076,4076,"(1)", 0, 2, 0); /* m: 8583 -> 8587,0 */
	reached1[8583] = 1;
	trans[1][8583]	= settr(8890,0,8587,4077,4077,"j = (j-1)", 0, 2, 0);
	trans[1][8584]	= settr(8891,0,8585,2,0,"else", 0, 2, 0);
	trans[1][8585]	= settr(8892,0,11140,4078,4078,"j = 1", 0, 2, 0);
	trans[1][8586]	= settr(8893,0,11140,1,0,"goto :b60", 0, 2, 0);
	trans[1][8589]	= settr(8896,0,11140,1,0,"break", 0, 2, 0);
	trans[1][8821]	= settr(9128,0,11140,1,0,".(goto)", 0, 2, 0);
	trans[1][8594]	= settr(8901,0,8819,2,0,"else", 0, 2, 0);
	T = trans[ 1][8819] = settr(9126,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9126,0,8595,0,0,"sub-sequence", 0, 2, 0);
	trans[1][8595]	= settr(8902,0,8760,4079,0,"printf('Supervisor propagating command %e...\\n',8)", 0, 2, 0);
	T = trans[ 1][8760] = settr(9067,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9067,0,8757,0,0,"sub-sequence", 0, 2, 0);
	trans[1][8758]	= settr(9065,0,8757,1,0,".(goto)", 0, 2, 0);
	T = trans[1][8757] = settr(9064,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(9064,0,8596,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(9064,0,8754,0,0,"DO", 0, 2, 0);
	trans[1][8596]	= settr(8903,0,8752,4080,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][8752] = settr(9059,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9059,0,8750,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8750] = settr(9057,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9057,0,8597,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9057,0,8636,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9057,0,8674,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9057,0,8712,0,0,"IF", 0, 2, 0);
	trans[1][8597]	= settr(8904,0,8635,4081,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][8635] = settr(8942,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8942,0,8617,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8617] = settr(8924,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8924,2,8615,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8615] = settr(8922,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8922,2,8598,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8922,2,8601,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8922,2,8604,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8922,2,8607,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8922,2,8610,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8922,2,8613,0,0,"IF", 1, 2, 0);
	trans[1][8598]	= settr(8905,4,8618,4082,4082,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8599 -> 8618,0 */
	reached1[8599] = 1;
	trans[1][8599]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8600]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8616]	= settr(8923,0,8618,4083,4083,".(goto)", 1, 2, 0);
	trans[1][8601]	= settr(8908,4,8618,4084,4084,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8602 -> 8618,0 */
	reached1[8602] = 1;
	trans[1][8602]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8603]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8604]	= settr(8911,4,8618,4085,4085,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8605 -> 8618,0 */
	reached1[8605] = 1;
	trans[1][8605]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8606]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8607]	= settr(8914,4,8618,4086,4086,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8608 -> 8618,0 */
	reached1[8608] = 1;
	trans[1][8608]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8609]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8610]	= settr(8917,4,8618,4087,4087,"((START==ABORT))", 1, 2, 0); /* m: 8611 -> 8618,0 */
	reached1[8611] = 1;
	trans[1][8611]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8612]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8613]	= settr(8920,2,8614,2,0,"else", 1, 2, 0);
	trans[1][8614]	= settr(8921,4,8618,4088,4088,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8616 -> 0,8618 */
	reached1[8616] = 1;
	trans[1][8618]	= settr(8925,0,8633,4089,4089,"(run Thread(j))", 0, 2, 0);
	T = trans[1][8633] = settr(8940,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(8940,0,8619,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(8940,0,8631,0,0,"IF", 0, 2, 0);
	trans[1][8619]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][8630] = settr(8937,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8937,0,8626,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8626] = settr(8933,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8933,0,8620,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8933,0,8622,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8933,0,8624,0,0,"IF", 0, 2, 0);
	trans[1][8620]	= settr(8927,0,8628,4090,4090,"((_pid==0))", 0, 2, 0); /* m: 8621 -> 8628,0 */
	reached1[8621] = 1;
	trans[1][8621]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8627]	= settr(8934,0,8628,1,0,".(goto)", 0, 2, 0);
	trans[1][8622]	= settr(8929,0,8628,4091,4091,"((_pid==1))", 0, 2, 0); /* m: 8623 -> 8628,0 */
	reached1[8623] = 1;
	trans[1][8623]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8624]	= settr(8931,0,8628,4092,4092,"((_pid>1))", 0, 2, 0); /* m: 8625 -> 8628,0 */
	reached1[8625] = 1;
	trans[1][8625]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8628]	= settr(8935,0,8629,4093,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8629]	= settr(8936,0,8757,4094,4094,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8753 -> 0,8757 */
	reached1[8753] = 1;
	trans[1][8634]	= settr(8941,0,8753,1,0,".(goto)", 0, 2, 0); /* m: 8753 -> 0,8757 */
	reached1[8753] = 1;
	trans[1][8631]	= settr(8938,0,8632,2,0,"else", 0, 2, 0);
	trans[1][8632]	= settr(8939,0,8757,4095,4095,"(1)", 0, 2, 0); /* m: 8753 -> 8757,0 */
	reached1[8753] = 1;
	trans[1][8751]	= settr(9058,0,8753,1,0,".(goto)", 0, 2, 0); /* m: 8753 -> 0,8757 */
	reached1[8753] = 1;
	trans[1][8636]	= settr(8943,0,8673,4096,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][8673] = settr(8980,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8980,0,8656,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8656] = settr(8963,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(8963,2,8654,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8654] = settr(8961,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8961,2,8637,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8961,2,8640,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8961,2,8643,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8961,2,8646,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8961,2,8649,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8961,2,8652,0,0,"IF", 1, 2, 0);
	trans[1][8637]	= settr(8944,4,8671,4097,4097,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8638 -> 8671,0 */
	reached1[8638] = 1;
	trans[1][8638]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8639]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8655]	= settr(8962,0,8671,4098,4098,".(goto)", 1, 2, 0);
	trans[1][8640]	= settr(8947,4,8671,4099,4099,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8641 -> 8671,0 */
	reached1[8641] = 1;
	trans[1][8641]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8642]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8643]	= settr(8950,4,8671,4100,4100,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8644 -> 8671,0 */
	reached1[8644] = 1;
	trans[1][8644]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8645]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8646]	= settr(8953,4,8671,4101,4101,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8647 -> 8671,0 */
	reached1[8647] = 1;
	trans[1][8647]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8648]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8649]	= settr(8956,4,8671,4102,4102,"((PAUSE==ABORT))", 1, 2, 0); /* m: 8650 -> 8671,0 */
	reached1[8650] = 1;
	trans[1][8650]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8651]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8652]	= settr(8959,2,8653,2,0,"else", 1, 2, 0);
	trans[1][8653]	= settr(8960,4,8671,4103,4103,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8655 -> 0,8671 */
	reached1[8655] = 1;
	T = trans[1][8671] = settr(8978,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(8978,0,8657,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(8978,0,8669,0,0,"IF", 0, 2, 0);
	trans[1][8657]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][8668] = settr(8975,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(8975,0,8664,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8664] = settr(8971,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8971,0,8658,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(8971,0,8660,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(8971,0,8662,0,0,"IF", 0, 2, 0);
	trans[1][8658]	= settr(8965,0,8666,4104,4104,"((_pid==0))", 0, 2, 0); /* m: 8659 -> 8666,0 */
	reached1[8659] = 1;
	trans[1][8659]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8665]	= settr(8972,0,8666,1,0,".(goto)", 0, 2, 0);
	trans[1][8660]	= settr(8967,0,8666,4105,4105,"((_pid==1))", 0, 2, 0); /* m: 8661 -> 8666,0 */
	reached1[8661] = 1;
	trans[1][8661]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8662]	= settr(8969,0,8666,4106,4106,"((_pid>1))", 0, 2, 0); /* m: 8663 -> 8666,0 */
	reached1[8663] = 1;
	trans[1][8663]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8666]	= settr(8973,0,8667,4107,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8667]	= settr(8974,0,8757,4108,4108,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8753 -> 0,8757 */
	reached1[8753] = 1;
	trans[1][8672]	= settr(8979,0,8753,1,0,".(goto)", 0, 2, 0); /* m: 8753 -> 0,8757 */
	reached1[8753] = 1;
	trans[1][8669]	= settr(8976,0,8670,2,0,"else", 0, 2, 0);
	trans[1][8670]	= settr(8977,0,8757,4109,4109,"(1)", 0, 2, 0); /* m: 8753 -> 8757,0 */
	reached1[8753] = 1;
	trans[1][8674]	= settr(8981,0,8711,4110,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][8711] = settr(9018,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9018,0,8694,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8694] = settr(9001,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9001,2,8692,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8692] = settr(8999,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8999,2,8675,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8999,2,8678,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8999,2,8681,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8999,2,8684,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(8999,2,8687,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(8999,2,8690,0,0,"IF", 1, 2, 0);
	trans[1][8675]	= settr(8982,4,8709,4111,4111,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8676 -> 8709,0 */
	reached1[8676] = 1;
	trans[1][8676]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8677]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8693]	= settr(9000,0,8709,4112,4112,".(goto)", 1, 2, 0);
	trans[1][8678]	= settr(8985,4,8709,4113,4113,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8679 -> 8709,0 */
	reached1[8679] = 1;
	trans[1][8679]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8680]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8681]	= settr(8988,4,8709,4114,4114,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8682 -> 8709,0 */
	reached1[8682] = 1;
	trans[1][8682]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8683]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8684]	= settr(8991,4,8709,4115,4115,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8685 -> 8709,0 */
	reached1[8685] = 1;
	trans[1][8685]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8686]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8687]	= settr(8994,4,8709,4116,4116,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 8688 -> 8709,0 */
	reached1[8688] = 1;
	trans[1][8688]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8689]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8690]	= settr(8997,2,8691,2,0,"else", 1, 2, 0);
	trans[1][8691]	= settr(8998,4,8709,4117,4117,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8693 -> 0,8709 */
	reached1[8693] = 1;
	T = trans[1][8709] = settr(9016,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(9016,0,8695,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(9016,0,8707,0,0,"IF", 0, 2, 0);
	trans[1][8695]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][8706] = settr(9013,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9013,0,8702,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8702] = settr(9009,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9009,0,8696,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9009,0,8698,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9009,0,8700,0,0,"IF", 0, 2, 0);
	trans[1][8696]	= settr(9003,0,8704,4118,4118,"((_pid==0))", 0, 2, 0); /* m: 8697 -> 8704,0 */
	reached1[8697] = 1;
	trans[1][8697]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8703]	= settr(9010,0,8704,1,0,".(goto)", 0, 2, 0);
	trans[1][8698]	= settr(9005,0,8704,4119,4119,"((_pid==1))", 0, 2, 0); /* m: 8699 -> 8704,0 */
	reached1[8699] = 1;
	trans[1][8699]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8700]	= settr(9007,0,8704,4120,4120,"((_pid>1))", 0, 2, 0); /* m: 8701 -> 8704,0 */
	reached1[8701] = 1;
	trans[1][8701]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8704]	= settr(9011,0,8705,4121,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8705]	= settr(9012,0,8757,4122,4122,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8753 -> 0,8757 */
	reached1[8753] = 1;
	trans[1][8710]	= settr(9017,0,8753,1,0,".(goto)", 0, 2, 0); /* m: 8753 -> 0,8757 */
	reached1[8753] = 1;
	trans[1][8707]	= settr(9014,0,8708,2,0,"else", 0, 2, 0);
	trans[1][8708]	= settr(9015,0,8757,4123,4123,"(1)", 0, 2, 0); /* m: 8753 -> 8757,0 */
	reached1[8753] = 1;
	trans[1][8712]	= settr(9019,0,8749,4124,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][8749] = settr(9056,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9056,0,8732,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8732] = settr(9039,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9039,2,8730,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8730] = settr(9037,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9037,2,8713,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9037,2,8716,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9037,2,8719,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9037,2,8722,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9037,2,8725,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9037,2,8728,0,0,"IF", 1, 2, 0);
	trans[1][8713]	= settr(9020,4,8747,4125,4125,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8714 -> 8747,0 */
	reached1[8714] = 1;
	trans[1][8714]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8715]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8731]	= settr(9038,0,8747,4126,4126,".(goto)", 1, 2, 0);
	trans[1][8716]	= settr(9023,4,8747,4127,4127,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8717 -> 8747,0 */
	reached1[8717] = 1;
	trans[1][8717]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8718]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8719]	= settr(9026,4,8747,4128,4128,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8720 -> 8747,0 */
	reached1[8720] = 1;
	trans[1][8720]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8721]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8722]	= settr(9029,4,8747,4129,4129,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8723 -> 8747,0 */
	reached1[8723] = 1;
	trans[1][8723]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8724]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8725]	= settr(9032,4,8747,4130,4130,"((STOP==ABORT))", 1, 2, 0); /* m: 8726 -> 8747,0 */
	reached1[8726] = 1;
	trans[1][8726]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8727]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8728]	= settr(9035,2,8729,2,0,"else", 1, 2, 0);
	trans[1][8729]	= settr(9036,4,8747,4131,4131,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8731 -> 0,8747 */
	reached1[8731] = 1;
	T = trans[1][8747] = settr(9054,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(9054,0,8733,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(9054,0,8745,0,0,"IF", 0, 2, 0);
	trans[1][8733]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][8744] = settr(9051,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9051,0,8740,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8740] = settr(9047,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9047,0,8734,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9047,0,8736,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9047,0,8738,0,0,"IF", 0, 2, 0);
	trans[1][8734]	= settr(9041,0,8742,4132,4132,"((_pid==0))", 0, 2, 0); /* m: 8735 -> 8742,0 */
	reached1[8735] = 1;
	trans[1][8735]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8741]	= settr(9048,0,8742,1,0,".(goto)", 0, 2, 0);
	trans[1][8736]	= settr(9043,0,8742,4133,4133,"((_pid==1))", 0, 2, 0); /* m: 8737 -> 8742,0 */
	reached1[8737] = 1;
	trans[1][8737]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8738]	= settr(9045,0,8742,4134,4134,"((_pid>1))", 0, 2, 0); /* m: 8739 -> 8742,0 */
	reached1[8739] = 1;
	trans[1][8739]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8742]	= settr(9049,0,8743,4135,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8743]	= settr(9050,0,8757,4136,4136,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8753 -> 0,8757 */
	reached1[8753] = 1;
	trans[1][8748]	= settr(9055,0,8753,1,0,".(goto)", 0, 2, 0); /* m: 8753 -> 0,8757 */
	reached1[8753] = 1;
	trans[1][8745]	= settr(9052,0,8746,2,0,"else", 0, 2, 0);
	trans[1][8746]	= settr(9053,0,8757,4137,4137,"(1)", 0, 2, 0); /* m: 8753 -> 8757,0 */
	reached1[8753] = 1;
	trans[1][8753]	= settr(9060,0,8757,4138,4138,"j = (j+1)", 0, 2, 0);
	trans[1][8754]	= settr(9061,0,8755,2,0,"else", 0, 2, 0);
	trans[1][8755]	= settr(9062,0,8816,4139,4139,"j = 1", 0, 2, 0);
	trans[1][8756]	= settr(9063,0,8816,1,0,"goto :b61", 0, 2, 0);
	trans[1][8759]	= settr(9066,0,8816,1,0,"break", 0, 2, 0);
	trans[1][8817]	= settr(9124,0,8816,1,0,".(goto)", 0, 2, 0);
	T = trans[1][8816] = settr(9123,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(9123,0,8761,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(9123,0,8813,0,0,"DO", 0, 2, 0);
	trans[1][8761]	= settr(9068,0,8810,4140,0,"((j<3))", 0, 2, 0);
	T = trans[1][8810] = settr(9117,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9117,0,8762,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9117,0,8774,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9117,0,8786,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9117,0,8798,0,0,"IF", 0, 2, 0);
	trans[1][8762]	= settr(9069,0,8773,4141,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][8773] = settr(9080,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9080,0,8769,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8769] = settr(9076,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9076,0,8763,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9076,0,8765,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9076,0,8767,0,0,"IF", 0, 2, 0);
	trans[1][8763]	= settr(9070,0,8771,4142,4142,"((_pid==0))", 0, 2, 0); /* m: 8764 -> 8771,0 */
	reached1[8764] = 1;
	trans[1][8764]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8770]	= settr(9077,0,8771,1,0,".(goto)", 0, 2, 0);
	trans[1][8765]	= settr(9072,0,8771,4143,4143,"((_pid==1))", 0, 2, 0); /* m: 8766 -> 8771,0 */
	reached1[8766] = 1;
	trans[1][8766]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8767]	= settr(9074,0,8771,4144,4144,"((_pid>1))", 0, 2, 0); /* m: 8768 -> 8771,0 */
	reached1[8768] = 1;
	trans[1][8768]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8771]	= settr(9078,0,8772,4145,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8772]	= settr(9079,0,8816,4146,4146,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8812 -> 0,8816 */
	reached1[8812] = 1;
	trans[1][8811]	= settr(9118,0,8812,1,0,".(goto)", 0, 2, 0); /* m: 8812 -> 0,8816 */
	reached1[8812] = 1;
	trans[1][8774]	= settr(9081,0,8785,4147,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][8785] = settr(9092,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9092,0,8781,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8781] = settr(9088,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9088,0,8775,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9088,0,8777,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9088,0,8779,0,0,"IF", 0, 2, 0);
	trans[1][8775]	= settr(9082,0,8783,4148,4148,"((_pid==0))", 0, 2, 0); /* m: 8776 -> 8783,0 */
	reached1[8776] = 1;
	trans[1][8776]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8782]	= settr(9089,0,8783,1,0,".(goto)", 0, 2, 0);
	trans[1][8777]	= settr(9084,0,8783,4149,4149,"((_pid==1))", 0, 2, 0); /* m: 8778 -> 8783,0 */
	reached1[8778] = 1;
	trans[1][8778]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8779]	= settr(9086,0,8783,4150,4150,"((_pid>1))", 0, 2, 0); /* m: 8780 -> 8783,0 */
	reached1[8780] = 1;
	trans[1][8780]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8783]	= settr(9090,0,8784,4151,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8784]	= settr(9091,0,8816,4152,4152,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8812 -> 0,8816 */
	reached1[8812] = 1;
	trans[1][8786]	= settr(9093,0,8797,4153,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][8797] = settr(9104,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9104,0,8793,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8793] = settr(9100,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9100,0,8787,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9100,0,8789,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9100,0,8791,0,0,"IF", 0, 2, 0);
	trans[1][8787]	= settr(9094,0,8795,4154,4154,"((_pid==0))", 0, 2, 0); /* m: 8788 -> 8795,0 */
	reached1[8788] = 1;
	trans[1][8788]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8794]	= settr(9101,0,8795,1,0,".(goto)", 0, 2, 0);
	trans[1][8789]	= settr(9096,0,8795,4155,4155,"((_pid==1))", 0, 2, 0); /* m: 8790 -> 8795,0 */
	reached1[8790] = 1;
	trans[1][8790]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8791]	= settr(9098,0,8795,4156,4156,"((_pid>1))", 0, 2, 0); /* m: 8792 -> 8795,0 */
	reached1[8792] = 1;
	trans[1][8792]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8795]	= settr(9102,0,8796,4157,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8796]	= settr(9103,0,8816,4158,4158,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8812 -> 0,8816 */
	reached1[8812] = 1;
	trans[1][8798]	= settr(9105,0,8809,4159,0,"((8==STOP))", 0, 2, 0);
	T = trans[ 1][8809] = settr(9116,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9116,0,8805,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8805] = settr(9112,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9112,0,8799,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9112,0,8801,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9112,0,8803,0,0,"IF", 0, 2, 0);
	trans[1][8799]	= settr(9106,0,8807,4160,4160,"((_pid==0))", 0, 2, 0); /* m: 8800 -> 8807,0 */
	reached1[8800] = 1;
	trans[1][8800]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8806]	= settr(9113,0,8807,1,0,".(goto)", 0, 2, 0);
	trans[1][8801]	= settr(9108,0,8807,4161,4161,"((_pid==1))", 0, 2, 0); /* m: 8802 -> 8807,0 */
	reached1[8802] = 1;
	trans[1][8802]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8803]	= settr(9110,0,8807,4162,4162,"((_pid>1))", 0, 2, 0); /* m: 8804 -> 8807,0 */
	reached1[8804] = 1;
	trans[1][8804]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8807]	= settr(9114,0,8808,4163,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8808]	= settr(9115,0,8816,4164,4164,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8812 -> 0,8816 */
	reached1[8812] = 1;
	trans[1][8812]	= settr(9119,0,8816,4165,4165,"j = (j+1)", 0, 2, 0);
	trans[1][8813]	= settr(9120,0,8814,2,0,"else", 0, 2, 0);
	trans[1][8814]	= settr(9121,0,11140,4166,4166,"j = 1", 0, 2, 0);
	trans[1][8815]	= settr(9122,0,11140,1,0,"goto :b62", 0, 2, 0);
	trans[1][8818]	= settr(9125,0,11140,1,0,"break", 0, 2, 0);
	trans[1][8825]	= settr(9132,0,9397,4167,0,"(((7==ABORTING)||(7==STOPPING)))", 0, 2, 0);
	T = trans[ 1][9397] = settr(9704,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9704,0,9395,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9395] = settr(9702,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9702,0,8826,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9702,0,8829,0,0,"IF", 0, 2, 0);
	trans[1][8826]	= settr(9133,0,8827,4168,0,"(((12==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][8827]	= settr(9134,0,8828,4169,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][8828]	= settr(9135,0,11140,4170,4170,"supervisor_started = 1", 1, 2, 0);
	trans[1][9396]	= settr(9703,0,11140,1,0,".(goto)", 0, 2, 0);
	trans[1][8829]	= settr(9136,0,9393,2,0,"else", 0, 2, 0);
	T = trans[1][9393] = settr(9700,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9700,0,8830,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9700,0,9167,0,0,"IF", 0, 2, 0);
	trans[1][8830]	= settr(9137,0,9166,4171,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][9166] = settr(9473,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9473,0,9164,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9164] = settr(9471,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9471,0,8831,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9471,0,8997,0,0,"IF", 0, 2, 0);
	trans[1][8831]	= settr(9138,0,8996,4172,0,"(((12==START)||(12==PAUSED)))", 0, 2, 0);
	T = trans[ 1][8996] = settr(9303,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9303,0,8993,0,0,"sub-sequence", 0, 2, 0);
	trans[1][8994]	= settr(9301,0,8993,1,0,".(goto)", 0, 2, 0);
	T = trans[1][8993] = settr(9300,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(9300,0,8832,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(9300,0,8990,0,0,"DO", 0, 2, 0);
	trans[1][8832]	= settr(9139,0,8988,4173,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][8988] = settr(9295,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9295,0,8986,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8986] = settr(9293,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9293,0,8833,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9293,0,8872,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9293,0,8910,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9293,0,8948,0,0,"IF", 0, 2, 0);
	trans[1][8833]	= settr(9140,0,8871,4174,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][8871] = settr(9178,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9178,0,8853,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8853] = settr(9160,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9160,2,8851,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8851] = settr(9158,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9158,2,8834,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9158,2,8837,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9158,2,8840,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9158,2,8843,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9158,2,8846,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9158,2,8849,0,0,"IF", 1, 2, 0);
	trans[1][8834]	= settr(9141,4,8854,4175,4175,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8835 -> 8854,0 */
	reached1[8835] = 1;
	trans[1][8835]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8836]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8852]	= settr(9159,0,8854,4176,4176,".(goto)", 1, 2, 0);
	trans[1][8837]	= settr(9144,4,8854,4177,4177,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8838 -> 8854,0 */
	reached1[8838] = 1;
	trans[1][8838]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8839]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8840]	= settr(9147,4,8854,4178,4178,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8841 -> 8854,0 */
	reached1[8841] = 1;
	trans[1][8841]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8842]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8843]	= settr(9150,4,8854,4179,4179,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8844 -> 8854,0 */
	reached1[8844] = 1;
	trans[1][8844]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8845]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8846]	= settr(9153,4,8854,4180,4180,"((START==ABORT))", 1, 2, 0); /* m: 8847 -> 8854,0 */
	reached1[8847] = 1;
	trans[1][8847]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8848]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8849]	= settr(9156,2,8850,2,0,"else", 1, 2, 0);
	trans[1][8850]	= settr(9157,4,8854,4181,4181,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8852 -> 0,8854 */
	reached1[8852] = 1;
	trans[1][8854]	= settr(9161,0,8869,4182,4182,"(run Thread(j))", 0, 2, 0);
	T = trans[1][8869] = settr(9176,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9176,0,8855,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9176,0,8867,0,0,"IF", 0, 2, 0);
	trans[1][8855]	= settr(9162,0,8866,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][8866] = settr(9173,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9173,0,8862,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8862] = settr(9169,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9169,0,8856,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9169,0,8858,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9169,0,8860,0,0,"IF", 0, 2, 0);
	trans[1][8856]	= settr(9163,0,8864,4183,4183,"((_pid==0))", 0, 2, 0); /* m: 8857 -> 8864,0 */
	reached1[8857] = 1;
	trans[1][8857]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8863]	= settr(9170,0,8864,1,0,".(goto)", 0, 2, 0);
	trans[1][8858]	= settr(9165,0,8864,4184,4184,"((_pid==1))", 0, 2, 0); /* m: 8859 -> 8864,0 */
	reached1[8859] = 1;
	trans[1][8859]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8860]	= settr(9167,0,8864,4185,4185,"((_pid>1))", 0, 2, 0); /* m: 8861 -> 8864,0 */
	reached1[8861] = 1;
	trans[1][8861]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8864]	= settr(9171,0,8865,4186,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8865]	= settr(9172,0,8993,4187,4187,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8989 -> 0,8993 */
	reached1[8989] = 1;
	trans[1][8870]	= settr(9177,0,8989,1,0,".(goto)", 0, 2, 0); /* m: 8989 -> 0,8993 */
	reached1[8989] = 1;
	trans[1][8867]	= settr(9174,0,8868,2,0,"else", 0, 2, 0);
	trans[1][8868]	= settr(9175,0,8993,4188,4188,"(1)", 0, 2, 0); /* m: 8989 -> 8993,0 */
	reached1[8989] = 1;
	trans[1][8987]	= settr(9294,0,8989,1,0,".(goto)", 0, 2, 0); /* m: 8989 -> 0,8993 */
	reached1[8989] = 1;
	trans[1][8872]	= settr(9179,0,8909,4189,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][8909] = settr(9216,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9216,0,8892,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8892] = settr(9199,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9199,2,8890,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8890] = settr(9197,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9197,2,8873,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9197,2,8876,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9197,2,8879,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9197,2,8882,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9197,2,8885,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9197,2,8888,0,0,"IF", 1, 2, 0);
	trans[1][8873]	= settr(9180,4,8907,4190,4190,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8874 -> 8907,0 */
	reached1[8874] = 1;
	trans[1][8874]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8875]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8891]	= settr(9198,0,8907,4191,4191,".(goto)", 1, 2, 0);
	trans[1][8876]	= settr(9183,4,8907,4192,4192,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8877 -> 8907,0 */
	reached1[8877] = 1;
	trans[1][8877]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8878]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8879]	= settr(9186,4,8907,4193,4193,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8880 -> 8907,0 */
	reached1[8880] = 1;
	trans[1][8880]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8881]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8882]	= settr(9189,4,8907,4194,4194,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8883 -> 8907,0 */
	reached1[8883] = 1;
	trans[1][8883]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8884]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8885]	= settr(9192,4,8907,4195,4195,"((PAUSE==ABORT))", 1, 2, 0); /* m: 8886 -> 8907,0 */
	reached1[8886] = 1;
	trans[1][8886]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8887]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8888]	= settr(9195,2,8889,2,0,"else", 1, 2, 0);
	trans[1][8889]	= settr(9196,4,8907,4196,4196,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8891 -> 0,8907 */
	reached1[8891] = 1;
	T = trans[1][8907] = settr(9214,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9214,0,8893,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9214,0,8905,0,0,"IF", 0, 2, 0);
	trans[1][8893]	= settr(9200,0,8904,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][8904] = settr(9211,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9211,0,8900,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8900] = settr(9207,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9207,0,8894,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9207,0,8896,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9207,0,8898,0,0,"IF", 0, 2, 0);
	trans[1][8894]	= settr(9201,0,8902,4197,4197,"((_pid==0))", 0, 2, 0); /* m: 8895 -> 8902,0 */
	reached1[8895] = 1;
	trans[1][8895]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8901]	= settr(9208,0,8902,1,0,".(goto)", 0, 2, 0);
	trans[1][8896]	= settr(9203,0,8902,4198,4198,"((_pid==1))", 0, 2, 0); /* m: 8897 -> 8902,0 */
	reached1[8897] = 1;
	trans[1][8897]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8898]	= settr(9205,0,8902,4199,4199,"((_pid>1))", 0, 2, 0); /* m: 8899 -> 8902,0 */
	reached1[8899] = 1;
	trans[1][8899]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8902]	= settr(9209,0,8903,4200,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8903]	= settr(9210,0,8993,4201,4201,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8989 -> 0,8993 */
	reached1[8989] = 1;
	trans[1][8908]	= settr(9215,0,8989,1,0,".(goto)", 0, 2, 0); /* m: 8989 -> 0,8993 */
	reached1[8989] = 1;
	trans[1][8905]	= settr(9212,0,8906,2,0,"else", 0, 2, 0);
	trans[1][8906]	= settr(9213,0,8993,4202,4202,"(1)", 0, 2, 0); /* m: 8989 -> 8993,0 */
	reached1[8989] = 1;
	trans[1][8910]	= settr(9217,0,8947,4203,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][8947] = settr(9254,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9254,0,8930,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8930] = settr(9237,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9237,2,8928,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8928] = settr(9235,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9235,2,8911,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9235,2,8914,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9235,2,8917,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9235,2,8920,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9235,2,8923,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9235,2,8926,0,0,"IF", 1, 2, 0);
	trans[1][8911]	= settr(9218,4,8945,4204,4204,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8912 -> 8945,0 */
	reached1[8912] = 1;
	trans[1][8912]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8913]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8929]	= settr(9236,0,8945,4205,4205,".(goto)", 1, 2, 0);
	trans[1][8914]	= settr(9221,4,8945,4206,4206,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8915 -> 8945,0 */
	reached1[8915] = 1;
	trans[1][8915]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8916]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8917]	= settr(9224,4,8945,4207,4207,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8918 -> 8945,0 */
	reached1[8918] = 1;
	trans[1][8918]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8919]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8920]	= settr(9227,4,8945,4208,4208,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8921 -> 8945,0 */
	reached1[8921] = 1;
	trans[1][8921]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8922]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8923]	= settr(9230,4,8945,4209,4209,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 8924 -> 8945,0 */
	reached1[8924] = 1;
	trans[1][8924]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8925]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8926]	= settr(9233,2,8927,2,0,"else", 1, 2, 0);
	trans[1][8927]	= settr(9234,4,8945,4210,4210,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8929 -> 0,8945 */
	reached1[8929] = 1;
	T = trans[1][8945] = settr(9252,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9252,0,8931,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9252,0,8943,0,0,"IF", 0, 2, 0);
	trans[1][8931]	= settr(9238,0,8942,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][8942] = settr(9249,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9249,0,8938,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8938] = settr(9245,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9245,0,8932,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9245,0,8934,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9245,0,8936,0,0,"IF", 0, 2, 0);
	trans[1][8932]	= settr(9239,0,8940,4211,4211,"((_pid==0))", 0, 2, 0); /* m: 8933 -> 8940,0 */
	reached1[8933] = 1;
	trans[1][8933]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8939]	= settr(9246,0,8940,1,0,".(goto)", 0, 2, 0);
	trans[1][8934]	= settr(9241,0,8940,4212,4212,"((_pid==1))", 0, 2, 0); /* m: 8935 -> 8940,0 */
	reached1[8935] = 1;
	trans[1][8935]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8936]	= settr(9243,0,8940,4213,4213,"((_pid>1))", 0, 2, 0); /* m: 8937 -> 8940,0 */
	reached1[8937] = 1;
	trans[1][8937]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8940]	= settr(9247,0,8941,4214,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8941]	= settr(9248,0,8993,4215,4215,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8989 -> 0,8993 */
	reached1[8989] = 1;
	trans[1][8946]	= settr(9253,0,8989,1,0,".(goto)", 0, 2, 0); /* m: 8989 -> 0,8993 */
	reached1[8989] = 1;
	trans[1][8943]	= settr(9250,0,8944,2,0,"else", 0, 2, 0);
	trans[1][8944]	= settr(9251,0,8993,4216,4216,"(1)", 0, 2, 0); /* m: 8989 -> 8993,0 */
	reached1[8989] = 1;
	trans[1][8948]	= settr(9255,0,8985,4217,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][8985] = settr(9292,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9292,0,8968,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][8968] = settr(9275,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9275,2,8966,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][8966] = settr(9273,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9273,2,8949,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9273,2,8952,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9273,2,8955,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9273,2,8958,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9273,2,8961,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9273,2,8964,0,0,"IF", 1, 2, 0);
	trans[1][8949]	= settr(9256,4,8983,4218,4218,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8950 -> 8983,0 */
	reached1[8950] = 1;
	trans[1][8950]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][8951]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][8967]	= settr(9274,0,8983,4219,4219,".(goto)", 1, 2, 0);
	trans[1][8952]	= settr(9259,4,8983,4220,4220,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 8953 -> 8983,0 */
	reached1[8953] = 1;
	trans[1][8953]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][8954]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][8955]	= settr(9262,4,8983,4221,4221,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8956 -> 8983,0 */
	reached1[8956] = 1;
	trans[1][8956]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][8957]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][8958]	= settr(9265,4,8983,4222,4222,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 8959 -> 8983,0 */
	reached1[8959] = 1;
	trans[1][8959]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][8960]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][8961]	= settr(9268,4,8983,4223,4223,"((STOP==ABORT))", 1, 2, 0); /* m: 8962 -> 8983,0 */
	reached1[8962] = 1;
	trans[1][8962]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][8963]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][8964]	= settr(9271,2,8965,2,0,"else", 1, 2, 0);
	trans[1][8965]	= settr(9272,4,8983,4224,4224,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 8967 -> 0,8983 */
	reached1[8967] = 1;
	T = trans[1][8983] = settr(9290,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9290,0,8969,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9290,0,8981,0,0,"IF", 0, 2, 0);
	trans[1][8969]	= settr(9276,0,8980,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][8980] = settr(9287,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9287,0,8976,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][8976] = settr(9283,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9283,0,8970,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9283,0,8972,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9283,0,8974,0,0,"IF", 0, 2, 0);
	trans[1][8970]	= settr(9277,0,8978,4225,4225,"((_pid==0))", 0, 2, 0); /* m: 8971 -> 8978,0 */
	reached1[8971] = 1;
	trans[1][8971]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8977]	= settr(9284,0,8978,1,0,".(goto)", 0, 2, 0);
	trans[1][8972]	= settr(9279,0,8978,4226,4226,"((_pid==1))", 0, 2, 0); /* m: 8973 -> 8978,0 */
	reached1[8973] = 1;
	trans[1][8973]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][8974]	= settr(9281,0,8978,4227,4227,"((_pid>1))", 0, 2, 0); /* m: 8975 -> 8978,0 */
	reached1[8975] = 1;
	trans[1][8975]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][8978]	= settr(9285,0,8979,4228,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][8979]	= settr(9286,0,8993,4229,4229,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 8989 -> 0,8993 */
	reached1[8989] = 1;
	trans[1][8984]	= settr(9291,0,8989,1,0,".(goto)", 0, 2, 0); /* m: 8989 -> 0,8993 */
	reached1[8989] = 1;
	trans[1][8981]	= settr(9288,0,8982,2,0,"else", 0, 2, 0);
	trans[1][8982]	= settr(9289,0,8993,4230,4230,"(1)", 0, 2, 0); /* m: 8989 -> 8993,0 */
	reached1[8989] = 1;
	trans[1][8989]	= settr(9296,0,8993,4231,4231,"j = (j+1)", 0, 2, 0);
	trans[1][8990]	= settr(9297,0,8991,2,0,"else", 0, 2, 0);
	trans[1][8991]	= settr(9298,0,11140,4232,4232,"j = 1", 0, 2, 0);
	trans[1][8992]	= settr(9299,0,11140,1,0,"goto :b63", 0, 2, 0);
	trans[1][8995]	= settr(9302,0,11140,1,0,"break", 0, 2, 0);
	trans[1][9165]	= settr(9472,0,11140,1,0,".(goto)", 0, 2, 0);
	trans[1][8997]	= settr(9304,0,9163,2,0,"else", 0, 2, 0);
	T = trans[ 1][9163] = settr(9470,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9470,0,8998,0,0,"sub-sequence", 0, 2, 0);
	trans[1][8998]	= settr(9305,0,9160,4233,4233,"j = (3-1)", 0, 2, 0);
	trans[1][9161]	= settr(9468,0,9160,1,0,".(goto)", 0, 2, 0);
	T = trans[1][9160] = settr(9467,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(9467,0,8999,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(9467,0,9157,0,0,"DO", 0, 2, 0);
	trans[1][8999]	= settr(9306,0,9155,4234,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][9155] = settr(9462,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9462,0,9153,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9153] = settr(9460,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9460,0,9000,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9460,0,9039,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9460,0,9077,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9460,0,9115,0,0,"IF", 0, 2, 0);
	trans[1][9000]	= settr(9307,0,9038,4235,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][9038] = settr(9345,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9345,0,9020,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9020] = settr(9327,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9327,2,9018,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9018] = settr(9325,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9325,2,9001,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9325,2,9004,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9325,2,9007,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9325,2,9010,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9325,2,9013,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9325,2,9016,0,0,"IF", 1, 2, 0);
	trans[1][9001]	= settr(9308,4,9021,4236,4236,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9002 -> 9021,0 */
	reached1[9002] = 1;
	trans[1][9002]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9003]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9019]	= settr(9326,0,9021,4237,4237,".(goto)", 1, 2, 0);
	trans[1][9004]	= settr(9311,4,9021,4238,4238,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9005 -> 9021,0 */
	reached1[9005] = 1;
	trans[1][9005]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9006]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9007]	= settr(9314,4,9021,4239,4239,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9008 -> 9021,0 */
	reached1[9008] = 1;
	trans[1][9008]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9009]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9010]	= settr(9317,4,9021,4240,4240,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9011 -> 9021,0 */
	reached1[9011] = 1;
	trans[1][9011]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9012]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9013]	= settr(9320,4,9021,4241,4241,"((START==ABORT))", 1, 2, 0); /* m: 9014 -> 9021,0 */
	reached1[9014] = 1;
	trans[1][9014]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9015]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9016]	= settr(9323,2,9017,2,0,"else", 1, 2, 0);
	trans[1][9017]	= settr(9324,4,9021,4242,4242,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9019 -> 0,9021 */
	reached1[9019] = 1;
	trans[1][9021]	= settr(9328,0,9036,4243,4243,"(run Thread(j))", 0, 2, 0);
	T = trans[1][9036] = settr(9343,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9343,0,9022,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9343,0,9034,0,0,"IF", 0, 2, 0);
	trans[1][9022]	= settr(9329,0,9033,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][9033] = settr(9340,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9340,0,9029,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9029] = settr(9336,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9336,0,9023,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9336,0,9025,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9336,0,9027,0,0,"IF", 0, 2, 0);
	trans[1][9023]	= settr(9330,0,9031,4244,4244,"((_pid==0))", 0, 2, 0); /* m: 9024 -> 9031,0 */
	reached1[9024] = 1;
	trans[1][9024]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9030]	= settr(9337,0,9031,1,0,".(goto)", 0, 2, 0);
	trans[1][9025]	= settr(9332,0,9031,4245,4245,"((_pid==1))", 0, 2, 0); /* m: 9026 -> 9031,0 */
	reached1[9026] = 1;
	trans[1][9026]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9027]	= settr(9334,0,9031,4246,4246,"((_pid>1))", 0, 2, 0); /* m: 9028 -> 9031,0 */
	reached1[9028] = 1;
	trans[1][9028]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9031]	= settr(9338,0,9032,4247,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9032]	= settr(9339,0,9160,4248,4248,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9156 -> 0,9160 */
	reached1[9156] = 1;
	trans[1][9037]	= settr(9344,0,9156,1,0,".(goto)", 0, 2, 0); /* m: 9156 -> 0,9160 */
	reached1[9156] = 1;
	trans[1][9034]	= settr(9341,0,9035,2,0,"else", 0, 2, 0);
	trans[1][9035]	= settr(9342,0,9160,4249,4249,"(1)", 0, 2, 0); /* m: 9156 -> 9160,0 */
	reached1[9156] = 1;
	trans[1][9154]	= settr(9461,0,9156,1,0,".(goto)", 0, 2, 0); /* m: 9156 -> 0,9160 */
	reached1[9156] = 1;
	trans[1][9039]	= settr(9346,0,9076,4250,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][9076] = settr(9383,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9383,0,9059,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9059] = settr(9366,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9366,2,9057,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9057] = settr(9364,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9364,2,9040,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9364,2,9043,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9364,2,9046,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9364,2,9049,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9364,2,9052,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9364,2,9055,0,0,"IF", 1, 2, 0);
	trans[1][9040]	= settr(9347,4,9074,4251,4251,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9041 -> 9074,0 */
	reached1[9041] = 1;
	trans[1][9041]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9042]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9058]	= settr(9365,0,9074,4252,4252,".(goto)", 1, 2, 0);
	trans[1][9043]	= settr(9350,4,9074,4253,4253,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9044 -> 9074,0 */
	reached1[9044] = 1;
	trans[1][9044]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9045]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9046]	= settr(9353,4,9074,4254,4254,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9047 -> 9074,0 */
	reached1[9047] = 1;
	trans[1][9047]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9048]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9049]	= settr(9356,4,9074,4255,4255,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9050 -> 9074,0 */
	reached1[9050] = 1;
	trans[1][9050]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9051]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9052]	= settr(9359,4,9074,4256,4256,"((PAUSE==ABORT))", 1, 2, 0); /* m: 9053 -> 9074,0 */
	reached1[9053] = 1;
	trans[1][9053]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9054]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9055]	= settr(9362,2,9056,2,0,"else", 1, 2, 0);
	trans[1][9056]	= settr(9363,4,9074,4257,4257,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9058 -> 0,9074 */
	reached1[9058] = 1;
	T = trans[1][9074] = settr(9381,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9381,0,9060,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9381,0,9072,0,0,"IF", 0, 2, 0);
	trans[1][9060]	= settr(9367,0,9071,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][9071] = settr(9378,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9378,0,9067,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9067] = settr(9374,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9374,0,9061,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9374,0,9063,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9374,0,9065,0,0,"IF", 0, 2, 0);
	trans[1][9061]	= settr(9368,0,9069,4258,4258,"((_pid==0))", 0, 2, 0); /* m: 9062 -> 9069,0 */
	reached1[9062] = 1;
	trans[1][9062]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9068]	= settr(9375,0,9069,1,0,".(goto)", 0, 2, 0);
	trans[1][9063]	= settr(9370,0,9069,4259,4259,"((_pid==1))", 0, 2, 0); /* m: 9064 -> 9069,0 */
	reached1[9064] = 1;
	trans[1][9064]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9065]	= settr(9372,0,9069,4260,4260,"((_pid>1))", 0, 2, 0); /* m: 9066 -> 9069,0 */
	reached1[9066] = 1;
	trans[1][9066]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9069]	= settr(9376,0,9070,4261,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9070]	= settr(9377,0,9160,4262,4262,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9156 -> 0,9160 */
	reached1[9156] = 1;
	trans[1][9075]	= settr(9382,0,9156,1,0,".(goto)", 0, 2, 0); /* m: 9156 -> 0,9160 */
	reached1[9156] = 1;
	trans[1][9072]	= settr(9379,0,9073,2,0,"else", 0, 2, 0);
	trans[1][9073]	= settr(9380,0,9160,4263,4263,"(1)", 0, 2, 0); /* m: 9156 -> 9160,0 */
	reached1[9156] = 1;
	trans[1][9077]	= settr(9384,0,9114,4264,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][9114] = settr(9421,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9421,0,9097,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9097] = settr(9404,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9404,2,9095,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9095] = settr(9402,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9402,2,9078,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9402,2,9081,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9402,2,9084,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9402,2,9087,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9402,2,9090,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9402,2,9093,0,0,"IF", 1, 2, 0);
	trans[1][9078]	= settr(9385,4,9112,4265,4265,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9079 -> 9112,0 */
	reached1[9079] = 1;
	trans[1][9079]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9080]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9096]	= settr(9403,0,9112,4266,4266,".(goto)", 1, 2, 0);
	trans[1][9081]	= settr(9388,4,9112,4267,4267,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9082 -> 9112,0 */
	reached1[9082] = 1;
	trans[1][9082]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9083]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9084]	= settr(9391,4,9112,4268,4268,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9085 -> 9112,0 */
	reached1[9085] = 1;
	trans[1][9085]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9086]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9087]	= settr(9394,4,9112,4269,4269,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9088 -> 9112,0 */
	reached1[9088] = 1;
	trans[1][9088]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9089]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9090]	= settr(9397,4,9112,4270,4270,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 9091 -> 9112,0 */
	reached1[9091] = 1;
	trans[1][9091]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9092]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9093]	= settr(9400,2,9094,2,0,"else", 1, 2, 0);
	trans[1][9094]	= settr(9401,4,9112,4271,4271,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9096 -> 0,9112 */
	reached1[9096] = 1;
	T = trans[1][9112] = settr(9419,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9419,0,9098,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9419,0,9110,0,0,"IF", 0, 2, 0);
	trans[1][9098]	= settr(9405,0,9109,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][9109] = settr(9416,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9416,0,9105,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9105] = settr(9412,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9412,0,9099,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9412,0,9101,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9412,0,9103,0,0,"IF", 0, 2, 0);
	trans[1][9099]	= settr(9406,0,9107,4272,4272,"((_pid==0))", 0, 2, 0); /* m: 9100 -> 9107,0 */
	reached1[9100] = 1;
	trans[1][9100]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9106]	= settr(9413,0,9107,1,0,".(goto)", 0, 2, 0);
	trans[1][9101]	= settr(9408,0,9107,4273,4273,"((_pid==1))", 0, 2, 0); /* m: 9102 -> 9107,0 */
	reached1[9102] = 1;
	trans[1][9102]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9103]	= settr(9410,0,9107,4274,4274,"((_pid>1))", 0, 2, 0); /* m: 9104 -> 9107,0 */
	reached1[9104] = 1;
	trans[1][9104]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9107]	= settr(9414,0,9108,4275,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9108]	= settr(9415,0,9160,4276,4276,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9156 -> 0,9160 */
	reached1[9156] = 1;
	trans[1][9113]	= settr(9420,0,9156,1,0,".(goto)", 0, 2, 0); /* m: 9156 -> 0,9160 */
	reached1[9156] = 1;
	trans[1][9110]	= settr(9417,0,9111,2,0,"else", 0, 2, 0);
	trans[1][9111]	= settr(9418,0,9160,4277,4277,"(1)", 0, 2, 0); /* m: 9156 -> 9160,0 */
	reached1[9156] = 1;
	trans[1][9115]	= settr(9422,0,9152,4278,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][9152] = settr(9459,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9459,0,9135,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9135] = settr(9442,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9442,2,9133,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9133] = settr(9440,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9440,2,9116,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9440,2,9119,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9440,2,9122,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9440,2,9125,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9440,2,9128,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9440,2,9131,0,0,"IF", 1, 2, 0);
	trans[1][9116]	= settr(9423,4,9150,4279,4279,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9117 -> 9150,0 */
	reached1[9117] = 1;
	trans[1][9117]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9118]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9134]	= settr(9441,0,9150,4280,4280,".(goto)", 1, 2, 0);
	trans[1][9119]	= settr(9426,4,9150,4281,4281,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9120 -> 9150,0 */
	reached1[9120] = 1;
	trans[1][9120]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9121]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9122]	= settr(9429,4,9150,4282,4282,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9123 -> 9150,0 */
	reached1[9123] = 1;
	trans[1][9123]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9124]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9125]	= settr(9432,4,9150,4283,4283,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9126 -> 9150,0 */
	reached1[9126] = 1;
	trans[1][9126]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9127]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9128]	= settr(9435,4,9150,4284,4284,"((STOP==ABORT))", 1, 2, 0); /* m: 9129 -> 9150,0 */
	reached1[9129] = 1;
	trans[1][9129]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9130]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9131]	= settr(9438,2,9132,2,0,"else", 1, 2, 0);
	trans[1][9132]	= settr(9439,4,9150,4285,4285,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9134 -> 0,9150 */
	reached1[9134] = 1;
	T = trans[1][9150] = settr(9457,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9457,0,9136,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9457,0,9148,0,0,"IF", 0, 2, 0);
	trans[1][9136]	= settr(9443,0,9147,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][9147] = settr(9454,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9454,0,9143,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9143] = settr(9450,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9450,0,9137,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9450,0,9139,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9450,0,9141,0,0,"IF", 0, 2, 0);
	trans[1][9137]	= settr(9444,0,9145,4286,4286,"((_pid==0))", 0, 2, 0); /* m: 9138 -> 9145,0 */
	reached1[9138] = 1;
	trans[1][9138]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9144]	= settr(9451,0,9145,1,0,".(goto)", 0, 2, 0);
	trans[1][9139]	= settr(9446,0,9145,4287,4287,"((_pid==1))", 0, 2, 0); /* m: 9140 -> 9145,0 */
	reached1[9140] = 1;
	trans[1][9140]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9141]	= settr(9448,0,9145,4288,4288,"((_pid>1))", 0, 2, 0); /* m: 9142 -> 9145,0 */
	reached1[9142] = 1;
	trans[1][9142]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9145]	= settr(9452,0,9146,4289,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9146]	= settr(9453,0,9160,4290,4290,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9156 -> 0,9160 */
	reached1[9156] = 1;
	trans[1][9151]	= settr(9458,0,9156,1,0,".(goto)", 0, 2, 0); /* m: 9156 -> 0,9160 */
	reached1[9156] = 1;
	trans[1][9148]	= settr(9455,0,9149,2,0,"else", 0, 2, 0);
	trans[1][9149]	= settr(9456,0,9160,4291,4291,"(1)", 0, 2, 0); /* m: 9156 -> 9160,0 */
	reached1[9156] = 1;
	trans[1][9156]	= settr(9463,0,9160,4292,4292,"j = (j-1)", 0, 2, 0);
	trans[1][9157]	= settr(9464,0,9158,2,0,"else", 0, 2, 0);
	trans[1][9158]	= settr(9465,0,11140,4293,4293,"j = 1", 0, 2, 0);
	trans[1][9159]	= settr(9466,0,11140,1,0,"goto :b64", 0, 2, 0);
	trans[1][9162]	= settr(9469,0,11140,1,0,"break", 0, 2, 0);
	trans[1][9394]	= settr(9701,0,11140,1,0,".(goto)", 0, 2, 0);
	trans[1][9167]	= settr(9474,0,9392,2,0,"else", 0, 2, 0);
	T = trans[ 1][9392] = settr(9699,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9699,0,9168,0,0,"sub-sequence", 0, 2, 0);
	trans[1][9168]	= settr(9475,0,9333,4294,0,"printf('Supervisor propagating command %e...\\n',12)", 0, 2, 0);
	T = trans[ 1][9333] = settr(9640,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9640,0,9330,0,0,"sub-sequence", 0, 2, 0);
	trans[1][9331]	= settr(9638,0,9330,1,0,".(goto)", 0, 2, 0);
	T = trans[1][9330] = settr(9637,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(9637,0,9169,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(9637,0,9327,0,0,"DO", 0, 2, 0);
	trans[1][9169]	= settr(9476,0,9325,4295,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][9325] = settr(9632,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9632,0,9323,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9323] = settr(9630,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9630,0,9170,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9630,0,9209,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9630,0,9247,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9630,0,9285,0,0,"IF", 0, 2, 0);
	trans[1][9170]	= settr(9477,0,9208,4296,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][9208] = settr(9515,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9515,0,9190,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9190] = settr(9497,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9497,2,9188,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9188] = settr(9495,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9495,2,9171,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9495,2,9174,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9495,2,9177,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9495,2,9180,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9495,2,9183,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9495,2,9186,0,0,"IF", 1, 2, 0);
	trans[1][9171]	= settr(9478,4,9191,4297,4297,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9172 -> 9191,0 */
	reached1[9172] = 1;
	trans[1][9172]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9173]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9189]	= settr(9496,0,9191,4298,4298,".(goto)", 1, 2, 0);
	trans[1][9174]	= settr(9481,4,9191,4299,4299,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9175 -> 9191,0 */
	reached1[9175] = 1;
	trans[1][9175]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9176]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9177]	= settr(9484,4,9191,4300,4300,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9178 -> 9191,0 */
	reached1[9178] = 1;
	trans[1][9178]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9179]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9180]	= settr(9487,4,9191,4301,4301,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9181 -> 9191,0 */
	reached1[9181] = 1;
	trans[1][9181]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9182]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9183]	= settr(9490,4,9191,4302,4302,"((START==ABORT))", 1, 2, 0); /* m: 9184 -> 9191,0 */
	reached1[9184] = 1;
	trans[1][9184]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9185]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9186]	= settr(9493,2,9187,2,0,"else", 1, 2, 0);
	trans[1][9187]	= settr(9494,4,9191,4303,4303,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9189 -> 0,9191 */
	reached1[9189] = 1;
	trans[1][9191]	= settr(9498,0,9206,4304,4304,"(run Thread(j))", 0, 2, 0);
	T = trans[1][9206] = settr(9513,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(9513,0,9192,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(9513,0,9204,0,0,"IF", 0, 2, 0);
	trans[1][9192]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][9203] = settr(9510,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9510,0,9199,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9199] = settr(9506,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9506,0,9193,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9506,0,9195,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9506,0,9197,0,0,"IF", 0, 2, 0);
	trans[1][9193]	= settr(9500,0,9201,4305,4305,"((_pid==0))", 0, 2, 0); /* m: 9194 -> 9201,0 */
	reached1[9194] = 1;
	trans[1][9194]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9200]	= settr(9507,0,9201,1,0,".(goto)", 0, 2, 0);
	trans[1][9195]	= settr(9502,0,9201,4306,4306,"((_pid==1))", 0, 2, 0); /* m: 9196 -> 9201,0 */
	reached1[9196] = 1;
	trans[1][9196]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9197]	= settr(9504,0,9201,4307,4307,"((_pid>1))", 0, 2, 0); /* m: 9198 -> 9201,0 */
	reached1[9198] = 1;
	trans[1][9198]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9201]	= settr(9508,0,9202,4308,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9202]	= settr(9509,0,9330,4309,4309,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9326 -> 0,9330 */
	reached1[9326] = 1;
	trans[1][9207]	= settr(9514,0,9326,1,0,".(goto)", 0, 2, 0); /* m: 9326 -> 0,9330 */
	reached1[9326] = 1;
	trans[1][9204]	= settr(9511,0,9205,2,0,"else", 0, 2, 0);
	trans[1][9205]	= settr(9512,0,9330,4310,4310,"(1)", 0, 2, 0); /* m: 9326 -> 9330,0 */
	reached1[9326] = 1;
	trans[1][9324]	= settr(9631,0,9326,1,0,".(goto)", 0, 2, 0); /* m: 9326 -> 0,9330 */
	reached1[9326] = 1;
	trans[1][9209]	= settr(9516,0,9246,4311,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][9246] = settr(9553,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9553,0,9229,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9229] = settr(9536,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9536,2,9227,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9227] = settr(9534,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9534,2,9210,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9534,2,9213,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9534,2,9216,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9534,2,9219,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9534,2,9222,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9534,2,9225,0,0,"IF", 1, 2, 0);
	trans[1][9210]	= settr(9517,4,9244,4312,4312,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9211 -> 9244,0 */
	reached1[9211] = 1;
	trans[1][9211]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9212]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9228]	= settr(9535,0,9244,4313,4313,".(goto)", 1, 2, 0);
	trans[1][9213]	= settr(9520,4,9244,4314,4314,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9214 -> 9244,0 */
	reached1[9214] = 1;
	trans[1][9214]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9215]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9216]	= settr(9523,4,9244,4315,4315,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9217 -> 9244,0 */
	reached1[9217] = 1;
	trans[1][9217]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9218]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9219]	= settr(9526,4,9244,4316,4316,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9220 -> 9244,0 */
	reached1[9220] = 1;
	trans[1][9220]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9221]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9222]	= settr(9529,4,9244,4317,4317,"((PAUSE==ABORT))", 1, 2, 0); /* m: 9223 -> 9244,0 */
	reached1[9223] = 1;
	trans[1][9223]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9224]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9225]	= settr(9532,2,9226,2,0,"else", 1, 2, 0);
	trans[1][9226]	= settr(9533,4,9244,4318,4318,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9228 -> 0,9244 */
	reached1[9228] = 1;
	T = trans[1][9244] = settr(9551,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(9551,0,9230,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(9551,0,9242,0,0,"IF", 0, 2, 0);
	trans[1][9230]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][9241] = settr(9548,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9548,0,9237,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9237] = settr(9544,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9544,0,9231,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9544,0,9233,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9544,0,9235,0,0,"IF", 0, 2, 0);
	trans[1][9231]	= settr(9538,0,9239,4319,4319,"((_pid==0))", 0, 2, 0); /* m: 9232 -> 9239,0 */
	reached1[9232] = 1;
	trans[1][9232]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9238]	= settr(9545,0,9239,1,0,".(goto)", 0, 2, 0);
	trans[1][9233]	= settr(9540,0,9239,4320,4320,"((_pid==1))", 0, 2, 0); /* m: 9234 -> 9239,0 */
	reached1[9234] = 1;
	trans[1][9234]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9235]	= settr(9542,0,9239,4321,4321,"((_pid>1))", 0, 2, 0); /* m: 9236 -> 9239,0 */
	reached1[9236] = 1;
	trans[1][9236]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9239]	= settr(9546,0,9240,4322,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9240]	= settr(9547,0,9330,4323,4323,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9326 -> 0,9330 */
	reached1[9326] = 1;
	trans[1][9245]	= settr(9552,0,9326,1,0,".(goto)", 0, 2, 0); /* m: 9326 -> 0,9330 */
	reached1[9326] = 1;
	trans[1][9242]	= settr(9549,0,9243,2,0,"else", 0, 2, 0);
	trans[1][9243]	= settr(9550,0,9330,4324,4324,"(1)", 0, 2, 0); /* m: 9326 -> 9330,0 */
	reached1[9326] = 1;
	trans[1][9247]	= settr(9554,0,9284,4325,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][9284] = settr(9591,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9591,0,9267,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9267] = settr(9574,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9574,2,9265,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9265] = settr(9572,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9572,2,9248,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9572,2,9251,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9572,2,9254,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9572,2,9257,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9572,2,9260,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9572,2,9263,0,0,"IF", 1, 2, 0);
	trans[1][9248]	= settr(9555,4,9282,4326,4326,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9249 -> 9282,0 */
	reached1[9249] = 1;
	trans[1][9249]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9250]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9266]	= settr(9573,0,9282,4327,4327,".(goto)", 1, 2, 0);
	trans[1][9251]	= settr(9558,4,9282,4328,4328,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9252 -> 9282,0 */
	reached1[9252] = 1;
	trans[1][9252]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9253]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9254]	= settr(9561,4,9282,4329,4329,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9255 -> 9282,0 */
	reached1[9255] = 1;
	trans[1][9255]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9256]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9257]	= settr(9564,4,9282,4330,4330,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9258 -> 9282,0 */
	reached1[9258] = 1;
	trans[1][9258]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9259]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9260]	= settr(9567,4,9282,4331,4331,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 9261 -> 9282,0 */
	reached1[9261] = 1;
	trans[1][9261]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9262]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9263]	= settr(9570,2,9264,2,0,"else", 1, 2, 0);
	trans[1][9264]	= settr(9571,4,9282,4332,4332,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9266 -> 0,9282 */
	reached1[9266] = 1;
	T = trans[1][9282] = settr(9589,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(9589,0,9268,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(9589,0,9280,0,0,"IF", 0, 2, 0);
	trans[1][9268]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][9279] = settr(9586,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9586,0,9275,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9275] = settr(9582,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9582,0,9269,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9582,0,9271,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9582,0,9273,0,0,"IF", 0, 2, 0);
	trans[1][9269]	= settr(9576,0,9277,4333,4333,"((_pid==0))", 0, 2, 0); /* m: 9270 -> 9277,0 */
	reached1[9270] = 1;
	trans[1][9270]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9276]	= settr(9583,0,9277,1,0,".(goto)", 0, 2, 0);
	trans[1][9271]	= settr(9578,0,9277,4334,4334,"((_pid==1))", 0, 2, 0); /* m: 9272 -> 9277,0 */
	reached1[9272] = 1;
	trans[1][9272]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9273]	= settr(9580,0,9277,4335,4335,"((_pid>1))", 0, 2, 0); /* m: 9274 -> 9277,0 */
	reached1[9274] = 1;
	trans[1][9274]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9277]	= settr(9584,0,9278,4336,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9278]	= settr(9585,0,9330,4337,4337,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9326 -> 0,9330 */
	reached1[9326] = 1;
	trans[1][9283]	= settr(9590,0,9326,1,0,".(goto)", 0, 2, 0); /* m: 9326 -> 0,9330 */
	reached1[9326] = 1;
	trans[1][9280]	= settr(9587,0,9281,2,0,"else", 0, 2, 0);
	trans[1][9281]	= settr(9588,0,9330,4338,4338,"(1)", 0, 2, 0); /* m: 9326 -> 9330,0 */
	reached1[9326] = 1;
	trans[1][9285]	= settr(9592,0,9322,4339,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][9322] = settr(9629,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9629,0,9305,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9305] = settr(9612,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9612,2,9303,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9303] = settr(9610,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9610,2,9286,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9610,2,9289,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9610,2,9292,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9610,2,9295,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9610,2,9298,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9610,2,9301,0,0,"IF", 1, 2, 0);
	trans[1][9286]	= settr(9593,4,9320,4340,4340,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9287 -> 9320,0 */
	reached1[9287] = 1;
	trans[1][9287]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9288]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9304]	= settr(9611,0,9320,4341,4341,".(goto)", 1, 2, 0);
	trans[1][9289]	= settr(9596,4,9320,4342,4342,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9290 -> 9320,0 */
	reached1[9290] = 1;
	trans[1][9290]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9291]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9292]	= settr(9599,4,9320,4343,4343,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9293 -> 9320,0 */
	reached1[9293] = 1;
	trans[1][9293]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9294]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9295]	= settr(9602,4,9320,4344,4344,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9296 -> 9320,0 */
	reached1[9296] = 1;
	trans[1][9296]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9297]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9298]	= settr(9605,4,9320,4345,4345,"((STOP==ABORT))", 1, 2, 0); /* m: 9299 -> 9320,0 */
	reached1[9299] = 1;
	trans[1][9299]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9300]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9301]	= settr(9608,2,9302,2,0,"else", 1, 2, 0);
	trans[1][9302]	= settr(9609,4,9320,4346,4346,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9304 -> 0,9320 */
	reached1[9304] = 1;
	T = trans[1][9320] = settr(9627,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(9627,0,9306,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(9627,0,9318,0,0,"IF", 0, 2, 0);
	trans[1][9306]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][9317] = settr(9624,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9624,0,9313,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9313] = settr(9620,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9620,0,9307,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9620,0,9309,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9620,0,9311,0,0,"IF", 0, 2, 0);
	trans[1][9307]	= settr(9614,0,9315,4347,4347,"((_pid==0))", 0, 2, 0); /* m: 9308 -> 9315,0 */
	reached1[9308] = 1;
	trans[1][9308]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9314]	= settr(9621,0,9315,1,0,".(goto)", 0, 2, 0);
	trans[1][9309]	= settr(9616,0,9315,4348,4348,"((_pid==1))", 0, 2, 0); /* m: 9310 -> 9315,0 */
	reached1[9310] = 1;
	trans[1][9310]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9311]	= settr(9618,0,9315,4349,4349,"((_pid>1))", 0, 2, 0); /* m: 9312 -> 9315,0 */
	reached1[9312] = 1;
	trans[1][9312]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9315]	= settr(9622,0,9316,4350,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9316]	= settr(9623,0,9330,4351,4351,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9326 -> 0,9330 */
	reached1[9326] = 1;
	trans[1][9321]	= settr(9628,0,9326,1,0,".(goto)", 0, 2, 0); /* m: 9326 -> 0,9330 */
	reached1[9326] = 1;
	trans[1][9318]	= settr(9625,0,9319,2,0,"else", 0, 2, 0);
	trans[1][9319]	= settr(9626,0,9330,4352,4352,"(1)", 0, 2, 0); /* m: 9326 -> 9330,0 */
	reached1[9326] = 1;
	trans[1][9326]	= settr(9633,0,9330,4353,4353,"j = (j+1)", 0, 2, 0);
	trans[1][9327]	= settr(9634,0,9328,2,0,"else", 0, 2, 0);
	trans[1][9328]	= settr(9635,0,9389,4354,4354,"j = 1", 0, 2, 0);
	trans[1][9329]	= settr(9636,0,9389,1,0,"goto :b65", 0, 2, 0);
	trans[1][9332]	= settr(9639,0,9389,1,0,"break", 0, 2, 0);
	trans[1][9390]	= settr(9697,0,9389,1,0,".(goto)", 0, 2, 0);
	T = trans[1][9389] = settr(9696,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(9696,0,9334,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(9696,0,9386,0,0,"DO", 0, 2, 0);
	trans[1][9334]	= settr(9641,0,9383,4355,0,"((j<3))", 0, 2, 0);
	T = trans[1][9383] = settr(9690,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9690,0,9335,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9690,0,9347,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9690,0,9359,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9690,0,9371,0,0,"IF", 0, 2, 0);
	trans[1][9335]	= settr(9642,0,9346,4356,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][9346] = settr(9653,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9653,0,9342,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9342] = settr(9649,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9649,0,9336,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9649,0,9338,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9649,0,9340,0,0,"IF", 0, 2, 0);
	trans[1][9336]	= settr(9643,0,9344,4357,4357,"((_pid==0))", 0, 2, 0); /* m: 9337 -> 9344,0 */
	reached1[9337] = 1;
	trans[1][9337]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9343]	= settr(9650,0,9344,1,0,".(goto)", 0, 2, 0);
	trans[1][9338]	= settr(9645,0,9344,4358,4358,"((_pid==1))", 0, 2, 0); /* m: 9339 -> 9344,0 */
	reached1[9339] = 1;
	trans[1][9339]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9340]	= settr(9647,0,9344,4359,4359,"((_pid>1))", 0, 2, 0); /* m: 9341 -> 9344,0 */
	reached1[9341] = 1;
	trans[1][9341]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9344]	= settr(9651,0,9345,4360,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9345]	= settr(9652,0,9389,4361,4361,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9385 -> 0,9389 */
	reached1[9385] = 1;
	trans[1][9384]	= settr(9691,0,9385,1,0,".(goto)", 0, 2, 0); /* m: 9385 -> 0,9389 */
	reached1[9385] = 1;
	trans[1][9347]	= settr(9654,0,9358,4362,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][9358] = settr(9665,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9665,0,9354,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9354] = settr(9661,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9661,0,9348,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9661,0,9350,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9661,0,9352,0,0,"IF", 0, 2, 0);
	trans[1][9348]	= settr(9655,0,9356,4363,4363,"((_pid==0))", 0, 2, 0); /* m: 9349 -> 9356,0 */
	reached1[9349] = 1;
	trans[1][9349]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9355]	= settr(9662,0,9356,1,0,".(goto)", 0, 2, 0);
	trans[1][9350]	= settr(9657,0,9356,4364,4364,"((_pid==1))", 0, 2, 0); /* m: 9351 -> 9356,0 */
	reached1[9351] = 1;
	trans[1][9351]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9352]	= settr(9659,0,9356,4365,4365,"((_pid>1))", 0, 2, 0); /* m: 9353 -> 9356,0 */
	reached1[9353] = 1;
	trans[1][9353]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9356]	= settr(9663,0,9357,4366,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9357]	= settr(9664,0,9389,4367,4367,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9385 -> 0,9389 */
	reached1[9385] = 1;
	trans[1][9359]	= settr(9666,0,9370,4368,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][9370] = settr(9677,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9677,0,9366,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9366] = settr(9673,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9673,0,9360,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9673,0,9362,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9673,0,9364,0,0,"IF", 0, 2, 0);
	trans[1][9360]	= settr(9667,0,9368,4369,4369,"((_pid==0))", 0, 2, 0); /* m: 9361 -> 9368,0 */
	reached1[9361] = 1;
	trans[1][9361]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9367]	= settr(9674,0,9368,1,0,".(goto)", 0, 2, 0);
	trans[1][9362]	= settr(9669,0,9368,4370,4370,"((_pid==1))", 0, 2, 0); /* m: 9363 -> 9368,0 */
	reached1[9363] = 1;
	trans[1][9363]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9364]	= settr(9671,0,9368,4371,4371,"((_pid>1))", 0, 2, 0); /* m: 9365 -> 9368,0 */
	reached1[9365] = 1;
	trans[1][9365]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9368]	= settr(9675,0,9369,4372,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9369]	= settr(9676,0,9389,4373,4373,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9385 -> 0,9389 */
	reached1[9385] = 1;
	trans[1][9371]	= settr(9678,0,9382,4374,0,"((12==STOP))", 0, 2, 0);
	T = trans[ 1][9382] = settr(9689,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9689,0,9378,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9378] = settr(9685,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9685,0,9372,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9685,0,9374,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9685,0,9376,0,0,"IF", 0, 2, 0);
	trans[1][9372]	= settr(9679,0,9380,4375,4375,"((_pid==0))", 0, 2, 0); /* m: 9373 -> 9380,0 */
	reached1[9373] = 1;
	trans[1][9373]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9379]	= settr(9686,0,9380,1,0,".(goto)", 0, 2, 0);
	trans[1][9374]	= settr(9681,0,9380,4376,4376,"((_pid==1))", 0, 2, 0); /* m: 9375 -> 9380,0 */
	reached1[9375] = 1;
	trans[1][9375]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9376]	= settr(9683,0,9380,4377,4377,"((_pid>1))", 0, 2, 0); /* m: 9377 -> 9380,0 */
	reached1[9377] = 1;
	trans[1][9377]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9380]	= settr(9687,0,9381,4378,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9381]	= settr(9688,0,9389,4379,4379,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9385 -> 0,9389 */
	reached1[9385] = 1;
	trans[1][9385]	= settr(9692,0,9389,4380,4380,"j = (j+1)", 0, 2, 0);
	trans[1][9386]	= settr(9693,0,9387,2,0,"else", 0, 2, 0);
	trans[1][9387]	= settr(9694,0,11140,4381,4381,"j = 1", 0, 2, 0);
	trans[1][9388]	= settr(9695,0,11140,1,0,"goto :b66", 0, 2, 0);
	trans[1][9391]	= settr(9698,0,11140,1,0,"break", 0, 2, 0);
	trans[1][9398]	= settr(9705,0,9399,2,0,"else", 0, 2, 0);
	trans[1][9399]	= settr(9706,0,11140,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11140] = settr(11447,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11447,0,11127,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11127] = settr(11434,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11434,0,11125,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11125] = settr(11432,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11432,0,9404,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11432,0,9977,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11432,0,10550,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11432,0,11123,0,0,"IF", 0, 2, 0);
	trans[1][9404]	= settr(9711,0,9976,4382,0,"((9==RUNNING))", 0, 2, 0);
	T = trans[ 1][9976] = settr(10283,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10283,0,9974,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9974] = settr(10281,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10281,0,9405,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10281,0,9408,0,0,"IF", 0, 2, 0);
	trans[1][9405]	= settr(9712,0,9406,4383,0,"(((6==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][9406]	= settr(9713,0,9407,4384,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][9407]	= settr(9714,0,11138,4385,4385,"supervisor_started = 1", 1, 2, 0);
	trans[1][9975]	= settr(10282,0,11138,1,0,".(goto)", 0, 2, 0);
	trans[1][9408]	= settr(9715,0,9972,2,0,"else", 0, 2, 0);
	T = trans[1][9972] = settr(10279,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10279,0,9409,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10279,0,9746,0,0,"IF", 0, 2, 0);
	trans[1][9409]	= settr(9716,0,9745,4386,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][9745] = settr(10052,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10052,0,9743,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9743] = settr(10050,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10050,0,9410,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10050,0,9576,0,0,"IF", 0, 2, 0);
	trans[1][9410]	= settr(9717,0,9575,4387,0,"(((6==START)||(6==PAUSED)))", 0, 2, 0);
	T = trans[ 1][9575] = settr(9882,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9882,0,9572,0,0,"sub-sequence", 0, 2, 0);
	trans[1][9573]	= settr(9880,0,9572,1,0,".(goto)", 0, 2, 0);
	T = trans[1][9572] = settr(9879,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(9879,0,9411,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(9879,0,9569,0,0,"DO", 0, 2, 0);
	trans[1][9411]	= settr(9718,0,9567,4388,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][9567] = settr(9874,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9874,0,9565,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9565] = settr(9872,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9872,0,9412,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9872,0,9451,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9872,0,9489,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9872,0,9527,0,0,"IF", 0, 2, 0);
	trans[1][9412]	= settr(9719,0,9450,4389,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][9450] = settr(9757,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9757,0,9432,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9432] = settr(9739,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9739,2,9430,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9430] = settr(9737,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9737,2,9413,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9737,2,9416,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9737,2,9419,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9737,2,9422,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9737,2,9425,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9737,2,9428,0,0,"IF", 1, 2, 0);
	trans[1][9413]	= settr(9720,4,9433,4390,4390,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9414 -> 9433,0 */
	reached1[9414] = 1;
	trans[1][9414]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9415]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9431]	= settr(9738,0,9433,4391,4391,".(goto)", 1, 2, 0);
	trans[1][9416]	= settr(9723,4,9433,4392,4392,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9417 -> 9433,0 */
	reached1[9417] = 1;
	trans[1][9417]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9418]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9419]	= settr(9726,4,9433,4393,4393,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9420 -> 9433,0 */
	reached1[9420] = 1;
	trans[1][9420]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9421]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9422]	= settr(9729,4,9433,4394,4394,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9423 -> 9433,0 */
	reached1[9423] = 1;
	trans[1][9423]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9424]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9425]	= settr(9732,4,9433,4395,4395,"((START==ABORT))", 1, 2, 0); /* m: 9426 -> 9433,0 */
	reached1[9426] = 1;
	trans[1][9426]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9427]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9428]	= settr(9735,2,9429,2,0,"else", 1, 2, 0);
	trans[1][9429]	= settr(9736,4,9433,4396,4396,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9431 -> 0,9433 */
	reached1[9431] = 1;
	trans[1][9433]	= settr(9740,0,9448,4397,4397,"(run Thread(j))", 0, 2, 0);
	T = trans[1][9448] = settr(9755,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9755,0,9434,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9755,0,9446,0,0,"IF", 0, 2, 0);
	trans[1][9434]	= settr(9741,0,9445,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][9445] = settr(9752,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9752,0,9441,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9441] = settr(9748,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9748,0,9435,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9748,0,9437,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9748,0,9439,0,0,"IF", 0, 2, 0);
	trans[1][9435]	= settr(9742,0,9443,4398,4398,"((_pid==0))", 0, 2, 0); /* m: 9436 -> 9443,0 */
	reached1[9436] = 1;
	trans[1][9436]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9442]	= settr(9749,0,9443,1,0,".(goto)", 0, 2, 0);
	trans[1][9437]	= settr(9744,0,9443,4399,4399,"((_pid==1))", 0, 2, 0); /* m: 9438 -> 9443,0 */
	reached1[9438] = 1;
	trans[1][9438]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9439]	= settr(9746,0,9443,4400,4400,"((_pid>1))", 0, 2, 0); /* m: 9440 -> 9443,0 */
	reached1[9440] = 1;
	trans[1][9440]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9443]	= settr(9750,0,9444,4401,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9444]	= settr(9751,0,9572,4402,4402,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9568 -> 0,9572 */
	reached1[9568] = 1;
	trans[1][9449]	= settr(9756,0,9568,1,0,".(goto)", 0, 2, 0); /* m: 9568 -> 0,9572 */
	reached1[9568] = 1;
	trans[1][9446]	= settr(9753,0,9447,2,0,"else", 0, 2, 0);
	trans[1][9447]	= settr(9754,0,9572,4403,4403,"(1)", 0, 2, 0); /* m: 9568 -> 9572,0 */
	reached1[9568] = 1;
	trans[1][9566]	= settr(9873,0,9568,1,0,".(goto)", 0, 2, 0); /* m: 9568 -> 0,9572 */
	reached1[9568] = 1;
	trans[1][9451]	= settr(9758,0,9488,4404,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][9488] = settr(9795,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9795,0,9471,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9471] = settr(9778,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9778,2,9469,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9469] = settr(9776,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9776,2,9452,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9776,2,9455,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9776,2,9458,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9776,2,9461,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9776,2,9464,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9776,2,9467,0,0,"IF", 1, 2, 0);
	trans[1][9452]	= settr(9759,4,9486,4405,4405,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9453 -> 9486,0 */
	reached1[9453] = 1;
	trans[1][9453]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9454]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9470]	= settr(9777,0,9486,4406,4406,".(goto)", 1, 2, 0);
	trans[1][9455]	= settr(9762,4,9486,4407,4407,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9456 -> 9486,0 */
	reached1[9456] = 1;
	trans[1][9456]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9457]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9458]	= settr(9765,4,9486,4408,4408,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9459 -> 9486,0 */
	reached1[9459] = 1;
	trans[1][9459]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9460]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9461]	= settr(9768,4,9486,4409,4409,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9462 -> 9486,0 */
	reached1[9462] = 1;
	trans[1][9462]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9463]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9464]	= settr(9771,4,9486,4410,4410,"((PAUSE==ABORT))", 1, 2, 0); /* m: 9465 -> 9486,0 */
	reached1[9465] = 1;
	trans[1][9465]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9466]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9467]	= settr(9774,2,9468,2,0,"else", 1, 2, 0);
	trans[1][9468]	= settr(9775,4,9486,4411,4411,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9470 -> 0,9486 */
	reached1[9470] = 1;
	T = trans[1][9486] = settr(9793,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9793,0,9472,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9793,0,9484,0,0,"IF", 0, 2, 0);
	trans[1][9472]	= settr(9779,0,9483,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][9483] = settr(9790,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9790,0,9479,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9479] = settr(9786,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9786,0,9473,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9786,0,9475,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9786,0,9477,0,0,"IF", 0, 2, 0);
	trans[1][9473]	= settr(9780,0,9481,4412,4412,"((_pid==0))", 0, 2, 0); /* m: 9474 -> 9481,0 */
	reached1[9474] = 1;
	trans[1][9474]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9480]	= settr(9787,0,9481,1,0,".(goto)", 0, 2, 0);
	trans[1][9475]	= settr(9782,0,9481,4413,4413,"((_pid==1))", 0, 2, 0); /* m: 9476 -> 9481,0 */
	reached1[9476] = 1;
	trans[1][9476]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9477]	= settr(9784,0,9481,4414,4414,"((_pid>1))", 0, 2, 0); /* m: 9478 -> 9481,0 */
	reached1[9478] = 1;
	trans[1][9478]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9481]	= settr(9788,0,9482,4415,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9482]	= settr(9789,0,9572,4416,4416,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9568 -> 0,9572 */
	reached1[9568] = 1;
	trans[1][9487]	= settr(9794,0,9568,1,0,".(goto)", 0, 2, 0); /* m: 9568 -> 0,9572 */
	reached1[9568] = 1;
	trans[1][9484]	= settr(9791,0,9485,2,0,"else", 0, 2, 0);
	trans[1][9485]	= settr(9792,0,9572,4417,4417,"(1)", 0, 2, 0); /* m: 9568 -> 9572,0 */
	reached1[9568] = 1;
	trans[1][9489]	= settr(9796,0,9526,4418,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][9526] = settr(9833,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9833,0,9509,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9509] = settr(9816,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9816,2,9507,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9507] = settr(9814,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9814,2,9490,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9814,2,9493,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9814,2,9496,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9814,2,9499,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9814,2,9502,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9814,2,9505,0,0,"IF", 1, 2, 0);
	trans[1][9490]	= settr(9797,4,9524,4419,4419,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9491 -> 9524,0 */
	reached1[9491] = 1;
	trans[1][9491]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9492]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9508]	= settr(9815,0,9524,4420,4420,".(goto)", 1, 2, 0);
	trans[1][9493]	= settr(9800,4,9524,4421,4421,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9494 -> 9524,0 */
	reached1[9494] = 1;
	trans[1][9494]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9495]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9496]	= settr(9803,4,9524,4422,4422,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9497 -> 9524,0 */
	reached1[9497] = 1;
	trans[1][9497]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9498]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9499]	= settr(9806,4,9524,4423,4423,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9500 -> 9524,0 */
	reached1[9500] = 1;
	trans[1][9500]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9501]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9502]	= settr(9809,4,9524,4424,4424,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 9503 -> 9524,0 */
	reached1[9503] = 1;
	trans[1][9503]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9504]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9505]	= settr(9812,2,9506,2,0,"else", 1, 2, 0);
	trans[1][9506]	= settr(9813,4,9524,4425,4425,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9508 -> 0,9524 */
	reached1[9508] = 1;
	T = trans[1][9524] = settr(9831,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9831,0,9510,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9831,0,9522,0,0,"IF", 0, 2, 0);
	trans[1][9510]	= settr(9817,0,9521,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][9521] = settr(9828,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9828,0,9517,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9517] = settr(9824,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9824,0,9511,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9824,0,9513,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9824,0,9515,0,0,"IF", 0, 2, 0);
	trans[1][9511]	= settr(9818,0,9519,4426,4426,"((_pid==0))", 0, 2, 0); /* m: 9512 -> 9519,0 */
	reached1[9512] = 1;
	trans[1][9512]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9518]	= settr(9825,0,9519,1,0,".(goto)", 0, 2, 0);
	trans[1][9513]	= settr(9820,0,9519,4427,4427,"((_pid==1))", 0, 2, 0); /* m: 9514 -> 9519,0 */
	reached1[9514] = 1;
	trans[1][9514]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9515]	= settr(9822,0,9519,4428,4428,"((_pid>1))", 0, 2, 0); /* m: 9516 -> 9519,0 */
	reached1[9516] = 1;
	trans[1][9516]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9519]	= settr(9826,0,9520,4429,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9520]	= settr(9827,0,9572,4430,4430,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9568 -> 0,9572 */
	reached1[9568] = 1;
	trans[1][9525]	= settr(9832,0,9568,1,0,".(goto)", 0, 2, 0); /* m: 9568 -> 0,9572 */
	reached1[9568] = 1;
	trans[1][9522]	= settr(9829,0,9523,2,0,"else", 0, 2, 0);
	trans[1][9523]	= settr(9830,0,9572,4431,4431,"(1)", 0, 2, 0); /* m: 9568 -> 9572,0 */
	reached1[9568] = 1;
	trans[1][9527]	= settr(9834,0,9564,4432,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][9564] = settr(9871,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9871,0,9547,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9547] = settr(9854,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9854,2,9545,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9545] = settr(9852,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9852,2,9528,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9852,2,9531,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9852,2,9534,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9852,2,9537,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9852,2,9540,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9852,2,9543,0,0,"IF", 1, 2, 0);
	trans[1][9528]	= settr(9835,4,9562,4433,4433,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9529 -> 9562,0 */
	reached1[9529] = 1;
	trans[1][9529]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9530]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9546]	= settr(9853,0,9562,4434,4434,".(goto)", 1, 2, 0);
	trans[1][9531]	= settr(9838,4,9562,4435,4435,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9532 -> 9562,0 */
	reached1[9532] = 1;
	trans[1][9532]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9533]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9534]	= settr(9841,4,9562,4436,4436,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9535 -> 9562,0 */
	reached1[9535] = 1;
	trans[1][9535]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9536]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9537]	= settr(9844,4,9562,4437,4437,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9538 -> 9562,0 */
	reached1[9538] = 1;
	trans[1][9538]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9539]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9540]	= settr(9847,4,9562,4438,4438,"((STOP==ABORT))", 1, 2, 0); /* m: 9541 -> 9562,0 */
	reached1[9541] = 1;
	trans[1][9541]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9542]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9543]	= settr(9850,2,9544,2,0,"else", 1, 2, 0);
	trans[1][9544]	= settr(9851,4,9562,4439,4439,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9546 -> 0,9562 */
	reached1[9546] = 1;
	T = trans[1][9562] = settr(9869,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9869,0,9548,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9869,0,9560,0,0,"IF", 0, 2, 0);
	trans[1][9548]	= settr(9855,0,9559,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][9559] = settr(9866,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9866,0,9555,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9555] = settr(9862,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9862,0,9549,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9862,0,9551,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9862,0,9553,0,0,"IF", 0, 2, 0);
	trans[1][9549]	= settr(9856,0,9557,4440,4440,"((_pid==0))", 0, 2, 0); /* m: 9550 -> 9557,0 */
	reached1[9550] = 1;
	trans[1][9550]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9556]	= settr(9863,0,9557,1,0,".(goto)", 0, 2, 0);
	trans[1][9551]	= settr(9858,0,9557,4441,4441,"((_pid==1))", 0, 2, 0); /* m: 9552 -> 9557,0 */
	reached1[9552] = 1;
	trans[1][9552]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9553]	= settr(9860,0,9557,4442,4442,"((_pid>1))", 0, 2, 0); /* m: 9554 -> 9557,0 */
	reached1[9554] = 1;
	trans[1][9554]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9557]	= settr(9864,0,9558,4443,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9558]	= settr(9865,0,9572,4444,4444,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9568 -> 0,9572 */
	reached1[9568] = 1;
	trans[1][9563]	= settr(9870,0,9568,1,0,".(goto)", 0, 2, 0); /* m: 9568 -> 0,9572 */
	reached1[9568] = 1;
	trans[1][9560]	= settr(9867,0,9561,2,0,"else", 0, 2, 0);
	trans[1][9561]	= settr(9868,0,9572,4445,4445,"(1)", 0, 2, 0); /* m: 9568 -> 9572,0 */
	reached1[9568] = 1;
	trans[1][9568]	= settr(9875,0,9572,4446,4446,"j = (j+1)", 0, 2, 0);
	trans[1][9569]	= settr(9876,0,9570,2,0,"else", 0, 2, 0);
	trans[1][9570]	= settr(9877,0,11138,4447,4447,"j = 1", 0, 2, 0);
	trans[1][9571]	= settr(9878,0,11138,1,0,"goto :b67", 0, 2, 0);
	trans[1][9574]	= settr(9881,0,11138,1,0,"break", 0, 2, 0);
	trans[1][9744]	= settr(10051,0,11138,1,0,".(goto)", 0, 2, 0);
	trans[1][9576]	= settr(9883,0,9742,2,0,"else", 0, 2, 0);
	T = trans[ 1][9742] = settr(10049,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10049,0,9577,0,0,"sub-sequence", 0, 2, 0);
	trans[1][9577]	= settr(9884,0,9739,4448,4448,"j = (3-1)", 0, 2, 0);
	trans[1][9740]	= settr(10047,0,9739,1,0,".(goto)", 0, 2, 0);
	T = trans[1][9739] = settr(10046,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(10046,0,9578,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(10046,0,9736,0,0,"DO", 0, 2, 0);
	trans[1][9578]	= settr(9885,0,9734,4449,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][9734] = settr(10041,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10041,0,9732,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9732] = settr(10039,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10039,0,9579,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10039,0,9618,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10039,0,9656,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10039,0,9694,0,0,"IF", 0, 2, 0);
	trans[1][9579]	= settr(9886,0,9617,4450,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][9617] = settr(9924,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9924,0,9599,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9599] = settr(9906,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9906,2,9597,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9597] = settr(9904,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9904,2,9580,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9904,2,9583,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9904,2,9586,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9904,2,9589,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9904,2,9592,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9904,2,9595,0,0,"IF", 1, 2, 0);
	trans[1][9580]	= settr(9887,4,9600,4451,4451,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9581 -> 9600,0 */
	reached1[9581] = 1;
	trans[1][9581]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9582]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9598]	= settr(9905,0,9600,4452,4452,".(goto)", 1, 2, 0);
	trans[1][9583]	= settr(9890,4,9600,4453,4453,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9584 -> 9600,0 */
	reached1[9584] = 1;
	trans[1][9584]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9585]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9586]	= settr(9893,4,9600,4454,4454,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9587 -> 9600,0 */
	reached1[9587] = 1;
	trans[1][9587]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9588]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9589]	= settr(9896,4,9600,4455,4455,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9590 -> 9600,0 */
	reached1[9590] = 1;
	trans[1][9590]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9591]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9592]	= settr(9899,4,9600,4456,4456,"((START==ABORT))", 1, 2, 0); /* m: 9593 -> 9600,0 */
	reached1[9593] = 1;
	trans[1][9593]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9594]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9595]	= settr(9902,2,9596,2,0,"else", 1, 2, 0);
	trans[1][9596]	= settr(9903,4,9600,4457,4457,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9598 -> 0,9600 */
	reached1[9598] = 1;
	trans[1][9600]	= settr(9907,0,9615,4458,4458,"(run Thread(j))", 0, 2, 0);
	T = trans[1][9615] = settr(9922,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9922,0,9601,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9922,0,9613,0,0,"IF", 0, 2, 0);
	trans[1][9601]	= settr(9908,0,9612,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][9612] = settr(9919,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9919,0,9608,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9608] = settr(9915,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9915,0,9602,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9915,0,9604,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9915,0,9606,0,0,"IF", 0, 2, 0);
	trans[1][9602]	= settr(9909,0,9610,4459,4459,"((_pid==0))", 0, 2, 0); /* m: 9603 -> 9610,0 */
	reached1[9603] = 1;
	trans[1][9603]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9609]	= settr(9916,0,9610,1,0,".(goto)", 0, 2, 0);
	trans[1][9604]	= settr(9911,0,9610,4460,4460,"((_pid==1))", 0, 2, 0); /* m: 9605 -> 9610,0 */
	reached1[9605] = 1;
	trans[1][9605]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9606]	= settr(9913,0,9610,4461,4461,"((_pid>1))", 0, 2, 0); /* m: 9607 -> 9610,0 */
	reached1[9607] = 1;
	trans[1][9607]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9610]	= settr(9917,0,9611,4462,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9611]	= settr(9918,0,9739,4463,4463,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9735 -> 0,9739 */
	reached1[9735] = 1;
	trans[1][9616]	= settr(9923,0,9735,1,0,".(goto)", 0, 2, 0); /* m: 9735 -> 0,9739 */
	reached1[9735] = 1;
	trans[1][9613]	= settr(9920,0,9614,2,0,"else", 0, 2, 0);
	trans[1][9614]	= settr(9921,0,9739,4464,4464,"(1)", 0, 2, 0); /* m: 9735 -> 9739,0 */
	reached1[9735] = 1;
	trans[1][9733]	= settr(10040,0,9735,1,0,".(goto)", 0, 2, 0); /* m: 9735 -> 0,9739 */
	reached1[9735] = 1;
	trans[1][9618]	= settr(9925,0,9655,4465,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][9655] = settr(9962,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9962,0,9638,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9638] = settr(9945,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9945,2,9636,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9636] = settr(9943,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9943,2,9619,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9943,2,9622,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9943,2,9625,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9943,2,9628,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9943,2,9631,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9943,2,9634,0,0,"IF", 1, 2, 0);
	trans[1][9619]	= settr(9926,4,9653,4466,4466,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9620 -> 9653,0 */
	reached1[9620] = 1;
	trans[1][9620]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9621]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9637]	= settr(9944,0,9653,4467,4467,".(goto)", 1, 2, 0);
	trans[1][9622]	= settr(9929,4,9653,4468,4468,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9623 -> 9653,0 */
	reached1[9623] = 1;
	trans[1][9623]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9624]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9625]	= settr(9932,4,9653,4469,4469,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9626 -> 9653,0 */
	reached1[9626] = 1;
	trans[1][9626]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9627]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9628]	= settr(9935,4,9653,4470,4470,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9629 -> 9653,0 */
	reached1[9629] = 1;
	trans[1][9629]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9630]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9631]	= settr(9938,4,9653,4471,4471,"((PAUSE==ABORT))", 1, 2, 0); /* m: 9632 -> 9653,0 */
	reached1[9632] = 1;
	trans[1][9632]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9633]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9634]	= settr(9941,2,9635,2,0,"else", 1, 2, 0);
	trans[1][9635]	= settr(9942,4,9653,4472,4472,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9637 -> 0,9653 */
	reached1[9637] = 1;
	T = trans[1][9653] = settr(9960,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9960,0,9639,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9960,0,9651,0,0,"IF", 0, 2, 0);
	trans[1][9639]	= settr(9946,0,9650,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][9650] = settr(9957,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9957,0,9646,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9646] = settr(9953,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9953,0,9640,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9953,0,9642,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9953,0,9644,0,0,"IF", 0, 2, 0);
	trans[1][9640]	= settr(9947,0,9648,4473,4473,"((_pid==0))", 0, 2, 0); /* m: 9641 -> 9648,0 */
	reached1[9641] = 1;
	trans[1][9641]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9647]	= settr(9954,0,9648,1,0,".(goto)", 0, 2, 0);
	trans[1][9642]	= settr(9949,0,9648,4474,4474,"((_pid==1))", 0, 2, 0); /* m: 9643 -> 9648,0 */
	reached1[9643] = 1;
	trans[1][9643]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9644]	= settr(9951,0,9648,4475,4475,"((_pid>1))", 0, 2, 0); /* m: 9645 -> 9648,0 */
	reached1[9645] = 1;
	trans[1][9645]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9648]	= settr(9955,0,9649,4476,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9649]	= settr(9956,0,9739,4477,4477,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9735 -> 0,9739 */
	reached1[9735] = 1;
	trans[1][9654]	= settr(9961,0,9735,1,0,".(goto)", 0, 2, 0); /* m: 9735 -> 0,9739 */
	reached1[9735] = 1;
	trans[1][9651]	= settr(9958,0,9652,2,0,"else", 0, 2, 0);
	trans[1][9652]	= settr(9959,0,9739,4478,4478,"(1)", 0, 2, 0); /* m: 9735 -> 9739,0 */
	reached1[9735] = 1;
	trans[1][9656]	= settr(9963,0,9693,4479,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][9693] = settr(10000,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10000,0,9676,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9676] = settr(9983,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(9983,2,9674,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9674] = settr(9981,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9981,2,9657,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9981,2,9660,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9981,2,9663,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9981,2,9666,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(9981,2,9669,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(9981,2,9672,0,0,"IF", 1, 2, 0);
	trans[1][9657]	= settr(9964,4,9691,4480,4480,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9658 -> 9691,0 */
	reached1[9658] = 1;
	trans[1][9658]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9659]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9675]	= settr(9982,0,9691,4481,4481,".(goto)", 1, 2, 0);
	trans[1][9660]	= settr(9967,4,9691,4482,4482,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9661 -> 9691,0 */
	reached1[9661] = 1;
	trans[1][9661]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9662]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9663]	= settr(9970,4,9691,4483,4483,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9664 -> 9691,0 */
	reached1[9664] = 1;
	trans[1][9664]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9665]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9666]	= settr(9973,4,9691,4484,4484,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9667 -> 9691,0 */
	reached1[9667] = 1;
	trans[1][9667]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9668]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9669]	= settr(9976,4,9691,4485,4485,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 9670 -> 9691,0 */
	reached1[9670] = 1;
	trans[1][9670]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9671]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9672]	= settr(9979,2,9673,2,0,"else", 1, 2, 0);
	trans[1][9673]	= settr(9980,4,9691,4486,4486,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9675 -> 0,9691 */
	reached1[9675] = 1;
	T = trans[1][9691] = settr(9998,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9998,0,9677,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9998,0,9689,0,0,"IF", 0, 2, 0);
	trans[1][9677]	= settr(9984,0,9688,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][9688] = settr(9995,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(9995,0,9684,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9684] = settr(9991,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9991,0,9678,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9991,0,9680,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9991,0,9682,0,0,"IF", 0, 2, 0);
	trans[1][9678]	= settr(9985,0,9686,4487,4487,"((_pid==0))", 0, 2, 0); /* m: 9679 -> 9686,0 */
	reached1[9679] = 1;
	trans[1][9679]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9685]	= settr(9992,0,9686,1,0,".(goto)", 0, 2, 0);
	trans[1][9680]	= settr(9987,0,9686,4488,4488,"((_pid==1))", 0, 2, 0); /* m: 9681 -> 9686,0 */
	reached1[9681] = 1;
	trans[1][9681]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9682]	= settr(9989,0,9686,4489,4489,"((_pid>1))", 0, 2, 0); /* m: 9683 -> 9686,0 */
	reached1[9683] = 1;
	trans[1][9683]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9686]	= settr(9993,0,9687,4490,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9687]	= settr(9994,0,9739,4491,4491,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9735 -> 0,9739 */
	reached1[9735] = 1;
	trans[1][9692]	= settr(9999,0,9735,1,0,".(goto)", 0, 2, 0); /* m: 9735 -> 0,9739 */
	reached1[9735] = 1;
	trans[1][9689]	= settr(9996,0,9690,2,0,"else", 0, 2, 0);
	trans[1][9690]	= settr(9997,0,9739,4492,4492,"(1)", 0, 2, 0); /* m: 9735 -> 9739,0 */
	reached1[9735] = 1;
	trans[1][9694]	= settr(10001,0,9731,4493,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][9731] = settr(10038,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10038,0,9714,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9714] = settr(10021,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10021,2,9712,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9712] = settr(10019,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10019,2,9695,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10019,2,9698,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10019,2,9701,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10019,2,9704,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10019,2,9707,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10019,2,9710,0,0,"IF", 1, 2, 0);
	trans[1][9695]	= settr(10002,4,9729,4494,4494,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9696 -> 9729,0 */
	reached1[9696] = 1;
	trans[1][9696]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9697]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9713]	= settr(10020,0,9729,4495,4495,".(goto)", 1, 2, 0);
	trans[1][9698]	= settr(10005,4,9729,4496,4496,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9699 -> 9729,0 */
	reached1[9699] = 1;
	trans[1][9699]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9700]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9701]	= settr(10008,4,9729,4497,4497,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9702 -> 9729,0 */
	reached1[9702] = 1;
	trans[1][9702]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9703]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9704]	= settr(10011,4,9729,4498,4498,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9705 -> 9729,0 */
	reached1[9705] = 1;
	trans[1][9705]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9706]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9707]	= settr(10014,4,9729,4499,4499,"((STOP==ABORT))", 1, 2, 0); /* m: 9708 -> 9729,0 */
	reached1[9708] = 1;
	trans[1][9708]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9709]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9710]	= settr(10017,2,9711,2,0,"else", 1, 2, 0);
	trans[1][9711]	= settr(10018,4,9729,4500,4500,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9713 -> 0,9729 */
	reached1[9713] = 1;
	T = trans[1][9729] = settr(10036,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10036,0,9715,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10036,0,9727,0,0,"IF", 0, 2, 0);
	trans[1][9715]	= settr(10022,0,9726,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][9726] = settr(10033,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10033,0,9722,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9722] = settr(10029,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10029,0,9716,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10029,0,9718,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10029,0,9720,0,0,"IF", 0, 2, 0);
	trans[1][9716]	= settr(10023,0,9724,4501,4501,"((_pid==0))", 0, 2, 0); /* m: 9717 -> 9724,0 */
	reached1[9717] = 1;
	trans[1][9717]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9723]	= settr(10030,0,9724,1,0,".(goto)", 0, 2, 0);
	trans[1][9718]	= settr(10025,0,9724,4502,4502,"((_pid==1))", 0, 2, 0); /* m: 9719 -> 9724,0 */
	reached1[9719] = 1;
	trans[1][9719]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9720]	= settr(10027,0,9724,4503,4503,"((_pid>1))", 0, 2, 0); /* m: 9721 -> 9724,0 */
	reached1[9721] = 1;
	trans[1][9721]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9724]	= settr(10031,0,9725,4504,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9725]	= settr(10032,0,9739,4505,4505,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9735 -> 0,9739 */
	reached1[9735] = 1;
	trans[1][9730]	= settr(10037,0,9735,1,0,".(goto)", 0, 2, 0); /* m: 9735 -> 0,9739 */
	reached1[9735] = 1;
	trans[1][9727]	= settr(10034,0,9728,2,0,"else", 0, 2, 0);
	trans[1][9728]	= settr(10035,0,9739,4506,4506,"(1)", 0, 2, 0); /* m: 9735 -> 9739,0 */
	reached1[9735] = 1;
	trans[1][9735]	= settr(10042,0,9739,4507,4507,"j = (j-1)", 0, 2, 0);
	trans[1][9736]	= settr(10043,0,9737,2,0,"else", 0, 2, 0);
	trans[1][9737]	= settr(10044,0,11138,4508,4508,"j = 1", 0, 2, 0);
	trans[1][9738]	= settr(10045,0,11138,1,0,"goto :b68", 0, 2, 0);
	trans[1][9741]	= settr(10048,0,11138,1,0,"break", 0, 2, 0);
	trans[1][9973]	= settr(10280,0,11138,1,0,".(goto)", 0, 2, 0);
	trans[1][9746]	= settr(10053,0,9971,2,0,"else", 0, 2, 0);
	T = trans[ 1][9971] = settr(10278,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10278,0,9747,0,0,"sub-sequence", 0, 2, 0);
	trans[1][9747]	= settr(10054,0,9912,4509,0,"printf('Supervisor propagating command %e...\\n',6)", 0, 2, 0);
	T = trans[ 1][9912] = settr(10219,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10219,0,9909,0,0,"sub-sequence", 0, 2, 0);
	trans[1][9910]	= settr(10217,0,9909,1,0,".(goto)", 0, 2, 0);
	T = trans[1][9909] = settr(10216,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(10216,0,9748,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(10216,0,9906,0,0,"DO", 0, 2, 0);
	trans[1][9748]	= settr(10055,0,9904,4510,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][9904] = settr(10211,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10211,0,9902,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9902] = settr(10209,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10209,0,9749,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10209,0,9788,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10209,0,9826,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10209,0,9864,0,0,"IF", 0, 2, 0);
	trans[1][9749]	= settr(10056,0,9787,4511,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][9787] = settr(10094,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10094,0,9769,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9769] = settr(10076,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10076,2,9767,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9767] = settr(10074,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10074,2,9750,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10074,2,9753,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10074,2,9756,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10074,2,9759,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10074,2,9762,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10074,2,9765,0,0,"IF", 1, 2, 0);
	trans[1][9750]	= settr(10057,4,9770,4512,4512,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9751 -> 9770,0 */
	reached1[9751] = 1;
	trans[1][9751]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9752]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9768]	= settr(10075,0,9770,4513,4513,".(goto)", 1, 2, 0);
	trans[1][9753]	= settr(10060,4,9770,4514,4514,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9754 -> 9770,0 */
	reached1[9754] = 1;
	trans[1][9754]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9755]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9756]	= settr(10063,4,9770,4515,4515,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9757 -> 9770,0 */
	reached1[9757] = 1;
	trans[1][9757]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9758]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9759]	= settr(10066,4,9770,4516,4516,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9760 -> 9770,0 */
	reached1[9760] = 1;
	trans[1][9760]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9761]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9762]	= settr(10069,4,9770,4517,4517,"((START==ABORT))", 1, 2, 0); /* m: 9763 -> 9770,0 */
	reached1[9763] = 1;
	trans[1][9763]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9764]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9765]	= settr(10072,2,9766,2,0,"else", 1, 2, 0);
	trans[1][9766]	= settr(10073,4,9770,4518,4518,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9768 -> 0,9770 */
	reached1[9768] = 1;
	trans[1][9770]	= settr(10077,0,9785,4519,4519,"(run Thread(j))", 0, 2, 0);
	T = trans[1][9785] = settr(10092,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(10092,0,9771,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(10092,0,9783,0,0,"IF", 0, 2, 0);
	trans[1][9771]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][9782] = settr(10089,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10089,0,9778,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9778] = settr(10085,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10085,0,9772,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10085,0,9774,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10085,0,9776,0,0,"IF", 0, 2, 0);
	trans[1][9772]	= settr(10079,0,9780,4520,4520,"((_pid==0))", 0, 2, 0); /* m: 9773 -> 9780,0 */
	reached1[9773] = 1;
	trans[1][9773]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9779]	= settr(10086,0,9780,1,0,".(goto)", 0, 2, 0);
	trans[1][9774]	= settr(10081,0,9780,4521,4521,"((_pid==1))", 0, 2, 0); /* m: 9775 -> 9780,0 */
	reached1[9775] = 1;
	trans[1][9775]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9776]	= settr(10083,0,9780,4522,4522,"((_pid>1))", 0, 2, 0); /* m: 9777 -> 9780,0 */
	reached1[9777] = 1;
	trans[1][9777]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9780]	= settr(10087,0,9781,4523,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9781]	= settr(10088,0,9909,4524,4524,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9905 -> 0,9909 */
	reached1[9905] = 1;
	trans[1][9786]	= settr(10093,0,9905,1,0,".(goto)", 0, 2, 0); /* m: 9905 -> 0,9909 */
	reached1[9905] = 1;
	trans[1][9783]	= settr(10090,0,9784,2,0,"else", 0, 2, 0);
	trans[1][9784]	= settr(10091,0,9909,4525,4525,"(1)", 0, 2, 0); /* m: 9905 -> 9909,0 */
	reached1[9905] = 1;
	trans[1][9903]	= settr(10210,0,9905,1,0,".(goto)", 0, 2, 0); /* m: 9905 -> 0,9909 */
	reached1[9905] = 1;
	trans[1][9788]	= settr(10095,0,9825,4526,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][9825] = settr(10132,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10132,0,9808,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9808] = settr(10115,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10115,2,9806,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9806] = settr(10113,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10113,2,9789,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10113,2,9792,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10113,2,9795,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10113,2,9798,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10113,2,9801,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10113,2,9804,0,0,"IF", 1, 2, 0);
	trans[1][9789]	= settr(10096,4,9823,4527,4527,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9790 -> 9823,0 */
	reached1[9790] = 1;
	trans[1][9790]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9791]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9807]	= settr(10114,0,9823,4528,4528,".(goto)", 1, 2, 0);
	trans[1][9792]	= settr(10099,4,9823,4529,4529,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9793 -> 9823,0 */
	reached1[9793] = 1;
	trans[1][9793]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9794]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9795]	= settr(10102,4,9823,4530,4530,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9796 -> 9823,0 */
	reached1[9796] = 1;
	trans[1][9796]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9797]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9798]	= settr(10105,4,9823,4531,4531,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9799 -> 9823,0 */
	reached1[9799] = 1;
	trans[1][9799]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9800]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9801]	= settr(10108,4,9823,4532,4532,"((PAUSE==ABORT))", 1, 2, 0); /* m: 9802 -> 9823,0 */
	reached1[9802] = 1;
	trans[1][9802]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9803]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9804]	= settr(10111,2,9805,2,0,"else", 1, 2, 0);
	trans[1][9805]	= settr(10112,4,9823,4533,4533,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9807 -> 0,9823 */
	reached1[9807] = 1;
	T = trans[1][9823] = settr(10130,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(10130,0,9809,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(10130,0,9821,0,0,"IF", 0, 2, 0);
	trans[1][9809]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][9820] = settr(10127,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10127,0,9816,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9816] = settr(10123,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10123,0,9810,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10123,0,9812,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10123,0,9814,0,0,"IF", 0, 2, 0);
	trans[1][9810]	= settr(10117,0,9818,4534,4534,"((_pid==0))", 0, 2, 0); /* m: 9811 -> 9818,0 */
	reached1[9811] = 1;
	trans[1][9811]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9817]	= settr(10124,0,9818,1,0,".(goto)", 0, 2, 0);
	trans[1][9812]	= settr(10119,0,9818,4535,4535,"((_pid==1))", 0, 2, 0); /* m: 9813 -> 9818,0 */
	reached1[9813] = 1;
	trans[1][9813]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9814]	= settr(10121,0,9818,4536,4536,"((_pid>1))", 0, 2, 0); /* m: 9815 -> 9818,0 */
	reached1[9815] = 1;
	trans[1][9815]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9818]	= settr(10125,0,9819,4537,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9819]	= settr(10126,0,9909,4538,4538,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9905 -> 0,9909 */
	reached1[9905] = 1;
	trans[1][9824]	= settr(10131,0,9905,1,0,".(goto)", 0, 2, 0); /* m: 9905 -> 0,9909 */
	reached1[9905] = 1;
	trans[1][9821]	= settr(10128,0,9822,2,0,"else", 0, 2, 0);
	trans[1][9822]	= settr(10129,0,9909,4539,4539,"(1)", 0, 2, 0); /* m: 9905 -> 9909,0 */
	reached1[9905] = 1;
	trans[1][9826]	= settr(10133,0,9863,4540,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][9863] = settr(10170,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10170,0,9846,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9846] = settr(10153,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10153,2,9844,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9844] = settr(10151,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10151,2,9827,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10151,2,9830,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10151,2,9833,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10151,2,9836,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10151,2,9839,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10151,2,9842,0,0,"IF", 1, 2, 0);
	trans[1][9827]	= settr(10134,4,9861,4541,4541,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9828 -> 9861,0 */
	reached1[9828] = 1;
	trans[1][9828]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9829]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9845]	= settr(10152,0,9861,4542,4542,".(goto)", 1, 2, 0);
	trans[1][9830]	= settr(10137,4,9861,4543,4543,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9831 -> 9861,0 */
	reached1[9831] = 1;
	trans[1][9831]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9832]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9833]	= settr(10140,4,9861,4544,4544,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9834 -> 9861,0 */
	reached1[9834] = 1;
	trans[1][9834]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9835]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9836]	= settr(10143,4,9861,4545,4545,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9837 -> 9861,0 */
	reached1[9837] = 1;
	trans[1][9837]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9838]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9839]	= settr(10146,4,9861,4546,4546,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 9840 -> 9861,0 */
	reached1[9840] = 1;
	trans[1][9840]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9841]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9842]	= settr(10149,2,9843,2,0,"else", 1, 2, 0);
	trans[1][9843]	= settr(10150,4,9861,4547,4547,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9845 -> 0,9861 */
	reached1[9845] = 1;
	T = trans[1][9861] = settr(10168,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(10168,0,9847,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(10168,0,9859,0,0,"IF", 0, 2, 0);
	trans[1][9847]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][9858] = settr(10165,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10165,0,9854,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9854] = settr(10161,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10161,0,9848,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10161,0,9850,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10161,0,9852,0,0,"IF", 0, 2, 0);
	trans[1][9848]	= settr(10155,0,9856,4548,4548,"((_pid==0))", 0, 2, 0); /* m: 9849 -> 9856,0 */
	reached1[9849] = 1;
	trans[1][9849]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9855]	= settr(10162,0,9856,1,0,".(goto)", 0, 2, 0);
	trans[1][9850]	= settr(10157,0,9856,4549,4549,"((_pid==1))", 0, 2, 0); /* m: 9851 -> 9856,0 */
	reached1[9851] = 1;
	trans[1][9851]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9852]	= settr(10159,0,9856,4550,4550,"((_pid>1))", 0, 2, 0); /* m: 9853 -> 9856,0 */
	reached1[9853] = 1;
	trans[1][9853]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9856]	= settr(10163,0,9857,4551,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9857]	= settr(10164,0,9909,4552,4552,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9905 -> 0,9909 */
	reached1[9905] = 1;
	trans[1][9862]	= settr(10169,0,9905,1,0,".(goto)", 0, 2, 0); /* m: 9905 -> 0,9909 */
	reached1[9905] = 1;
	trans[1][9859]	= settr(10166,0,9860,2,0,"else", 0, 2, 0);
	trans[1][9860]	= settr(10167,0,9909,4553,4553,"(1)", 0, 2, 0); /* m: 9905 -> 9909,0 */
	reached1[9905] = 1;
	trans[1][9864]	= settr(10171,0,9901,4554,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][9901] = settr(10208,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10208,0,9884,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][9884] = settr(10191,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10191,2,9882,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][9882] = settr(10189,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10189,2,9865,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10189,2,9868,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10189,2,9871,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10189,2,9874,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10189,2,9877,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10189,2,9880,0,0,"IF", 1, 2, 0);
	trans[1][9865]	= settr(10172,4,9899,4555,4555,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9866 -> 9899,0 */
	reached1[9866] = 1;
	trans[1][9866]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9867]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][9883]	= settr(10190,0,9899,4556,4556,".(goto)", 1, 2, 0);
	trans[1][9868]	= settr(10175,4,9899,4557,4557,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9869 -> 9899,0 */
	reached1[9869] = 1;
	trans[1][9869]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9870]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9871]	= settr(10178,4,9899,4558,4558,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9872 -> 9899,0 */
	reached1[9872] = 1;
	trans[1][9872]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9873]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9874]	= settr(10181,4,9899,4559,4559,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9875 -> 9899,0 */
	reached1[9875] = 1;
	trans[1][9875]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9876]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9877]	= settr(10184,4,9899,4560,4560,"((STOP==ABORT))", 1, 2, 0); /* m: 9878 -> 9899,0 */
	reached1[9878] = 1;
	trans[1][9878]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][9879]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][9880]	= settr(10187,2,9881,2,0,"else", 1, 2, 0);
	trans[1][9881]	= settr(10188,4,9899,4561,4561,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 9883 -> 0,9899 */
	reached1[9883] = 1;
	T = trans[1][9899] = settr(10206,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(10206,0,9885,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(10206,0,9897,0,0,"IF", 0, 2, 0);
	trans[1][9885]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][9896] = settr(10203,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10203,0,9892,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9892] = settr(10199,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10199,0,9886,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10199,0,9888,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10199,0,9890,0,0,"IF", 0, 2, 0);
	trans[1][9886]	= settr(10193,0,9894,4562,4562,"((_pid==0))", 0, 2, 0); /* m: 9887 -> 9894,0 */
	reached1[9887] = 1;
	trans[1][9887]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9893]	= settr(10200,0,9894,1,0,".(goto)", 0, 2, 0);
	trans[1][9888]	= settr(10195,0,9894,4563,4563,"((_pid==1))", 0, 2, 0); /* m: 9889 -> 9894,0 */
	reached1[9889] = 1;
	trans[1][9889]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9890]	= settr(10197,0,9894,4564,4564,"((_pid>1))", 0, 2, 0); /* m: 9891 -> 9894,0 */
	reached1[9891] = 1;
	trans[1][9891]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9894]	= settr(10201,0,9895,4565,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9895]	= settr(10202,0,9909,4566,4566,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9905 -> 0,9909 */
	reached1[9905] = 1;
	trans[1][9900]	= settr(10207,0,9905,1,0,".(goto)", 0, 2, 0); /* m: 9905 -> 0,9909 */
	reached1[9905] = 1;
	trans[1][9897]	= settr(10204,0,9898,2,0,"else", 0, 2, 0);
	trans[1][9898]	= settr(10205,0,9909,4567,4567,"(1)", 0, 2, 0); /* m: 9905 -> 9909,0 */
	reached1[9905] = 1;
	trans[1][9905]	= settr(10212,0,9909,4568,4568,"j = (j+1)", 0, 2, 0);
	trans[1][9906]	= settr(10213,0,9907,2,0,"else", 0, 2, 0);
	trans[1][9907]	= settr(10214,0,9968,4569,4569,"j = 1", 0, 2, 0);
	trans[1][9908]	= settr(10215,0,9968,1,0,"goto :b69", 0, 2, 0);
	trans[1][9911]	= settr(10218,0,9968,1,0,"break", 0, 2, 0);
	trans[1][9969]	= settr(10276,0,9968,1,0,".(goto)", 0, 2, 0);
	T = trans[1][9968] = settr(10275,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(10275,0,9913,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(10275,0,9965,0,0,"DO", 0, 2, 0);
	trans[1][9913]	= settr(10220,0,9962,4570,0,"((j<3))", 0, 2, 0);
	T = trans[1][9962] = settr(10269,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10269,0,9914,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10269,0,9926,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10269,0,9938,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10269,0,9950,0,0,"IF", 0, 2, 0);
	trans[1][9914]	= settr(10221,0,9925,4571,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][9925] = settr(10232,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10232,0,9921,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9921] = settr(10228,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10228,0,9915,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10228,0,9917,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10228,0,9919,0,0,"IF", 0, 2, 0);
	trans[1][9915]	= settr(10222,0,9923,4572,4572,"((_pid==0))", 0, 2, 0); /* m: 9916 -> 9923,0 */
	reached1[9916] = 1;
	trans[1][9916]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9922]	= settr(10229,0,9923,1,0,".(goto)", 0, 2, 0);
	trans[1][9917]	= settr(10224,0,9923,4573,4573,"((_pid==1))", 0, 2, 0); /* m: 9918 -> 9923,0 */
	reached1[9918] = 1;
	trans[1][9918]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9919]	= settr(10226,0,9923,4574,4574,"((_pid>1))", 0, 2, 0); /* m: 9920 -> 9923,0 */
	reached1[9920] = 1;
	trans[1][9920]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9923]	= settr(10230,0,9924,4575,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9924]	= settr(10231,0,9968,4576,4576,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9964 -> 0,9968 */
	reached1[9964] = 1;
	trans[1][9963]	= settr(10270,0,9964,1,0,".(goto)", 0, 2, 0); /* m: 9964 -> 0,9968 */
	reached1[9964] = 1;
	trans[1][9926]	= settr(10233,0,9937,4577,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][9937] = settr(10244,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10244,0,9933,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9933] = settr(10240,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10240,0,9927,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10240,0,9929,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10240,0,9931,0,0,"IF", 0, 2, 0);
	trans[1][9927]	= settr(10234,0,9935,4578,4578,"((_pid==0))", 0, 2, 0); /* m: 9928 -> 9935,0 */
	reached1[9928] = 1;
	trans[1][9928]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9934]	= settr(10241,0,9935,1,0,".(goto)", 0, 2, 0);
	trans[1][9929]	= settr(10236,0,9935,4579,4579,"((_pid==1))", 0, 2, 0); /* m: 9930 -> 9935,0 */
	reached1[9930] = 1;
	trans[1][9930]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9931]	= settr(10238,0,9935,4580,4580,"((_pid>1))", 0, 2, 0); /* m: 9932 -> 9935,0 */
	reached1[9932] = 1;
	trans[1][9932]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9935]	= settr(10242,0,9936,4581,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9936]	= settr(10243,0,9968,4582,4582,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9964 -> 0,9968 */
	reached1[9964] = 1;
	trans[1][9938]	= settr(10245,0,9949,4583,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][9949] = settr(10256,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10256,0,9945,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9945] = settr(10252,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10252,0,9939,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10252,0,9941,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10252,0,9943,0,0,"IF", 0, 2, 0);
	trans[1][9939]	= settr(10246,0,9947,4584,4584,"((_pid==0))", 0, 2, 0); /* m: 9940 -> 9947,0 */
	reached1[9940] = 1;
	trans[1][9940]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9946]	= settr(10253,0,9947,1,0,".(goto)", 0, 2, 0);
	trans[1][9941]	= settr(10248,0,9947,4585,4585,"((_pid==1))", 0, 2, 0); /* m: 9942 -> 9947,0 */
	reached1[9942] = 1;
	trans[1][9942]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9943]	= settr(10250,0,9947,4586,4586,"((_pid>1))", 0, 2, 0); /* m: 9944 -> 9947,0 */
	reached1[9944] = 1;
	trans[1][9944]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9947]	= settr(10254,0,9948,4587,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9948]	= settr(10255,0,9968,4588,4588,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9964 -> 0,9968 */
	reached1[9964] = 1;
	trans[1][9950]	= settr(10257,0,9961,4589,0,"((6==STOP))", 0, 2, 0);
	T = trans[ 1][9961] = settr(10268,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10268,0,9957,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][9957] = settr(10264,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10264,0,9951,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10264,0,9953,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10264,0,9955,0,0,"IF", 0, 2, 0);
	trans[1][9951]	= settr(10258,0,9959,4590,4590,"((_pid==0))", 0, 2, 0); /* m: 9952 -> 9959,0 */
	reached1[9952] = 1;
	trans[1][9952]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9958]	= settr(10265,0,9959,1,0,".(goto)", 0, 2, 0);
	trans[1][9953]	= settr(10260,0,9959,4591,4591,"((_pid==1))", 0, 2, 0); /* m: 9954 -> 9959,0 */
	reached1[9954] = 1;
	trans[1][9954]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][9955]	= settr(10262,0,9959,4592,4592,"((_pid>1))", 0, 2, 0); /* m: 9956 -> 9959,0 */
	reached1[9956] = 1;
	trans[1][9956]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][9959]	= settr(10266,0,9960,4593,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][9960]	= settr(10267,0,9968,4594,4594,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 9964 -> 0,9968 */
	reached1[9964] = 1;
	trans[1][9964]	= settr(10271,0,9968,4595,4595,"j = (j+1)", 0, 2, 0);
	trans[1][9965]	= settr(10272,0,9966,2,0,"else", 0, 2, 0);
	trans[1][9966]	= settr(10273,0,11138,4596,4596,"j = 1", 0, 2, 0);
	trans[1][9967]	= settr(10274,0,11138,1,0,"goto :b70", 0, 2, 0);
	trans[1][9970]	= settr(10277,0,11138,1,0,"break", 0, 2, 0);
	trans[1][11126]	= settr(11433,0,11138,1,0,".(goto)", 0, 2, 0);
	trans[1][9977]	= settr(10284,0,10549,4597,0,"((9==PAUSED))", 0, 2, 0);
	T = trans[ 1][10549] = settr(10856,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10856,0,10547,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10547] = settr(10854,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10854,0,9978,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10854,0,9981,0,0,"IF", 0, 2, 0);
	trans[1][9978]	= settr(10285,0,9979,4598,0,"(((8==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][9979]	= settr(10286,0,9980,4599,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][9980]	= settr(10287,0,11138,4600,4600,"supervisor_started = 1", 1, 2, 0);
	trans[1][10548]	= settr(10855,0,11138,1,0,".(goto)", 0, 2, 0);
	trans[1][9981]	= settr(10288,0,10545,2,0,"else", 0, 2, 0);
	T = trans[1][10545] = settr(10852,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10852,0,9982,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10852,0,10319,0,0,"IF", 0, 2, 0);
	trans[1][9982]	= settr(10289,0,10318,4601,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][10318] = settr(10625,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10625,0,10316,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10316] = settr(10623,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10623,0,9983,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10623,0,10149,0,0,"IF", 0, 2, 0);
	trans[1][9983]	= settr(10290,0,10148,4602,0,"(((8==START)||(8==PAUSED)))", 0, 2, 0);
	T = trans[ 1][10148] = settr(10455,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10455,0,10145,0,0,"sub-sequence", 0, 2, 0);
	trans[1][10146]	= settr(10453,0,10145,1,0,".(goto)", 0, 2, 0);
	T = trans[1][10145] = settr(10452,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(10452,0,9984,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(10452,0,10142,0,0,"DO", 0, 2, 0);
	trans[1][9984]	= settr(10291,0,10140,4603,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][10140] = settr(10447,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10447,0,10138,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10138] = settr(10445,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10445,0,9985,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10445,0,10024,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10445,0,10062,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10445,0,10100,0,0,"IF", 0, 2, 0);
	trans[1][9985]	= settr(10292,0,10023,4604,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][10023] = settr(10330,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10330,0,10005,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10005] = settr(10312,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10312,2,10003,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10003] = settr(10310,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10310,2,9986,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10310,2,9989,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10310,2,9992,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10310,2,9995,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10310,2,9998,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10310,2,10001,0,0,"IF", 1, 2, 0);
	trans[1][9986]	= settr(10293,4,10006,4605,4605,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9987 -> 10006,0 */
	reached1[9987] = 1;
	trans[1][9987]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][9988]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10004]	= settr(10311,0,10006,4606,4606,".(goto)", 1, 2, 0);
	trans[1][9989]	= settr(10296,4,10006,4607,4607,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 9990 -> 10006,0 */
	reached1[9990] = 1;
	trans[1][9990]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][9991]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][9992]	= settr(10299,4,10006,4608,4608,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9993 -> 10006,0 */
	reached1[9993] = 1;
	trans[1][9993]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][9994]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][9995]	= settr(10302,4,10006,4609,4609,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 9996 -> 10006,0 */
	reached1[9996] = 1;
	trans[1][9996]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][9997]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][9998]	= settr(10305,4,10006,4610,4610,"((START==ABORT))", 1, 2, 0); /* m: 9999 -> 10006,0 */
	reached1[9999] = 1;
	trans[1][9999]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10000]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10001]	= settr(10308,2,10002,2,0,"else", 1, 2, 0);
	trans[1][10002]	= settr(10309,4,10006,4611,4611,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10004 -> 0,10006 */
	reached1[10004] = 1;
	trans[1][10006]	= settr(10313,0,10021,4612,4612,"(run Thread(j))", 0, 2, 0);
	T = trans[1][10021] = settr(10328,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10328,0,10007,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10328,0,10019,0,0,"IF", 0, 2, 0);
	trans[1][10007]	= settr(10314,0,10018,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10018] = settr(10325,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10325,0,10014,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10014] = settr(10321,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10321,0,10008,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10321,0,10010,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10321,0,10012,0,0,"IF", 0, 2, 0);
	trans[1][10008]	= settr(10315,0,10016,4613,4613,"((_pid==0))", 0, 2, 0); /* m: 10009 -> 10016,0 */
	reached1[10009] = 1;
	trans[1][10009]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10015]	= settr(10322,0,10016,1,0,".(goto)", 0, 2, 0);
	trans[1][10010]	= settr(10317,0,10016,4614,4614,"((_pid==1))", 0, 2, 0); /* m: 10011 -> 10016,0 */
	reached1[10011] = 1;
	trans[1][10011]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10012]	= settr(10319,0,10016,4615,4615,"((_pid>1))", 0, 2, 0); /* m: 10013 -> 10016,0 */
	reached1[10013] = 1;
	trans[1][10013]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10016]	= settr(10323,0,10017,4616,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10017]	= settr(10324,0,10145,4617,4617,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10141 -> 0,10145 */
	reached1[10141] = 1;
	trans[1][10022]	= settr(10329,0,10141,1,0,".(goto)", 0, 2, 0); /* m: 10141 -> 0,10145 */
	reached1[10141] = 1;
	trans[1][10019]	= settr(10326,0,10020,2,0,"else", 0, 2, 0);
	trans[1][10020]	= settr(10327,0,10145,4618,4618,"(1)", 0, 2, 0); /* m: 10141 -> 10145,0 */
	reached1[10141] = 1;
	trans[1][10139]	= settr(10446,0,10141,1,0,".(goto)", 0, 2, 0); /* m: 10141 -> 0,10145 */
	reached1[10141] = 1;
	trans[1][10024]	= settr(10331,0,10061,4619,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][10061] = settr(10368,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10368,0,10044,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10044] = settr(10351,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10351,2,10042,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10042] = settr(10349,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10349,2,10025,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10349,2,10028,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10349,2,10031,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10349,2,10034,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10349,2,10037,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10349,2,10040,0,0,"IF", 1, 2, 0);
	trans[1][10025]	= settr(10332,4,10059,4620,4620,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10026 -> 10059,0 */
	reached1[10026] = 1;
	trans[1][10026]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10027]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10043]	= settr(10350,0,10059,4621,4621,".(goto)", 1, 2, 0);
	trans[1][10028]	= settr(10335,4,10059,4622,4622,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10029 -> 10059,0 */
	reached1[10029] = 1;
	trans[1][10029]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10030]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10031]	= settr(10338,4,10059,4623,4623,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10032 -> 10059,0 */
	reached1[10032] = 1;
	trans[1][10032]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10033]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10034]	= settr(10341,4,10059,4624,4624,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10035 -> 10059,0 */
	reached1[10035] = 1;
	trans[1][10035]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10036]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10037]	= settr(10344,4,10059,4625,4625,"((PAUSE==ABORT))", 1, 2, 0); /* m: 10038 -> 10059,0 */
	reached1[10038] = 1;
	trans[1][10038]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10039]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10040]	= settr(10347,2,10041,2,0,"else", 1, 2, 0);
	trans[1][10041]	= settr(10348,4,10059,4626,4626,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10043 -> 0,10059 */
	reached1[10043] = 1;
	T = trans[1][10059] = settr(10366,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10366,0,10045,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10366,0,10057,0,0,"IF", 0, 2, 0);
	trans[1][10045]	= settr(10352,0,10056,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10056] = settr(10363,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10363,0,10052,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10052] = settr(10359,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10359,0,10046,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10359,0,10048,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10359,0,10050,0,0,"IF", 0, 2, 0);
	trans[1][10046]	= settr(10353,0,10054,4627,4627,"((_pid==0))", 0, 2, 0); /* m: 10047 -> 10054,0 */
	reached1[10047] = 1;
	trans[1][10047]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10053]	= settr(10360,0,10054,1,0,".(goto)", 0, 2, 0);
	trans[1][10048]	= settr(10355,0,10054,4628,4628,"((_pid==1))", 0, 2, 0); /* m: 10049 -> 10054,0 */
	reached1[10049] = 1;
	trans[1][10049]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10050]	= settr(10357,0,10054,4629,4629,"((_pid>1))", 0, 2, 0); /* m: 10051 -> 10054,0 */
	reached1[10051] = 1;
	trans[1][10051]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10054]	= settr(10361,0,10055,4630,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10055]	= settr(10362,0,10145,4631,4631,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10141 -> 0,10145 */
	reached1[10141] = 1;
	trans[1][10060]	= settr(10367,0,10141,1,0,".(goto)", 0, 2, 0); /* m: 10141 -> 0,10145 */
	reached1[10141] = 1;
	trans[1][10057]	= settr(10364,0,10058,2,0,"else", 0, 2, 0);
	trans[1][10058]	= settr(10365,0,10145,4632,4632,"(1)", 0, 2, 0); /* m: 10141 -> 10145,0 */
	reached1[10141] = 1;
	trans[1][10062]	= settr(10369,0,10099,4633,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][10099] = settr(10406,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10406,0,10082,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10082] = settr(10389,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10389,2,10080,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10080] = settr(10387,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10387,2,10063,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10387,2,10066,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10387,2,10069,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10387,2,10072,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10387,2,10075,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10387,2,10078,0,0,"IF", 1, 2, 0);
	trans[1][10063]	= settr(10370,4,10097,4634,4634,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10064 -> 10097,0 */
	reached1[10064] = 1;
	trans[1][10064]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10065]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10081]	= settr(10388,0,10097,4635,4635,".(goto)", 1, 2, 0);
	trans[1][10066]	= settr(10373,4,10097,4636,4636,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10067 -> 10097,0 */
	reached1[10067] = 1;
	trans[1][10067]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10068]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10069]	= settr(10376,4,10097,4637,4637,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10070 -> 10097,0 */
	reached1[10070] = 1;
	trans[1][10070]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10071]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10072]	= settr(10379,4,10097,4638,4638,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10073 -> 10097,0 */
	reached1[10073] = 1;
	trans[1][10073]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10074]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10075]	= settr(10382,4,10097,4639,4639,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 10076 -> 10097,0 */
	reached1[10076] = 1;
	trans[1][10076]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10077]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10078]	= settr(10385,2,10079,2,0,"else", 1, 2, 0);
	trans[1][10079]	= settr(10386,4,10097,4640,4640,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10081 -> 0,10097 */
	reached1[10081] = 1;
	T = trans[1][10097] = settr(10404,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10404,0,10083,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10404,0,10095,0,0,"IF", 0, 2, 0);
	trans[1][10083]	= settr(10390,0,10094,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10094] = settr(10401,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10401,0,10090,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10090] = settr(10397,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10397,0,10084,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10397,0,10086,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10397,0,10088,0,0,"IF", 0, 2, 0);
	trans[1][10084]	= settr(10391,0,10092,4641,4641,"((_pid==0))", 0, 2, 0); /* m: 10085 -> 10092,0 */
	reached1[10085] = 1;
	trans[1][10085]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10091]	= settr(10398,0,10092,1,0,".(goto)", 0, 2, 0);
	trans[1][10086]	= settr(10393,0,10092,4642,4642,"((_pid==1))", 0, 2, 0); /* m: 10087 -> 10092,0 */
	reached1[10087] = 1;
	trans[1][10087]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10088]	= settr(10395,0,10092,4643,4643,"((_pid>1))", 0, 2, 0); /* m: 10089 -> 10092,0 */
	reached1[10089] = 1;
	trans[1][10089]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10092]	= settr(10399,0,10093,4644,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10093]	= settr(10400,0,10145,4645,4645,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10141 -> 0,10145 */
	reached1[10141] = 1;
	trans[1][10098]	= settr(10405,0,10141,1,0,".(goto)", 0, 2, 0); /* m: 10141 -> 0,10145 */
	reached1[10141] = 1;
	trans[1][10095]	= settr(10402,0,10096,2,0,"else", 0, 2, 0);
	trans[1][10096]	= settr(10403,0,10145,4646,4646,"(1)", 0, 2, 0); /* m: 10141 -> 10145,0 */
	reached1[10141] = 1;
	trans[1][10100]	= settr(10407,0,10137,4647,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][10137] = settr(10444,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10444,0,10120,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10120] = settr(10427,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10427,2,10118,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10118] = settr(10425,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10425,2,10101,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10425,2,10104,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10425,2,10107,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10425,2,10110,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10425,2,10113,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10425,2,10116,0,0,"IF", 1, 2, 0);
	trans[1][10101]	= settr(10408,4,10135,4648,4648,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10102 -> 10135,0 */
	reached1[10102] = 1;
	trans[1][10102]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10103]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10119]	= settr(10426,0,10135,4649,4649,".(goto)", 1, 2, 0);
	trans[1][10104]	= settr(10411,4,10135,4650,4650,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10105 -> 10135,0 */
	reached1[10105] = 1;
	trans[1][10105]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10106]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10107]	= settr(10414,4,10135,4651,4651,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10108 -> 10135,0 */
	reached1[10108] = 1;
	trans[1][10108]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10109]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10110]	= settr(10417,4,10135,4652,4652,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10111 -> 10135,0 */
	reached1[10111] = 1;
	trans[1][10111]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10112]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10113]	= settr(10420,4,10135,4653,4653,"((STOP==ABORT))", 1, 2, 0); /* m: 10114 -> 10135,0 */
	reached1[10114] = 1;
	trans[1][10114]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10115]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10116]	= settr(10423,2,10117,2,0,"else", 1, 2, 0);
	trans[1][10117]	= settr(10424,4,10135,4654,4654,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10119 -> 0,10135 */
	reached1[10119] = 1;
	T = trans[1][10135] = settr(10442,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10442,0,10121,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10442,0,10133,0,0,"IF", 0, 2, 0);
	trans[1][10121]	= settr(10428,0,10132,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10132] = settr(10439,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10439,0,10128,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10128] = settr(10435,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10435,0,10122,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10435,0,10124,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10435,0,10126,0,0,"IF", 0, 2, 0);
	trans[1][10122]	= settr(10429,0,10130,4655,4655,"((_pid==0))", 0, 2, 0); /* m: 10123 -> 10130,0 */
	reached1[10123] = 1;
	trans[1][10123]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10129]	= settr(10436,0,10130,1,0,".(goto)", 0, 2, 0);
	trans[1][10124]	= settr(10431,0,10130,4656,4656,"((_pid==1))", 0, 2, 0); /* m: 10125 -> 10130,0 */
	reached1[10125] = 1;
	trans[1][10125]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10126]	= settr(10433,0,10130,4657,4657,"((_pid>1))", 0, 2, 0); /* m: 10127 -> 10130,0 */
	reached1[10127] = 1;
	trans[1][10127]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10130]	= settr(10437,0,10131,4658,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10131]	= settr(10438,0,10145,4659,4659,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10141 -> 0,10145 */
	reached1[10141] = 1;
	trans[1][10136]	= settr(10443,0,10141,1,0,".(goto)", 0, 2, 0); /* m: 10141 -> 0,10145 */
	reached1[10141] = 1;
	trans[1][10133]	= settr(10440,0,10134,2,0,"else", 0, 2, 0);
	trans[1][10134]	= settr(10441,0,10145,4660,4660,"(1)", 0, 2, 0); /* m: 10141 -> 10145,0 */
	reached1[10141] = 1;
	trans[1][10141]	= settr(10448,0,10145,4661,4661,"j = (j+1)", 0, 2, 0);
	trans[1][10142]	= settr(10449,0,10143,2,0,"else", 0, 2, 0);
	trans[1][10143]	= settr(10450,0,11138,4662,4662,"j = 1", 0, 2, 0);
	trans[1][10144]	= settr(10451,0,11138,1,0,"goto :b71", 0, 2, 0);
	trans[1][10147]	= settr(10454,0,11138,1,0,"break", 0, 2, 0);
	trans[1][10317]	= settr(10624,0,11138,1,0,".(goto)", 0, 2, 0);
	trans[1][10149]	= settr(10456,0,10315,2,0,"else", 0, 2, 0);
	T = trans[ 1][10315] = settr(10622,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10622,0,10150,0,0,"sub-sequence", 0, 2, 0);
	trans[1][10150]	= settr(10457,0,10312,4663,4663,"j = (3-1)", 0, 2, 0);
	trans[1][10313]	= settr(10620,0,10312,1,0,".(goto)", 0, 2, 0);
	T = trans[1][10312] = settr(10619,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(10619,0,10151,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(10619,0,10309,0,0,"DO", 0, 2, 0);
	trans[1][10151]	= settr(10458,0,10307,4664,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][10307] = settr(10614,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10614,0,10305,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10305] = settr(10612,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10612,0,10152,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10612,0,10191,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10612,0,10229,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10612,0,10267,0,0,"IF", 0, 2, 0);
	trans[1][10152]	= settr(10459,0,10190,4665,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][10190] = settr(10497,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10497,0,10172,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10172] = settr(10479,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10479,2,10170,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10170] = settr(10477,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10477,2,10153,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10477,2,10156,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10477,2,10159,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10477,2,10162,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10477,2,10165,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10477,2,10168,0,0,"IF", 1, 2, 0);
	trans[1][10153]	= settr(10460,4,10173,4666,4666,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10154 -> 10173,0 */
	reached1[10154] = 1;
	trans[1][10154]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10155]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10171]	= settr(10478,0,10173,4667,4667,".(goto)", 1, 2, 0);
	trans[1][10156]	= settr(10463,4,10173,4668,4668,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10157 -> 10173,0 */
	reached1[10157] = 1;
	trans[1][10157]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10158]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10159]	= settr(10466,4,10173,4669,4669,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10160 -> 10173,0 */
	reached1[10160] = 1;
	trans[1][10160]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10161]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10162]	= settr(10469,4,10173,4670,4670,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10163 -> 10173,0 */
	reached1[10163] = 1;
	trans[1][10163]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10164]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10165]	= settr(10472,4,10173,4671,4671,"((START==ABORT))", 1, 2, 0); /* m: 10166 -> 10173,0 */
	reached1[10166] = 1;
	trans[1][10166]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10167]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10168]	= settr(10475,2,10169,2,0,"else", 1, 2, 0);
	trans[1][10169]	= settr(10476,4,10173,4672,4672,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10171 -> 0,10173 */
	reached1[10171] = 1;
	trans[1][10173]	= settr(10480,0,10188,4673,4673,"(run Thread(j))", 0, 2, 0);
	T = trans[1][10188] = settr(10495,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10495,0,10174,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10495,0,10186,0,0,"IF", 0, 2, 0);
	trans[1][10174]	= settr(10481,0,10185,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10185] = settr(10492,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10492,0,10181,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10181] = settr(10488,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10488,0,10175,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10488,0,10177,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10488,0,10179,0,0,"IF", 0, 2, 0);
	trans[1][10175]	= settr(10482,0,10183,4674,4674,"((_pid==0))", 0, 2, 0); /* m: 10176 -> 10183,0 */
	reached1[10176] = 1;
	trans[1][10176]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10182]	= settr(10489,0,10183,1,0,".(goto)", 0, 2, 0);
	trans[1][10177]	= settr(10484,0,10183,4675,4675,"((_pid==1))", 0, 2, 0); /* m: 10178 -> 10183,0 */
	reached1[10178] = 1;
	trans[1][10178]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10179]	= settr(10486,0,10183,4676,4676,"((_pid>1))", 0, 2, 0); /* m: 10180 -> 10183,0 */
	reached1[10180] = 1;
	trans[1][10180]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10183]	= settr(10490,0,10184,4677,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10184]	= settr(10491,0,10312,4678,4678,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10308 -> 0,10312 */
	reached1[10308] = 1;
	trans[1][10189]	= settr(10496,0,10308,1,0,".(goto)", 0, 2, 0); /* m: 10308 -> 0,10312 */
	reached1[10308] = 1;
	trans[1][10186]	= settr(10493,0,10187,2,0,"else", 0, 2, 0);
	trans[1][10187]	= settr(10494,0,10312,4679,4679,"(1)", 0, 2, 0); /* m: 10308 -> 10312,0 */
	reached1[10308] = 1;
	trans[1][10306]	= settr(10613,0,10308,1,0,".(goto)", 0, 2, 0); /* m: 10308 -> 0,10312 */
	reached1[10308] = 1;
	trans[1][10191]	= settr(10498,0,10228,4680,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][10228] = settr(10535,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10535,0,10211,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10211] = settr(10518,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10518,2,10209,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10209] = settr(10516,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10516,2,10192,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10516,2,10195,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10516,2,10198,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10516,2,10201,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10516,2,10204,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10516,2,10207,0,0,"IF", 1, 2, 0);
	trans[1][10192]	= settr(10499,4,10226,4681,4681,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10193 -> 10226,0 */
	reached1[10193] = 1;
	trans[1][10193]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10194]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10210]	= settr(10517,0,10226,4682,4682,".(goto)", 1, 2, 0);
	trans[1][10195]	= settr(10502,4,10226,4683,4683,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10196 -> 10226,0 */
	reached1[10196] = 1;
	trans[1][10196]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10197]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10198]	= settr(10505,4,10226,4684,4684,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10199 -> 10226,0 */
	reached1[10199] = 1;
	trans[1][10199]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10200]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10201]	= settr(10508,4,10226,4685,4685,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10202 -> 10226,0 */
	reached1[10202] = 1;
	trans[1][10202]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10203]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10204]	= settr(10511,4,10226,4686,4686,"((PAUSE==ABORT))", 1, 2, 0); /* m: 10205 -> 10226,0 */
	reached1[10205] = 1;
	trans[1][10205]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10206]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10207]	= settr(10514,2,10208,2,0,"else", 1, 2, 0);
	trans[1][10208]	= settr(10515,4,10226,4687,4687,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10210 -> 0,10226 */
	reached1[10210] = 1;
	T = trans[1][10226] = settr(10533,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10533,0,10212,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10533,0,10224,0,0,"IF", 0, 2, 0);
	trans[1][10212]	= settr(10519,0,10223,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10223] = settr(10530,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10530,0,10219,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10219] = settr(10526,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10526,0,10213,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10526,0,10215,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10526,0,10217,0,0,"IF", 0, 2, 0);
	trans[1][10213]	= settr(10520,0,10221,4688,4688,"((_pid==0))", 0, 2, 0); /* m: 10214 -> 10221,0 */
	reached1[10214] = 1;
	trans[1][10214]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10220]	= settr(10527,0,10221,1,0,".(goto)", 0, 2, 0);
	trans[1][10215]	= settr(10522,0,10221,4689,4689,"((_pid==1))", 0, 2, 0); /* m: 10216 -> 10221,0 */
	reached1[10216] = 1;
	trans[1][10216]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10217]	= settr(10524,0,10221,4690,4690,"((_pid>1))", 0, 2, 0); /* m: 10218 -> 10221,0 */
	reached1[10218] = 1;
	trans[1][10218]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10221]	= settr(10528,0,10222,4691,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10222]	= settr(10529,0,10312,4692,4692,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10308 -> 0,10312 */
	reached1[10308] = 1;
	trans[1][10227]	= settr(10534,0,10308,1,0,".(goto)", 0, 2, 0); /* m: 10308 -> 0,10312 */
	reached1[10308] = 1;
	trans[1][10224]	= settr(10531,0,10225,2,0,"else", 0, 2, 0);
	trans[1][10225]	= settr(10532,0,10312,4693,4693,"(1)", 0, 2, 0); /* m: 10308 -> 10312,0 */
	reached1[10308] = 1;
	trans[1][10229]	= settr(10536,0,10266,4694,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][10266] = settr(10573,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10573,0,10249,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10249] = settr(10556,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10556,2,10247,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10247] = settr(10554,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10554,2,10230,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10554,2,10233,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10554,2,10236,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10554,2,10239,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10554,2,10242,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10554,2,10245,0,0,"IF", 1, 2, 0);
	trans[1][10230]	= settr(10537,4,10264,4695,4695,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10231 -> 10264,0 */
	reached1[10231] = 1;
	trans[1][10231]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10232]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10248]	= settr(10555,0,10264,4696,4696,".(goto)", 1, 2, 0);
	trans[1][10233]	= settr(10540,4,10264,4697,4697,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10234 -> 10264,0 */
	reached1[10234] = 1;
	trans[1][10234]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10235]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10236]	= settr(10543,4,10264,4698,4698,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10237 -> 10264,0 */
	reached1[10237] = 1;
	trans[1][10237]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10238]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10239]	= settr(10546,4,10264,4699,4699,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10240 -> 10264,0 */
	reached1[10240] = 1;
	trans[1][10240]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10241]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10242]	= settr(10549,4,10264,4700,4700,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 10243 -> 10264,0 */
	reached1[10243] = 1;
	trans[1][10243]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10244]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10245]	= settr(10552,2,10246,2,0,"else", 1, 2, 0);
	trans[1][10246]	= settr(10553,4,10264,4701,4701,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10248 -> 0,10264 */
	reached1[10248] = 1;
	T = trans[1][10264] = settr(10571,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10571,0,10250,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10571,0,10262,0,0,"IF", 0, 2, 0);
	trans[1][10250]	= settr(10557,0,10261,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10261] = settr(10568,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10568,0,10257,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10257] = settr(10564,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10564,0,10251,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10564,0,10253,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10564,0,10255,0,0,"IF", 0, 2, 0);
	trans[1][10251]	= settr(10558,0,10259,4702,4702,"((_pid==0))", 0, 2, 0); /* m: 10252 -> 10259,0 */
	reached1[10252] = 1;
	trans[1][10252]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10258]	= settr(10565,0,10259,1,0,".(goto)", 0, 2, 0);
	trans[1][10253]	= settr(10560,0,10259,4703,4703,"((_pid==1))", 0, 2, 0); /* m: 10254 -> 10259,0 */
	reached1[10254] = 1;
	trans[1][10254]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10255]	= settr(10562,0,10259,4704,4704,"((_pid>1))", 0, 2, 0); /* m: 10256 -> 10259,0 */
	reached1[10256] = 1;
	trans[1][10256]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10259]	= settr(10566,0,10260,4705,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10260]	= settr(10567,0,10312,4706,4706,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10308 -> 0,10312 */
	reached1[10308] = 1;
	trans[1][10265]	= settr(10572,0,10308,1,0,".(goto)", 0, 2, 0); /* m: 10308 -> 0,10312 */
	reached1[10308] = 1;
	trans[1][10262]	= settr(10569,0,10263,2,0,"else", 0, 2, 0);
	trans[1][10263]	= settr(10570,0,10312,4707,4707,"(1)", 0, 2, 0); /* m: 10308 -> 10312,0 */
	reached1[10308] = 1;
	trans[1][10267]	= settr(10574,0,10304,4708,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][10304] = settr(10611,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10611,0,10287,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10287] = settr(10594,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10594,2,10285,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10285] = settr(10592,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10592,2,10268,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10592,2,10271,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10592,2,10274,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10592,2,10277,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10592,2,10280,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10592,2,10283,0,0,"IF", 1, 2, 0);
	trans[1][10268]	= settr(10575,4,10302,4709,4709,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10269 -> 10302,0 */
	reached1[10269] = 1;
	trans[1][10269]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10270]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10286]	= settr(10593,0,10302,4710,4710,".(goto)", 1, 2, 0);
	trans[1][10271]	= settr(10578,4,10302,4711,4711,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10272 -> 10302,0 */
	reached1[10272] = 1;
	trans[1][10272]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10273]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10274]	= settr(10581,4,10302,4712,4712,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10275 -> 10302,0 */
	reached1[10275] = 1;
	trans[1][10275]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10276]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10277]	= settr(10584,4,10302,4713,4713,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10278 -> 10302,0 */
	reached1[10278] = 1;
	trans[1][10278]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10279]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10280]	= settr(10587,4,10302,4714,4714,"((STOP==ABORT))", 1, 2, 0); /* m: 10281 -> 10302,0 */
	reached1[10281] = 1;
	trans[1][10281]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10282]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10283]	= settr(10590,2,10284,2,0,"else", 1, 2, 0);
	trans[1][10284]	= settr(10591,4,10302,4715,4715,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10286 -> 0,10302 */
	reached1[10286] = 1;
	T = trans[1][10302] = settr(10609,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10609,0,10288,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10609,0,10300,0,0,"IF", 0, 2, 0);
	trans[1][10288]	= settr(10595,0,10299,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10299] = settr(10606,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10606,0,10295,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10295] = settr(10602,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10602,0,10289,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10602,0,10291,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10602,0,10293,0,0,"IF", 0, 2, 0);
	trans[1][10289]	= settr(10596,0,10297,4716,4716,"((_pid==0))", 0, 2, 0); /* m: 10290 -> 10297,0 */
	reached1[10290] = 1;
	trans[1][10290]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10296]	= settr(10603,0,10297,1,0,".(goto)", 0, 2, 0);
	trans[1][10291]	= settr(10598,0,10297,4717,4717,"((_pid==1))", 0, 2, 0); /* m: 10292 -> 10297,0 */
	reached1[10292] = 1;
	trans[1][10292]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10293]	= settr(10600,0,10297,4718,4718,"((_pid>1))", 0, 2, 0); /* m: 10294 -> 10297,0 */
	reached1[10294] = 1;
	trans[1][10294]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10297]	= settr(10604,0,10298,4719,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10298]	= settr(10605,0,10312,4720,4720,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10308 -> 0,10312 */
	reached1[10308] = 1;
	trans[1][10303]	= settr(10610,0,10308,1,0,".(goto)", 0, 2, 0); /* m: 10308 -> 0,10312 */
	reached1[10308] = 1;
	trans[1][10300]	= settr(10607,0,10301,2,0,"else", 0, 2, 0);
	trans[1][10301]	= settr(10608,0,10312,4721,4721,"(1)", 0, 2, 0); /* m: 10308 -> 10312,0 */
	reached1[10308] = 1;
	trans[1][10308]	= settr(10615,0,10312,4722,4722,"j = (j-1)", 0, 2, 0);
	trans[1][10309]	= settr(10616,0,10310,2,0,"else", 0, 2, 0);
	trans[1][10310]	= settr(10617,0,11138,4723,4723,"j = 1", 0, 2, 0);
	trans[1][10311]	= settr(10618,0,11138,1,0,"goto :b72", 0, 2, 0);
	trans[1][10314]	= settr(10621,0,11138,1,0,"break", 0, 2, 0);
	trans[1][10546]	= settr(10853,0,11138,1,0,".(goto)", 0, 2, 0);
	trans[1][10319]	= settr(10626,0,10544,2,0,"else", 0, 2, 0);
	T = trans[ 1][10544] = settr(10851,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10851,0,10320,0,0,"sub-sequence", 0, 2, 0);
	trans[1][10320]	= settr(10627,0,10485,4724,0,"printf('Supervisor propagating command %e...\\n',8)", 0, 2, 0);
	T = trans[ 1][10485] = settr(10792,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10792,0,10482,0,0,"sub-sequence", 0, 2, 0);
	trans[1][10483]	= settr(10790,0,10482,1,0,".(goto)", 0, 2, 0);
	T = trans[1][10482] = settr(10789,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(10789,0,10321,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(10789,0,10479,0,0,"DO", 0, 2, 0);
	trans[1][10321]	= settr(10628,0,10477,4725,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][10477] = settr(10784,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10784,0,10475,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10475] = settr(10782,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10782,0,10322,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10782,0,10361,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10782,0,10399,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10782,0,10437,0,0,"IF", 0, 2, 0);
	trans[1][10322]	= settr(10629,0,10360,4726,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][10360] = settr(10667,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10667,0,10342,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10342] = settr(10649,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10649,2,10340,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10340] = settr(10647,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10647,2,10323,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10647,2,10326,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10647,2,10329,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10647,2,10332,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10647,2,10335,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10647,2,10338,0,0,"IF", 1, 2, 0);
	trans[1][10323]	= settr(10630,4,10343,4727,4727,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10324 -> 10343,0 */
	reached1[10324] = 1;
	trans[1][10324]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10325]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10341]	= settr(10648,0,10343,4728,4728,".(goto)", 1, 2, 0);
	trans[1][10326]	= settr(10633,4,10343,4729,4729,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10327 -> 10343,0 */
	reached1[10327] = 1;
	trans[1][10327]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10328]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10329]	= settr(10636,4,10343,4730,4730,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10330 -> 10343,0 */
	reached1[10330] = 1;
	trans[1][10330]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10331]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10332]	= settr(10639,4,10343,4731,4731,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10333 -> 10343,0 */
	reached1[10333] = 1;
	trans[1][10333]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10334]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10335]	= settr(10642,4,10343,4732,4732,"((START==ABORT))", 1, 2, 0); /* m: 10336 -> 10343,0 */
	reached1[10336] = 1;
	trans[1][10336]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10337]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10338]	= settr(10645,2,10339,2,0,"else", 1, 2, 0);
	trans[1][10339]	= settr(10646,4,10343,4733,4733,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10341 -> 0,10343 */
	reached1[10341] = 1;
	trans[1][10343]	= settr(10650,0,10358,4734,4734,"(run Thread(j))", 0, 2, 0);
	T = trans[1][10358] = settr(10665,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(10665,0,10344,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(10665,0,10356,0,0,"IF", 0, 2, 0);
	trans[1][10344]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][10355] = settr(10662,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10662,0,10351,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10351] = settr(10658,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10658,0,10345,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10658,0,10347,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10658,0,10349,0,0,"IF", 0, 2, 0);
	trans[1][10345]	= settr(10652,0,10353,4735,4735,"((_pid==0))", 0, 2, 0); /* m: 10346 -> 10353,0 */
	reached1[10346] = 1;
	trans[1][10346]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10352]	= settr(10659,0,10353,1,0,".(goto)", 0, 2, 0);
	trans[1][10347]	= settr(10654,0,10353,4736,4736,"((_pid==1))", 0, 2, 0); /* m: 10348 -> 10353,0 */
	reached1[10348] = 1;
	trans[1][10348]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10349]	= settr(10656,0,10353,4737,4737,"((_pid>1))", 0, 2, 0); /* m: 10350 -> 10353,0 */
	reached1[10350] = 1;
	trans[1][10350]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10353]	= settr(10660,0,10354,4738,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10354]	= settr(10661,0,10482,4739,4739,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10478 -> 0,10482 */
	reached1[10478] = 1;
	trans[1][10359]	= settr(10666,0,10478,1,0,".(goto)", 0, 2, 0); /* m: 10478 -> 0,10482 */
	reached1[10478] = 1;
	trans[1][10356]	= settr(10663,0,10357,2,0,"else", 0, 2, 0);
	trans[1][10357]	= settr(10664,0,10482,4740,4740,"(1)", 0, 2, 0); /* m: 10478 -> 10482,0 */
	reached1[10478] = 1;
	trans[1][10476]	= settr(10783,0,10478,1,0,".(goto)", 0, 2, 0); /* m: 10478 -> 0,10482 */
	reached1[10478] = 1;
	trans[1][10361]	= settr(10668,0,10398,4741,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][10398] = settr(10705,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10705,0,10381,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10381] = settr(10688,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10688,2,10379,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10379] = settr(10686,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10686,2,10362,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10686,2,10365,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10686,2,10368,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10686,2,10371,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10686,2,10374,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10686,2,10377,0,0,"IF", 1, 2, 0);
	trans[1][10362]	= settr(10669,4,10396,4742,4742,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10363 -> 10396,0 */
	reached1[10363] = 1;
	trans[1][10363]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10364]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10380]	= settr(10687,0,10396,4743,4743,".(goto)", 1, 2, 0);
	trans[1][10365]	= settr(10672,4,10396,4744,4744,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10366 -> 10396,0 */
	reached1[10366] = 1;
	trans[1][10366]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10367]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10368]	= settr(10675,4,10396,4745,4745,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10369 -> 10396,0 */
	reached1[10369] = 1;
	trans[1][10369]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10370]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10371]	= settr(10678,4,10396,4746,4746,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10372 -> 10396,0 */
	reached1[10372] = 1;
	trans[1][10372]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10373]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10374]	= settr(10681,4,10396,4747,4747,"((PAUSE==ABORT))", 1, 2, 0); /* m: 10375 -> 10396,0 */
	reached1[10375] = 1;
	trans[1][10375]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10376]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10377]	= settr(10684,2,10378,2,0,"else", 1, 2, 0);
	trans[1][10378]	= settr(10685,4,10396,4748,4748,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10380 -> 0,10396 */
	reached1[10380] = 1;
	T = trans[1][10396] = settr(10703,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(10703,0,10382,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(10703,0,10394,0,0,"IF", 0, 2, 0);
	trans[1][10382]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][10393] = settr(10700,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10700,0,10389,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10389] = settr(10696,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10696,0,10383,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10696,0,10385,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10696,0,10387,0,0,"IF", 0, 2, 0);
	trans[1][10383]	= settr(10690,0,10391,4749,4749,"((_pid==0))", 0, 2, 0); /* m: 10384 -> 10391,0 */
	reached1[10384] = 1;
	trans[1][10384]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10390]	= settr(10697,0,10391,1,0,".(goto)", 0, 2, 0);
	trans[1][10385]	= settr(10692,0,10391,4750,4750,"((_pid==1))", 0, 2, 0); /* m: 10386 -> 10391,0 */
	reached1[10386] = 1;
	trans[1][10386]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10387]	= settr(10694,0,10391,4751,4751,"((_pid>1))", 0, 2, 0); /* m: 10388 -> 10391,0 */
	reached1[10388] = 1;
	trans[1][10388]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10391]	= settr(10698,0,10392,4752,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10392]	= settr(10699,0,10482,4753,4753,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10478 -> 0,10482 */
	reached1[10478] = 1;
	trans[1][10397]	= settr(10704,0,10478,1,0,".(goto)", 0, 2, 0); /* m: 10478 -> 0,10482 */
	reached1[10478] = 1;
	trans[1][10394]	= settr(10701,0,10395,2,0,"else", 0, 2, 0);
	trans[1][10395]	= settr(10702,0,10482,4754,4754,"(1)", 0, 2, 0); /* m: 10478 -> 10482,0 */
	reached1[10478] = 1;
	trans[1][10399]	= settr(10706,0,10436,4755,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][10436] = settr(10743,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10743,0,10419,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10419] = settr(10726,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10726,2,10417,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10417] = settr(10724,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10724,2,10400,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10724,2,10403,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10724,2,10406,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10724,2,10409,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10724,2,10412,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10724,2,10415,0,0,"IF", 1, 2, 0);
	trans[1][10400]	= settr(10707,4,10434,4756,4756,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10401 -> 10434,0 */
	reached1[10401] = 1;
	trans[1][10401]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10402]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10418]	= settr(10725,0,10434,4757,4757,".(goto)", 1, 2, 0);
	trans[1][10403]	= settr(10710,4,10434,4758,4758,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10404 -> 10434,0 */
	reached1[10404] = 1;
	trans[1][10404]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10405]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10406]	= settr(10713,4,10434,4759,4759,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10407 -> 10434,0 */
	reached1[10407] = 1;
	trans[1][10407]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10408]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10409]	= settr(10716,4,10434,4760,4760,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10410 -> 10434,0 */
	reached1[10410] = 1;
	trans[1][10410]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10411]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10412]	= settr(10719,4,10434,4761,4761,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 10413 -> 10434,0 */
	reached1[10413] = 1;
	trans[1][10413]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10414]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10415]	= settr(10722,2,10416,2,0,"else", 1, 2, 0);
	trans[1][10416]	= settr(10723,4,10434,4762,4762,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10418 -> 0,10434 */
	reached1[10418] = 1;
	T = trans[1][10434] = settr(10741,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(10741,0,10420,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(10741,0,10432,0,0,"IF", 0, 2, 0);
	trans[1][10420]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][10431] = settr(10738,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10738,0,10427,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10427] = settr(10734,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10734,0,10421,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10734,0,10423,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10734,0,10425,0,0,"IF", 0, 2, 0);
	trans[1][10421]	= settr(10728,0,10429,4763,4763,"((_pid==0))", 0, 2, 0); /* m: 10422 -> 10429,0 */
	reached1[10422] = 1;
	trans[1][10422]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10428]	= settr(10735,0,10429,1,0,".(goto)", 0, 2, 0);
	trans[1][10423]	= settr(10730,0,10429,4764,4764,"((_pid==1))", 0, 2, 0); /* m: 10424 -> 10429,0 */
	reached1[10424] = 1;
	trans[1][10424]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10425]	= settr(10732,0,10429,4765,4765,"((_pid>1))", 0, 2, 0); /* m: 10426 -> 10429,0 */
	reached1[10426] = 1;
	trans[1][10426]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10429]	= settr(10736,0,10430,4766,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10430]	= settr(10737,0,10482,4767,4767,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10478 -> 0,10482 */
	reached1[10478] = 1;
	trans[1][10435]	= settr(10742,0,10478,1,0,".(goto)", 0, 2, 0); /* m: 10478 -> 0,10482 */
	reached1[10478] = 1;
	trans[1][10432]	= settr(10739,0,10433,2,0,"else", 0, 2, 0);
	trans[1][10433]	= settr(10740,0,10482,4768,4768,"(1)", 0, 2, 0); /* m: 10478 -> 10482,0 */
	reached1[10478] = 1;
	trans[1][10437]	= settr(10744,0,10474,4769,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][10474] = settr(10781,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10781,0,10457,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10457] = settr(10764,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10764,2,10455,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10455] = settr(10762,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10762,2,10438,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10762,2,10441,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10762,2,10444,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10762,2,10447,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10762,2,10450,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10762,2,10453,0,0,"IF", 1, 2, 0);
	trans[1][10438]	= settr(10745,4,10472,4770,4770,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10439 -> 10472,0 */
	reached1[10439] = 1;
	trans[1][10439]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10440]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10456]	= settr(10763,0,10472,4771,4771,".(goto)", 1, 2, 0);
	trans[1][10441]	= settr(10748,4,10472,4772,4772,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10442 -> 10472,0 */
	reached1[10442] = 1;
	trans[1][10442]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10443]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10444]	= settr(10751,4,10472,4773,4773,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10445 -> 10472,0 */
	reached1[10445] = 1;
	trans[1][10445]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10446]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10447]	= settr(10754,4,10472,4774,4774,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10448 -> 10472,0 */
	reached1[10448] = 1;
	trans[1][10448]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10449]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10450]	= settr(10757,4,10472,4775,4775,"((STOP==ABORT))", 1, 2, 0); /* m: 10451 -> 10472,0 */
	reached1[10451] = 1;
	trans[1][10451]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10452]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10453]	= settr(10760,2,10454,2,0,"else", 1, 2, 0);
	trans[1][10454]	= settr(10761,4,10472,4776,4776,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10456 -> 0,10472 */
	reached1[10456] = 1;
	T = trans[1][10472] = settr(10779,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(10779,0,10458,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(10779,0,10470,0,0,"IF", 0, 2, 0);
	trans[1][10458]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][10469] = settr(10776,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10776,0,10465,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10465] = settr(10772,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10772,0,10459,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10772,0,10461,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10772,0,10463,0,0,"IF", 0, 2, 0);
	trans[1][10459]	= settr(10766,0,10467,4777,4777,"((_pid==0))", 0, 2, 0); /* m: 10460 -> 10467,0 */
	reached1[10460] = 1;
	trans[1][10460]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10466]	= settr(10773,0,10467,1,0,".(goto)", 0, 2, 0);
	trans[1][10461]	= settr(10768,0,10467,4778,4778,"((_pid==1))", 0, 2, 0); /* m: 10462 -> 10467,0 */
	reached1[10462] = 1;
	trans[1][10462]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10463]	= settr(10770,0,10467,4779,4779,"((_pid>1))", 0, 2, 0); /* m: 10464 -> 10467,0 */
	reached1[10464] = 1;
	trans[1][10464]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10467]	= settr(10774,0,10468,4780,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10468]	= settr(10775,0,10482,4781,4781,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10478 -> 0,10482 */
	reached1[10478] = 1;
	trans[1][10473]	= settr(10780,0,10478,1,0,".(goto)", 0, 2, 0); /* m: 10478 -> 0,10482 */
	reached1[10478] = 1;
	trans[1][10470]	= settr(10777,0,10471,2,0,"else", 0, 2, 0);
	trans[1][10471]	= settr(10778,0,10482,4782,4782,"(1)", 0, 2, 0); /* m: 10478 -> 10482,0 */
	reached1[10478] = 1;
	trans[1][10478]	= settr(10785,0,10482,4783,4783,"j = (j+1)", 0, 2, 0);
	trans[1][10479]	= settr(10786,0,10480,2,0,"else", 0, 2, 0);
	trans[1][10480]	= settr(10787,0,10541,4784,4784,"j = 1", 0, 2, 0);
	trans[1][10481]	= settr(10788,0,10541,1,0,"goto :b73", 0, 2, 0);
	trans[1][10484]	= settr(10791,0,10541,1,0,"break", 0, 2, 0);
	trans[1][10542]	= settr(10849,0,10541,1,0,".(goto)", 0, 2, 0);
	T = trans[1][10541] = settr(10848,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(10848,0,10486,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(10848,0,10538,0,0,"DO", 0, 2, 0);
	trans[1][10486]	= settr(10793,0,10535,4785,0,"((j<3))", 0, 2, 0);
	T = trans[1][10535] = settr(10842,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10842,0,10487,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10842,0,10499,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10842,0,10511,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10842,0,10523,0,0,"IF", 0, 2, 0);
	trans[1][10487]	= settr(10794,0,10498,4786,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][10498] = settr(10805,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10805,0,10494,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10494] = settr(10801,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10801,0,10488,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10801,0,10490,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10801,0,10492,0,0,"IF", 0, 2, 0);
	trans[1][10488]	= settr(10795,0,10496,4787,4787,"((_pid==0))", 0, 2, 0); /* m: 10489 -> 10496,0 */
	reached1[10489] = 1;
	trans[1][10489]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10495]	= settr(10802,0,10496,1,0,".(goto)", 0, 2, 0);
	trans[1][10490]	= settr(10797,0,10496,4788,4788,"((_pid==1))", 0, 2, 0); /* m: 10491 -> 10496,0 */
	reached1[10491] = 1;
	trans[1][10491]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10492]	= settr(10799,0,10496,4789,4789,"((_pid>1))", 0, 2, 0); /* m: 10493 -> 10496,0 */
	reached1[10493] = 1;
	trans[1][10493]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10496]	= settr(10803,0,10497,4790,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10497]	= settr(10804,0,10541,4791,4791,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10537 -> 0,10541 */
	reached1[10537] = 1;
	trans[1][10536]	= settr(10843,0,10537,1,0,".(goto)", 0, 2, 0); /* m: 10537 -> 0,10541 */
	reached1[10537] = 1;
	trans[1][10499]	= settr(10806,0,10510,4792,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][10510] = settr(10817,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10817,0,10506,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10506] = settr(10813,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10813,0,10500,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10813,0,10502,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10813,0,10504,0,0,"IF", 0, 2, 0);
	trans[1][10500]	= settr(10807,0,10508,4793,4793,"((_pid==0))", 0, 2, 0); /* m: 10501 -> 10508,0 */
	reached1[10501] = 1;
	trans[1][10501]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10507]	= settr(10814,0,10508,1,0,".(goto)", 0, 2, 0);
	trans[1][10502]	= settr(10809,0,10508,4794,4794,"((_pid==1))", 0, 2, 0); /* m: 10503 -> 10508,0 */
	reached1[10503] = 1;
	trans[1][10503]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10504]	= settr(10811,0,10508,4795,4795,"((_pid>1))", 0, 2, 0); /* m: 10505 -> 10508,0 */
	reached1[10505] = 1;
	trans[1][10505]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10508]	= settr(10815,0,10509,4796,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10509]	= settr(10816,0,10541,4797,4797,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10537 -> 0,10541 */
	reached1[10537] = 1;
	trans[1][10511]	= settr(10818,0,10522,4798,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][10522] = settr(10829,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10829,0,10518,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10518] = settr(10825,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10825,0,10512,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10825,0,10514,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10825,0,10516,0,0,"IF", 0, 2, 0);
	trans[1][10512]	= settr(10819,0,10520,4799,4799,"((_pid==0))", 0, 2, 0); /* m: 10513 -> 10520,0 */
	reached1[10513] = 1;
	trans[1][10513]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10519]	= settr(10826,0,10520,1,0,".(goto)", 0, 2, 0);
	trans[1][10514]	= settr(10821,0,10520,4800,4800,"((_pid==1))", 0, 2, 0); /* m: 10515 -> 10520,0 */
	reached1[10515] = 1;
	trans[1][10515]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10516]	= settr(10823,0,10520,4801,4801,"((_pid>1))", 0, 2, 0); /* m: 10517 -> 10520,0 */
	reached1[10517] = 1;
	trans[1][10517]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10520]	= settr(10827,0,10521,4802,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10521]	= settr(10828,0,10541,4803,4803,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10537 -> 0,10541 */
	reached1[10537] = 1;
	trans[1][10523]	= settr(10830,0,10534,4804,0,"((8==STOP))", 0, 2, 0);
	T = trans[ 1][10534] = settr(10841,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10841,0,10530,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10530] = settr(10837,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10837,0,10524,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10837,0,10526,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10837,0,10528,0,0,"IF", 0, 2, 0);
	trans[1][10524]	= settr(10831,0,10532,4805,4805,"((_pid==0))", 0, 2, 0); /* m: 10525 -> 10532,0 */
	reached1[10525] = 1;
	trans[1][10525]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10531]	= settr(10838,0,10532,1,0,".(goto)", 0, 2, 0);
	trans[1][10526]	= settr(10833,0,10532,4806,4806,"((_pid==1))", 0, 2, 0); /* m: 10527 -> 10532,0 */
	reached1[10527] = 1;
	trans[1][10527]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10528]	= settr(10835,0,10532,4807,4807,"((_pid>1))", 0, 2, 0); /* m: 10529 -> 10532,0 */
	reached1[10529] = 1;
	trans[1][10529]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10532]	= settr(10839,0,10533,4808,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10533]	= settr(10840,0,10541,4809,4809,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10537 -> 0,10541 */
	reached1[10537] = 1;
	trans[1][10537]	= settr(10844,0,10541,4810,4810,"j = (j+1)", 0, 2, 0);
	trans[1][10538]	= settr(10845,0,10539,2,0,"else", 0, 2, 0);
	trans[1][10539]	= settr(10846,0,11138,4811,4811,"j = 1", 0, 2, 0);
	trans[1][10540]	= settr(10847,0,11138,1,0,"goto :b74", 0, 2, 0);
	trans[1][10543]	= settr(10850,0,11138,1,0,"break", 0, 2, 0);
	trans[1][10550]	= settr(10857,0,11122,4812,0,"(((9==ABORTING)||(9==STOPPING)))", 0, 2, 0);
	T = trans[ 1][11122] = settr(11429,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11429,0,11120,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11120] = settr(11427,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11427,0,10551,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11427,0,10554,0,0,"IF", 0, 2, 0);
	trans[1][10551]	= settr(10858,0,10552,4813,0,"(((12==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][10552]	= settr(10859,0,10553,4814,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][10553]	= settr(10860,0,11138,4815,4815,"supervisor_started = 1", 1, 2, 0);
	trans[1][11121]	= settr(11428,0,11138,1,0,".(goto)", 0, 2, 0);
	trans[1][10554]	= settr(10861,0,11118,2,0,"else", 0, 2, 0);
	T = trans[1][11118] = settr(11425,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11425,0,10555,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11425,0,10892,0,0,"IF", 0, 2, 0);
	trans[1][10555]	= settr(10862,0,10891,4816,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][10891] = settr(11198,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11198,0,10889,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10889] = settr(11196,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11196,0,10556,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11196,0,10722,0,0,"IF", 0, 2, 0);
	trans[1][10556]	= settr(10863,0,10721,4817,0,"(((12==START)||(12==PAUSED)))", 0, 2, 0);
	T = trans[ 1][10721] = settr(11028,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11028,0,10718,0,0,"sub-sequence", 0, 2, 0);
	trans[1][10719]	= settr(11026,0,10718,1,0,".(goto)", 0, 2, 0);
	T = trans[1][10718] = settr(11025,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(11025,0,10557,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(11025,0,10715,0,0,"DO", 0, 2, 0);
	trans[1][10557]	= settr(10864,0,10713,4818,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][10713] = settr(11020,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11020,0,10711,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10711] = settr(11018,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11018,0,10558,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11018,0,10597,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11018,0,10635,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11018,0,10673,0,0,"IF", 0, 2, 0);
	trans[1][10558]	= settr(10865,0,10596,4819,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][10596] = settr(10903,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10903,0,10578,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10578] = settr(10885,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10885,2,10576,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10576] = settr(10883,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10883,2,10559,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10883,2,10562,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10883,2,10565,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10883,2,10568,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10883,2,10571,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10883,2,10574,0,0,"IF", 1, 2, 0);
	trans[1][10559]	= settr(10866,4,10579,4820,4820,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10560 -> 10579,0 */
	reached1[10560] = 1;
	trans[1][10560]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10561]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10577]	= settr(10884,0,10579,4821,4821,".(goto)", 1, 2, 0);
	trans[1][10562]	= settr(10869,4,10579,4822,4822,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10563 -> 10579,0 */
	reached1[10563] = 1;
	trans[1][10563]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10564]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10565]	= settr(10872,4,10579,4823,4823,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10566 -> 10579,0 */
	reached1[10566] = 1;
	trans[1][10566]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10567]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10568]	= settr(10875,4,10579,4824,4824,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10569 -> 10579,0 */
	reached1[10569] = 1;
	trans[1][10569]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10570]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10571]	= settr(10878,4,10579,4825,4825,"((START==ABORT))", 1, 2, 0); /* m: 10572 -> 10579,0 */
	reached1[10572] = 1;
	trans[1][10572]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10573]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10574]	= settr(10881,2,10575,2,0,"else", 1, 2, 0);
	trans[1][10575]	= settr(10882,4,10579,4826,4826,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10577 -> 0,10579 */
	reached1[10577] = 1;
	trans[1][10579]	= settr(10886,0,10594,4827,4827,"(run Thread(j))", 0, 2, 0);
	T = trans[1][10594] = settr(10901,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10901,0,10580,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10901,0,10592,0,0,"IF", 0, 2, 0);
	trans[1][10580]	= settr(10887,0,10591,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10591] = settr(10898,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10898,0,10587,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10587] = settr(10894,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10894,0,10581,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10894,0,10583,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10894,0,10585,0,0,"IF", 0, 2, 0);
	trans[1][10581]	= settr(10888,0,10589,4828,4828,"((_pid==0))", 0, 2, 0); /* m: 10582 -> 10589,0 */
	reached1[10582] = 1;
	trans[1][10582]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10588]	= settr(10895,0,10589,1,0,".(goto)", 0, 2, 0);
	trans[1][10583]	= settr(10890,0,10589,4829,4829,"((_pid==1))", 0, 2, 0); /* m: 10584 -> 10589,0 */
	reached1[10584] = 1;
	trans[1][10584]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10585]	= settr(10892,0,10589,4830,4830,"((_pid>1))", 0, 2, 0); /* m: 10586 -> 10589,0 */
	reached1[10586] = 1;
	trans[1][10586]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10589]	= settr(10896,0,10590,4831,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10590]	= settr(10897,0,10718,4832,4832,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10714 -> 0,10718 */
	reached1[10714] = 1;
	trans[1][10595]	= settr(10902,0,10714,1,0,".(goto)", 0, 2, 0); /* m: 10714 -> 0,10718 */
	reached1[10714] = 1;
	trans[1][10592]	= settr(10899,0,10593,2,0,"else", 0, 2, 0);
	trans[1][10593]	= settr(10900,0,10718,4833,4833,"(1)", 0, 2, 0); /* m: 10714 -> 10718,0 */
	reached1[10714] = 1;
	trans[1][10712]	= settr(11019,0,10714,1,0,".(goto)", 0, 2, 0); /* m: 10714 -> 0,10718 */
	reached1[10714] = 1;
	trans[1][10597]	= settr(10904,0,10634,4834,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][10634] = settr(10941,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10941,0,10617,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10617] = settr(10924,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10924,2,10615,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10615] = settr(10922,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10922,2,10598,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10922,2,10601,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10922,2,10604,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10922,2,10607,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10922,2,10610,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10922,2,10613,0,0,"IF", 1, 2, 0);
	trans[1][10598]	= settr(10905,4,10632,4835,4835,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10599 -> 10632,0 */
	reached1[10599] = 1;
	trans[1][10599]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10600]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10616]	= settr(10923,0,10632,4836,4836,".(goto)", 1, 2, 0);
	trans[1][10601]	= settr(10908,4,10632,4837,4837,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10602 -> 10632,0 */
	reached1[10602] = 1;
	trans[1][10602]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10603]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10604]	= settr(10911,4,10632,4838,4838,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10605 -> 10632,0 */
	reached1[10605] = 1;
	trans[1][10605]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10606]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10607]	= settr(10914,4,10632,4839,4839,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10608 -> 10632,0 */
	reached1[10608] = 1;
	trans[1][10608]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10609]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10610]	= settr(10917,4,10632,4840,4840,"((PAUSE==ABORT))", 1, 2, 0); /* m: 10611 -> 10632,0 */
	reached1[10611] = 1;
	trans[1][10611]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10612]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10613]	= settr(10920,2,10614,2,0,"else", 1, 2, 0);
	trans[1][10614]	= settr(10921,4,10632,4841,4841,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10616 -> 0,10632 */
	reached1[10616] = 1;
	T = trans[1][10632] = settr(10939,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10939,0,10618,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10939,0,10630,0,0,"IF", 0, 2, 0);
	trans[1][10618]	= settr(10925,0,10629,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10629] = settr(10936,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10936,0,10625,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10625] = settr(10932,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10932,0,10619,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10932,0,10621,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10932,0,10623,0,0,"IF", 0, 2, 0);
	trans[1][10619]	= settr(10926,0,10627,4842,4842,"((_pid==0))", 0, 2, 0); /* m: 10620 -> 10627,0 */
	reached1[10620] = 1;
	trans[1][10620]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10626]	= settr(10933,0,10627,1,0,".(goto)", 0, 2, 0);
	trans[1][10621]	= settr(10928,0,10627,4843,4843,"((_pid==1))", 0, 2, 0); /* m: 10622 -> 10627,0 */
	reached1[10622] = 1;
	trans[1][10622]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10623]	= settr(10930,0,10627,4844,4844,"((_pid>1))", 0, 2, 0); /* m: 10624 -> 10627,0 */
	reached1[10624] = 1;
	trans[1][10624]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10627]	= settr(10934,0,10628,4845,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10628]	= settr(10935,0,10718,4846,4846,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10714 -> 0,10718 */
	reached1[10714] = 1;
	trans[1][10633]	= settr(10940,0,10714,1,0,".(goto)", 0, 2, 0); /* m: 10714 -> 0,10718 */
	reached1[10714] = 1;
	trans[1][10630]	= settr(10937,0,10631,2,0,"else", 0, 2, 0);
	trans[1][10631]	= settr(10938,0,10718,4847,4847,"(1)", 0, 2, 0); /* m: 10714 -> 10718,0 */
	reached1[10714] = 1;
	trans[1][10635]	= settr(10942,0,10672,4848,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][10672] = settr(10979,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10979,0,10655,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10655] = settr(10962,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(10962,2,10653,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10653] = settr(10960,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10960,2,10636,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10960,2,10639,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10960,2,10642,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10960,2,10645,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10960,2,10648,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10960,2,10651,0,0,"IF", 1, 2, 0);
	trans[1][10636]	= settr(10943,4,10670,4849,4849,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10637 -> 10670,0 */
	reached1[10637] = 1;
	trans[1][10637]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10638]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10654]	= settr(10961,0,10670,4850,4850,".(goto)", 1, 2, 0);
	trans[1][10639]	= settr(10946,4,10670,4851,4851,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10640 -> 10670,0 */
	reached1[10640] = 1;
	trans[1][10640]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10641]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10642]	= settr(10949,4,10670,4852,4852,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10643 -> 10670,0 */
	reached1[10643] = 1;
	trans[1][10643]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10644]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10645]	= settr(10952,4,10670,4853,4853,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10646 -> 10670,0 */
	reached1[10646] = 1;
	trans[1][10646]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10647]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10648]	= settr(10955,4,10670,4854,4854,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 10649 -> 10670,0 */
	reached1[10649] = 1;
	trans[1][10649]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10650]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10651]	= settr(10958,2,10652,2,0,"else", 1, 2, 0);
	trans[1][10652]	= settr(10959,4,10670,4855,4855,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10654 -> 0,10670 */
	reached1[10654] = 1;
	T = trans[1][10670] = settr(10977,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10977,0,10656,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10977,0,10668,0,0,"IF", 0, 2, 0);
	trans[1][10656]	= settr(10963,0,10667,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10667] = settr(10974,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(10974,0,10663,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10663] = settr(10970,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10970,0,10657,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(10970,0,10659,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(10970,0,10661,0,0,"IF", 0, 2, 0);
	trans[1][10657]	= settr(10964,0,10665,4856,4856,"((_pid==0))", 0, 2, 0); /* m: 10658 -> 10665,0 */
	reached1[10658] = 1;
	trans[1][10658]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10664]	= settr(10971,0,10665,1,0,".(goto)", 0, 2, 0);
	trans[1][10659]	= settr(10966,0,10665,4857,4857,"((_pid==1))", 0, 2, 0); /* m: 10660 -> 10665,0 */
	reached1[10660] = 1;
	trans[1][10660]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10661]	= settr(10968,0,10665,4858,4858,"((_pid>1))", 0, 2, 0); /* m: 10662 -> 10665,0 */
	reached1[10662] = 1;
	trans[1][10662]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10665]	= settr(10972,0,10666,4859,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10666]	= settr(10973,0,10718,4860,4860,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10714 -> 0,10718 */
	reached1[10714] = 1;
	trans[1][10671]	= settr(10978,0,10714,1,0,".(goto)", 0, 2, 0); /* m: 10714 -> 0,10718 */
	reached1[10714] = 1;
	trans[1][10668]	= settr(10975,0,10669,2,0,"else", 0, 2, 0);
	trans[1][10669]	= settr(10976,0,10718,4861,4861,"(1)", 0, 2, 0); /* m: 10714 -> 10718,0 */
	reached1[10714] = 1;
	trans[1][10673]	= settr(10980,0,10710,4862,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][10710] = settr(11017,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11017,0,10693,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10693] = settr(11000,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11000,2,10691,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10691] = settr(10998,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10998,2,10674,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10998,2,10677,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10998,2,10680,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10998,2,10683,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(10998,2,10686,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(10998,2,10689,0,0,"IF", 1, 2, 0);
	trans[1][10674]	= settr(10981,4,10708,4863,4863,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10675 -> 10708,0 */
	reached1[10675] = 1;
	trans[1][10675]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10676]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10692]	= settr(10999,0,10708,4864,4864,".(goto)", 1, 2, 0);
	trans[1][10677]	= settr(10984,4,10708,4865,4865,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10678 -> 10708,0 */
	reached1[10678] = 1;
	trans[1][10678]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10679]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10680]	= settr(10987,4,10708,4866,4866,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10681 -> 10708,0 */
	reached1[10681] = 1;
	trans[1][10681]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10682]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10683]	= settr(10990,4,10708,4867,4867,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10684 -> 10708,0 */
	reached1[10684] = 1;
	trans[1][10684]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10685]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10686]	= settr(10993,4,10708,4868,4868,"((STOP==ABORT))", 1, 2, 0); /* m: 10687 -> 10708,0 */
	reached1[10687] = 1;
	trans[1][10687]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10688]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10689]	= settr(10996,2,10690,2,0,"else", 1, 2, 0);
	trans[1][10690]	= settr(10997,4,10708,4869,4869,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10692 -> 0,10708 */
	reached1[10692] = 1;
	T = trans[1][10708] = settr(11015,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11015,0,10694,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11015,0,10706,0,0,"IF", 0, 2, 0);
	trans[1][10694]	= settr(11001,0,10705,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10705] = settr(11012,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11012,0,10701,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10701] = settr(11008,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11008,0,10695,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11008,0,10697,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11008,0,10699,0,0,"IF", 0, 2, 0);
	trans[1][10695]	= settr(11002,0,10703,4870,4870,"((_pid==0))", 0, 2, 0); /* m: 10696 -> 10703,0 */
	reached1[10696] = 1;
	trans[1][10696]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10702]	= settr(11009,0,10703,1,0,".(goto)", 0, 2, 0);
	trans[1][10697]	= settr(11004,0,10703,4871,4871,"((_pid==1))", 0, 2, 0); /* m: 10698 -> 10703,0 */
	reached1[10698] = 1;
	trans[1][10698]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10699]	= settr(11006,0,10703,4872,4872,"((_pid>1))", 0, 2, 0); /* m: 10700 -> 10703,0 */
	reached1[10700] = 1;
	trans[1][10700]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10703]	= settr(11010,0,10704,4873,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10704]	= settr(11011,0,10718,4874,4874,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10714 -> 0,10718 */
	reached1[10714] = 1;
	trans[1][10709]	= settr(11016,0,10714,1,0,".(goto)", 0, 2, 0); /* m: 10714 -> 0,10718 */
	reached1[10714] = 1;
	trans[1][10706]	= settr(11013,0,10707,2,0,"else", 0, 2, 0);
	trans[1][10707]	= settr(11014,0,10718,4875,4875,"(1)", 0, 2, 0); /* m: 10714 -> 10718,0 */
	reached1[10714] = 1;
	trans[1][10714]	= settr(11021,0,10718,4876,4876,"j = (j+1)", 0, 2, 0);
	trans[1][10715]	= settr(11022,0,10716,2,0,"else", 0, 2, 0);
	trans[1][10716]	= settr(11023,0,11138,4877,4877,"j = 1", 0, 2, 0);
	trans[1][10717]	= settr(11024,0,11138,1,0,"goto :b75", 0, 2, 0);
	trans[1][10720]	= settr(11027,0,11138,1,0,"break", 0, 2, 0);
	trans[1][10890]	= settr(11197,0,11138,1,0,".(goto)", 0, 2, 0);
	trans[1][10722]	= settr(11029,0,10888,2,0,"else", 0, 2, 0);
	T = trans[ 1][10888] = settr(11195,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11195,0,10723,0,0,"sub-sequence", 0, 2, 0);
	trans[1][10723]	= settr(11030,0,10885,4878,4878,"j = (3-1)", 0, 2, 0);
	trans[1][10886]	= settr(11193,0,10885,1,0,".(goto)", 0, 2, 0);
	T = trans[1][10885] = settr(11192,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(11192,0,10724,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(11192,0,10882,0,0,"DO", 0, 2, 0);
	trans[1][10724]	= settr(11031,0,10880,4879,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][10880] = settr(11187,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11187,0,10878,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10878] = settr(11185,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11185,0,10725,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11185,0,10764,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11185,0,10802,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11185,0,10840,0,0,"IF", 0, 2, 0);
	trans[1][10725]	= settr(11032,0,10763,4880,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][10763] = settr(11070,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11070,0,10745,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10745] = settr(11052,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11052,2,10743,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10743] = settr(11050,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11050,2,10726,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11050,2,10729,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11050,2,10732,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11050,2,10735,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11050,2,10738,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11050,2,10741,0,0,"IF", 1, 2, 0);
	trans[1][10726]	= settr(11033,4,10746,4881,4881,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10727 -> 10746,0 */
	reached1[10727] = 1;
	trans[1][10727]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10728]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10744]	= settr(11051,0,10746,4882,4882,".(goto)", 1, 2, 0);
	trans[1][10729]	= settr(11036,4,10746,4883,4883,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10730 -> 10746,0 */
	reached1[10730] = 1;
	trans[1][10730]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10731]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10732]	= settr(11039,4,10746,4884,4884,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10733 -> 10746,0 */
	reached1[10733] = 1;
	trans[1][10733]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10734]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10735]	= settr(11042,4,10746,4885,4885,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10736 -> 10746,0 */
	reached1[10736] = 1;
	trans[1][10736]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10737]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10738]	= settr(11045,4,10746,4886,4886,"((START==ABORT))", 1, 2, 0); /* m: 10739 -> 10746,0 */
	reached1[10739] = 1;
	trans[1][10739]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10740]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10741]	= settr(11048,2,10742,2,0,"else", 1, 2, 0);
	trans[1][10742]	= settr(11049,4,10746,4887,4887,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10744 -> 0,10746 */
	reached1[10744] = 1;
	trans[1][10746]	= settr(11053,0,10761,4888,4888,"(run Thread(j))", 0, 2, 0);
	T = trans[1][10761] = settr(11068,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11068,0,10747,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11068,0,10759,0,0,"IF", 0, 2, 0);
	trans[1][10747]	= settr(11054,0,10758,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10758] = settr(11065,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11065,0,10754,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10754] = settr(11061,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11061,0,10748,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11061,0,10750,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11061,0,10752,0,0,"IF", 0, 2, 0);
	trans[1][10748]	= settr(11055,0,10756,4889,4889,"((_pid==0))", 0, 2, 0); /* m: 10749 -> 10756,0 */
	reached1[10749] = 1;
	trans[1][10749]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10755]	= settr(11062,0,10756,1,0,".(goto)", 0, 2, 0);
	trans[1][10750]	= settr(11057,0,10756,4890,4890,"((_pid==1))", 0, 2, 0); /* m: 10751 -> 10756,0 */
	reached1[10751] = 1;
	trans[1][10751]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10752]	= settr(11059,0,10756,4891,4891,"((_pid>1))", 0, 2, 0); /* m: 10753 -> 10756,0 */
	reached1[10753] = 1;
	trans[1][10753]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10756]	= settr(11063,0,10757,4892,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10757]	= settr(11064,0,10885,4893,4893,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10881 -> 0,10885 */
	reached1[10881] = 1;
	trans[1][10762]	= settr(11069,0,10881,1,0,".(goto)", 0, 2, 0); /* m: 10881 -> 0,10885 */
	reached1[10881] = 1;
	trans[1][10759]	= settr(11066,0,10760,2,0,"else", 0, 2, 0);
	trans[1][10760]	= settr(11067,0,10885,4894,4894,"(1)", 0, 2, 0); /* m: 10881 -> 10885,0 */
	reached1[10881] = 1;
	trans[1][10879]	= settr(11186,0,10881,1,0,".(goto)", 0, 2, 0); /* m: 10881 -> 0,10885 */
	reached1[10881] = 1;
	trans[1][10764]	= settr(11071,0,10801,4895,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][10801] = settr(11108,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11108,0,10784,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10784] = settr(11091,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11091,2,10782,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10782] = settr(11089,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11089,2,10765,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11089,2,10768,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11089,2,10771,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11089,2,10774,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11089,2,10777,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11089,2,10780,0,0,"IF", 1, 2, 0);
	trans[1][10765]	= settr(11072,4,10799,4896,4896,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10766 -> 10799,0 */
	reached1[10766] = 1;
	trans[1][10766]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10767]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10783]	= settr(11090,0,10799,4897,4897,".(goto)", 1, 2, 0);
	trans[1][10768]	= settr(11075,4,10799,4898,4898,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10769 -> 10799,0 */
	reached1[10769] = 1;
	trans[1][10769]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10770]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10771]	= settr(11078,4,10799,4899,4899,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10772 -> 10799,0 */
	reached1[10772] = 1;
	trans[1][10772]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10773]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10774]	= settr(11081,4,10799,4900,4900,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10775 -> 10799,0 */
	reached1[10775] = 1;
	trans[1][10775]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10776]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10777]	= settr(11084,4,10799,4901,4901,"((PAUSE==ABORT))", 1, 2, 0); /* m: 10778 -> 10799,0 */
	reached1[10778] = 1;
	trans[1][10778]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10779]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10780]	= settr(11087,2,10781,2,0,"else", 1, 2, 0);
	trans[1][10781]	= settr(11088,4,10799,4902,4902,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10783 -> 0,10799 */
	reached1[10783] = 1;
	T = trans[1][10799] = settr(11106,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11106,0,10785,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11106,0,10797,0,0,"IF", 0, 2, 0);
	trans[1][10785]	= settr(11092,0,10796,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10796] = settr(11103,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11103,0,10792,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10792] = settr(11099,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11099,0,10786,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11099,0,10788,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11099,0,10790,0,0,"IF", 0, 2, 0);
	trans[1][10786]	= settr(11093,0,10794,4903,4903,"((_pid==0))", 0, 2, 0); /* m: 10787 -> 10794,0 */
	reached1[10787] = 1;
	trans[1][10787]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10793]	= settr(11100,0,10794,1,0,".(goto)", 0, 2, 0);
	trans[1][10788]	= settr(11095,0,10794,4904,4904,"((_pid==1))", 0, 2, 0); /* m: 10789 -> 10794,0 */
	reached1[10789] = 1;
	trans[1][10789]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10790]	= settr(11097,0,10794,4905,4905,"((_pid>1))", 0, 2, 0); /* m: 10791 -> 10794,0 */
	reached1[10791] = 1;
	trans[1][10791]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10794]	= settr(11101,0,10795,4906,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10795]	= settr(11102,0,10885,4907,4907,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10881 -> 0,10885 */
	reached1[10881] = 1;
	trans[1][10800]	= settr(11107,0,10881,1,0,".(goto)", 0, 2, 0); /* m: 10881 -> 0,10885 */
	reached1[10881] = 1;
	trans[1][10797]	= settr(11104,0,10798,2,0,"else", 0, 2, 0);
	trans[1][10798]	= settr(11105,0,10885,4908,4908,"(1)", 0, 2, 0); /* m: 10881 -> 10885,0 */
	reached1[10881] = 1;
	trans[1][10802]	= settr(11109,0,10839,4909,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][10839] = settr(11146,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11146,0,10822,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10822] = settr(11129,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11129,2,10820,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10820] = settr(11127,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11127,2,10803,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11127,2,10806,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11127,2,10809,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11127,2,10812,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11127,2,10815,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11127,2,10818,0,0,"IF", 1, 2, 0);
	trans[1][10803]	= settr(11110,4,10837,4910,4910,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10804 -> 10837,0 */
	reached1[10804] = 1;
	trans[1][10804]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10805]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10821]	= settr(11128,0,10837,4911,4911,".(goto)", 1, 2, 0);
	trans[1][10806]	= settr(11113,4,10837,4912,4912,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10807 -> 10837,0 */
	reached1[10807] = 1;
	trans[1][10807]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10808]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10809]	= settr(11116,4,10837,4913,4913,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10810 -> 10837,0 */
	reached1[10810] = 1;
	trans[1][10810]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10811]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10812]	= settr(11119,4,10837,4914,4914,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10813 -> 10837,0 */
	reached1[10813] = 1;
	trans[1][10813]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10814]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10815]	= settr(11122,4,10837,4915,4915,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 10816 -> 10837,0 */
	reached1[10816] = 1;
	trans[1][10816]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10817]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10818]	= settr(11125,2,10819,2,0,"else", 1, 2, 0);
	trans[1][10819]	= settr(11126,4,10837,4916,4916,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10821 -> 0,10837 */
	reached1[10821] = 1;
	T = trans[1][10837] = settr(11144,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11144,0,10823,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11144,0,10835,0,0,"IF", 0, 2, 0);
	trans[1][10823]	= settr(11130,0,10834,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10834] = settr(11141,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11141,0,10830,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10830] = settr(11137,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11137,0,10824,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11137,0,10826,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11137,0,10828,0,0,"IF", 0, 2, 0);
	trans[1][10824]	= settr(11131,0,10832,4917,4917,"((_pid==0))", 0, 2, 0); /* m: 10825 -> 10832,0 */
	reached1[10825] = 1;
	trans[1][10825]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10831]	= settr(11138,0,10832,1,0,".(goto)", 0, 2, 0);
	trans[1][10826]	= settr(11133,0,10832,4918,4918,"((_pid==1))", 0, 2, 0); /* m: 10827 -> 10832,0 */
	reached1[10827] = 1;
	trans[1][10827]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10828]	= settr(11135,0,10832,4919,4919,"((_pid>1))", 0, 2, 0); /* m: 10829 -> 10832,0 */
	reached1[10829] = 1;
	trans[1][10829]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10832]	= settr(11139,0,10833,4920,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10833]	= settr(11140,0,10885,4921,4921,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10881 -> 0,10885 */
	reached1[10881] = 1;
	trans[1][10838]	= settr(11145,0,10881,1,0,".(goto)", 0, 2, 0); /* m: 10881 -> 0,10885 */
	reached1[10881] = 1;
	trans[1][10835]	= settr(11142,0,10836,2,0,"else", 0, 2, 0);
	trans[1][10836]	= settr(11143,0,10885,4922,4922,"(1)", 0, 2, 0); /* m: 10881 -> 10885,0 */
	reached1[10881] = 1;
	trans[1][10840]	= settr(11147,0,10877,4923,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][10877] = settr(11184,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11184,0,10860,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10860] = settr(11167,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11167,2,10858,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10858] = settr(11165,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11165,2,10841,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11165,2,10844,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11165,2,10847,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11165,2,10850,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11165,2,10853,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11165,2,10856,0,0,"IF", 1, 2, 0);
	trans[1][10841]	= settr(11148,4,10875,4924,4924,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10842 -> 10875,0 */
	reached1[10842] = 1;
	trans[1][10842]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10843]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10859]	= settr(11166,0,10875,4925,4925,".(goto)", 1, 2, 0);
	trans[1][10844]	= settr(11151,4,10875,4926,4926,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10845 -> 10875,0 */
	reached1[10845] = 1;
	trans[1][10845]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10846]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10847]	= settr(11154,4,10875,4927,4927,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10848 -> 10875,0 */
	reached1[10848] = 1;
	trans[1][10848]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10849]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10850]	= settr(11157,4,10875,4928,4928,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10851 -> 10875,0 */
	reached1[10851] = 1;
	trans[1][10851]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10852]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10853]	= settr(11160,4,10875,4929,4929,"((STOP==ABORT))", 1, 2, 0); /* m: 10854 -> 10875,0 */
	reached1[10854] = 1;
	trans[1][10854]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10855]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10856]	= settr(11163,2,10857,2,0,"else", 1, 2, 0);
	trans[1][10857]	= settr(11164,4,10875,4930,4930,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10859 -> 0,10875 */
	reached1[10859] = 1;
	T = trans[1][10875] = settr(11182,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11182,0,10861,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11182,0,10873,0,0,"IF", 0, 2, 0);
	trans[1][10861]	= settr(11168,0,10872,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][10872] = settr(11179,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11179,0,10868,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10868] = settr(11175,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11175,0,10862,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11175,0,10864,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11175,0,10866,0,0,"IF", 0, 2, 0);
	trans[1][10862]	= settr(11169,0,10870,4931,4931,"((_pid==0))", 0, 2, 0); /* m: 10863 -> 10870,0 */
	reached1[10863] = 1;
	trans[1][10863]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10869]	= settr(11176,0,10870,1,0,".(goto)", 0, 2, 0);
	trans[1][10864]	= settr(11171,0,10870,4932,4932,"((_pid==1))", 0, 2, 0); /* m: 10865 -> 10870,0 */
	reached1[10865] = 1;
	trans[1][10865]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10866]	= settr(11173,0,10870,4933,4933,"((_pid>1))", 0, 2, 0); /* m: 10867 -> 10870,0 */
	reached1[10867] = 1;
	trans[1][10867]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10870]	= settr(11177,0,10871,4934,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10871]	= settr(11178,0,10885,4935,4935,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 10881 -> 0,10885 */
	reached1[10881] = 1;
	trans[1][10876]	= settr(11183,0,10881,1,0,".(goto)", 0, 2, 0); /* m: 10881 -> 0,10885 */
	reached1[10881] = 1;
	trans[1][10873]	= settr(11180,0,10874,2,0,"else", 0, 2, 0);
	trans[1][10874]	= settr(11181,0,10885,4936,4936,"(1)", 0, 2, 0); /* m: 10881 -> 10885,0 */
	reached1[10881] = 1;
	trans[1][10881]	= settr(11188,0,10885,4937,4937,"j = (j-1)", 0, 2, 0);
	trans[1][10882]	= settr(11189,0,10883,2,0,"else", 0, 2, 0);
	trans[1][10883]	= settr(11190,0,11138,4938,4938,"j = 1", 0, 2, 0);
	trans[1][10884]	= settr(11191,0,11138,1,0,"goto :b76", 0, 2, 0);
	trans[1][10887]	= settr(11194,0,11138,1,0,"break", 0, 2, 0);
	trans[1][11119]	= settr(11426,0,11138,1,0,".(goto)", 0, 2, 0);
	trans[1][10892]	= settr(11199,0,11117,2,0,"else", 0, 2, 0);
	T = trans[ 1][11117] = settr(11424,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11424,0,10893,0,0,"sub-sequence", 0, 2, 0);
	trans[1][10893]	= settr(11200,0,11058,4939,0,"printf('Supervisor propagating command %e...\\n',12)", 0, 2, 0);
	T = trans[ 1][11058] = settr(11365,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11365,0,11055,0,0,"sub-sequence", 0, 2, 0);
	trans[1][11056]	= settr(11363,0,11055,1,0,".(goto)", 0, 2, 0);
	T = trans[1][11055] = settr(11362,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(11362,0,10894,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(11362,0,11052,0,0,"DO", 0, 2, 0);
	trans[1][10894]	= settr(11201,0,11050,4940,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][11050] = settr(11357,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11357,0,11048,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11048] = settr(11355,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11355,0,10895,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11355,0,10934,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11355,0,10972,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11355,0,11010,0,0,"IF", 0, 2, 0);
	trans[1][10895]	= settr(11202,0,10933,4941,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][10933] = settr(11240,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11240,0,10915,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10915] = settr(11222,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11222,2,10913,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10913] = settr(11220,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11220,2,10896,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11220,2,10899,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11220,2,10902,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11220,2,10905,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11220,2,10908,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11220,2,10911,0,0,"IF", 1, 2, 0);
	trans[1][10896]	= settr(11203,4,10916,4942,4942,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10897 -> 10916,0 */
	reached1[10897] = 1;
	trans[1][10897]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10898]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10914]	= settr(11221,0,10916,4943,4943,".(goto)", 1, 2, 0);
	trans[1][10899]	= settr(11206,4,10916,4944,4944,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10900 -> 10916,0 */
	reached1[10900] = 1;
	trans[1][10900]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10901]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10902]	= settr(11209,4,10916,4945,4945,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10903 -> 10916,0 */
	reached1[10903] = 1;
	trans[1][10903]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10904]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10905]	= settr(11212,4,10916,4946,4946,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10906 -> 10916,0 */
	reached1[10906] = 1;
	trans[1][10906]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10907]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10908]	= settr(11215,4,10916,4947,4947,"((START==ABORT))", 1, 2, 0); /* m: 10909 -> 10916,0 */
	reached1[10909] = 1;
	trans[1][10909]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10910]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10911]	= settr(11218,2,10912,2,0,"else", 1, 2, 0);
	trans[1][10912]	= settr(11219,4,10916,4948,4948,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10914 -> 0,10916 */
	reached1[10914] = 1;
	trans[1][10916]	= settr(11223,0,10931,4949,4949,"(run Thread(j))", 0, 2, 0);
	T = trans[1][10931] = settr(11238,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(11238,0,10917,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(11238,0,10929,0,0,"IF", 0, 2, 0);
	trans[1][10917]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][10928] = settr(11235,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11235,0,10924,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10924] = settr(11231,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11231,0,10918,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11231,0,10920,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11231,0,10922,0,0,"IF", 0, 2, 0);
	trans[1][10918]	= settr(11225,0,10926,4950,4950,"((_pid==0))", 0, 2, 0); /* m: 10919 -> 10926,0 */
	reached1[10919] = 1;
	trans[1][10919]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10925]	= settr(11232,0,10926,1,0,".(goto)", 0, 2, 0);
	trans[1][10920]	= settr(11227,0,10926,4951,4951,"((_pid==1))", 0, 2, 0); /* m: 10921 -> 10926,0 */
	reached1[10921] = 1;
	trans[1][10921]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10922]	= settr(11229,0,10926,4952,4952,"((_pid>1))", 0, 2, 0); /* m: 10923 -> 10926,0 */
	reached1[10923] = 1;
	trans[1][10923]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10926]	= settr(11233,0,10927,4953,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10927]	= settr(11234,0,11055,4954,4954,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11051 -> 0,11055 */
	reached1[11051] = 1;
	trans[1][10932]	= settr(11239,0,11051,1,0,".(goto)", 0, 2, 0); /* m: 11051 -> 0,11055 */
	reached1[11051] = 1;
	trans[1][10929]	= settr(11236,0,10930,2,0,"else", 0, 2, 0);
	trans[1][10930]	= settr(11237,0,11055,4955,4955,"(1)", 0, 2, 0); /* m: 11051 -> 11055,0 */
	reached1[11051] = 1;
	trans[1][11049]	= settr(11356,0,11051,1,0,".(goto)", 0, 2, 0); /* m: 11051 -> 0,11055 */
	reached1[11051] = 1;
	trans[1][10934]	= settr(11241,0,10971,4956,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][10971] = settr(11278,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11278,0,10954,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10954] = settr(11261,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11261,2,10952,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10952] = settr(11259,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11259,2,10935,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11259,2,10938,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11259,2,10941,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11259,2,10944,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11259,2,10947,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11259,2,10950,0,0,"IF", 1, 2, 0);
	trans[1][10935]	= settr(11242,4,10969,4957,4957,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10936 -> 10969,0 */
	reached1[10936] = 1;
	trans[1][10936]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10937]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10953]	= settr(11260,0,10969,4958,4958,".(goto)", 1, 2, 0);
	trans[1][10938]	= settr(11245,4,10969,4959,4959,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10939 -> 10969,0 */
	reached1[10939] = 1;
	trans[1][10939]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10940]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10941]	= settr(11248,4,10969,4960,4960,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10942 -> 10969,0 */
	reached1[10942] = 1;
	trans[1][10942]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10943]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10944]	= settr(11251,4,10969,4961,4961,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10945 -> 10969,0 */
	reached1[10945] = 1;
	trans[1][10945]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10946]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10947]	= settr(11254,4,10969,4962,4962,"((PAUSE==ABORT))", 1, 2, 0); /* m: 10948 -> 10969,0 */
	reached1[10948] = 1;
	trans[1][10948]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10949]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10950]	= settr(11257,2,10951,2,0,"else", 1, 2, 0);
	trans[1][10951]	= settr(11258,4,10969,4963,4963,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10953 -> 0,10969 */
	reached1[10953] = 1;
	T = trans[1][10969] = settr(11276,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(11276,0,10955,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(11276,0,10967,0,0,"IF", 0, 2, 0);
	trans[1][10955]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][10966] = settr(11273,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11273,0,10962,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][10962] = settr(11269,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11269,0,10956,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11269,0,10958,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11269,0,10960,0,0,"IF", 0, 2, 0);
	trans[1][10956]	= settr(11263,0,10964,4964,4964,"((_pid==0))", 0, 2, 0); /* m: 10957 -> 10964,0 */
	reached1[10957] = 1;
	trans[1][10957]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10963]	= settr(11270,0,10964,1,0,".(goto)", 0, 2, 0);
	trans[1][10958]	= settr(11265,0,10964,4965,4965,"((_pid==1))", 0, 2, 0); /* m: 10959 -> 10964,0 */
	reached1[10959] = 1;
	trans[1][10959]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10960]	= settr(11267,0,10964,4966,4966,"((_pid>1))", 0, 2, 0); /* m: 10961 -> 10964,0 */
	reached1[10961] = 1;
	trans[1][10961]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][10964]	= settr(11271,0,10965,4967,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][10965]	= settr(11272,0,11055,4968,4968,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11051 -> 0,11055 */
	reached1[11051] = 1;
	trans[1][10970]	= settr(11277,0,11051,1,0,".(goto)", 0, 2, 0); /* m: 11051 -> 0,11055 */
	reached1[11051] = 1;
	trans[1][10967]	= settr(11274,0,10968,2,0,"else", 0, 2, 0);
	trans[1][10968]	= settr(11275,0,11055,4969,4969,"(1)", 0, 2, 0); /* m: 11051 -> 11055,0 */
	reached1[11051] = 1;
	trans[1][10972]	= settr(11279,0,11009,4970,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][11009] = settr(11316,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11316,0,10992,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][10992] = settr(11299,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11299,2,10990,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][10990] = settr(11297,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11297,2,10973,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11297,2,10976,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11297,2,10979,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11297,2,10982,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11297,2,10985,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11297,2,10988,0,0,"IF", 1, 2, 0);
	trans[1][10973]	= settr(11280,4,11007,4971,4971,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10974 -> 11007,0 */
	reached1[10974] = 1;
	trans[1][10974]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][10975]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][10991]	= settr(11298,0,11007,4972,4972,".(goto)", 1, 2, 0);
	trans[1][10976]	= settr(11283,4,11007,4973,4973,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 10977 -> 11007,0 */
	reached1[10977] = 1;
	trans[1][10977]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][10978]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][10979]	= settr(11286,4,11007,4974,4974,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10980 -> 11007,0 */
	reached1[10980] = 1;
	trans[1][10980]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][10981]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][10982]	= settr(11289,4,11007,4975,4975,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 10983 -> 11007,0 */
	reached1[10983] = 1;
	trans[1][10983]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][10984]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][10985]	= settr(11292,4,11007,4976,4976,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 10986 -> 11007,0 */
	reached1[10986] = 1;
	trans[1][10986]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][10987]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][10988]	= settr(11295,2,10989,2,0,"else", 1, 2, 0);
	trans[1][10989]	= settr(11296,4,11007,4977,4977,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 10991 -> 0,11007 */
	reached1[10991] = 1;
	T = trans[1][11007] = settr(11314,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(11314,0,10993,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(11314,0,11005,0,0,"IF", 0, 2, 0);
	trans[1][10993]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][11004] = settr(11311,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11311,0,11000,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11000] = settr(11307,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11307,0,10994,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11307,0,10996,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11307,0,10998,0,0,"IF", 0, 2, 0);
	trans[1][10994]	= settr(11301,0,11002,4978,4978,"((_pid==0))", 0, 2, 0); /* m: 10995 -> 11002,0 */
	reached1[10995] = 1;
	trans[1][10995]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11001]	= settr(11308,0,11002,1,0,".(goto)", 0, 2, 0);
	trans[1][10996]	= settr(11303,0,11002,4979,4979,"((_pid==1))", 0, 2, 0); /* m: 10997 -> 11002,0 */
	reached1[10997] = 1;
	trans[1][10997]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][10998]	= settr(11305,0,11002,4980,4980,"((_pid>1))", 0, 2, 0); /* m: 10999 -> 11002,0 */
	reached1[10999] = 1;
	trans[1][10999]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11002]	= settr(11309,0,11003,4981,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11003]	= settr(11310,0,11055,4982,4982,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11051 -> 0,11055 */
	reached1[11051] = 1;
	trans[1][11008]	= settr(11315,0,11051,1,0,".(goto)", 0, 2, 0); /* m: 11051 -> 0,11055 */
	reached1[11051] = 1;
	trans[1][11005]	= settr(11312,0,11006,2,0,"else", 0, 2, 0);
	trans[1][11006]	= settr(11313,0,11055,4983,4983,"(1)", 0, 2, 0); /* m: 11051 -> 11055,0 */
	reached1[11051] = 1;
	trans[1][11010]	= settr(11317,0,11047,4984,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][11047] = settr(11354,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11354,0,11030,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11030] = settr(11337,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11337,2,11028,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11028] = settr(11335,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11335,2,11011,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11335,2,11014,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11335,2,11017,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11335,2,11020,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11335,2,11023,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11335,2,11026,0,0,"IF", 1, 2, 0);
	trans[1][11011]	= settr(11318,4,11045,4985,4985,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11012 -> 11045,0 */
	reached1[11012] = 1;
	trans[1][11012]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11013]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11029]	= settr(11336,0,11045,4986,4986,".(goto)", 1, 2, 0);
	trans[1][11014]	= settr(11321,4,11045,4987,4987,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11015 -> 11045,0 */
	reached1[11015] = 1;
	trans[1][11015]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11016]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11017]	= settr(11324,4,11045,4988,4988,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11018 -> 11045,0 */
	reached1[11018] = 1;
	trans[1][11018]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11019]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11020]	= settr(11327,4,11045,4989,4989,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11021 -> 11045,0 */
	reached1[11021] = 1;
	trans[1][11021]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11022]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11023]	= settr(11330,4,11045,4990,4990,"((STOP==ABORT))", 1, 2, 0); /* m: 11024 -> 11045,0 */
	reached1[11024] = 1;
	trans[1][11024]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11025]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11026]	= settr(11333,2,11027,2,0,"else", 1, 2, 0);
	trans[1][11027]	= settr(11334,4,11045,4991,4991,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11029 -> 0,11045 */
	reached1[11029] = 1;
	T = trans[1][11045] = settr(11352,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(11352,0,11031,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(11352,0,11043,0,0,"IF", 0, 2, 0);
	trans[1][11031]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][11042] = settr(11349,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11349,0,11038,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11038] = settr(11345,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11345,0,11032,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11345,0,11034,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11345,0,11036,0,0,"IF", 0, 2, 0);
	trans[1][11032]	= settr(11339,0,11040,4992,4992,"((_pid==0))", 0, 2, 0); /* m: 11033 -> 11040,0 */
	reached1[11033] = 1;
	trans[1][11033]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11039]	= settr(11346,0,11040,1,0,".(goto)", 0, 2, 0);
	trans[1][11034]	= settr(11341,0,11040,4993,4993,"((_pid==1))", 0, 2, 0); /* m: 11035 -> 11040,0 */
	reached1[11035] = 1;
	trans[1][11035]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11036]	= settr(11343,0,11040,4994,4994,"((_pid>1))", 0, 2, 0); /* m: 11037 -> 11040,0 */
	reached1[11037] = 1;
	trans[1][11037]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11040]	= settr(11347,0,11041,4995,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11041]	= settr(11348,0,11055,4996,4996,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11051 -> 0,11055 */
	reached1[11051] = 1;
	trans[1][11046]	= settr(11353,0,11051,1,0,".(goto)", 0, 2, 0); /* m: 11051 -> 0,11055 */
	reached1[11051] = 1;
	trans[1][11043]	= settr(11350,0,11044,2,0,"else", 0, 2, 0);
	trans[1][11044]	= settr(11351,0,11055,4997,4997,"(1)", 0, 2, 0); /* m: 11051 -> 11055,0 */
	reached1[11051] = 1;
	trans[1][11051]	= settr(11358,0,11055,4998,4998,"j = (j+1)", 0, 2, 0);
	trans[1][11052]	= settr(11359,0,11053,2,0,"else", 0, 2, 0);
	trans[1][11053]	= settr(11360,0,11114,4999,4999,"j = 1", 0, 2, 0);
	trans[1][11054]	= settr(11361,0,11114,1,0,"goto :b77", 0, 2, 0);
	trans[1][11057]	= settr(11364,0,11114,1,0,"break", 0, 2, 0);
	trans[1][11115]	= settr(11422,0,11114,1,0,".(goto)", 0, 2, 0);
	T = trans[1][11114] = settr(11421,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(11421,0,11059,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(11421,0,11111,0,0,"DO", 0, 2, 0);
	trans[1][11059]	= settr(11366,0,11108,5000,0,"((j<3))", 0, 2, 0);
	T = trans[1][11108] = settr(11415,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11415,0,11060,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11415,0,11072,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11415,0,11084,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11415,0,11096,0,0,"IF", 0, 2, 0);
	trans[1][11060]	= settr(11367,0,11071,5001,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][11071] = settr(11378,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11378,0,11067,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11067] = settr(11374,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11374,0,11061,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11374,0,11063,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11374,0,11065,0,0,"IF", 0, 2, 0);
	trans[1][11061]	= settr(11368,0,11069,5002,5002,"((_pid==0))", 0, 2, 0); /* m: 11062 -> 11069,0 */
	reached1[11062] = 1;
	trans[1][11062]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11068]	= settr(11375,0,11069,1,0,".(goto)", 0, 2, 0);
	trans[1][11063]	= settr(11370,0,11069,5003,5003,"((_pid==1))", 0, 2, 0); /* m: 11064 -> 11069,0 */
	reached1[11064] = 1;
	trans[1][11064]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11065]	= settr(11372,0,11069,5004,5004,"((_pid>1))", 0, 2, 0); /* m: 11066 -> 11069,0 */
	reached1[11066] = 1;
	trans[1][11066]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11069]	= settr(11376,0,11070,5005,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11070]	= settr(11377,0,11114,5006,5006,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11110 -> 0,11114 */
	reached1[11110] = 1;
	trans[1][11109]	= settr(11416,0,11110,1,0,".(goto)", 0, 2, 0); /* m: 11110 -> 0,11114 */
	reached1[11110] = 1;
	trans[1][11072]	= settr(11379,0,11083,5007,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][11083] = settr(11390,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11390,0,11079,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11079] = settr(11386,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11386,0,11073,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11386,0,11075,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11386,0,11077,0,0,"IF", 0, 2, 0);
	trans[1][11073]	= settr(11380,0,11081,5008,5008,"((_pid==0))", 0, 2, 0); /* m: 11074 -> 11081,0 */
	reached1[11074] = 1;
	trans[1][11074]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11080]	= settr(11387,0,11081,1,0,".(goto)", 0, 2, 0);
	trans[1][11075]	= settr(11382,0,11081,5009,5009,"((_pid==1))", 0, 2, 0); /* m: 11076 -> 11081,0 */
	reached1[11076] = 1;
	trans[1][11076]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11077]	= settr(11384,0,11081,5010,5010,"((_pid>1))", 0, 2, 0); /* m: 11078 -> 11081,0 */
	reached1[11078] = 1;
	trans[1][11078]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11081]	= settr(11388,0,11082,5011,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11082]	= settr(11389,0,11114,5012,5012,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11110 -> 0,11114 */
	reached1[11110] = 1;
	trans[1][11084]	= settr(11391,0,11095,5013,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][11095] = settr(11402,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11402,0,11091,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11091] = settr(11398,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11398,0,11085,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11398,0,11087,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11398,0,11089,0,0,"IF", 0, 2, 0);
	trans[1][11085]	= settr(11392,0,11093,5014,5014,"((_pid==0))", 0, 2, 0); /* m: 11086 -> 11093,0 */
	reached1[11086] = 1;
	trans[1][11086]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11092]	= settr(11399,0,11093,1,0,".(goto)", 0, 2, 0);
	trans[1][11087]	= settr(11394,0,11093,5015,5015,"((_pid==1))", 0, 2, 0); /* m: 11088 -> 11093,0 */
	reached1[11088] = 1;
	trans[1][11088]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11089]	= settr(11396,0,11093,5016,5016,"((_pid>1))", 0, 2, 0); /* m: 11090 -> 11093,0 */
	reached1[11090] = 1;
	trans[1][11090]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11093]	= settr(11400,0,11094,5017,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11094]	= settr(11401,0,11114,5018,5018,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11110 -> 0,11114 */
	reached1[11110] = 1;
	trans[1][11096]	= settr(11403,0,11107,5019,0,"((12==STOP))", 0, 2, 0);
	T = trans[ 1][11107] = settr(11414,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11414,0,11103,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11103] = settr(11410,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11410,0,11097,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11410,0,11099,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11410,0,11101,0,0,"IF", 0, 2, 0);
	trans[1][11097]	= settr(11404,0,11105,5020,5020,"((_pid==0))", 0, 2, 0); /* m: 11098 -> 11105,0 */
	reached1[11098] = 1;
	trans[1][11098]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11104]	= settr(11411,0,11105,1,0,".(goto)", 0, 2, 0);
	trans[1][11099]	= settr(11406,0,11105,5021,5021,"((_pid==1))", 0, 2, 0); /* m: 11100 -> 11105,0 */
	reached1[11100] = 1;
	trans[1][11100]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11101]	= settr(11408,0,11105,5022,5022,"((_pid>1))", 0, 2, 0); /* m: 11102 -> 11105,0 */
	reached1[11102] = 1;
	trans[1][11102]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11105]	= settr(11412,0,11106,5023,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11106]	= settr(11413,0,11114,5024,5024,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11110 -> 0,11114 */
	reached1[11110] = 1;
	trans[1][11110]	= settr(11417,0,11114,5025,5025,"j = (j+1)", 0, 2, 0);
	trans[1][11111]	= settr(11418,0,11112,2,0,"else", 0, 2, 0);
	trans[1][11112]	= settr(11419,0,11138,5026,5026,"j = 1", 0, 2, 0);
	trans[1][11113]	= settr(11420,0,11138,1,0,"goto :b78", 0, 2, 0);
	trans[1][11116]	= settr(11423,0,11138,1,0,"break", 0, 2, 0);
	trans[1][11123]	= settr(11430,0,11124,2,0,"else", 0, 2, 0);
	trans[1][11124]	= settr(11431,0,11138,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11138] = settr(11445,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11445,0,11136,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11136] = settr(11443,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11443,0,11128,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11443,0,11130,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11443,0,11132,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11443,0,11134,0,0,"IF", 0, 2, 0);
	trans[1][11128]	= settr(11435,0,11139,5027,5027,"(((0==0)&&(12==0)))", 0, 2, 0); /* m: 11129 -> 11139,0 */
	reached1[11129] = 1;
	trans[1][11129]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, _) -> %e\\n',7,9)",0,0,0);
	trans[1][11137]	= settr(11444,0,11139,1,0,".(goto)", 0, 2, 0);
	trans[1][11130]	= settr(11437,0,11139,5028,5028,"(((0==0)&&(12>0)))", 0, 2, 0); /* m: 11131 -> 11139,0 */
	reached1[11131] = 1;
	trans[1][11131]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, %e) -> %e\\n',7,12,9)",0,0,0);
	trans[1][11132]	= settr(11439,0,11139,5029,5029,"(((0>0)&&(12==0)))", 0, 2, 0); /* m: 11133 -> 11139,0 */
	reached1[11133] = 1;
	trans[1][11133]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, _) -> %e\\n',0,7,9)",0,0,0);
	trans[1][11134]	= settr(11441,0,11139,5030,5030,"(((0>0)&&(12>0)))", 0, 2, 0); /* m: 11135 -> 11139,0 */
	reached1[11135] = 1;
	trans[1][11135]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, %e) -> %e\\n',0,7,12,9)",0,0,0);
	trans[1][11139]	= settr(11446,0,14621,5031,5031,"states[0] = 9", 1, 2, 0);
	trans[1][14620]	= settr(14927,0,14621,1,0,".(goto)", 0, 2, 0);
	trans[1][11141]	= settr(11448,0,11142,5032,0,"((commands[0]==ABORT))", 1, 2, 0);
	trans[1][11142]	= settr(11449,0,12879,5033,0,"assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==STOPPING)))", 1, 2, 0);
	T = trans[ 1][12879] = settr(13186,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13186,0,11153,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11153] = settr(11460,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11460,0,11151,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11151] = settr(11458,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11458,0,11143,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11458,0,11145,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11458,0,11147,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11458,0,11149,0,0,"IF", 0, 2, 0);
	trans[1][11143]	= settr(11450,0,11144,5034,0,"(((0==0)&&(13==0)))", 0, 2, 0);
	trans[1][11144]	= settr(11451,0,11154,5035,0,"printf('Supervisor: (%e, _) -> %e\\n',states[0],10)", 1, 2, 0);
	trans[1][11152]	= settr(11459,0,11154,1,0,".(goto)", 0, 2, 0);
	trans[1][11145]	= settr(11452,0,11146,5036,0,"(((0==0)&&(13>0)))", 0, 2, 0);
	trans[1][11146]	= settr(11453,0,11154,5037,0,"printf('Supervisor: (%e, %e) -> %e\\n',states[0],13,10)", 1, 2, 0);
	trans[1][11147]	= settr(11454,0,11148,5038,0,"(((0>0)&&(13==0)))", 0, 2, 0);
	trans[1][11148]	= settr(11455,0,11154,5039,0,"printf('Worker %d: (%e, _) -> %e\\n',0,states[0],10)", 1, 2, 0);
	trans[1][11149]	= settr(11456,0,11150,5040,0,"(((0>0)&&(13>0)))", 0, 2, 0);
	trans[1][11150]	= settr(11457,0,11154,5041,0,"printf('Worker %d: (%e, %e) -> %e\\n',0,states[0],13,10)", 1, 2, 0);
	trans[1][11154]	= settr(11461,0,12878,5042,5042,"states[0] = 10", 1, 2, 0);
	T = trans[ 1][12878] = settr(13185,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13185,0,12876,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12876] = settr(13183,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13183,0,11155,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13183,0,11728,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13183,0,12301,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13183,0,12874,0,0,"IF", 0, 2, 0);
	trans[1][11155]	= settr(11462,0,11727,5043,0,"((10==RUNNING))", 0, 2, 0);
	T = trans[ 1][11727] = settr(12034,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12034,0,11725,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11725] = settr(12032,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12032,0,11156,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12032,0,11159,0,0,"IF", 0, 2, 0);
	trans[1][11156]	= settr(11463,0,11157,5044,0,"(((6==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][11157]	= settr(11464,0,11158,5045,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][11158]	= settr(11465,0,14616,5046,5046,"supervisor_started = 1", 1, 2, 0);
	trans[1][11726]	= settr(12033,0,14616,1,0,".(goto)", 0, 2, 0);
	trans[1][11159]	= settr(11466,0,11723,2,0,"else", 0, 2, 0);
	T = trans[1][11723] = settr(12030,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12030,0,11160,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12030,0,11497,0,0,"IF", 0, 2, 0);
	trans[1][11160]	= settr(11467,0,11496,5047,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][11496] = settr(11803,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11803,0,11494,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11494] = settr(11801,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11801,0,11161,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11801,0,11327,0,0,"IF", 0, 2, 0);
	trans[1][11161]	= settr(11468,0,11326,5048,0,"(((6==START)||(6==PAUSED)))", 0, 2, 0);
	T = trans[ 1][11326] = settr(11633,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11633,0,11323,0,0,"sub-sequence", 0, 2, 0);
	trans[1][11324]	= settr(11631,0,11323,1,0,".(goto)", 0, 2, 0);
	T = trans[1][11323] = settr(11630,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(11630,0,11162,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(11630,0,11320,0,0,"DO", 0, 2, 0);
	trans[1][11162]	= settr(11469,0,11318,5049,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][11318] = settr(11625,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11625,0,11316,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11316] = settr(11623,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11623,0,11163,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11623,0,11202,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11623,0,11240,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11623,0,11278,0,0,"IF", 0, 2, 0);
	trans[1][11163]	= settr(11470,0,11201,5050,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][11201] = settr(11508,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11508,0,11183,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11183] = settr(11490,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11490,2,11181,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11181] = settr(11488,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11488,2,11164,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11488,2,11167,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11488,2,11170,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11488,2,11173,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11488,2,11176,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11488,2,11179,0,0,"IF", 1, 2, 0);
	trans[1][11164]	= settr(11471,4,11184,5051,5051,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11165 -> 11184,0 */
	reached1[11165] = 1;
	trans[1][11165]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11166]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11182]	= settr(11489,0,11184,5052,5052,".(goto)", 1, 2, 0);
	trans[1][11167]	= settr(11474,4,11184,5053,5053,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11168 -> 11184,0 */
	reached1[11168] = 1;
	trans[1][11168]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11169]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11170]	= settr(11477,4,11184,5054,5054,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11171 -> 11184,0 */
	reached1[11171] = 1;
	trans[1][11171]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11172]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11173]	= settr(11480,4,11184,5055,5055,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11174 -> 11184,0 */
	reached1[11174] = 1;
	trans[1][11174]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11175]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11176]	= settr(11483,4,11184,5056,5056,"((START==ABORT))", 1, 2, 0); /* m: 11177 -> 11184,0 */
	reached1[11177] = 1;
	trans[1][11177]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11178]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11179]	= settr(11486,2,11180,2,0,"else", 1, 2, 0);
	trans[1][11180]	= settr(11487,4,11184,5057,5057,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11182 -> 0,11184 */
	reached1[11182] = 1;
	trans[1][11184]	= settr(11491,0,11199,5058,5058,"(run Thread(j))", 0, 2, 0);
	T = trans[1][11199] = settr(11506,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11506,0,11185,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11506,0,11197,0,0,"IF", 0, 2, 0);
	trans[1][11185]	= settr(11492,0,11196,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11196] = settr(11503,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11503,0,11192,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11192] = settr(11499,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11499,0,11186,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11499,0,11188,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11499,0,11190,0,0,"IF", 0, 2, 0);
	trans[1][11186]	= settr(11493,0,11194,5059,5059,"((_pid==0))", 0, 2, 0); /* m: 11187 -> 11194,0 */
	reached1[11187] = 1;
	trans[1][11187]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11193]	= settr(11500,0,11194,1,0,".(goto)", 0, 2, 0);
	trans[1][11188]	= settr(11495,0,11194,5060,5060,"((_pid==1))", 0, 2, 0); /* m: 11189 -> 11194,0 */
	reached1[11189] = 1;
	trans[1][11189]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11190]	= settr(11497,0,11194,5061,5061,"((_pid>1))", 0, 2, 0); /* m: 11191 -> 11194,0 */
	reached1[11191] = 1;
	trans[1][11191]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11194]	= settr(11501,0,11195,5062,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11195]	= settr(11502,0,11323,5063,5063,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11319 -> 0,11323 */
	reached1[11319] = 1;
	trans[1][11200]	= settr(11507,0,11319,1,0,".(goto)", 0, 2, 0); /* m: 11319 -> 0,11323 */
	reached1[11319] = 1;
	trans[1][11197]	= settr(11504,0,11198,2,0,"else", 0, 2, 0);
	trans[1][11198]	= settr(11505,0,11323,5064,5064,"(1)", 0, 2, 0); /* m: 11319 -> 11323,0 */
	reached1[11319] = 1;
	trans[1][11317]	= settr(11624,0,11319,1,0,".(goto)", 0, 2, 0); /* m: 11319 -> 0,11323 */
	reached1[11319] = 1;
	trans[1][11202]	= settr(11509,0,11239,5065,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][11239] = settr(11546,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11546,0,11222,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11222] = settr(11529,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11529,2,11220,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11220] = settr(11527,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11527,2,11203,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11527,2,11206,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11527,2,11209,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11527,2,11212,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11527,2,11215,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11527,2,11218,0,0,"IF", 1, 2, 0);
	trans[1][11203]	= settr(11510,4,11237,5066,5066,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11204 -> 11237,0 */
	reached1[11204] = 1;
	trans[1][11204]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11205]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11221]	= settr(11528,0,11237,5067,5067,".(goto)", 1, 2, 0);
	trans[1][11206]	= settr(11513,4,11237,5068,5068,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11207 -> 11237,0 */
	reached1[11207] = 1;
	trans[1][11207]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11208]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11209]	= settr(11516,4,11237,5069,5069,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11210 -> 11237,0 */
	reached1[11210] = 1;
	trans[1][11210]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11211]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11212]	= settr(11519,4,11237,5070,5070,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11213 -> 11237,0 */
	reached1[11213] = 1;
	trans[1][11213]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11214]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11215]	= settr(11522,4,11237,5071,5071,"((PAUSE==ABORT))", 1, 2, 0); /* m: 11216 -> 11237,0 */
	reached1[11216] = 1;
	trans[1][11216]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11217]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11218]	= settr(11525,2,11219,2,0,"else", 1, 2, 0);
	trans[1][11219]	= settr(11526,4,11237,5072,5072,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11221 -> 0,11237 */
	reached1[11221] = 1;
	T = trans[1][11237] = settr(11544,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11544,0,11223,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11544,0,11235,0,0,"IF", 0, 2, 0);
	trans[1][11223]	= settr(11530,0,11234,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11234] = settr(11541,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11541,0,11230,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11230] = settr(11537,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11537,0,11224,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11537,0,11226,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11537,0,11228,0,0,"IF", 0, 2, 0);
	trans[1][11224]	= settr(11531,0,11232,5073,5073,"((_pid==0))", 0, 2, 0); /* m: 11225 -> 11232,0 */
	reached1[11225] = 1;
	trans[1][11225]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11231]	= settr(11538,0,11232,1,0,".(goto)", 0, 2, 0);
	trans[1][11226]	= settr(11533,0,11232,5074,5074,"((_pid==1))", 0, 2, 0); /* m: 11227 -> 11232,0 */
	reached1[11227] = 1;
	trans[1][11227]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11228]	= settr(11535,0,11232,5075,5075,"((_pid>1))", 0, 2, 0); /* m: 11229 -> 11232,0 */
	reached1[11229] = 1;
	trans[1][11229]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11232]	= settr(11539,0,11233,5076,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11233]	= settr(11540,0,11323,5077,5077,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11319 -> 0,11323 */
	reached1[11319] = 1;
	trans[1][11238]	= settr(11545,0,11319,1,0,".(goto)", 0, 2, 0); /* m: 11319 -> 0,11323 */
	reached1[11319] = 1;
	trans[1][11235]	= settr(11542,0,11236,2,0,"else", 0, 2, 0);
	trans[1][11236]	= settr(11543,0,11323,5078,5078,"(1)", 0, 2, 0); /* m: 11319 -> 11323,0 */
	reached1[11319] = 1;
	trans[1][11240]	= settr(11547,0,11277,5079,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][11277] = settr(11584,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11584,0,11260,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11260] = settr(11567,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11567,2,11258,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11258] = settr(11565,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11565,2,11241,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11565,2,11244,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11565,2,11247,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11565,2,11250,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11565,2,11253,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11565,2,11256,0,0,"IF", 1, 2, 0);
	trans[1][11241]	= settr(11548,4,11275,5080,5080,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11242 -> 11275,0 */
	reached1[11242] = 1;
	trans[1][11242]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11243]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11259]	= settr(11566,0,11275,5081,5081,".(goto)", 1, 2, 0);
	trans[1][11244]	= settr(11551,4,11275,5082,5082,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11245 -> 11275,0 */
	reached1[11245] = 1;
	trans[1][11245]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11246]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11247]	= settr(11554,4,11275,5083,5083,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11248 -> 11275,0 */
	reached1[11248] = 1;
	trans[1][11248]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11249]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11250]	= settr(11557,4,11275,5084,5084,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11251 -> 11275,0 */
	reached1[11251] = 1;
	trans[1][11251]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11252]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11253]	= settr(11560,4,11275,5085,5085,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 11254 -> 11275,0 */
	reached1[11254] = 1;
	trans[1][11254]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11255]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11256]	= settr(11563,2,11257,2,0,"else", 1, 2, 0);
	trans[1][11257]	= settr(11564,4,11275,5086,5086,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11259 -> 0,11275 */
	reached1[11259] = 1;
	T = trans[1][11275] = settr(11582,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11582,0,11261,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11582,0,11273,0,0,"IF", 0, 2, 0);
	trans[1][11261]	= settr(11568,0,11272,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11272] = settr(11579,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11579,0,11268,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11268] = settr(11575,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11575,0,11262,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11575,0,11264,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11575,0,11266,0,0,"IF", 0, 2, 0);
	trans[1][11262]	= settr(11569,0,11270,5087,5087,"((_pid==0))", 0, 2, 0); /* m: 11263 -> 11270,0 */
	reached1[11263] = 1;
	trans[1][11263]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11269]	= settr(11576,0,11270,1,0,".(goto)", 0, 2, 0);
	trans[1][11264]	= settr(11571,0,11270,5088,5088,"((_pid==1))", 0, 2, 0); /* m: 11265 -> 11270,0 */
	reached1[11265] = 1;
	trans[1][11265]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11266]	= settr(11573,0,11270,5089,5089,"((_pid>1))", 0, 2, 0); /* m: 11267 -> 11270,0 */
	reached1[11267] = 1;
	trans[1][11267]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11270]	= settr(11577,0,11271,5090,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11271]	= settr(11578,0,11323,5091,5091,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11319 -> 0,11323 */
	reached1[11319] = 1;
	trans[1][11276]	= settr(11583,0,11319,1,0,".(goto)", 0, 2, 0); /* m: 11319 -> 0,11323 */
	reached1[11319] = 1;
	trans[1][11273]	= settr(11580,0,11274,2,0,"else", 0, 2, 0);
	trans[1][11274]	= settr(11581,0,11323,5092,5092,"(1)", 0, 2, 0); /* m: 11319 -> 11323,0 */
	reached1[11319] = 1;
	trans[1][11278]	= settr(11585,0,11315,5093,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][11315] = settr(11622,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11622,0,11298,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11298] = settr(11605,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11605,2,11296,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11296] = settr(11603,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11603,2,11279,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11603,2,11282,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11603,2,11285,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11603,2,11288,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11603,2,11291,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11603,2,11294,0,0,"IF", 1, 2, 0);
	trans[1][11279]	= settr(11586,4,11313,5094,5094,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11280 -> 11313,0 */
	reached1[11280] = 1;
	trans[1][11280]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11281]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11297]	= settr(11604,0,11313,5095,5095,".(goto)", 1, 2, 0);
	trans[1][11282]	= settr(11589,4,11313,5096,5096,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11283 -> 11313,0 */
	reached1[11283] = 1;
	trans[1][11283]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11284]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11285]	= settr(11592,4,11313,5097,5097,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11286 -> 11313,0 */
	reached1[11286] = 1;
	trans[1][11286]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11287]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11288]	= settr(11595,4,11313,5098,5098,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11289 -> 11313,0 */
	reached1[11289] = 1;
	trans[1][11289]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11290]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11291]	= settr(11598,4,11313,5099,5099,"((STOP==ABORT))", 1, 2, 0); /* m: 11292 -> 11313,0 */
	reached1[11292] = 1;
	trans[1][11292]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11293]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11294]	= settr(11601,2,11295,2,0,"else", 1, 2, 0);
	trans[1][11295]	= settr(11602,4,11313,5100,5100,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11297 -> 0,11313 */
	reached1[11297] = 1;
	T = trans[1][11313] = settr(11620,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11620,0,11299,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11620,0,11311,0,0,"IF", 0, 2, 0);
	trans[1][11299]	= settr(11606,0,11310,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11310] = settr(11617,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11617,0,11306,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11306] = settr(11613,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11613,0,11300,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11613,0,11302,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11613,0,11304,0,0,"IF", 0, 2, 0);
	trans[1][11300]	= settr(11607,0,11308,5101,5101,"((_pid==0))", 0, 2, 0); /* m: 11301 -> 11308,0 */
	reached1[11301] = 1;
	trans[1][11301]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11307]	= settr(11614,0,11308,1,0,".(goto)", 0, 2, 0);
	trans[1][11302]	= settr(11609,0,11308,5102,5102,"((_pid==1))", 0, 2, 0); /* m: 11303 -> 11308,0 */
	reached1[11303] = 1;
	trans[1][11303]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11304]	= settr(11611,0,11308,5103,5103,"((_pid>1))", 0, 2, 0); /* m: 11305 -> 11308,0 */
	reached1[11305] = 1;
	trans[1][11305]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11308]	= settr(11615,0,11309,5104,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11309]	= settr(11616,0,11323,5105,5105,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11319 -> 0,11323 */
	reached1[11319] = 1;
	trans[1][11314]	= settr(11621,0,11319,1,0,".(goto)", 0, 2, 0); /* m: 11319 -> 0,11323 */
	reached1[11319] = 1;
	trans[1][11311]	= settr(11618,0,11312,2,0,"else", 0, 2, 0);
	trans[1][11312]	= settr(11619,0,11323,5106,5106,"(1)", 0, 2, 0); /* m: 11319 -> 11323,0 */
	reached1[11319] = 1;
	trans[1][11319]	= settr(11626,0,11323,5107,5107,"j = (j+1)", 0, 2, 0);
	trans[1][11320]	= settr(11627,0,11321,2,0,"else", 0, 2, 0);
	trans[1][11321]	= settr(11628,0,14616,5108,5108,"j = 1", 0, 2, 0);
	trans[1][11322]	= settr(11629,0,14616,1,0,"goto :b79", 0, 2, 0);
	trans[1][11325]	= settr(11632,0,14616,1,0,"break", 0, 2, 0);
	trans[1][11495]	= settr(11802,0,14616,1,0,".(goto)", 0, 2, 0);
	trans[1][11327]	= settr(11634,0,11493,2,0,"else", 0, 2, 0);
	T = trans[ 1][11493] = settr(11800,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11800,0,11328,0,0,"sub-sequence", 0, 2, 0);
	trans[1][11328]	= settr(11635,0,11490,5109,5109,"j = (3-1)", 0, 2, 0);
	trans[1][11491]	= settr(11798,0,11490,1,0,".(goto)", 0, 2, 0);
	T = trans[1][11490] = settr(11797,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(11797,0,11329,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(11797,0,11487,0,0,"DO", 0, 2, 0);
	trans[1][11329]	= settr(11636,0,11485,5110,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][11485] = settr(11792,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11792,0,11483,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11483] = settr(11790,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11790,0,11330,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11790,0,11369,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11790,0,11407,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11790,0,11445,0,0,"IF", 0, 2, 0);
	trans[1][11330]	= settr(11637,0,11368,5111,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][11368] = settr(11675,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11675,0,11350,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11350] = settr(11657,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11657,2,11348,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11348] = settr(11655,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11655,2,11331,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11655,2,11334,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11655,2,11337,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11655,2,11340,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11655,2,11343,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11655,2,11346,0,0,"IF", 1, 2, 0);
	trans[1][11331]	= settr(11638,4,11351,5112,5112,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11332 -> 11351,0 */
	reached1[11332] = 1;
	trans[1][11332]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11333]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11349]	= settr(11656,0,11351,5113,5113,".(goto)", 1, 2, 0);
	trans[1][11334]	= settr(11641,4,11351,5114,5114,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11335 -> 11351,0 */
	reached1[11335] = 1;
	trans[1][11335]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11336]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11337]	= settr(11644,4,11351,5115,5115,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11338 -> 11351,0 */
	reached1[11338] = 1;
	trans[1][11338]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11339]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11340]	= settr(11647,4,11351,5116,5116,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11341 -> 11351,0 */
	reached1[11341] = 1;
	trans[1][11341]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11342]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11343]	= settr(11650,4,11351,5117,5117,"((START==ABORT))", 1, 2, 0); /* m: 11344 -> 11351,0 */
	reached1[11344] = 1;
	trans[1][11344]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11345]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11346]	= settr(11653,2,11347,2,0,"else", 1, 2, 0);
	trans[1][11347]	= settr(11654,4,11351,5118,5118,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11349 -> 0,11351 */
	reached1[11349] = 1;
	trans[1][11351]	= settr(11658,0,11366,5119,5119,"(run Thread(j))", 0, 2, 0);
	T = trans[1][11366] = settr(11673,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11673,0,11352,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11673,0,11364,0,0,"IF", 0, 2, 0);
	trans[1][11352]	= settr(11659,0,11363,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11363] = settr(11670,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11670,0,11359,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11359] = settr(11666,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11666,0,11353,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11666,0,11355,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11666,0,11357,0,0,"IF", 0, 2, 0);
	trans[1][11353]	= settr(11660,0,11361,5120,5120,"((_pid==0))", 0, 2, 0); /* m: 11354 -> 11361,0 */
	reached1[11354] = 1;
	trans[1][11354]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11360]	= settr(11667,0,11361,1,0,".(goto)", 0, 2, 0);
	trans[1][11355]	= settr(11662,0,11361,5121,5121,"((_pid==1))", 0, 2, 0); /* m: 11356 -> 11361,0 */
	reached1[11356] = 1;
	trans[1][11356]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11357]	= settr(11664,0,11361,5122,5122,"((_pid>1))", 0, 2, 0); /* m: 11358 -> 11361,0 */
	reached1[11358] = 1;
	trans[1][11358]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11361]	= settr(11668,0,11362,5123,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11362]	= settr(11669,0,11490,5124,5124,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11486 -> 0,11490 */
	reached1[11486] = 1;
	trans[1][11367]	= settr(11674,0,11486,1,0,".(goto)", 0, 2, 0); /* m: 11486 -> 0,11490 */
	reached1[11486] = 1;
	trans[1][11364]	= settr(11671,0,11365,2,0,"else", 0, 2, 0);
	trans[1][11365]	= settr(11672,0,11490,5125,5125,"(1)", 0, 2, 0); /* m: 11486 -> 11490,0 */
	reached1[11486] = 1;
	trans[1][11484]	= settr(11791,0,11486,1,0,".(goto)", 0, 2, 0); /* m: 11486 -> 0,11490 */
	reached1[11486] = 1;
	trans[1][11369]	= settr(11676,0,11406,5126,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][11406] = settr(11713,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11713,0,11389,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11389] = settr(11696,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11696,2,11387,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11387] = settr(11694,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11694,2,11370,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11694,2,11373,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11694,2,11376,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11694,2,11379,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11694,2,11382,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11694,2,11385,0,0,"IF", 1, 2, 0);
	trans[1][11370]	= settr(11677,4,11404,5127,5127,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11371 -> 11404,0 */
	reached1[11371] = 1;
	trans[1][11371]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11372]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11388]	= settr(11695,0,11404,5128,5128,".(goto)", 1, 2, 0);
	trans[1][11373]	= settr(11680,4,11404,5129,5129,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11374 -> 11404,0 */
	reached1[11374] = 1;
	trans[1][11374]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11375]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11376]	= settr(11683,4,11404,5130,5130,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11377 -> 11404,0 */
	reached1[11377] = 1;
	trans[1][11377]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11378]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11379]	= settr(11686,4,11404,5131,5131,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11380 -> 11404,0 */
	reached1[11380] = 1;
	trans[1][11380]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11381]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11382]	= settr(11689,4,11404,5132,5132,"((PAUSE==ABORT))", 1, 2, 0); /* m: 11383 -> 11404,0 */
	reached1[11383] = 1;
	trans[1][11383]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11384]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11385]	= settr(11692,2,11386,2,0,"else", 1, 2, 0);
	trans[1][11386]	= settr(11693,4,11404,5133,5133,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11388 -> 0,11404 */
	reached1[11388] = 1;
	T = trans[1][11404] = settr(11711,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11711,0,11390,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11711,0,11402,0,0,"IF", 0, 2, 0);
	trans[1][11390]	= settr(11697,0,11401,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11401] = settr(11708,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11708,0,11397,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11397] = settr(11704,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11704,0,11391,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11704,0,11393,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11704,0,11395,0,0,"IF", 0, 2, 0);
	trans[1][11391]	= settr(11698,0,11399,5134,5134,"((_pid==0))", 0, 2, 0); /* m: 11392 -> 11399,0 */
	reached1[11392] = 1;
	trans[1][11392]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11398]	= settr(11705,0,11399,1,0,".(goto)", 0, 2, 0);
	trans[1][11393]	= settr(11700,0,11399,5135,5135,"((_pid==1))", 0, 2, 0); /* m: 11394 -> 11399,0 */
	reached1[11394] = 1;
	trans[1][11394]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11395]	= settr(11702,0,11399,5136,5136,"((_pid>1))", 0, 2, 0); /* m: 11396 -> 11399,0 */
	reached1[11396] = 1;
	trans[1][11396]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11399]	= settr(11706,0,11400,5137,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11400]	= settr(11707,0,11490,5138,5138,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11486 -> 0,11490 */
	reached1[11486] = 1;
	trans[1][11405]	= settr(11712,0,11486,1,0,".(goto)", 0, 2, 0); /* m: 11486 -> 0,11490 */
	reached1[11486] = 1;
	trans[1][11402]	= settr(11709,0,11403,2,0,"else", 0, 2, 0);
	trans[1][11403]	= settr(11710,0,11490,5139,5139,"(1)", 0, 2, 0); /* m: 11486 -> 11490,0 */
	reached1[11486] = 1;
	trans[1][11407]	= settr(11714,0,11444,5140,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][11444] = settr(11751,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11751,0,11427,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11427] = settr(11734,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11734,2,11425,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11425] = settr(11732,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11732,2,11408,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11732,2,11411,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11732,2,11414,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11732,2,11417,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11732,2,11420,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11732,2,11423,0,0,"IF", 1, 2, 0);
	trans[1][11408]	= settr(11715,4,11442,5141,5141,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11409 -> 11442,0 */
	reached1[11409] = 1;
	trans[1][11409]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11410]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11426]	= settr(11733,0,11442,5142,5142,".(goto)", 1, 2, 0);
	trans[1][11411]	= settr(11718,4,11442,5143,5143,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11412 -> 11442,0 */
	reached1[11412] = 1;
	trans[1][11412]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11413]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11414]	= settr(11721,4,11442,5144,5144,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11415 -> 11442,0 */
	reached1[11415] = 1;
	trans[1][11415]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11416]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11417]	= settr(11724,4,11442,5145,5145,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11418 -> 11442,0 */
	reached1[11418] = 1;
	trans[1][11418]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11419]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11420]	= settr(11727,4,11442,5146,5146,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 11421 -> 11442,0 */
	reached1[11421] = 1;
	trans[1][11421]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11422]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11423]	= settr(11730,2,11424,2,0,"else", 1, 2, 0);
	trans[1][11424]	= settr(11731,4,11442,5147,5147,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11426 -> 0,11442 */
	reached1[11426] = 1;
	T = trans[1][11442] = settr(11749,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11749,0,11428,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11749,0,11440,0,0,"IF", 0, 2, 0);
	trans[1][11428]	= settr(11735,0,11439,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11439] = settr(11746,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11746,0,11435,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11435] = settr(11742,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11742,0,11429,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11742,0,11431,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11742,0,11433,0,0,"IF", 0, 2, 0);
	trans[1][11429]	= settr(11736,0,11437,5148,5148,"((_pid==0))", 0, 2, 0); /* m: 11430 -> 11437,0 */
	reached1[11430] = 1;
	trans[1][11430]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11436]	= settr(11743,0,11437,1,0,".(goto)", 0, 2, 0);
	trans[1][11431]	= settr(11738,0,11437,5149,5149,"((_pid==1))", 0, 2, 0); /* m: 11432 -> 11437,0 */
	reached1[11432] = 1;
	trans[1][11432]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11433]	= settr(11740,0,11437,5150,5150,"((_pid>1))", 0, 2, 0); /* m: 11434 -> 11437,0 */
	reached1[11434] = 1;
	trans[1][11434]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11437]	= settr(11744,0,11438,5151,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11438]	= settr(11745,0,11490,5152,5152,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11486 -> 0,11490 */
	reached1[11486] = 1;
	trans[1][11443]	= settr(11750,0,11486,1,0,".(goto)", 0, 2, 0); /* m: 11486 -> 0,11490 */
	reached1[11486] = 1;
	trans[1][11440]	= settr(11747,0,11441,2,0,"else", 0, 2, 0);
	trans[1][11441]	= settr(11748,0,11490,5153,5153,"(1)", 0, 2, 0); /* m: 11486 -> 11490,0 */
	reached1[11486] = 1;
	trans[1][11445]	= settr(11752,0,11482,5154,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][11482] = settr(11789,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11789,0,11465,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11465] = settr(11772,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11772,2,11463,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11463] = settr(11770,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11770,2,11446,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11770,2,11449,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11770,2,11452,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11770,2,11455,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11770,2,11458,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11770,2,11461,0,0,"IF", 1, 2, 0);
	trans[1][11446]	= settr(11753,4,11480,5155,5155,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11447 -> 11480,0 */
	reached1[11447] = 1;
	trans[1][11447]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11448]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11464]	= settr(11771,0,11480,5156,5156,".(goto)", 1, 2, 0);
	trans[1][11449]	= settr(11756,4,11480,5157,5157,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11450 -> 11480,0 */
	reached1[11450] = 1;
	trans[1][11450]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11451]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11452]	= settr(11759,4,11480,5158,5158,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11453 -> 11480,0 */
	reached1[11453] = 1;
	trans[1][11453]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11454]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11455]	= settr(11762,4,11480,5159,5159,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11456 -> 11480,0 */
	reached1[11456] = 1;
	trans[1][11456]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11457]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11458]	= settr(11765,4,11480,5160,5160,"((STOP==ABORT))", 1, 2, 0); /* m: 11459 -> 11480,0 */
	reached1[11459] = 1;
	trans[1][11459]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11460]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11461]	= settr(11768,2,11462,2,0,"else", 1, 2, 0);
	trans[1][11462]	= settr(11769,4,11480,5161,5161,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11464 -> 0,11480 */
	reached1[11464] = 1;
	T = trans[1][11480] = settr(11787,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11787,0,11466,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11787,0,11478,0,0,"IF", 0, 2, 0);
	trans[1][11466]	= settr(11773,0,11477,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11477] = settr(11784,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11784,0,11473,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11473] = settr(11780,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11780,0,11467,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11780,0,11469,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11780,0,11471,0,0,"IF", 0, 2, 0);
	trans[1][11467]	= settr(11774,0,11475,5162,5162,"((_pid==0))", 0, 2, 0); /* m: 11468 -> 11475,0 */
	reached1[11468] = 1;
	trans[1][11468]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11474]	= settr(11781,0,11475,1,0,".(goto)", 0, 2, 0);
	trans[1][11469]	= settr(11776,0,11475,5163,5163,"((_pid==1))", 0, 2, 0); /* m: 11470 -> 11475,0 */
	reached1[11470] = 1;
	trans[1][11470]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11471]	= settr(11778,0,11475,5164,5164,"((_pid>1))", 0, 2, 0); /* m: 11472 -> 11475,0 */
	reached1[11472] = 1;
	trans[1][11472]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11475]	= settr(11782,0,11476,5165,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11476]	= settr(11783,0,11490,5166,5166,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11486 -> 0,11490 */
	reached1[11486] = 1;
	trans[1][11481]	= settr(11788,0,11486,1,0,".(goto)", 0, 2, 0); /* m: 11486 -> 0,11490 */
	reached1[11486] = 1;
	trans[1][11478]	= settr(11785,0,11479,2,0,"else", 0, 2, 0);
	trans[1][11479]	= settr(11786,0,11490,5167,5167,"(1)", 0, 2, 0); /* m: 11486 -> 11490,0 */
	reached1[11486] = 1;
	trans[1][11486]	= settr(11793,0,11490,5168,5168,"j = (j-1)", 0, 2, 0);
	trans[1][11487]	= settr(11794,0,11488,2,0,"else", 0, 2, 0);
	trans[1][11488]	= settr(11795,0,14616,5169,5169,"j = 1", 0, 2, 0);
	trans[1][11489]	= settr(11796,0,14616,1,0,"goto :b80", 0, 2, 0);
	trans[1][11492]	= settr(11799,0,14616,1,0,"break", 0, 2, 0);
	trans[1][11724]	= settr(12031,0,14616,1,0,".(goto)", 0, 2, 0);
	trans[1][11497]	= settr(11804,0,11722,2,0,"else", 0, 2, 0);
	T = trans[ 1][11722] = settr(12029,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12029,0,11498,0,0,"sub-sequence", 0, 2, 0);
	trans[1][11498]	= settr(11805,0,11663,5170,0,"printf('Supervisor propagating command %e...\\n',6)", 0, 2, 0);
	T = trans[ 1][11663] = settr(11970,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11970,0,11660,0,0,"sub-sequence", 0, 2, 0);
	trans[1][11661]	= settr(11968,0,11660,1,0,".(goto)", 0, 2, 0);
	T = trans[1][11660] = settr(11967,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(11967,0,11499,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(11967,0,11657,0,0,"DO", 0, 2, 0);
	trans[1][11499]	= settr(11806,0,11655,5171,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][11655] = settr(11962,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11962,0,11653,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11653] = settr(11960,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11960,0,11500,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11960,0,11539,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11960,0,11577,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11960,0,11615,0,0,"IF", 0, 2, 0);
	trans[1][11500]	= settr(11807,0,11538,5172,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][11538] = settr(11845,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11845,0,11520,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11520] = settr(11827,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11827,2,11518,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11518] = settr(11825,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11825,2,11501,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11825,2,11504,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11825,2,11507,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11825,2,11510,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11825,2,11513,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11825,2,11516,0,0,"IF", 1, 2, 0);
	trans[1][11501]	= settr(11808,4,11521,5173,5173,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11502 -> 11521,0 */
	reached1[11502] = 1;
	trans[1][11502]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11503]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11519]	= settr(11826,0,11521,5174,5174,".(goto)", 1, 2, 0);
	trans[1][11504]	= settr(11811,4,11521,5175,5175,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11505 -> 11521,0 */
	reached1[11505] = 1;
	trans[1][11505]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11506]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11507]	= settr(11814,4,11521,5176,5176,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11508 -> 11521,0 */
	reached1[11508] = 1;
	trans[1][11508]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11509]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11510]	= settr(11817,4,11521,5177,5177,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11511 -> 11521,0 */
	reached1[11511] = 1;
	trans[1][11511]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11512]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11513]	= settr(11820,4,11521,5178,5178,"((START==ABORT))", 1, 2, 0); /* m: 11514 -> 11521,0 */
	reached1[11514] = 1;
	trans[1][11514]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11515]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11516]	= settr(11823,2,11517,2,0,"else", 1, 2, 0);
	trans[1][11517]	= settr(11824,4,11521,5179,5179,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11519 -> 0,11521 */
	reached1[11519] = 1;
	trans[1][11521]	= settr(11828,0,11536,5180,5180,"(run Thread(j))", 0, 2, 0);
	T = trans[1][11536] = settr(11843,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(11843,0,11522,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(11843,0,11534,0,0,"IF", 0, 2, 0);
	trans[1][11522]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][11533] = settr(11840,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11840,0,11529,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11529] = settr(11836,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11836,0,11523,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11836,0,11525,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11836,0,11527,0,0,"IF", 0, 2, 0);
	trans[1][11523]	= settr(11830,0,11531,5181,5181,"((_pid==0))", 0, 2, 0); /* m: 11524 -> 11531,0 */
	reached1[11524] = 1;
	trans[1][11524]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11530]	= settr(11837,0,11531,1,0,".(goto)", 0, 2, 0);
	trans[1][11525]	= settr(11832,0,11531,5182,5182,"((_pid==1))", 0, 2, 0); /* m: 11526 -> 11531,0 */
	reached1[11526] = 1;
	trans[1][11526]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11527]	= settr(11834,0,11531,5183,5183,"((_pid>1))", 0, 2, 0); /* m: 11528 -> 11531,0 */
	reached1[11528] = 1;
	trans[1][11528]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11531]	= settr(11838,0,11532,5184,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11532]	= settr(11839,0,11660,5185,5185,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11656 -> 0,11660 */
	reached1[11656] = 1;
	trans[1][11537]	= settr(11844,0,11656,1,0,".(goto)", 0, 2, 0); /* m: 11656 -> 0,11660 */
	reached1[11656] = 1;
	trans[1][11534]	= settr(11841,0,11535,2,0,"else", 0, 2, 0);
	trans[1][11535]	= settr(11842,0,11660,5186,5186,"(1)", 0, 2, 0); /* m: 11656 -> 11660,0 */
	reached1[11656] = 1;
	trans[1][11654]	= settr(11961,0,11656,1,0,".(goto)", 0, 2, 0); /* m: 11656 -> 0,11660 */
	reached1[11656] = 1;
	trans[1][11539]	= settr(11846,0,11576,5187,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][11576] = settr(11883,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11883,0,11559,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11559] = settr(11866,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11866,2,11557,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11557] = settr(11864,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11864,2,11540,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11864,2,11543,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11864,2,11546,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11864,2,11549,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11864,2,11552,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11864,2,11555,0,0,"IF", 1, 2, 0);
	trans[1][11540]	= settr(11847,4,11574,5188,5188,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11541 -> 11574,0 */
	reached1[11541] = 1;
	trans[1][11541]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11542]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11558]	= settr(11865,0,11574,5189,5189,".(goto)", 1, 2, 0);
	trans[1][11543]	= settr(11850,4,11574,5190,5190,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11544 -> 11574,0 */
	reached1[11544] = 1;
	trans[1][11544]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11545]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11546]	= settr(11853,4,11574,5191,5191,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11547 -> 11574,0 */
	reached1[11547] = 1;
	trans[1][11547]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11548]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11549]	= settr(11856,4,11574,5192,5192,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11550 -> 11574,0 */
	reached1[11550] = 1;
	trans[1][11550]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11551]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11552]	= settr(11859,4,11574,5193,5193,"((PAUSE==ABORT))", 1, 2, 0); /* m: 11553 -> 11574,0 */
	reached1[11553] = 1;
	trans[1][11553]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11554]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11555]	= settr(11862,2,11556,2,0,"else", 1, 2, 0);
	trans[1][11556]	= settr(11863,4,11574,5194,5194,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11558 -> 0,11574 */
	reached1[11558] = 1;
	T = trans[1][11574] = settr(11881,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(11881,0,11560,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(11881,0,11572,0,0,"IF", 0, 2, 0);
	trans[1][11560]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][11571] = settr(11878,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11878,0,11567,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11567] = settr(11874,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11874,0,11561,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11874,0,11563,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11874,0,11565,0,0,"IF", 0, 2, 0);
	trans[1][11561]	= settr(11868,0,11569,5195,5195,"((_pid==0))", 0, 2, 0); /* m: 11562 -> 11569,0 */
	reached1[11562] = 1;
	trans[1][11562]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11568]	= settr(11875,0,11569,1,0,".(goto)", 0, 2, 0);
	trans[1][11563]	= settr(11870,0,11569,5196,5196,"((_pid==1))", 0, 2, 0); /* m: 11564 -> 11569,0 */
	reached1[11564] = 1;
	trans[1][11564]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11565]	= settr(11872,0,11569,5197,5197,"((_pid>1))", 0, 2, 0); /* m: 11566 -> 11569,0 */
	reached1[11566] = 1;
	trans[1][11566]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11569]	= settr(11876,0,11570,5198,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11570]	= settr(11877,0,11660,5199,5199,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11656 -> 0,11660 */
	reached1[11656] = 1;
	trans[1][11575]	= settr(11882,0,11656,1,0,".(goto)", 0, 2, 0); /* m: 11656 -> 0,11660 */
	reached1[11656] = 1;
	trans[1][11572]	= settr(11879,0,11573,2,0,"else", 0, 2, 0);
	trans[1][11573]	= settr(11880,0,11660,5200,5200,"(1)", 0, 2, 0); /* m: 11656 -> 11660,0 */
	reached1[11656] = 1;
	trans[1][11577]	= settr(11884,0,11614,5201,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][11614] = settr(11921,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11921,0,11597,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11597] = settr(11904,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11904,2,11595,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11595] = settr(11902,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11902,2,11578,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11902,2,11581,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11902,2,11584,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11902,2,11587,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11902,2,11590,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11902,2,11593,0,0,"IF", 1, 2, 0);
	trans[1][11578]	= settr(11885,4,11612,5202,5202,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11579 -> 11612,0 */
	reached1[11579] = 1;
	trans[1][11579]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11580]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11596]	= settr(11903,0,11612,5203,5203,".(goto)", 1, 2, 0);
	trans[1][11581]	= settr(11888,4,11612,5204,5204,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11582 -> 11612,0 */
	reached1[11582] = 1;
	trans[1][11582]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11583]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11584]	= settr(11891,4,11612,5205,5205,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11585 -> 11612,0 */
	reached1[11585] = 1;
	trans[1][11585]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11586]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11587]	= settr(11894,4,11612,5206,5206,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11588 -> 11612,0 */
	reached1[11588] = 1;
	trans[1][11588]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11589]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11590]	= settr(11897,4,11612,5207,5207,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 11591 -> 11612,0 */
	reached1[11591] = 1;
	trans[1][11591]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11592]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11593]	= settr(11900,2,11594,2,0,"else", 1, 2, 0);
	trans[1][11594]	= settr(11901,4,11612,5208,5208,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11596 -> 0,11612 */
	reached1[11596] = 1;
	T = trans[1][11612] = settr(11919,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(11919,0,11598,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(11919,0,11610,0,0,"IF", 0, 2, 0);
	trans[1][11598]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][11609] = settr(11916,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11916,0,11605,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11605] = settr(11912,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11912,0,11599,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11912,0,11601,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11912,0,11603,0,0,"IF", 0, 2, 0);
	trans[1][11599]	= settr(11906,0,11607,5209,5209,"((_pid==0))", 0, 2, 0); /* m: 11600 -> 11607,0 */
	reached1[11600] = 1;
	trans[1][11600]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11606]	= settr(11913,0,11607,1,0,".(goto)", 0, 2, 0);
	trans[1][11601]	= settr(11908,0,11607,5210,5210,"((_pid==1))", 0, 2, 0); /* m: 11602 -> 11607,0 */
	reached1[11602] = 1;
	trans[1][11602]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11603]	= settr(11910,0,11607,5211,5211,"((_pid>1))", 0, 2, 0); /* m: 11604 -> 11607,0 */
	reached1[11604] = 1;
	trans[1][11604]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11607]	= settr(11914,0,11608,5212,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11608]	= settr(11915,0,11660,5213,5213,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11656 -> 0,11660 */
	reached1[11656] = 1;
	trans[1][11613]	= settr(11920,0,11656,1,0,".(goto)", 0, 2, 0); /* m: 11656 -> 0,11660 */
	reached1[11656] = 1;
	trans[1][11610]	= settr(11917,0,11611,2,0,"else", 0, 2, 0);
	trans[1][11611]	= settr(11918,0,11660,5214,5214,"(1)", 0, 2, 0); /* m: 11656 -> 11660,0 */
	reached1[11656] = 1;
	trans[1][11615]	= settr(11922,0,11652,5215,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][11652] = settr(11959,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11959,0,11635,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11635] = settr(11942,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(11942,2,11633,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11633] = settr(11940,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11940,2,11616,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11940,2,11619,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11940,2,11622,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11940,2,11625,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(11940,2,11628,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(11940,2,11631,0,0,"IF", 1, 2, 0);
	trans[1][11616]	= settr(11923,4,11650,5216,5216,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11617 -> 11650,0 */
	reached1[11617] = 1;
	trans[1][11617]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11618]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11634]	= settr(11941,0,11650,5217,5217,".(goto)", 1, 2, 0);
	trans[1][11619]	= settr(11926,4,11650,5218,5218,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11620 -> 11650,0 */
	reached1[11620] = 1;
	trans[1][11620]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11621]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11622]	= settr(11929,4,11650,5219,5219,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11623 -> 11650,0 */
	reached1[11623] = 1;
	trans[1][11623]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11624]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11625]	= settr(11932,4,11650,5220,5220,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11626 -> 11650,0 */
	reached1[11626] = 1;
	trans[1][11626]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11627]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11628]	= settr(11935,4,11650,5221,5221,"((STOP==ABORT))", 1, 2, 0); /* m: 11629 -> 11650,0 */
	reached1[11629] = 1;
	trans[1][11629]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11630]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11631]	= settr(11938,2,11632,2,0,"else", 1, 2, 0);
	trans[1][11632]	= settr(11939,4,11650,5222,5222,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11634 -> 0,11650 */
	reached1[11634] = 1;
	T = trans[1][11650] = settr(11957,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(11957,0,11636,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(11957,0,11648,0,0,"IF", 0, 2, 0);
	trans[1][11636]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][11647] = settr(11954,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11954,0,11643,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11643] = settr(11950,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11950,0,11637,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11950,0,11639,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11950,0,11641,0,0,"IF", 0, 2, 0);
	trans[1][11637]	= settr(11944,0,11645,5223,5223,"((_pid==0))", 0, 2, 0); /* m: 11638 -> 11645,0 */
	reached1[11638] = 1;
	trans[1][11638]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11644]	= settr(11951,0,11645,1,0,".(goto)", 0, 2, 0);
	trans[1][11639]	= settr(11946,0,11645,5224,5224,"((_pid==1))", 0, 2, 0); /* m: 11640 -> 11645,0 */
	reached1[11640] = 1;
	trans[1][11640]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11641]	= settr(11948,0,11645,5225,5225,"((_pid>1))", 0, 2, 0); /* m: 11642 -> 11645,0 */
	reached1[11642] = 1;
	trans[1][11642]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11645]	= settr(11952,0,11646,5226,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11646]	= settr(11953,0,11660,5227,5227,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11656 -> 0,11660 */
	reached1[11656] = 1;
	trans[1][11651]	= settr(11958,0,11656,1,0,".(goto)", 0, 2, 0); /* m: 11656 -> 0,11660 */
	reached1[11656] = 1;
	trans[1][11648]	= settr(11955,0,11649,2,0,"else", 0, 2, 0);
	trans[1][11649]	= settr(11956,0,11660,5228,5228,"(1)", 0, 2, 0); /* m: 11656 -> 11660,0 */
	reached1[11656] = 1;
	trans[1][11656]	= settr(11963,0,11660,5229,5229,"j = (j+1)", 0, 2, 0);
	trans[1][11657]	= settr(11964,0,11658,2,0,"else", 0, 2, 0);
	trans[1][11658]	= settr(11965,0,11719,5230,5230,"j = 1", 0, 2, 0);
	trans[1][11659]	= settr(11966,0,11719,1,0,"goto :b81", 0, 2, 0);
	trans[1][11662]	= settr(11969,0,11719,1,0,"break", 0, 2, 0);
	trans[1][11720]	= settr(12027,0,11719,1,0,".(goto)", 0, 2, 0);
	T = trans[1][11719] = settr(12026,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(12026,0,11664,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(12026,0,11716,0,0,"DO", 0, 2, 0);
	trans[1][11664]	= settr(11971,0,11713,5231,0,"((j<3))", 0, 2, 0);
	T = trans[1][11713] = settr(12020,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12020,0,11665,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12020,0,11677,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12020,0,11689,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12020,0,11701,0,0,"IF", 0, 2, 0);
	trans[1][11665]	= settr(11972,0,11676,5232,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][11676] = settr(11983,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11983,0,11672,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11672] = settr(11979,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11979,0,11666,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11979,0,11668,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11979,0,11670,0,0,"IF", 0, 2, 0);
	trans[1][11666]	= settr(11973,0,11674,5233,5233,"((_pid==0))", 0, 2, 0); /* m: 11667 -> 11674,0 */
	reached1[11667] = 1;
	trans[1][11667]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11673]	= settr(11980,0,11674,1,0,".(goto)", 0, 2, 0);
	trans[1][11668]	= settr(11975,0,11674,5234,5234,"((_pid==1))", 0, 2, 0); /* m: 11669 -> 11674,0 */
	reached1[11669] = 1;
	trans[1][11669]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11670]	= settr(11977,0,11674,5235,5235,"((_pid>1))", 0, 2, 0); /* m: 11671 -> 11674,0 */
	reached1[11671] = 1;
	trans[1][11671]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11674]	= settr(11981,0,11675,5236,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11675]	= settr(11982,0,11719,5237,5237,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11715 -> 0,11719 */
	reached1[11715] = 1;
	trans[1][11714]	= settr(12021,0,11715,1,0,".(goto)", 0, 2, 0); /* m: 11715 -> 0,11719 */
	reached1[11715] = 1;
	trans[1][11677]	= settr(11984,0,11688,5238,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][11688] = settr(11995,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11995,0,11684,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11684] = settr(11991,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11991,0,11678,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(11991,0,11680,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(11991,0,11682,0,0,"IF", 0, 2, 0);
	trans[1][11678]	= settr(11985,0,11686,5239,5239,"((_pid==0))", 0, 2, 0); /* m: 11679 -> 11686,0 */
	reached1[11679] = 1;
	trans[1][11679]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11685]	= settr(11992,0,11686,1,0,".(goto)", 0, 2, 0);
	trans[1][11680]	= settr(11987,0,11686,5240,5240,"((_pid==1))", 0, 2, 0); /* m: 11681 -> 11686,0 */
	reached1[11681] = 1;
	trans[1][11681]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11682]	= settr(11989,0,11686,5241,5241,"((_pid>1))", 0, 2, 0); /* m: 11683 -> 11686,0 */
	reached1[11683] = 1;
	trans[1][11683]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11686]	= settr(11993,0,11687,5242,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11687]	= settr(11994,0,11719,5243,5243,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11715 -> 0,11719 */
	reached1[11715] = 1;
	trans[1][11689]	= settr(11996,0,11700,5244,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][11700] = settr(12007,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12007,0,11696,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11696] = settr(12003,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12003,0,11690,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12003,0,11692,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12003,0,11694,0,0,"IF", 0, 2, 0);
	trans[1][11690]	= settr(11997,0,11698,5245,5245,"((_pid==0))", 0, 2, 0); /* m: 11691 -> 11698,0 */
	reached1[11691] = 1;
	trans[1][11691]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11697]	= settr(12004,0,11698,1,0,".(goto)", 0, 2, 0);
	trans[1][11692]	= settr(11999,0,11698,5246,5246,"((_pid==1))", 0, 2, 0); /* m: 11693 -> 11698,0 */
	reached1[11693] = 1;
	trans[1][11693]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11694]	= settr(12001,0,11698,5247,5247,"((_pid>1))", 0, 2, 0); /* m: 11695 -> 11698,0 */
	reached1[11695] = 1;
	trans[1][11695]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11698]	= settr(12005,0,11699,5248,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11699]	= settr(12006,0,11719,5249,5249,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11715 -> 0,11719 */
	reached1[11715] = 1;
	trans[1][11701]	= settr(12008,0,11712,5250,0,"((6==STOP))", 0, 2, 0);
	T = trans[ 1][11712] = settr(12019,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12019,0,11708,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11708] = settr(12015,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12015,0,11702,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12015,0,11704,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12015,0,11706,0,0,"IF", 0, 2, 0);
	trans[1][11702]	= settr(12009,0,11710,5251,5251,"((_pid==0))", 0, 2, 0); /* m: 11703 -> 11710,0 */
	reached1[11703] = 1;
	trans[1][11703]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11709]	= settr(12016,0,11710,1,0,".(goto)", 0, 2, 0);
	trans[1][11704]	= settr(12011,0,11710,5252,5252,"((_pid==1))", 0, 2, 0); /* m: 11705 -> 11710,0 */
	reached1[11705] = 1;
	trans[1][11705]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11706]	= settr(12013,0,11710,5253,5253,"((_pid>1))", 0, 2, 0); /* m: 11707 -> 11710,0 */
	reached1[11707] = 1;
	trans[1][11707]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11710]	= settr(12017,0,11711,5254,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11711]	= settr(12018,0,11719,5255,5255,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11715 -> 0,11719 */
	reached1[11715] = 1;
	trans[1][11715]	= settr(12022,0,11719,5256,5256,"j = (j+1)", 0, 2, 0);
	trans[1][11716]	= settr(12023,0,11717,2,0,"else", 0, 2, 0);
	trans[1][11717]	= settr(12024,0,14616,5257,5257,"j = 1", 0, 2, 0);
	trans[1][11718]	= settr(12025,0,14616,1,0,"goto :b82", 0, 2, 0);
	trans[1][11721]	= settr(12028,0,14616,1,0,"break", 0, 2, 0);
	trans[1][12877]	= settr(13184,0,14616,1,0,".(goto)", 0, 2, 0);
	trans[1][11728]	= settr(12035,0,12300,5258,0,"((10==PAUSED))", 0, 2, 0);
	T = trans[ 1][12300] = settr(12607,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12607,0,12298,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12298] = settr(12605,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12605,0,11729,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12605,0,11732,0,0,"IF", 0, 2, 0);
	trans[1][11729]	= settr(12036,0,11730,5259,0,"(((8==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][11730]	= settr(12037,0,11731,5260,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][11731]	= settr(12038,0,14616,5261,5261,"supervisor_started = 1", 1, 2, 0);
	trans[1][12299]	= settr(12606,0,14616,1,0,".(goto)", 0, 2, 0);
	trans[1][11732]	= settr(12039,0,12296,2,0,"else", 0, 2, 0);
	T = trans[1][12296] = settr(12603,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12603,0,11733,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12603,0,12070,0,0,"IF", 0, 2, 0);
	trans[1][11733]	= settr(12040,0,12069,5262,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][12069] = settr(12376,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12376,0,12067,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12067] = settr(12374,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12374,0,11734,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12374,0,11900,0,0,"IF", 0, 2, 0);
	trans[1][11734]	= settr(12041,0,11899,5263,0,"(((8==START)||(8==PAUSED)))", 0, 2, 0);
	T = trans[ 1][11899] = settr(12206,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12206,0,11896,0,0,"sub-sequence", 0, 2, 0);
	trans[1][11897]	= settr(12204,0,11896,1,0,".(goto)", 0, 2, 0);
	T = trans[1][11896] = settr(12203,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(12203,0,11735,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(12203,0,11893,0,0,"DO", 0, 2, 0);
	trans[1][11735]	= settr(12042,0,11891,5264,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][11891] = settr(12198,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12198,0,11889,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11889] = settr(12196,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12196,0,11736,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12196,0,11775,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12196,0,11813,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12196,0,11851,0,0,"IF", 0, 2, 0);
	trans[1][11736]	= settr(12043,0,11774,5265,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][11774] = settr(12081,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12081,0,11756,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11756] = settr(12063,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12063,2,11754,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11754] = settr(12061,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12061,2,11737,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12061,2,11740,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12061,2,11743,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12061,2,11746,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12061,2,11749,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12061,2,11752,0,0,"IF", 1, 2, 0);
	trans[1][11737]	= settr(12044,4,11757,5266,5266,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11738 -> 11757,0 */
	reached1[11738] = 1;
	trans[1][11738]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11739]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11755]	= settr(12062,0,11757,5267,5267,".(goto)", 1, 2, 0);
	trans[1][11740]	= settr(12047,4,11757,5268,5268,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11741 -> 11757,0 */
	reached1[11741] = 1;
	trans[1][11741]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11742]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11743]	= settr(12050,4,11757,5269,5269,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11744 -> 11757,0 */
	reached1[11744] = 1;
	trans[1][11744]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11745]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11746]	= settr(12053,4,11757,5270,5270,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11747 -> 11757,0 */
	reached1[11747] = 1;
	trans[1][11747]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11748]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11749]	= settr(12056,4,11757,5271,5271,"((START==ABORT))", 1, 2, 0); /* m: 11750 -> 11757,0 */
	reached1[11750] = 1;
	trans[1][11750]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11751]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11752]	= settr(12059,2,11753,2,0,"else", 1, 2, 0);
	trans[1][11753]	= settr(12060,4,11757,5272,5272,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11755 -> 0,11757 */
	reached1[11755] = 1;
	trans[1][11757]	= settr(12064,0,11772,5273,5273,"(run Thread(j))", 0, 2, 0);
	T = trans[1][11772] = settr(12079,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12079,0,11758,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12079,0,11770,0,0,"IF", 0, 2, 0);
	trans[1][11758]	= settr(12065,0,11769,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11769] = settr(12076,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12076,0,11765,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11765] = settr(12072,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12072,0,11759,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12072,0,11761,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12072,0,11763,0,0,"IF", 0, 2, 0);
	trans[1][11759]	= settr(12066,0,11767,5274,5274,"((_pid==0))", 0, 2, 0); /* m: 11760 -> 11767,0 */
	reached1[11760] = 1;
	trans[1][11760]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11766]	= settr(12073,0,11767,1,0,".(goto)", 0, 2, 0);
	trans[1][11761]	= settr(12068,0,11767,5275,5275,"((_pid==1))", 0, 2, 0); /* m: 11762 -> 11767,0 */
	reached1[11762] = 1;
	trans[1][11762]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11763]	= settr(12070,0,11767,5276,5276,"((_pid>1))", 0, 2, 0); /* m: 11764 -> 11767,0 */
	reached1[11764] = 1;
	trans[1][11764]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11767]	= settr(12074,0,11768,5277,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11768]	= settr(12075,0,11896,5278,5278,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11892 -> 0,11896 */
	reached1[11892] = 1;
	trans[1][11773]	= settr(12080,0,11892,1,0,".(goto)", 0, 2, 0); /* m: 11892 -> 0,11896 */
	reached1[11892] = 1;
	trans[1][11770]	= settr(12077,0,11771,2,0,"else", 0, 2, 0);
	trans[1][11771]	= settr(12078,0,11896,5279,5279,"(1)", 0, 2, 0); /* m: 11892 -> 11896,0 */
	reached1[11892] = 1;
	trans[1][11890]	= settr(12197,0,11892,1,0,".(goto)", 0, 2, 0); /* m: 11892 -> 0,11896 */
	reached1[11892] = 1;
	trans[1][11775]	= settr(12082,0,11812,5280,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][11812] = settr(12119,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12119,0,11795,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11795] = settr(12102,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12102,2,11793,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11793] = settr(12100,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12100,2,11776,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12100,2,11779,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12100,2,11782,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12100,2,11785,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12100,2,11788,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12100,2,11791,0,0,"IF", 1, 2, 0);
	trans[1][11776]	= settr(12083,4,11810,5281,5281,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11777 -> 11810,0 */
	reached1[11777] = 1;
	trans[1][11777]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11778]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11794]	= settr(12101,0,11810,5282,5282,".(goto)", 1, 2, 0);
	trans[1][11779]	= settr(12086,4,11810,5283,5283,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11780 -> 11810,0 */
	reached1[11780] = 1;
	trans[1][11780]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11781]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11782]	= settr(12089,4,11810,5284,5284,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11783 -> 11810,0 */
	reached1[11783] = 1;
	trans[1][11783]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11784]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11785]	= settr(12092,4,11810,5285,5285,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11786 -> 11810,0 */
	reached1[11786] = 1;
	trans[1][11786]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11787]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11788]	= settr(12095,4,11810,5286,5286,"((PAUSE==ABORT))", 1, 2, 0); /* m: 11789 -> 11810,0 */
	reached1[11789] = 1;
	trans[1][11789]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11790]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11791]	= settr(12098,2,11792,2,0,"else", 1, 2, 0);
	trans[1][11792]	= settr(12099,4,11810,5287,5287,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11794 -> 0,11810 */
	reached1[11794] = 1;
	T = trans[1][11810] = settr(12117,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12117,0,11796,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12117,0,11808,0,0,"IF", 0, 2, 0);
	trans[1][11796]	= settr(12103,0,11807,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11807] = settr(12114,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12114,0,11803,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11803] = settr(12110,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12110,0,11797,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12110,0,11799,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12110,0,11801,0,0,"IF", 0, 2, 0);
	trans[1][11797]	= settr(12104,0,11805,5288,5288,"((_pid==0))", 0, 2, 0); /* m: 11798 -> 11805,0 */
	reached1[11798] = 1;
	trans[1][11798]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11804]	= settr(12111,0,11805,1,0,".(goto)", 0, 2, 0);
	trans[1][11799]	= settr(12106,0,11805,5289,5289,"((_pid==1))", 0, 2, 0); /* m: 11800 -> 11805,0 */
	reached1[11800] = 1;
	trans[1][11800]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11801]	= settr(12108,0,11805,5290,5290,"((_pid>1))", 0, 2, 0); /* m: 11802 -> 11805,0 */
	reached1[11802] = 1;
	trans[1][11802]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11805]	= settr(12112,0,11806,5291,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11806]	= settr(12113,0,11896,5292,5292,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11892 -> 0,11896 */
	reached1[11892] = 1;
	trans[1][11811]	= settr(12118,0,11892,1,0,".(goto)", 0, 2, 0); /* m: 11892 -> 0,11896 */
	reached1[11892] = 1;
	trans[1][11808]	= settr(12115,0,11809,2,0,"else", 0, 2, 0);
	trans[1][11809]	= settr(12116,0,11896,5293,5293,"(1)", 0, 2, 0); /* m: 11892 -> 11896,0 */
	reached1[11892] = 1;
	trans[1][11813]	= settr(12120,0,11850,5294,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][11850] = settr(12157,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12157,0,11833,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11833] = settr(12140,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12140,2,11831,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11831] = settr(12138,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12138,2,11814,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12138,2,11817,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12138,2,11820,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12138,2,11823,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12138,2,11826,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12138,2,11829,0,0,"IF", 1, 2, 0);
	trans[1][11814]	= settr(12121,4,11848,5295,5295,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11815 -> 11848,0 */
	reached1[11815] = 1;
	trans[1][11815]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11816]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11832]	= settr(12139,0,11848,5296,5296,".(goto)", 1, 2, 0);
	trans[1][11817]	= settr(12124,4,11848,5297,5297,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11818 -> 11848,0 */
	reached1[11818] = 1;
	trans[1][11818]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11819]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11820]	= settr(12127,4,11848,5298,5298,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11821 -> 11848,0 */
	reached1[11821] = 1;
	trans[1][11821]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11822]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11823]	= settr(12130,4,11848,5299,5299,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11824 -> 11848,0 */
	reached1[11824] = 1;
	trans[1][11824]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11825]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11826]	= settr(12133,4,11848,5300,5300,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 11827 -> 11848,0 */
	reached1[11827] = 1;
	trans[1][11827]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11828]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11829]	= settr(12136,2,11830,2,0,"else", 1, 2, 0);
	trans[1][11830]	= settr(12137,4,11848,5301,5301,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11832 -> 0,11848 */
	reached1[11832] = 1;
	T = trans[1][11848] = settr(12155,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12155,0,11834,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12155,0,11846,0,0,"IF", 0, 2, 0);
	trans[1][11834]	= settr(12141,0,11845,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11845] = settr(12152,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12152,0,11841,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11841] = settr(12148,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12148,0,11835,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12148,0,11837,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12148,0,11839,0,0,"IF", 0, 2, 0);
	trans[1][11835]	= settr(12142,0,11843,5302,5302,"((_pid==0))", 0, 2, 0); /* m: 11836 -> 11843,0 */
	reached1[11836] = 1;
	trans[1][11836]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11842]	= settr(12149,0,11843,1,0,".(goto)", 0, 2, 0);
	trans[1][11837]	= settr(12144,0,11843,5303,5303,"((_pid==1))", 0, 2, 0); /* m: 11838 -> 11843,0 */
	reached1[11838] = 1;
	trans[1][11838]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11839]	= settr(12146,0,11843,5304,5304,"((_pid>1))", 0, 2, 0); /* m: 11840 -> 11843,0 */
	reached1[11840] = 1;
	trans[1][11840]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11843]	= settr(12150,0,11844,5305,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11844]	= settr(12151,0,11896,5306,5306,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11892 -> 0,11896 */
	reached1[11892] = 1;
	trans[1][11849]	= settr(12156,0,11892,1,0,".(goto)", 0, 2, 0); /* m: 11892 -> 0,11896 */
	reached1[11892] = 1;
	trans[1][11846]	= settr(12153,0,11847,2,0,"else", 0, 2, 0);
	trans[1][11847]	= settr(12154,0,11896,5307,5307,"(1)", 0, 2, 0); /* m: 11892 -> 11896,0 */
	reached1[11892] = 1;
	trans[1][11851]	= settr(12158,0,11888,5308,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][11888] = settr(12195,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12195,0,11871,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11871] = settr(12178,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12178,2,11869,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11869] = settr(12176,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12176,2,11852,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12176,2,11855,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12176,2,11858,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12176,2,11861,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12176,2,11864,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12176,2,11867,0,0,"IF", 1, 2, 0);
	trans[1][11852]	= settr(12159,4,11886,5309,5309,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11853 -> 11886,0 */
	reached1[11853] = 1;
	trans[1][11853]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11854]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11870]	= settr(12177,0,11886,5310,5310,".(goto)", 1, 2, 0);
	trans[1][11855]	= settr(12162,4,11886,5311,5311,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11856 -> 11886,0 */
	reached1[11856] = 1;
	trans[1][11856]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11857]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11858]	= settr(12165,4,11886,5312,5312,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11859 -> 11886,0 */
	reached1[11859] = 1;
	trans[1][11859]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11860]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11861]	= settr(12168,4,11886,5313,5313,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11862 -> 11886,0 */
	reached1[11862] = 1;
	trans[1][11862]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11863]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11864]	= settr(12171,4,11886,5314,5314,"((STOP==ABORT))", 1, 2, 0); /* m: 11865 -> 11886,0 */
	reached1[11865] = 1;
	trans[1][11865]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11866]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11867]	= settr(12174,2,11868,2,0,"else", 1, 2, 0);
	trans[1][11868]	= settr(12175,4,11886,5315,5315,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11870 -> 0,11886 */
	reached1[11870] = 1;
	T = trans[1][11886] = settr(12193,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12193,0,11872,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12193,0,11884,0,0,"IF", 0, 2, 0);
	trans[1][11872]	= settr(12179,0,11883,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11883] = settr(12190,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12190,0,11879,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11879] = settr(12186,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12186,0,11873,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12186,0,11875,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12186,0,11877,0,0,"IF", 0, 2, 0);
	trans[1][11873]	= settr(12180,0,11881,5316,5316,"((_pid==0))", 0, 2, 0); /* m: 11874 -> 11881,0 */
	reached1[11874] = 1;
	trans[1][11874]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11880]	= settr(12187,0,11881,1,0,".(goto)", 0, 2, 0);
	trans[1][11875]	= settr(12182,0,11881,5317,5317,"((_pid==1))", 0, 2, 0); /* m: 11876 -> 11881,0 */
	reached1[11876] = 1;
	trans[1][11876]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11877]	= settr(12184,0,11881,5318,5318,"((_pid>1))", 0, 2, 0); /* m: 11878 -> 11881,0 */
	reached1[11878] = 1;
	trans[1][11878]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11881]	= settr(12188,0,11882,5319,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11882]	= settr(12189,0,11896,5320,5320,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 11892 -> 0,11896 */
	reached1[11892] = 1;
	trans[1][11887]	= settr(12194,0,11892,1,0,".(goto)", 0, 2, 0); /* m: 11892 -> 0,11896 */
	reached1[11892] = 1;
	trans[1][11884]	= settr(12191,0,11885,2,0,"else", 0, 2, 0);
	trans[1][11885]	= settr(12192,0,11896,5321,5321,"(1)", 0, 2, 0); /* m: 11892 -> 11896,0 */
	reached1[11892] = 1;
	trans[1][11892]	= settr(12199,0,11896,5322,5322,"j = (j+1)", 0, 2, 0);
	trans[1][11893]	= settr(12200,0,11894,2,0,"else", 0, 2, 0);
	trans[1][11894]	= settr(12201,0,14616,5323,5323,"j = 1", 0, 2, 0);
	trans[1][11895]	= settr(12202,0,14616,1,0,"goto :b83", 0, 2, 0);
	trans[1][11898]	= settr(12205,0,14616,1,0,"break", 0, 2, 0);
	trans[1][12068]	= settr(12375,0,14616,1,0,".(goto)", 0, 2, 0);
	trans[1][11900]	= settr(12207,0,12066,2,0,"else", 0, 2, 0);
	T = trans[ 1][12066] = settr(12373,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12373,0,11901,0,0,"sub-sequence", 0, 2, 0);
	trans[1][11901]	= settr(12208,0,12063,5324,5324,"j = (3-1)", 0, 2, 0);
	trans[1][12064]	= settr(12371,0,12063,1,0,".(goto)", 0, 2, 0);
	T = trans[1][12063] = settr(12370,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(12370,0,11902,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(12370,0,12060,0,0,"DO", 0, 2, 0);
	trans[1][11902]	= settr(12209,0,12058,5325,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][12058] = settr(12365,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12365,0,12056,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12056] = settr(12363,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12363,0,11903,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12363,0,11942,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12363,0,11980,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12363,0,12018,0,0,"IF", 0, 2, 0);
	trans[1][11903]	= settr(12210,0,11941,5326,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][11941] = settr(12248,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12248,0,11923,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11923] = settr(12230,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12230,2,11921,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11921] = settr(12228,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12228,2,11904,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12228,2,11907,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12228,2,11910,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12228,2,11913,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12228,2,11916,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12228,2,11919,0,0,"IF", 1, 2, 0);
	trans[1][11904]	= settr(12211,4,11924,5327,5327,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11905 -> 11924,0 */
	reached1[11905] = 1;
	trans[1][11905]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11906]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11922]	= settr(12229,0,11924,5328,5328,".(goto)", 1, 2, 0);
	trans[1][11907]	= settr(12214,4,11924,5329,5329,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11908 -> 11924,0 */
	reached1[11908] = 1;
	trans[1][11908]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11909]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11910]	= settr(12217,4,11924,5330,5330,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11911 -> 11924,0 */
	reached1[11911] = 1;
	trans[1][11911]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11912]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11913]	= settr(12220,4,11924,5331,5331,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11914 -> 11924,0 */
	reached1[11914] = 1;
	trans[1][11914]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11915]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11916]	= settr(12223,4,11924,5332,5332,"((START==ABORT))", 1, 2, 0); /* m: 11917 -> 11924,0 */
	reached1[11917] = 1;
	trans[1][11917]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11918]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11919]	= settr(12226,2,11920,2,0,"else", 1, 2, 0);
	trans[1][11920]	= settr(12227,4,11924,5333,5333,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11922 -> 0,11924 */
	reached1[11922] = 1;
	trans[1][11924]	= settr(12231,0,11939,5334,5334,"(run Thread(j))", 0, 2, 0);
	T = trans[1][11939] = settr(12246,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12246,0,11925,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12246,0,11937,0,0,"IF", 0, 2, 0);
	trans[1][11925]	= settr(12232,0,11936,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11936] = settr(12243,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12243,0,11932,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11932] = settr(12239,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12239,0,11926,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12239,0,11928,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12239,0,11930,0,0,"IF", 0, 2, 0);
	trans[1][11926]	= settr(12233,0,11934,5335,5335,"((_pid==0))", 0, 2, 0); /* m: 11927 -> 11934,0 */
	reached1[11927] = 1;
	trans[1][11927]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11933]	= settr(12240,0,11934,1,0,".(goto)", 0, 2, 0);
	trans[1][11928]	= settr(12235,0,11934,5336,5336,"((_pid==1))", 0, 2, 0); /* m: 11929 -> 11934,0 */
	reached1[11929] = 1;
	trans[1][11929]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11930]	= settr(12237,0,11934,5337,5337,"((_pid>1))", 0, 2, 0); /* m: 11931 -> 11934,0 */
	reached1[11931] = 1;
	trans[1][11931]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11934]	= settr(12241,0,11935,5338,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11935]	= settr(12242,0,12063,5339,5339,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12059 -> 0,12063 */
	reached1[12059] = 1;
	trans[1][11940]	= settr(12247,0,12059,1,0,".(goto)", 0, 2, 0); /* m: 12059 -> 0,12063 */
	reached1[12059] = 1;
	trans[1][11937]	= settr(12244,0,11938,2,0,"else", 0, 2, 0);
	trans[1][11938]	= settr(12245,0,12063,5340,5340,"(1)", 0, 2, 0); /* m: 12059 -> 12063,0 */
	reached1[12059] = 1;
	trans[1][12057]	= settr(12364,0,12059,1,0,".(goto)", 0, 2, 0); /* m: 12059 -> 0,12063 */
	reached1[12059] = 1;
	trans[1][11942]	= settr(12249,0,11979,5341,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][11979] = settr(12286,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12286,0,11962,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][11962] = settr(12269,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12269,2,11960,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11960] = settr(12267,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12267,2,11943,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12267,2,11946,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12267,2,11949,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12267,2,11952,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12267,2,11955,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12267,2,11958,0,0,"IF", 1, 2, 0);
	trans[1][11943]	= settr(12250,4,11977,5342,5342,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11944 -> 11977,0 */
	reached1[11944] = 1;
	trans[1][11944]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11945]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11961]	= settr(12268,0,11977,5343,5343,".(goto)", 1, 2, 0);
	trans[1][11946]	= settr(12253,4,11977,5344,5344,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11947 -> 11977,0 */
	reached1[11947] = 1;
	trans[1][11947]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11948]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11949]	= settr(12256,4,11977,5345,5345,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11950 -> 11977,0 */
	reached1[11950] = 1;
	trans[1][11950]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11951]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11952]	= settr(12259,4,11977,5346,5346,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11953 -> 11977,0 */
	reached1[11953] = 1;
	trans[1][11953]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11954]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11955]	= settr(12262,4,11977,5347,5347,"((PAUSE==ABORT))", 1, 2, 0); /* m: 11956 -> 11977,0 */
	reached1[11956] = 1;
	trans[1][11956]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11957]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11958]	= settr(12265,2,11959,2,0,"else", 1, 2, 0);
	trans[1][11959]	= settr(12266,4,11977,5348,5348,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11961 -> 0,11977 */
	reached1[11961] = 1;
	T = trans[1][11977] = settr(12284,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12284,0,11963,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12284,0,11975,0,0,"IF", 0, 2, 0);
	trans[1][11963]	= settr(12270,0,11974,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][11974] = settr(12281,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12281,0,11970,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][11970] = settr(12277,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12277,0,11964,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12277,0,11966,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12277,0,11968,0,0,"IF", 0, 2, 0);
	trans[1][11964]	= settr(12271,0,11972,5349,5349,"((_pid==0))", 0, 2, 0); /* m: 11965 -> 11972,0 */
	reached1[11965] = 1;
	trans[1][11965]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11971]	= settr(12278,0,11972,1,0,".(goto)", 0, 2, 0);
	trans[1][11966]	= settr(12273,0,11972,5350,5350,"((_pid==1))", 0, 2, 0); /* m: 11967 -> 11972,0 */
	reached1[11967] = 1;
	trans[1][11967]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][11968]	= settr(12275,0,11972,5351,5351,"((_pid>1))", 0, 2, 0); /* m: 11969 -> 11972,0 */
	reached1[11969] = 1;
	trans[1][11969]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][11972]	= settr(12279,0,11973,5352,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][11973]	= settr(12280,0,12063,5353,5353,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12059 -> 0,12063 */
	reached1[12059] = 1;
	trans[1][11978]	= settr(12285,0,12059,1,0,".(goto)", 0, 2, 0); /* m: 12059 -> 0,12063 */
	reached1[12059] = 1;
	trans[1][11975]	= settr(12282,0,11976,2,0,"else", 0, 2, 0);
	trans[1][11976]	= settr(12283,0,12063,5354,5354,"(1)", 0, 2, 0); /* m: 12059 -> 12063,0 */
	reached1[12059] = 1;
	trans[1][11980]	= settr(12287,0,12017,5355,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][12017] = settr(12324,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12324,0,12000,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12000] = settr(12307,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12307,2,11998,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][11998] = settr(12305,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12305,2,11981,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12305,2,11984,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12305,2,11987,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12305,2,11990,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12305,2,11993,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12305,2,11996,0,0,"IF", 1, 2, 0);
	trans[1][11981]	= settr(12288,4,12015,5356,5356,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11982 -> 12015,0 */
	reached1[11982] = 1;
	trans[1][11982]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][11983]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][11999]	= settr(12306,0,12015,5357,5357,".(goto)", 1, 2, 0);
	trans[1][11984]	= settr(12291,4,12015,5358,5358,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 11985 -> 12015,0 */
	reached1[11985] = 1;
	trans[1][11985]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][11986]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][11987]	= settr(12294,4,12015,5359,5359,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11988 -> 12015,0 */
	reached1[11988] = 1;
	trans[1][11988]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][11989]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][11990]	= settr(12297,4,12015,5360,5360,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 11991 -> 12015,0 */
	reached1[11991] = 1;
	trans[1][11991]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][11992]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][11993]	= settr(12300,4,12015,5361,5361,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 11994 -> 12015,0 */
	reached1[11994] = 1;
	trans[1][11994]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][11995]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][11996]	= settr(12303,2,11997,2,0,"else", 1, 2, 0);
	trans[1][11997]	= settr(12304,4,12015,5362,5362,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 11999 -> 0,12015 */
	reached1[11999] = 1;
	T = trans[1][12015] = settr(12322,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12322,0,12001,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12322,0,12013,0,0,"IF", 0, 2, 0);
	trans[1][12001]	= settr(12308,0,12012,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][12012] = settr(12319,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12319,0,12008,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12008] = settr(12315,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12315,0,12002,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12315,0,12004,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12315,0,12006,0,0,"IF", 0, 2, 0);
	trans[1][12002]	= settr(12309,0,12010,5363,5363,"((_pid==0))", 0, 2, 0); /* m: 12003 -> 12010,0 */
	reached1[12003] = 1;
	trans[1][12003]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12009]	= settr(12316,0,12010,1,0,".(goto)", 0, 2, 0);
	trans[1][12004]	= settr(12311,0,12010,5364,5364,"((_pid==1))", 0, 2, 0); /* m: 12005 -> 12010,0 */
	reached1[12005] = 1;
	trans[1][12005]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12006]	= settr(12313,0,12010,5365,5365,"((_pid>1))", 0, 2, 0); /* m: 12007 -> 12010,0 */
	reached1[12007] = 1;
	trans[1][12007]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12010]	= settr(12317,0,12011,5366,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12011]	= settr(12318,0,12063,5367,5367,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12059 -> 0,12063 */
	reached1[12059] = 1;
	trans[1][12016]	= settr(12323,0,12059,1,0,".(goto)", 0, 2, 0); /* m: 12059 -> 0,12063 */
	reached1[12059] = 1;
	trans[1][12013]	= settr(12320,0,12014,2,0,"else", 0, 2, 0);
	trans[1][12014]	= settr(12321,0,12063,5368,5368,"(1)", 0, 2, 0); /* m: 12059 -> 12063,0 */
	reached1[12059] = 1;
	trans[1][12018]	= settr(12325,0,12055,5369,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][12055] = settr(12362,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12362,0,12038,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12038] = settr(12345,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12345,2,12036,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12036] = settr(12343,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12343,2,12019,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12343,2,12022,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12343,2,12025,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12343,2,12028,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12343,2,12031,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12343,2,12034,0,0,"IF", 1, 2, 0);
	trans[1][12019]	= settr(12326,4,12053,5370,5370,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12020 -> 12053,0 */
	reached1[12020] = 1;
	trans[1][12020]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12021]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12037]	= settr(12344,0,12053,5371,5371,".(goto)", 1, 2, 0);
	trans[1][12022]	= settr(12329,4,12053,5372,5372,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12023 -> 12053,0 */
	reached1[12023] = 1;
	trans[1][12023]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12024]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12025]	= settr(12332,4,12053,5373,5373,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12026 -> 12053,0 */
	reached1[12026] = 1;
	trans[1][12026]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12027]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12028]	= settr(12335,4,12053,5374,5374,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12029 -> 12053,0 */
	reached1[12029] = 1;
	trans[1][12029]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12030]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12031]	= settr(12338,4,12053,5375,5375,"((STOP==ABORT))", 1, 2, 0); /* m: 12032 -> 12053,0 */
	reached1[12032] = 1;
	trans[1][12032]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12033]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12034]	= settr(12341,2,12035,2,0,"else", 1, 2, 0);
	trans[1][12035]	= settr(12342,4,12053,5376,5376,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12037 -> 0,12053 */
	reached1[12037] = 1;
	T = trans[1][12053] = settr(12360,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12360,0,12039,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12360,0,12051,0,0,"IF", 0, 2, 0);
	trans[1][12039]	= settr(12346,0,12050,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][12050] = settr(12357,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12357,0,12046,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12046] = settr(12353,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12353,0,12040,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12353,0,12042,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12353,0,12044,0,0,"IF", 0, 2, 0);
	trans[1][12040]	= settr(12347,0,12048,5377,5377,"((_pid==0))", 0, 2, 0); /* m: 12041 -> 12048,0 */
	reached1[12041] = 1;
	trans[1][12041]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12047]	= settr(12354,0,12048,1,0,".(goto)", 0, 2, 0);
	trans[1][12042]	= settr(12349,0,12048,5378,5378,"((_pid==1))", 0, 2, 0); /* m: 12043 -> 12048,0 */
	reached1[12043] = 1;
	trans[1][12043]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12044]	= settr(12351,0,12048,5379,5379,"((_pid>1))", 0, 2, 0); /* m: 12045 -> 12048,0 */
	reached1[12045] = 1;
	trans[1][12045]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12048]	= settr(12355,0,12049,5380,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12049]	= settr(12356,0,12063,5381,5381,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12059 -> 0,12063 */
	reached1[12059] = 1;
	trans[1][12054]	= settr(12361,0,12059,1,0,".(goto)", 0, 2, 0); /* m: 12059 -> 0,12063 */
	reached1[12059] = 1;
	trans[1][12051]	= settr(12358,0,12052,2,0,"else", 0, 2, 0);
	trans[1][12052]	= settr(12359,0,12063,5382,5382,"(1)", 0, 2, 0); /* m: 12059 -> 12063,0 */
	reached1[12059] = 1;
	trans[1][12059]	= settr(12366,0,12063,5383,5383,"j = (j-1)", 0, 2, 0);
	trans[1][12060]	= settr(12367,0,12061,2,0,"else", 0, 2, 0);
	trans[1][12061]	= settr(12368,0,14616,5384,5384,"j = 1", 0, 2, 0);
	trans[1][12062]	= settr(12369,0,14616,1,0,"goto :b84", 0, 2, 0);
	trans[1][12065]	= settr(12372,0,14616,1,0,"break", 0, 2, 0);
	trans[1][12297]	= settr(12604,0,14616,1,0,".(goto)", 0, 2, 0);
	trans[1][12070]	= settr(12377,0,12295,2,0,"else", 0, 2, 0);
	T = trans[ 1][12295] = settr(12602,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12602,0,12071,0,0,"sub-sequence", 0, 2, 0);
	trans[1][12071]	= settr(12378,0,12236,5385,0,"printf('Supervisor propagating command %e...\\n',8)", 0, 2, 0);
	T = trans[ 1][12236] = settr(12543,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12543,0,12233,0,0,"sub-sequence", 0, 2, 0);
	trans[1][12234]	= settr(12541,0,12233,1,0,".(goto)", 0, 2, 0);
	T = trans[1][12233] = settr(12540,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(12540,0,12072,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(12540,0,12230,0,0,"DO", 0, 2, 0);
	trans[1][12072]	= settr(12379,0,12228,5386,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][12228] = settr(12535,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12535,0,12226,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12226] = settr(12533,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12533,0,12073,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12533,0,12112,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12533,0,12150,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12533,0,12188,0,0,"IF", 0, 2, 0);
	trans[1][12073]	= settr(12380,0,12111,5387,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][12111] = settr(12418,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12418,0,12093,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12093] = settr(12400,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12400,2,12091,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12091] = settr(12398,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12398,2,12074,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12398,2,12077,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12398,2,12080,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12398,2,12083,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12398,2,12086,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12398,2,12089,0,0,"IF", 1, 2, 0);
	trans[1][12074]	= settr(12381,4,12094,5388,5388,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12075 -> 12094,0 */
	reached1[12075] = 1;
	trans[1][12075]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12076]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12092]	= settr(12399,0,12094,5389,5389,".(goto)", 1, 2, 0);
	trans[1][12077]	= settr(12384,4,12094,5390,5390,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12078 -> 12094,0 */
	reached1[12078] = 1;
	trans[1][12078]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12079]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12080]	= settr(12387,4,12094,5391,5391,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12081 -> 12094,0 */
	reached1[12081] = 1;
	trans[1][12081]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12082]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12083]	= settr(12390,4,12094,5392,5392,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12084 -> 12094,0 */
	reached1[12084] = 1;
	trans[1][12084]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12085]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12086]	= settr(12393,4,12094,5393,5393,"((START==ABORT))", 1, 2, 0); /* m: 12087 -> 12094,0 */
	reached1[12087] = 1;
	trans[1][12087]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12088]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12089]	= settr(12396,2,12090,2,0,"else", 1, 2, 0);
	trans[1][12090]	= settr(12397,4,12094,5394,5394,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12092 -> 0,12094 */
	reached1[12092] = 1;
	trans[1][12094]	= settr(12401,0,12109,5395,5395,"(run Thread(j))", 0, 2, 0);
	T = trans[1][12109] = settr(12416,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(12416,0,12095,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(12416,0,12107,0,0,"IF", 0, 2, 0);
	trans[1][12095]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][12106] = settr(12413,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12413,0,12102,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12102] = settr(12409,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12409,0,12096,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12409,0,12098,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12409,0,12100,0,0,"IF", 0, 2, 0);
	trans[1][12096]	= settr(12403,0,12104,5396,5396,"((_pid==0))", 0, 2, 0); /* m: 12097 -> 12104,0 */
	reached1[12097] = 1;
	trans[1][12097]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12103]	= settr(12410,0,12104,1,0,".(goto)", 0, 2, 0);
	trans[1][12098]	= settr(12405,0,12104,5397,5397,"((_pid==1))", 0, 2, 0); /* m: 12099 -> 12104,0 */
	reached1[12099] = 1;
	trans[1][12099]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12100]	= settr(12407,0,12104,5398,5398,"((_pid>1))", 0, 2, 0); /* m: 12101 -> 12104,0 */
	reached1[12101] = 1;
	trans[1][12101]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12104]	= settr(12411,0,12105,5399,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12105]	= settr(12412,0,12233,5400,5400,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12229 -> 0,12233 */
	reached1[12229] = 1;
	trans[1][12110]	= settr(12417,0,12229,1,0,".(goto)", 0, 2, 0); /* m: 12229 -> 0,12233 */
	reached1[12229] = 1;
	trans[1][12107]	= settr(12414,0,12108,2,0,"else", 0, 2, 0);
	trans[1][12108]	= settr(12415,0,12233,5401,5401,"(1)", 0, 2, 0); /* m: 12229 -> 12233,0 */
	reached1[12229] = 1;
	trans[1][12227]	= settr(12534,0,12229,1,0,".(goto)", 0, 2, 0); /* m: 12229 -> 0,12233 */
	reached1[12229] = 1;
	trans[1][12112]	= settr(12419,0,12149,5402,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][12149] = settr(12456,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12456,0,12132,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12132] = settr(12439,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12439,2,12130,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12130] = settr(12437,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12437,2,12113,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12437,2,12116,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12437,2,12119,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12437,2,12122,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12437,2,12125,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12437,2,12128,0,0,"IF", 1, 2, 0);
	trans[1][12113]	= settr(12420,4,12147,5403,5403,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12114 -> 12147,0 */
	reached1[12114] = 1;
	trans[1][12114]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12115]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12131]	= settr(12438,0,12147,5404,5404,".(goto)", 1, 2, 0);
	trans[1][12116]	= settr(12423,4,12147,5405,5405,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12117 -> 12147,0 */
	reached1[12117] = 1;
	trans[1][12117]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12118]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12119]	= settr(12426,4,12147,5406,5406,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12120 -> 12147,0 */
	reached1[12120] = 1;
	trans[1][12120]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12121]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12122]	= settr(12429,4,12147,5407,5407,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12123 -> 12147,0 */
	reached1[12123] = 1;
	trans[1][12123]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12124]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12125]	= settr(12432,4,12147,5408,5408,"((PAUSE==ABORT))", 1, 2, 0); /* m: 12126 -> 12147,0 */
	reached1[12126] = 1;
	trans[1][12126]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12127]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12128]	= settr(12435,2,12129,2,0,"else", 1, 2, 0);
	trans[1][12129]	= settr(12436,4,12147,5409,5409,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12131 -> 0,12147 */
	reached1[12131] = 1;
	T = trans[1][12147] = settr(12454,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(12454,0,12133,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(12454,0,12145,0,0,"IF", 0, 2, 0);
	trans[1][12133]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][12144] = settr(12451,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12451,0,12140,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12140] = settr(12447,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12447,0,12134,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12447,0,12136,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12447,0,12138,0,0,"IF", 0, 2, 0);
	trans[1][12134]	= settr(12441,0,12142,5410,5410,"((_pid==0))", 0, 2, 0); /* m: 12135 -> 12142,0 */
	reached1[12135] = 1;
	trans[1][12135]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12141]	= settr(12448,0,12142,1,0,".(goto)", 0, 2, 0);
	trans[1][12136]	= settr(12443,0,12142,5411,5411,"((_pid==1))", 0, 2, 0); /* m: 12137 -> 12142,0 */
	reached1[12137] = 1;
	trans[1][12137]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12138]	= settr(12445,0,12142,5412,5412,"((_pid>1))", 0, 2, 0); /* m: 12139 -> 12142,0 */
	reached1[12139] = 1;
	trans[1][12139]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12142]	= settr(12449,0,12143,5413,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12143]	= settr(12450,0,12233,5414,5414,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12229 -> 0,12233 */
	reached1[12229] = 1;
	trans[1][12148]	= settr(12455,0,12229,1,0,".(goto)", 0, 2, 0); /* m: 12229 -> 0,12233 */
	reached1[12229] = 1;
	trans[1][12145]	= settr(12452,0,12146,2,0,"else", 0, 2, 0);
	trans[1][12146]	= settr(12453,0,12233,5415,5415,"(1)", 0, 2, 0); /* m: 12229 -> 12233,0 */
	reached1[12229] = 1;
	trans[1][12150]	= settr(12457,0,12187,5416,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][12187] = settr(12494,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12494,0,12170,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12170] = settr(12477,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12477,2,12168,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12168] = settr(12475,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12475,2,12151,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12475,2,12154,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12475,2,12157,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12475,2,12160,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12475,2,12163,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12475,2,12166,0,0,"IF", 1, 2, 0);
	trans[1][12151]	= settr(12458,4,12185,5417,5417,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12152 -> 12185,0 */
	reached1[12152] = 1;
	trans[1][12152]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12153]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12169]	= settr(12476,0,12185,5418,5418,".(goto)", 1, 2, 0);
	trans[1][12154]	= settr(12461,4,12185,5419,5419,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12155 -> 12185,0 */
	reached1[12155] = 1;
	trans[1][12155]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12156]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12157]	= settr(12464,4,12185,5420,5420,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12158 -> 12185,0 */
	reached1[12158] = 1;
	trans[1][12158]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12159]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12160]	= settr(12467,4,12185,5421,5421,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12161 -> 12185,0 */
	reached1[12161] = 1;
	trans[1][12161]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12162]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12163]	= settr(12470,4,12185,5422,5422,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 12164 -> 12185,0 */
	reached1[12164] = 1;
	trans[1][12164]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12165]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12166]	= settr(12473,2,12167,2,0,"else", 1, 2, 0);
	trans[1][12167]	= settr(12474,4,12185,5423,5423,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12169 -> 0,12185 */
	reached1[12169] = 1;
	T = trans[1][12185] = settr(12492,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(12492,0,12171,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(12492,0,12183,0,0,"IF", 0, 2, 0);
	trans[1][12171]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][12182] = settr(12489,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12489,0,12178,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12178] = settr(12485,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12485,0,12172,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12485,0,12174,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12485,0,12176,0,0,"IF", 0, 2, 0);
	trans[1][12172]	= settr(12479,0,12180,5424,5424,"((_pid==0))", 0, 2, 0); /* m: 12173 -> 12180,0 */
	reached1[12173] = 1;
	trans[1][12173]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12179]	= settr(12486,0,12180,1,0,".(goto)", 0, 2, 0);
	trans[1][12174]	= settr(12481,0,12180,5425,5425,"((_pid==1))", 0, 2, 0); /* m: 12175 -> 12180,0 */
	reached1[12175] = 1;
	trans[1][12175]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12176]	= settr(12483,0,12180,5426,5426,"((_pid>1))", 0, 2, 0); /* m: 12177 -> 12180,0 */
	reached1[12177] = 1;
	trans[1][12177]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12180]	= settr(12487,0,12181,5427,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12181]	= settr(12488,0,12233,5428,5428,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12229 -> 0,12233 */
	reached1[12229] = 1;
	trans[1][12186]	= settr(12493,0,12229,1,0,".(goto)", 0, 2, 0); /* m: 12229 -> 0,12233 */
	reached1[12229] = 1;
	trans[1][12183]	= settr(12490,0,12184,2,0,"else", 0, 2, 0);
	trans[1][12184]	= settr(12491,0,12233,5429,5429,"(1)", 0, 2, 0); /* m: 12229 -> 12233,0 */
	reached1[12229] = 1;
	trans[1][12188]	= settr(12495,0,12225,5430,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][12225] = settr(12532,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12532,0,12208,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12208] = settr(12515,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12515,2,12206,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12206] = settr(12513,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12513,2,12189,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12513,2,12192,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12513,2,12195,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12513,2,12198,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12513,2,12201,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12513,2,12204,0,0,"IF", 1, 2, 0);
	trans[1][12189]	= settr(12496,4,12223,5431,5431,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12190 -> 12223,0 */
	reached1[12190] = 1;
	trans[1][12190]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12191]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12207]	= settr(12514,0,12223,5432,5432,".(goto)", 1, 2, 0);
	trans[1][12192]	= settr(12499,4,12223,5433,5433,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12193 -> 12223,0 */
	reached1[12193] = 1;
	trans[1][12193]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12194]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12195]	= settr(12502,4,12223,5434,5434,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12196 -> 12223,0 */
	reached1[12196] = 1;
	trans[1][12196]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12197]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12198]	= settr(12505,4,12223,5435,5435,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12199 -> 12223,0 */
	reached1[12199] = 1;
	trans[1][12199]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12200]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12201]	= settr(12508,4,12223,5436,5436,"((STOP==ABORT))", 1, 2, 0); /* m: 12202 -> 12223,0 */
	reached1[12202] = 1;
	trans[1][12202]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12203]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12204]	= settr(12511,2,12205,2,0,"else", 1, 2, 0);
	trans[1][12205]	= settr(12512,4,12223,5437,5437,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12207 -> 0,12223 */
	reached1[12207] = 1;
	T = trans[1][12223] = settr(12530,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(12530,0,12209,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(12530,0,12221,0,0,"IF", 0, 2, 0);
	trans[1][12209]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][12220] = settr(12527,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12527,0,12216,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12216] = settr(12523,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12523,0,12210,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12523,0,12212,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12523,0,12214,0,0,"IF", 0, 2, 0);
	trans[1][12210]	= settr(12517,0,12218,5438,5438,"((_pid==0))", 0, 2, 0); /* m: 12211 -> 12218,0 */
	reached1[12211] = 1;
	trans[1][12211]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12217]	= settr(12524,0,12218,1,0,".(goto)", 0, 2, 0);
	trans[1][12212]	= settr(12519,0,12218,5439,5439,"((_pid==1))", 0, 2, 0); /* m: 12213 -> 12218,0 */
	reached1[12213] = 1;
	trans[1][12213]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12214]	= settr(12521,0,12218,5440,5440,"((_pid>1))", 0, 2, 0); /* m: 12215 -> 12218,0 */
	reached1[12215] = 1;
	trans[1][12215]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12218]	= settr(12525,0,12219,5441,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12219]	= settr(12526,0,12233,5442,5442,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12229 -> 0,12233 */
	reached1[12229] = 1;
	trans[1][12224]	= settr(12531,0,12229,1,0,".(goto)", 0, 2, 0); /* m: 12229 -> 0,12233 */
	reached1[12229] = 1;
	trans[1][12221]	= settr(12528,0,12222,2,0,"else", 0, 2, 0);
	trans[1][12222]	= settr(12529,0,12233,5443,5443,"(1)", 0, 2, 0); /* m: 12229 -> 12233,0 */
	reached1[12229] = 1;
	trans[1][12229]	= settr(12536,0,12233,5444,5444,"j = (j+1)", 0, 2, 0);
	trans[1][12230]	= settr(12537,0,12231,2,0,"else", 0, 2, 0);
	trans[1][12231]	= settr(12538,0,12292,5445,5445,"j = 1", 0, 2, 0);
	trans[1][12232]	= settr(12539,0,12292,1,0,"goto :b85", 0, 2, 0);
	trans[1][12235]	= settr(12542,0,12292,1,0,"break", 0, 2, 0);
	trans[1][12293]	= settr(12600,0,12292,1,0,".(goto)", 0, 2, 0);
	T = trans[1][12292] = settr(12599,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(12599,0,12237,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(12599,0,12289,0,0,"DO", 0, 2, 0);
	trans[1][12237]	= settr(12544,0,12286,5446,0,"((j<3))", 0, 2, 0);
	T = trans[1][12286] = settr(12593,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12593,0,12238,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12593,0,12250,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12593,0,12262,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12593,0,12274,0,0,"IF", 0, 2, 0);
	trans[1][12238]	= settr(12545,0,12249,5447,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][12249] = settr(12556,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12556,0,12245,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12245] = settr(12552,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12552,0,12239,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12552,0,12241,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12552,0,12243,0,0,"IF", 0, 2, 0);
	trans[1][12239]	= settr(12546,0,12247,5448,5448,"((_pid==0))", 0, 2, 0); /* m: 12240 -> 12247,0 */
	reached1[12240] = 1;
	trans[1][12240]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12246]	= settr(12553,0,12247,1,0,".(goto)", 0, 2, 0);
	trans[1][12241]	= settr(12548,0,12247,5449,5449,"((_pid==1))", 0, 2, 0); /* m: 12242 -> 12247,0 */
	reached1[12242] = 1;
	trans[1][12242]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12243]	= settr(12550,0,12247,5450,5450,"((_pid>1))", 0, 2, 0); /* m: 12244 -> 12247,0 */
	reached1[12244] = 1;
	trans[1][12244]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12247]	= settr(12554,0,12248,5451,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12248]	= settr(12555,0,12292,5452,5452,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12288 -> 0,12292 */
	reached1[12288] = 1;
	trans[1][12287]	= settr(12594,0,12288,1,0,".(goto)", 0, 2, 0); /* m: 12288 -> 0,12292 */
	reached1[12288] = 1;
	trans[1][12250]	= settr(12557,0,12261,5453,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][12261] = settr(12568,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12568,0,12257,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12257] = settr(12564,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12564,0,12251,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12564,0,12253,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12564,0,12255,0,0,"IF", 0, 2, 0);
	trans[1][12251]	= settr(12558,0,12259,5454,5454,"((_pid==0))", 0, 2, 0); /* m: 12252 -> 12259,0 */
	reached1[12252] = 1;
	trans[1][12252]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12258]	= settr(12565,0,12259,1,0,".(goto)", 0, 2, 0);
	trans[1][12253]	= settr(12560,0,12259,5455,5455,"((_pid==1))", 0, 2, 0); /* m: 12254 -> 12259,0 */
	reached1[12254] = 1;
	trans[1][12254]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12255]	= settr(12562,0,12259,5456,5456,"((_pid>1))", 0, 2, 0); /* m: 12256 -> 12259,0 */
	reached1[12256] = 1;
	trans[1][12256]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12259]	= settr(12566,0,12260,5457,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12260]	= settr(12567,0,12292,5458,5458,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12288 -> 0,12292 */
	reached1[12288] = 1;
	trans[1][12262]	= settr(12569,0,12273,5459,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][12273] = settr(12580,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12580,0,12269,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12269] = settr(12576,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12576,0,12263,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12576,0,12265,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12576,0,12267,0,0,"IF", 0, 2, 0);
	trans[1][12263]	= settr(12570,0,12271,5460,5460,"((_pid==0))", 0, 2, 0); /* m: 12264 -> 12271,0 */
	reached1[12264] = 1;
	trans[1][12264]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12270]	= settr(12577,0,12271,1,0,".(goto)", 0, 2, 0);
	trans[1][12265]	= settr(12572,0,12271,5461,5461,"((_pid==1))", 0, 2, 0); /* m: 12266 -> 12271,0 */
	reached1[12266] = 1;
	trans[1][12266]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12267]	= settr(12574,0,12271,5462,5462,"((_pid>1))", 0, 2, 0); /* m: 12268 -> 12271,0 */
	reached1[12268] = 1;
	trans[1][12268]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12271]	= settr(12578,0,12272,5463,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12272]	= settr(12579,0,12292,5464,5464,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12288 -> 0,12292 */
	reached1[12288] = 1;
	trans[1][12274]	= settr(12581,0,12285,5465,0,"((8==STOP))", 0, 2, 0);
	T = trans[ 1][12285] = settr(12592,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12592,0,12281,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12281] = settr(12588,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12588,0,12275,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12588,0,12277,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12588,0,12279,0,0,"IF", 0, 2, 0);
	trans[1][12275]	= settr(12582,0,12283,5466,5466,"((_pid==0))", 0, 2, 0); /* m: 12276 -> 12283,0 */
	reached1[12276] = 1;
	trans[1][12276]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12282]	= settr(12589,0,12283,1,0,".(goto)", 0, 2, 0);
	trans[1][12277]	= settr(12584,0,12283,5467,5467,"((_pid==1))", 0, 2, 0); /* m: 12278 -> 12283,0 */
	reached1[12278] = 1;
	trans[1][12278]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12279]	= settr(12586,0,12283,5468,5468,"((_pid>1))", 0, 2, 0); /* m: 12280 -> 12283,0 */
	reached1[12280] = 1;
	trans[1][12280]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12283]	= settr(12590,0,12284,5469,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12284]	= settr(12591,0,12292,5470,5470,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12288 -> 0,12292 */
	reached1[12288] = 1;
	trans[1][12288]	= settr(12595,0,12292,5471,5471,"j = (j+1)", 0, 2, 0);
	trans[1][12289]	= settr(12596,0,12290,2,0,"else", 0, 2, 0);
	trans[1][12290]	= settr(12597,0,14616,5472,5472,"j = 1", 0, 2, 0);
	trans[1][12291]	= settr(12598,0,14616,1,0,"goto :b86", 0, 2, 0);
	trans[1][12294]	= settr(12601,0,14616,1,0,"break", 0, 2, 0);
	trans[1][12301]	= settr(12608,0,12873,5473,0,"(((10==ABORTING)||(10==STOPPING)))", 0, 2, 0);
	T = trans[ 1][12873] = settr(13180,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13180,0,12871,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12871] = settr(13178,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13178,0,12302,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13178,0,12305,0,0,"IF", 0, 2, 0);
	trans[1][12302]	= settr(12609,0,12303,5474,0,"(((12==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][12303]	= settr(12610,0,12304,5475,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][12304]	= settr(12611,0,14616,5476,5476,"supervisor_started = 1", 1, 2, 0);
	trans[1][12872]	= settr(13179,0,14616,1,0,".(goto)", 0, 2, 0);
	trans[1][12305]	= settr(12612,0,12869,2,0,"else", 0, 2, 0);
	T = trans[1][12869] = settr(13176,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13176,0,12306,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13176,0,12643,0,0,"IF", 0, 2, 0);
	trans[1][12306]	= settr(12613,0,12642,5477,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][12642] = settr(12949,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12949,0,12640,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12640] = settr(12947,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12947,0,12307,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12947,0,12473,0,0,"IF", 0, 2, 0);
	trans[1][12307]	= settr(12614,0,12472,5478,0,"(((12==START)||(12==PAUSED)))", 0, 2, 0);
	T = trans[ 1][12472] = settr(12779,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12779,0,12469,0,0,"sub-sequence", 0, 2, 0);
	trans[1][12470]	= settr(12777,0,12469,1,0,".(goto)", 0, 2, 0);
	T = trans[1][12469] = settr(12776,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(12776,0,12308,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(12776,0,12466,0,0,"DO", 0, 2, 0);
	trans[1][12308]	= settr(12615,0,12464,5479,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][12464] = settr(12771,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12771,0,12462,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12462] = settr(12769,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12769,0,12309,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12769,0,12348,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12769,0,12386,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12769,0,12424,0,0,"IF", 0, 2, 0);
	trans[1][12309]	= settr(12616,0,12347,5480,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][12347] = settr(12654,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12654,0,12329,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12329] = settr(12636,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12636,2,12327,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12327] = settr(12634,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12634,2,12310,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12634,2,12313,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12634,2,12316,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12634,2,12319,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12634,2,12322,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12634,2,12325,0,0,"IF", 1, 2, 0);
	trans[1][12310]	= settr(12617,4,12330,5481,5481,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12311 -> 12330,0 */
	reached1[12311] = 1;
	trans[1][12311]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12312]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12328]	= settr(12635,0,12330,5482,5482,".(goto)", 1, 2, 0);
	trans[1][12313]	= settr(12620,4,12330,5483,5483,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12314 -> 12330,0 */
	reached1[12314] = 1;
	trans[1][12314]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12315]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12316]	= settr(12623,4,12330,5484,5484,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12317 -> 12330,0 */
	reached1[12317] = 1;
	trans[1][12317]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12318]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12319]	= settr(12626,4,12330,5485,5485,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12320 -> 12330,0 */
	reached1[12320] = 1;
	trans[1][12320]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12321]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12322]	= settr(12629,4,12330,5486,5486,"((START==ABORT))", 1, 2, 0); /* m: 12323 -> 12330,0 */
	reached1[12323] = 1;
	trans[1][12323]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12324]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12325]	= settr(12632,2,12326,2,0,"else", 1, 2, 0);
	trans[1][12326]	= settr(12633,4,12330,5487,5487,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12328 -> 0,12330 */
	reached1[12328] = 1;
	trans[1][12330]	= settr(12637,0,12345,5488,5488,"(run Thread(j))", 0, 2, 0);
	T = trans[1][12345] = settr(12652,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12652,0,12331,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12652,0,12343,0,0,"IF", 0, 2, 0);
	trans[1][12331]	= settr(12638,0,12342,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][12342] = settr(12649,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12649,0,12338,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12338] = settr(12645,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12645,0,12332,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12645,0,12334,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12645,0,12336,0,0,"IF", 0, 2, 0);
	trans[1][12332]	= settr(12639,0,12340,5489,5489,"((_pid==0))", 0, 2, 0); /* m: 12333 -> 12340,0 */
	reached1[12333] = 1;
	trans[1][12333]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12339]	= settr(12646,0,12340,1,0,".(goto)", 0, 2, 0);
	trans[1][12334]	= settr(12641,0,12340,5490,5490,"((_pid==1))", 0, 2, 0); /* m: 12335 -> 12340,0 */
	reached1[12335] = 1;
	trans[1][12335]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12336]	= settr(12643,0,12340,5491,5491,"((_pid>1))", 0, 2, 0); /* m: 12337 -> 12340,0 */
	reached1[12337] = 1;
	trans[1][12337]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12340]	= settr(12647,0,12341,5492,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12341]	= settr(12648,0,12469,5493,5493,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12465 -> 0,12469 */
	reached1[12465] = 1;
	trans[1][12346]	= settr(12653,0,12465,1,0,".(goto)", 0, 2, 0); /* m: 12465 -> 0,12469 */
	reached1[12465] = 1;
	trans[1][12343]	= settr(12650,0,12344,2,0,"else", 0, 2, 0);
	trans[1][12344]	= settr(12651,0,12469,5494,5494,"(1)", 0, 2, 0); /* m: 12465 -> 12469,0 */
	reached1[12465] = 1;
	trans[1][12463]	= settr(12770,0,12465,1,0,".(goto)", 0, 2, 0); /* m: 12465 -> 0,12469 */
	reached1[12465] = 1;
	trans[1][12348]	= settr(12655,0,12385,5495,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][12385] = settr(12692,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12692,0,12368,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12368] = settr(12675,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12675,2,12366,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12366] = settr(12673,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12673,2,12349,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12673,2,12352,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12673,2,12355,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12673,2,12358,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12673,2,12361,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12673,2,12364,0,0,"IF", 1, 2, 0);
	trans[1][12349]	= settr(12656,4,12383,5496,5496,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12350 -> 12383,0 */
	reached1[12350] = 1;
	trans[1][12350]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12351]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12367]	= settr(12674,0,12383,5497,5497,".(goto)", 1, 2, 0);
	trans[1][12352]	= settr(12659,4,12383,5498,5498,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12353 -> 12383,0 */
	reached1[12353] = 1;
	trans[1][12353]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12354]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12355]	= settr(12662,4,12383,5499,5499,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12356 -> 12383,0 */
	reached1[12356] = 1;
	trans[1][12356]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12357]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12358]	= settr(12665,4,12383,5500,5500,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12359 -> 12383,0 */
	reached1[12359] = 1;
	trans[1][12359]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12360]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12361]	= settr(12668,4,12383,5501,5501,"((PAUSE==ABORT))", 1, 2, 0); /* m: 12362 -> 12383,0 */
	reached1[12362] = 1;
	trans[1][12362]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12363]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12364]	= settr(12671,2,12365,2,0,"else", 1, 2, 0);
	trans[1][12365]	= settr(12672,4,12383,5502,5502,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12367 -> 0,12383 */
	reached1[12367] = 1;
	T = trans[1][12383] = settr(12690,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12690,0,12369,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12690,0,12381,0,0,"IF", 0, 2, 0);
	trans[1][12369]	= settr(12676,0,12380,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][12380] = settr(12687,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12687,0,12376,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12376] = settr(12683,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12683,0,12370,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12683,0,12372,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12683,0,12374,0,0,"IF", 0, 2, 0);
	trans[1][12370]	= settr(12677,0,12378,5503,5503,"((_pid==0))", 0, 2, 0); /* m: 12371 -> 12378,0 */
	reached1[12371] = 1;
	trans[1][12371]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12377]	= settr(12684,0,12378,1,0,".(goto)", 0, 2, 0);
	trans[1][12372]	= settr(12679,0,12378,5504,5504,"((_pid==1))", 0, 2, 0); /* m: 12373 -> 12378,0 */
	reached1[12373] = 1;
	trans[1][12373]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12374]	= settr(12681,0,12378,5505,5505,"((_pid>1))", 0, 2, 0); /* m: 12375 -> 12378,0 */
	reached1[12375] = 1;
	trans[1][12375]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12378]	= settr(12685,0,12379,5506,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12379]	= settr(12686,0,12469,5507,5507,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12465 -> 0,12469 */
	reached1[12465] = 1;
	trans[1][12384]	= settr(12691,0,12465,1,0,".(goto)", 0, 2, 0); /* m: 12465 -> 0,12469 */
	reached1[12465] = 1;
	trans[1][12381]	= settr(12688,0,12382,2,0,"else", 0, 2, 0);
	trans[1][12382]	= settr(12689,0,12469,5508,5508,"(1)", 0, 2, 0); /* m: 12465 -> 12469,0 */
	reached1[12465] = 1;
	trans[1][12386]	= settr(12693,0,12423,5509,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][12423] = settr(12730,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12730,0,12406,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12406] = settr(12713,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12713,2,12404,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12404] = settr(12711,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12711,2,12387,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12711,2,12390,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12711,2,12393,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12711,2,12396,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12711,2,12399,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12711,2,12402,0,0,"IF", 1, 2, 0);
	trans[1][12387]	= settr(12694,4,12421,5510,5510,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12388 -> 12421,0 */
	reached1[12388] = 1;
	trans[1][12388]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12389]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12405]	= settr(12712,0,12421,5511,5511,".(goto)", 1, 2, 0);
	trans[1][12390]	= settr(12697,4,12421,5512,5512,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12391 -> 12421,0 */
	reached1[12391] = 1;
	trans[1][12391]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12392]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12393]	= settr(12700,4,12421,5513,5513,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12394 -> 12421,0 */
	reached1[12394] = 1;
	trans[1][12394]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12395]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12396]	= settr(12703,4,12421,5514,5514,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12397 -> 12421,0 */
	reached1[12397] = 1;
	trans[1][12397]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12398]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12399]	= settr(12706,4,12421,5515,5515,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 12400 -> 12421,0 */
	reached1[12400] = 1;
	trans[1][12400]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12401]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12402]	= settr(12709,2,12403,2,0,"else", 1, 2, 0);
	trans[1][12403]	= settr(12710,4,12421,5516,5516,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12405 -> 0,12421 */
	reached1[12405] = 1;
	T = trans[1][12421] = settr(12728,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12728,0,12407,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12728,0,12419,0,0,"IF", 0, 2, 0);
	trans[1][12407]	= settr(12714,0,12418,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][12418] = settr(12725,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12725,0,12414,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12414] = settr(12721,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12721,0,12408,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12721,0,12410,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12721,0,12412,0,0,"IF", 0, 2, 0);
	trans[1][12408]	= settr(12715,0,12416,5517,5517,"((_pid==0))", 0, 2, 0); /* m: 12409 -> 12416,0 */
	reached1[12409] = 1;
	trans[1][12409]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12415]	= settr(12722,0,12416,1,0,".(goto)", 0, 2, 0);
	trans[1][12410]	= settr(12717,0,12416,5518,5518,"((_pid==1))", 0, 2, 0); /* m: 12411 -> 12416,0 */
	reached1[12411] = 1;
	trans[1][12411]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12412]	= settr(12719,0,12416,5519,5519,"((_pid>1))", 0, 2, 0); /* m: 12413 -> 12416,0 */
	reached1[12413] = 1;
	trans[1][12413]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12416]	= settr(12723,0,12417,5520,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12417]	= settr(12724,0,12469,5521,5521,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12465 -> 0,12469 */
	reached1[12465] = 1;
	trans[1][12422]	= settr(12729,0,12465,1,0,".(goto)", 0, 2, 0); /* m: 12465 -> 0,12469 */
	reached1[12465] = 1;
	trans[1][12419]	= settr(12726,0,12420,2,0,"else", 0, 2, 0);
	trans[1][12420]	= settr(12727,0,12469,5522,5522,"(1)", 0, 2, 0); /* m: 12465 -> 12469,0 */
	reached1[12465] = 1;
	trans[1][12424]	= settr(12731,0,12461,5523,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][12461] = settr(12768,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12768,0,12444,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12444] = settr(12751,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12751,2,12442,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12442] = settr(12749,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12749,2,12425,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12749,2,12428,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12749,2,12431,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12749,2,12434,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12749,2,12437,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12749,2,12440,0,0,"IF", 1, 2, 0);
	trans[1][12425]	= settr(12732,4,12459,5524,5524,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12426 -> 12459,0 */
	reached1[12426] = 1;
	trans[1][12426]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12427]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12443]	= settr(12750,0,12459,5525,5525,".(goto)", 1, 2, 0);
	trans[1][12428]	= settr(12735,4,12459,5526,5526,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12429 -> 12459,0 */
	reached1[12429] = 1;
	trans[1][12429]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12430]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12431]	= settr(12738,4,12459,5527,5527,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12432 -> 12459,0 */
	reached1[12432] = 1;
	trans[1][12432]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12433]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12434]	= settr(12741,4,12459,5528,5528,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12435 -> 12459,0 */
	reached1[12435] = 1;
	trans[1][12435]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12436]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12437]	= settr(12744,4,12459,5529,5529,"((STOP==ABORT))", 1, 2, 0); /* m: 12438 -> 12459,0 */
	reached1[12438] = 1;
	trans[1][12438]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12439]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12440]	= settr(12747,2,12441,2,0,"else", 1, 2, 0);
	trans[1][12441]	= settr(12748,4,12459,5530,5530,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12443 -> 0,12459 */
	reached1[12443] = 1;
	T = trans[1][12459] = settr(12766,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12766,0,12445,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12766,0,12457,0,0,"IF", 0, 2, 0);
	trans[1][12445]	= settr(12752,0,12456,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][12456] = settr(12763,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12763,0,12452,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12452] = settr(12759,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12759,0,12446,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12759,0,12448,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12759,0,12450,0,0,"IF", 0, 2, 0);
	trans[1][12446]	= settr(12753,0,12454,5531,5531,"((_pid==0))", 0, 2, 0); /* m: 12447 -> 12454,0 */
	reached1[12447] = 1;
	trans[1][12447]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12453]	= settr(12760,0,12454,1,0,".(goto)", 0, 2, 0);
	trans[1][12448]	= settr(12755,0,12454,5532,5532,"((_pid==1))", 0, 2, 0); /* m: 12449 -> 12454,0 */
	reached1[12449] = 1;
	trans[1][12449]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12450]	= settr(12757,0,12454,5533,5533,"((_pid>1))", 0, 2, 0); /* m: 12451 -> 12454,0 */
	reached1[12451] = 1;
	trans[1][12451]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12454]	= settr(12761,0,12455,5534,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12455]	= settr(12762,0,12469,5535,5535,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12465 -> 0,12469 */
	reached1[12465] = 1;
	trans[1][12460]	= settr(12767,0,12465,1,0,".(goto)", 0, 2, 0); /* m: 12465 -> 0,12469 */
	reached1[12465] = 1;
	trans[1][12457]	= settr(12764,0,12458,2,0,"else", 0, 2, 0);
	trans[1][12458]	= settr(12765,0,12469,5536,5536,"(1)", 0, 2, 0); /* m: 12465 -> 12469,0 */
	reached1[12465] = 1;
	trans[1][12465]	= settr(12772,0,12469,5537,5537,"j = (j+1)", 0, 2, 0);
	trans[1][12466]	= settr(12773,0,12467,2,0,"else", 0, 2, 0);
	trans[1][12467]	= settr(12774,0,14616,5538,5538,"j = 1", 0, 2, 0);
	trans[1][12468]	= settr(12775,0,14616,1,0,"goto :b87", 0, 2, 0);
	trans[1][12471]	= settr(12778,0,14616,1,0,"break", 0, 2, 0);
	trans[1][12641]	= settr(12948,0,14616,1,0,".(goto)", 0, 2, 0);
	trans[1][12473]	= settr(12780,0,12639,2,0,"else", 0, 2, 0);
	T = trans[ 1][12639] = settr(12946,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12946,0,12474,0,0,"sub-sequence", 0, 2, 0);
	trans[1][12474]	= settr(12781,0,12636,5539,5539,"j = (3-1)", 0, 2, 0);
	trans[1][12637]	= settr(12944,0,12636,1,0,".(goto)", 0, 2, 0);
	T = trans[1][12636] = settr(12943,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(12943,0,12475,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(12943,0,12633,0,0,"DO", 0, 2, 0);
	trans[1][12475]	= settr(12782,0,12631,5540,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][12631] = settr(12938,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12938,0,12629,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12629] = settr(12936,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12936,0,12476,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12936,0,12515,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12936,0,12553,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12936,0,12591,0,0,"IF", 0, 2, 0);
	trans[1][12476]	= settr(12783,0,12514,5541,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][12514] = settr(12821,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12821,0,12496,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12496] = settr(12803,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12803,2,12494,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12494] = settr(12801,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12801,2,12477,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12801,2,12480,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12801,2,12483,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12801,2,12486,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12801,2,12489,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12801,2,12492,0,0,"IF", 1, 2, 0);
	trans[1][12477]	= settr(12784,4,12497,5542,5542,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12478 -> 12497,0 */
	reached1[12478] = 1;
	trans[1][12478]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12479]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12495]	= settr(12802,0,12497,5543,5543,".(goto)", 1, 2, 0);
	trans[1][12480]	= settr(12787,4,12497,5544,5544,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12481 -> 12497,0 */
	reached1[12481] = 1;
	trans[1][12481]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12482]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12483]	= settr(12790,4,12497,5545,5545,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12484 -> 12497,0 */
	reached1[12484] = 1;
	trans[1][12484]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12485]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12486]	= settr(12793,4,12497,5546,5546,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12487 -> 12497,0 */
	reached1[12487] = 1;
	trans[1][12487]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12488]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12489]	= settr(12796,4,12497,5547,5547,"((START==ABORT))", 1, 2, 0); /* m: 12490 -> 12497,0 */
	reached1[12490] = 1;
	trans[1][12490]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12491]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12492]	= settr(12799,2,12493,2,0,"else", 1, 2, 0);
	trans[1][12493]	= settr(12800,4,12497,5548,5548,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12495 -> 0,12497 */
	reached1[12495] = 1;
	trans[1][12497]	= settr(12804,0,12512,5549,5549,"(run Thread(j))", 0, 2, 0);
	T = trans[1][12512] = settr(12819,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12819,0,12498,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12819,0,12510,0,0,"IF", 0, 2, 0);
	trans[1][12498]	= settr(12805,0,12509,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][12509] = settr(12816,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12816,0,12505,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12505] = settr(12812,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12812,0,12499,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12812,0,12501,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12812,0,12503,0,0,"IF", 0, 2, 0);
	trans[1][12499]	= settr(12806,0,12507,5550,5550,"((_pid==0))", 0, 2, 0); /* m: 12500 -> 12507,0 */
	reached1[12500] = 1;
	trans[1][12500]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12506]	= settr(12813,0,12507,1,0,".(goto)", 0, 2, 0);
	trans[1][12501]	= settr(12808,0,12507,5551,5551,"((_pid==1))", 0, 2, 0); /* m: 12502 -> 12507,0 */
	reached1[12502] = 1;
	trans[1][12502]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12503]	= settr(12810,0,12507,5552,5552,"((_pid>1))", 0, 2, 0); /* m: 12504 -> 12507,0 */
	reached1[12504] = 1;
	trans[1][12504]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12507]	= settr(12814,0,12508,5553,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12508]	= settr(12815,0,12636,5554,5554,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12632 -> 0,12636 */
	reached1[12632] = 1;
	trans[1][12513]	= settr(12820,0,12632,1,0,".(goto)", 0, 2, 0); /* m: 12632 -> 0,12636 */
	reached1[12632] = 1;
	trans[1][12510]	= settr(12817,0,12511,2,0,"else", 0, 2, 0);
	trans[1][12511]	= settr(12818,0,12636,5555,5555,"(1)", 0, 2, 0); /* m: 12632 -> 12636,0 */
	reached1[12632] = 1;
	trans[1][12630]	= settr(12937,0,12632,1,0,".(goto)", 0, 2, 0); /* m: 12632 -> 0,12636 */
	reached1[12632] = 1;
	trans[1][12515]	= settr(12822,0,12552,5556,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][12552] = settr(12859,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12859,0,12535,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12535] = settr(12842,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12842,2,12533,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12533] = settr(12840,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12840,2,12516,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12840,2,12519,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12840,2,12522,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12840,2,12525,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12840,2,12528,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12840,2,12531,0,0,"IF", 1, 2, 0);
	trans[1][12516]	= settr(12823,4,12550,5557,5557,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12517 -> 12550,0 */
	reached1[12517] = 1;
	trans[1][12517]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12518]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12534]	= settr(12841,0,12550,5558,5558,".(goto)", 1, 2, 0);
	trans[1][12519]	= settr(12826,4,12550,5559,5559,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12520 -> 12550,0 */
	reached1[12520] = 1;
	trans[1][12520]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12521]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12522]	= settr(12829,4,12550,5560,5560,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12523 -> 12550,0 */
	reached1[12523] = 1;
	trans[1][12523]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12524]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12525]	= settr(12832,4,12550,5561,5561,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12526 -> 12550,0 */
	reached1[12526] = 1;
	trans[1][12526]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12527]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12528]	= settr(12835,4,12550,5562,5562,"((PAUSE==ABORT))", 1, 2, 0); /* m: 12529 -> 12550,0 */
	reached1[12529] = 1;
	trans[1][12529]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12530]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12531]	= settr(12838,2,12532,2,0,"else", 1, 2, 0);
	trans[1][12532]	= settr(12839,4,12550,5563,5563,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12534 -> 0,12550 */
	reached1[12534] = 1;
	T = trans[1][12550] = settr(12857,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12857,0,12536,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12857,0,12548,0,0,"IF", 0, 2, 0);
	trans[1][12536]	= settr(12843,0,12547,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][12547] = settr(12854,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12854,0,12543,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12543] = settr(12850,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12850,0,12537,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12850,0,12539,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12850,0,12541,0,0,"IF", 0, 2, 0);
	trans[1][12537]	= settr(12844,0,12545,5564,5564,"((_pid==0))", 0, 2, 0); /* m: 12538 -> 12545,0 */
	reached1[12538] = 1;
	trans[1][12538]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12544]	= settr(12851,0,12545,1,0,".(goto)", 0, 2, 0);
	trans[1][12539]	= settr(12846,0,12545,5565,5565,"((_pid==1))", 0, 2, 0); /* m: 12540 -> 12545,0 */
	reached1[12540] = 1;
	trans[1][12540]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12541]	= settr(12848,0,12545,5566,5566,"((_pid>1))", 0, 2, 0); /* m: 12542 -> 12545,0 */
	reached1[12542] = 1;
	trans[1][12542]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12545]	= settr(12852,0,12546,5567,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12546]	= settr(12853,0,12636,5568,5568,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12632 -> 0,12636 */
	reached1[12632] = 1;
	trans[1][12551]	= settr(12858,0,12632,1,0,".(goto)", 0, 2, 0); /* m: 12632 -> 0,12636 */
	reached1[12632] = 1;
	trans[1][12548]	= settr(12855,0,12549,2,0,"else", 0, 2, 0);
	trans[1][12549]	= settr(12856,0,12636,5569,5569,"(1)", 0, 2, 0); /* m: 12632 -> 12636,0 */
	reached1[12632] = 1;
	trans[1][12553]	= settr(12860,0,12590,5570,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][12590] = settr(12897,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12897,0,12573,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12573] = settr(12880,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12880,2,12571,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12571] = settr(12878,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12878,2,12554,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12878,2,12557,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12878,2,12560,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12878,2,12563,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12878,2,12566,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12878,2,12569,0,0,"IF", 1, 2, 0);
	trans[1][12554]	= settr(12861,4,12588,5571,5571,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12555 -> 12588,0 */
	reached1[12555] = 1;
	trans[1][12555]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12556]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12572]	= settr(12879,0,12588,5572,5572,".(goto)", 1, 2, 0);
	trans[1][12557]	= settr(12864,4,12588,5573,5573,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12558 -> 12588,0 */
	reached1[12558] = 1;
	trans[1][12558]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12559]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12560]	= settr(12867,4,12588,5574,5574,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12561 -> 12588,0 */
	reached1[12561] = 1;
	trans[1][12561]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12562]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12563]	= settr(12870,4,12588,5575,5575,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12564 -> 12588,0 */
	reached1[12564] = 1;
	trans[1][12564]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12565]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12566]	= settr(12873,4,12588,5576,5576,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 12567 -> 12588,0 */
	reached1[12567] = 1;
	trans[1][12567]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12568]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12569]	= settr(12876,2,12570,2,0,"else", 1, 2, 0);
	trans[1][12570]	= settr(12877,4,12588,5577,5577,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12572 -> 0,12588 */
	reached1[12572] = 1;
	T = trans[1][12588] = settr(12895,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12895,0,12574,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12895,0,12586,0,0,"IF", 0, 2, 0);
	trans[1][12574]	= settr(12881,0,12585,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][12585] = settr(12892,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12892,0,12581,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12581] = settr(12888,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12888,0,12575,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12888,0,12577,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12888,0,12579,0,0,"IF", 0, 2, 0);
	trans[1][12575]	= settr(12882,0,12583,5578,5578,"((_pid==0))", 0, 2, 0); /* m: 12576 -> 12583,0 */
	reached1[12576] = 1;
	trans[1][12576]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12582]	= settr(12889,0,12583,1,0,".(goto)", 0, 2, 0);
	trans[1][12577]	= settr(12884,0,12583,5579,5579,"((_pid==1))", 0, 2, 0); /* m: 12578 -> 12583,0 */
	reached1[12578] = 1;
	trans[1][12578]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12579]	= settr(12886,0,12583,5580,5580,"((_pid>1))", 0, 2, 0); /* m: 12580 -> 12583,0 */
	reached1[12580] = 1;
	trans[1][12580]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12583]	= settr(12890,0,12584,5581,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12584]	= settr(12891,0,12636,5582,5582,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12632 -> 0,12636 */
	reached1[12632] = 1;
	trans[1][12589]	= settr(12896,0,12632,1,0,".(goto)", 0, 2, 0); /* m: 12632 -> 0,12636 */
	reached1[12632] = 1;
	trans[1][12586]	= settr(12893,0,12587,2,0,"else", 0, 2, 0);
	trans[1][12587]	= settr(12894,0,12636,5583,5583,"(1)", 0, 2, 0); /* m: 12632 -> 12636,0 */
	reached1[12632] = 1;
	trans[1][12591]	= settr(12898,0,12628,5584,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][12628] = settr(12935,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12935,0,12611,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12611] = settr(12918,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12918,2,12609,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12609] = settr(12916,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12916,2,12592,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12916,2,12595,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12916,2,12598,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12916,2,12601,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12916,2,12604,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12916,2,12607,0,0,"IF", 1, 2, 0);
	trans[1][12592]	= settr(12899,4,12626,5585,5585,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12593 -> 12626,0 */
	reached1[12593] = 1;
	trans[1][12593]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12594]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12610]	= settr(12917,0,12626,5586,5586,".(goto)", 1, 2, 0);
	trans[1][12595]	= settr(12902,4,12626,5587,5587,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12596 -> 12626,0 */
	reached1[12596] = 1;
	trans[1][12596]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12597]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12598]	= settr(12905,4,12626,5588,5588,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12599 -> 12626,0 */
	reached1[12599] = 1;
	trans[1][12599]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12600]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12601]	= settr(12908,4,12626,5589,5589,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12602 -> 12626,0 */
	reached1[12602] = 1;
	trans[1][12602]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12603]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12604]	= settr(12911,4,12626,5590,5590,"((STOP==ABORT))", 1, 2, 0); /* m: 12605 -> 12626,0 */
	reached1[12605] = 1;
	trans[1][12605]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12606]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12607]	= settr(12914,2,12608,2,0,"else", 1, 2, 0);
	trans[1][12608]	= settr(12915,4,12626,5591,5591,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12610 -> 0,12626 */
	reached1[12610] = 1;
	T = trans[1][12626] = settr(12933,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12933,0,12612,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12933,0,12624,0,0,"IF", 0, 2, 0);
	trans[1][12612]	= settr(12919,0,12623,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][12623] = settr(12930,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12930,0,12619,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12619] = settr(12926,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12926,0,12613,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12926,0,12615,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12926,0,12617,0,0,"IF", 0, 2, 0);
	trans[1][12613]	= settr(12920,0,12621,5592,5592,"((_pid==0))", 0, 2, 0); /* m: 12614 -> 12621,0 */
	reached1[12614] = 1;
	trans[1][12614]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12620]	= settr(12927,0,12621,1,0,".(goto)", 0, 2, 0);
	trans[1][12615]	= settr(12922,0,12621,5593,5593,"((_pid==1))", 0, 2, 0); /* m: 12616 -> 12621,0 */
	reached1[12616] = 1;
	trans[1][12616]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12617]	= settr(12924,0,12621,5594,5594,"((_pid>1))", 0, 2, 0); /* m: 12618 -> 12621,0 */
	reached1[12618] = 1;
	trans[1][12618]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12621]	= settr(12928,0,12622,5595,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12622]	= settr(12929,0,12636,5596,5596,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12632 -> 0,12636 */
	reached1[12632] = 1;
	trans[1][12627]	= settr(12934,0,12632,1,0,".(goto)", 0, 2, 0); /* m: 12632 -> 0,12636 */
	reached1[12632] = 1;
	trans[1][12624]	= settr(12931,0,12625,2,0,"else", 0, 2, 0);
	trans[1][12625]	= settr(12932,0,12636,5597,5597,"(1)", 0, 2, 0); /* m: 12632 -> 12636,0 */
	reached1[12632] = 1;
	trans[1][12632]	= settr(12939,0,12636,5598,5598,"j = (j-1)", 0, 2, 0);
	trans[1][12633]	= settr(12940,0,12634,2,0,"else", 0, 2, 0);
	trans[1][12634]	= settr(12941,0,14616,5599,5599,"j = 1", 0, 2, 0);
	trans[1][12635]	= settr(12942,0,14616,1,0,"goto :b88", 0, 2, 0);
	trans[1][12638]	= settr(12945,0,14616,1,0,"break", 0, 2, 0);
	trans[1][12870]	= settr(13177,0,14616,1,0,".(goto)", 0, 2, 0);
	trans[1][12643]	= settr(12950,0,12868,2,0,"else", 0, 2, 0);
	T = trans[ 1][12868] = settr(13175,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13175,0,12644,0,0,"sub-sequence", 0, 2, 0);
	trans[1][12644]	= settr(12951,0,12809,5600,0,"printf('Supervisor propagating command %e...\\n',12)", 0, 2, 0);
	T = trans[ 1][12809] = settr(13116,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13116,0,12806,0,0,"sub-sequence", 0, 2, 0);
	trans[1][12807]	= settr(13114,0,12806,1,0,".(goto)", 0, 2, 0);
	T = trans[1][12806] = settr(13113,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(13113,0,12645,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(13113,0,12803,0,0,"DO", 0, 2, 0);
	trans[1][12645]	= settr(12952,0,12801,5601,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][12801] = settr(13108,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13108,0,12799,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12799] = settr(13106,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13106,0,12646,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13106,0,12685,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13106,0,12723,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13106,0,12761,0,0,"IF", 0, 2, 0);
	trans[1][12646]	= settr(12953,0,12684,5602,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][12684] = settr(12991,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12991,0,12666,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12666] = settr(12973,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(12973,2,12664,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12664] = settr(12971,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12971,2,12647,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12971,2,12650,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12971,2,12653,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12971,2,12656,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(12971,2,12659,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(12971,2,12662,0,0,"IF", 1, 2, 0);
	trans[1][12647]	= settr(12954,4,12667,5603,5603,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12648 -> 12667,0 */
	reached1[12648] = 1;
	trans[1][12648]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12649]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12665]	= settr(12972,0,12667,5604,5604,".(goto)", 1, 2, 0);
	trans[1][12650]	= settr(12957,4,12667,5605,5605,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12651 -> 12667,0 */
	reached1[12651] = 1;
	trans[1][12651]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12652]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12653]	= settr(12960,4,12667,5606,5606,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12654 -> 12667,0 */
	reached1[12654] = 1;
	trans[1][12654]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12655]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12656]	= settr(12963,4,12667,5607,5607,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12657 -> 12667,0 */
	reached1[12657] = 1;
	trans[1][12657]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12658]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12659]	= settr(12966,4,12667,5608,5608,"((START==ABORT))", 1, 2, 0); /* m: 12660 -> 12667,0 */
	reached1[12660] = 1;
	trans[1][12660]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12661]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12662]	= settr(12969,2,12663,2,0,"else", 1, 2, 0);
	trans[1][12663]	= settr(12970,4,12667,5609,5609,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12665 -> 0,12667 */
	reached1[12665] = 1;
	trans[1][12667]	= settr(12974,0,12682,5610,5610,"(run Thread(j))", 0, 2, 0);
	T = trans[1][12682] = settr(12989,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(12989,0,12668,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(12989,0,12680,0,0,"IF", 0, 2, 0);
	trans[1][12668]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][12679] = settr(12986,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(12986,0,12675,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12675] = settr(12982,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12982,0,12669,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(12982,0,12671,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(12982,0,12673,0,0,"IF", 0, 2, 0);
	trans[1][12669]	= settr(12976,0,12677,5611,5611,"((_pid==0))", 0, 2, 0); /* m: 12670 -> 12677,0 */
	reached1[12670] = 1;
	trans[1][12670]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12676]	= settr(12983,0,12677,1,0,".(goto)", 0, 2, 0);
	trans[1][12671]	= settr(12978,0,12677,5612,5612,"((_pid==1))", 0, 2, 0); /* m: 12672 -> 12677,0 */
	reached1[12672] = 1;
	trans[1][12672]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12673]	= settr(12980,0,12677,5613,5613,"((_pid>1))", 0, 2, 0); /* m: 12674 -> 12677,0 */
	reached1[12674] = 1;
	trans[1][12674]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12677]	= settr(12984,0,12678,5614,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12678]	= settr(12985,0,12806,5615,5615,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12802 -> 0,12806 */
	reached1[12802] = 1;
	trans[1][12683]	= settr(12990,0,12802,1,0,".(goto)", 0, 2, 0); /* m: 12802 -> 0,12806 */
	reached1[12802] = 1;
	trans[1][12680]	= settr(12987,0,12681,2,0,"else", 0, 2, 0);
	trans[1][12681]	= settr(12988,0,12806,5616,5616,"(1)", 0, 2, 0); /* m: 12802 -> 12806,0 */
	reached1[12802] = 1;
	trans[1][12800]	= settr(13107,0,12802,1,0,".(goto)", 0, 2, 0); /* m: 12802 -> 0,12806 */
	reached1[12802] = 1;
	trans[1][12685]	= settr(12992,0,12722,5617,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][12722] = settr(13029,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13029,0,12705,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12705] = settr(13012,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13012,2,12703,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12703] = settr(13010,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13010,2,12686,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13010,2,12689,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13010,2,12692,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13010,2,12695,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13010,2,12698,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13010,2,12701,0,0,"IF", 1, 2, 0);
	trans[1][12686]	= settr(12993,4,12720,5618,5618,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12687 -> 12720,0 */
	reached1[12687] = 1;
	trans[1][12687]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12688]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12704]	= settr(13011,0,12720,5619,5619,".(goto)", 1, 2, 0);
	trans[1][12689]	= settr(12996,4,12720,5620,5620,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12690 -> 12720,0 */
	reached1[12690] = 1;
	trans[1][12690]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12691]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12692]	= settr(12999,4,12720,5621,5621,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12693 -> 12720,0 */
	reached1[12693] = 1;
	trans[1][12693]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12694]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12695]	= settr(13002,4,12720,5622,5622,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12696 -> 12720,0 */
	reached1[12696] = 1;
	trans[1][12696]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12697]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12698]	= settr(13005,4,12720,5623,5623,"((PAUSE==ABORT))", 1, 2, 0); /* m: 12699 -> 12720,0 */
	reached1[12699] = 1;
	trans[1][12699]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12700]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12701]	= settr(13008,2,12702,2,0,"else", 1, 2, 0);
	trans[1][12702]	= settr(13009,4,12720,5624,5624,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12704 -> 0,12720 */
	reached1[12704] = 1;
	T = trans[1][12720] = settr(13027,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(13027,0,12706,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(13027,0,12718,0,0,"IF", 0, 2, 0);
	trans[1][12706]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][12717] = settr(13024,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13024,0,12713,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12713] = settr(13020,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13020,0,12707,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13020,0,12709,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13020,0,12711,0,0,"IF", 0, 2, 0);
	trans[1][12707]	= settr(13014,0,12715,5625,5625,"((_pid==0))", 0, 2, 0); /* m: 12708 -> 12715,0 */
	reached1[12708] = 1;
	trans[1][12708]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12714]	= settr(13021,0,12715,1,0,".(goto)", 0, 2, 0);
	trans[1][12709]	= settr(13016,0,12715,5626,5626,"((_pid==1))", 0, 2, 0); /* m: 12710 -> 12715,0 */
	reached1[12710] = 1;
	trans[1][12710]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12711]	= settr(13018,0,12715,5627,5627,"((_pid>1))", 0, 2, 0); /* m: 12712 -> 12715,0 */
	reached1[12712] = 1;
	trans[1][12712]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12715]	= settr(13022,0,12716,5628,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12716]	= settr(13023,0,12806,5629,5629,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12802 -> 0,12806 */
	reached1[12802] = 1;
	trans[1][12721]	= settr(13028,0,12802,1,0,".(goto)", 0, 2, 0); /* m: 12802 -> 0,12806 */
	reached1[12802] = 1;
	trans[1][12718]	= settr(13025,0,12719,2,0,"else", 0, 2, 0);
	trans[1][12719]	= settr(13026,0,12806,5630,5630,"(1)", 0, 2, 0); /* m: 12802 -> 12806,0 */
	reached1[12802] = 1;
	trans[1][12723]	= settr(13030,0,12760,5631,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][12760] = settr(13067,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13067,0,12743,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12743] = settr(13050,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13050,2,12741,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12741] = settr(13048,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13048,2,12724,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13048,2,12727,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13048,2,12730,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13048,2,12733,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13048,2,12736,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13048,2,12739,0,0,"IF", 1, 2, 0);
	trans[1][12724]	= settr(13031,4,12758,5632,5632,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12725 -> 12758,0 */
	reached1[12725] = 1;
	trans[1][12725]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12726]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12742]	= settr(13049,0,12758,5633,5633,".(goto)", 1, 2, 0);
	trans[1][12727]	= settr(13034,4,12758,5634,5634,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12728 -> 12758,0 */
	reached1[12728] = 1;
	trans[1][12728]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12729]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12730]	= settr(13037,4,12758,5635,5635,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12731 -> 12758,0 */
	reached1[12731] = 1;
	trans[1][12731]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12732]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12733]	= settr(13040,4,12758,5636,5636,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12734 -> 12758,0 */
	reached1[12734] = 1;
	trans[1][12734]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12735]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12736]	= settr(13043,4,12758,5637,5637,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 12737 -> 12758,0 */
	reached1[12737] = 1;
	trans[1][12737]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12738]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12739]	= settr(13046,2,12740,2,0,"else", 1, 2, 0);
	trans[1][12740]	= settr(13047,4,12758,5638,5638,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12742 -> 0,12758 */
	reached1[12742] = 1;
	T = trans[1][12758] = settr(13065,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(13065,0,12744,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(13065,0,12756,0,0,"IF", 0, 2, 0);
	trans[1][12744]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][12755] = settr(13062,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13062,0,12751,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12751] = settr(13058,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13058,0,12745,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13058,0,12747,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13058,0,12749,0,0,"IF", 0, 2, 0);
	trans[1][12745]	= settr(13052,0,12753,5639,5639,"((_pid==0))", 0, 2, 0); /* m: 12746 -> 12753,0 */
	reached1[12746] = 1;
	trans[1][12746]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12752]	= settr(13059,0,12753,1,0,".(goto)", 0, 2, 0);
	trans[1][12747]	= settr(13054,0,12753,5640,5640,"((_pid==1))", 0, 2, 0); /* m: 12748 -> 12753,0 */
	reached1[12748] = 1;
	trans[1][12748]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12749]	= settr(13056,0,12753,5641,5641,"((_pid>1))", 0, 2, 0); /* m: 12750 -> 12753,0 */
	reached1[12750] = 1;
	trans[1][12750]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12753]	= settr(13060,0,12754,5642,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12754]	= settr(13061,0,12806,5643,5643,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12802 -> 0,12806 */
	reached1[12802] = 1;
	trans[1][12759]	= settr(13066,0,12802,1,0,".(goto)", 0, 2, 0); /* m: 12802 -> 0,12806 */
	reached1[12802] = 1;
	trans[1][12756]	= settr(13063,0,12757,2,0,"else", 0, 2, 0);
	trans[1][12757]	= settr(13064,0,12806,5644,5644,"(1)", 0, 2, 0); /* m: 12802 -> 12806,0 */
	reached1[12802] = 1;
	trans[1][12761]	= settr(13068,0,12798,5645,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][12798] = settr(13105,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13105,0,12781,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12781] = settr(13088,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13088,2,12779,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12779] = settr(13086,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13086,2,12762,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13086,2,12765,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13086,2,12768,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13086,2,12771,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13086,2,12774,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13086,2,12777,0,0,"IF", 1, 2, 0);
	trans[1][12762]	= settr(13069,4,12796,5646,5646,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12763 -> 12796,0 */
	reached1[12763] = 1;
	trans[1][12763]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12764]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12780]	= settr(13087,0,12796,5647,5647,".(goto)", 1, 2, 0);
	trans[1][12765]	= settr(13072,4,12796,5648,5648,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12766 -> 12796,0 */
	reached1[12766] = 1;
	trans[1][12766]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12767]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12768]	= settr(13075,4,12796,5649,5649,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12769 -> 12796,0 */
	reached1[12769] = 1;
	trans[1][12769]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12770]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12771]	= settr(13078,4,12796,5650,5650,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12772 -> 12796,0 */
	reached1[12772] = 1;
	trans[1][12772]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12773]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12774]	= settr(13081,4,12796,5651,5651,"((STOP==ABORT))", 1, 2, 0); /* m: 12775 -> 12796,0 */
	reached1[12775] = 1;
	trans[1][12775]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12776]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12777]	= settr(13084,2,12778,2,0,"else", 1, 2, 0);
	trans[1][12778]	= settr(13085,4,12796,5652,5652,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12780 -> 0,12796 */
	reached1[12780] = 1;
	T = trans[1][12796] = settr(13103,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(13103,0,12782,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(13103,0,12794,0,0,"IF", 0, 2, 0);
	trans[1][12782]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][12793] = settr(13100,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13100,0,12789,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12789] = settr(13096,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13096,0,12783,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13096,0,12785,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13096,0,12787,0,0,"IF", 0, 2, 0);
	trans[1][12783]	= settr(13090,0,12791,5653,5653,"((_pid==0))", 0, 2, 0); /* m: 12784 -> 12791,0 */
	reached1[12784] = 1;
	trans[1][12784]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12790]	= settr(13097,0,12791,1,0,".(goto)", 0, 2, 0);
	trans[1][12785]	= settr(13092,0,12791,5654,5654,"((_pid==1))", 0, 2, 0); /* m: 12786 -> 12791,0 */
	reached1[12786] = 1;
	trans[1][12786]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12787]	= settr(13094,0,12791,5655,5655,"((_pid>1))", 0, 2, 0); /* m: 12788 -> 12791,0 */
	reached1[12788] = 1;
	trans[1][12788]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12791]	= settr(13098,0,12792,5656,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12792]	= settr(13099,0,12806,5657,5657,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12802 -> 0,12806 */
	reached1[12802] = 1;
	trans[1][12797]	= settr(13104,0,12802,1,0,".(goto)", 0, 2, 0); /* m: 12802 -> 0,12806 */
	reached1[12802] = 1;
	trans[1][12794]	= settr(13101,0,12795,2,0,"else", 0, 2, 0);
	trans[1][12795]	= settr(13102,0,12806,5658,5658,"(1)", 0, 2, 0); /* m: 12802 -> 12806,0 */
	reached1[12802] = 1;
	trans[1][12802]	= settr(13109,0,12806,5659,5659,"j = (j+1)", 0, 2, 0);
	trans[1][12803]	= settr(13110,0,12804,2,0,"else", 0, 2, 0);
	trans[1][12804]	= settr(13111,0,12865,5660,5660,"j = 1", 0, 2, 0);
	trans[1][12805]	= settr(13112,0,12865,1,0,"goto :b89", 0, 2, 0);
	trans[1][12808]	= settr(13115,0,12865,1,0,"break", 0, 2, 0);
	trans[1][12866]	= settr(13173,0,12865,1,0,".(goto)", 0, 2, 0);
	T = trans[1][12865] = settr(13172,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(13172,0,12810,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(13172,0,12862,0,0,"DO", 0, 2, 0);
	trans[1][12810]	= settr(13117,0,12859,5661,0,"((j<3))", 0, 2, 0);
	T = trans[1][12859] = settr(13166,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13166,0,12811,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13166,0,12823,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13166,0,12835,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13166,0,12847,0,0,"IF", 0, 2, 0);
	trans[1][12811]	= settr(13118,0,12822,5662,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][12822] = settr(13129,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13129,0,12818,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12818] = settr(13125,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13125,0,12812,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13125,0,12814,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13125,0,12816,0,0,"IF", 0, 2, 0);
	trans[1][12812]	= settr(13119,0,12820,5663,5663,"((_pid==0))", 0, 2, 0); /* m: 12813 -> 12820,0 */
	reached1[12813] = 1;
	trans[1][12813]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12819]	= settr(13126,0,12820,1,0,".(goto)", 0, 2, 0);
	trans[1][12814]	= settr(13121,0,12820,5664,5664,"((_pid==1))", 0, 2, 0); /* m: 12815 -> 12820,0 */
	reached1[12815] = 1;
	trans[1][12815]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12816]	= settr(13123,0,12820,5665,5665,"((_pid>1))", 0, 2, 0); /* m: 12817 -> 12820,0 */
	reached1[12817] = 1;
	trans[1][12817]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12820]	= settr(13127,0,12821,5666,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12821]	= settr(13128,0,12865,5667,5667,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12861 -> 0,12865 */
	reached1[12861] = 1;
	trans[1][12860]	= settr(13167,0,12861,1,0,".(goto)", 0, 2, 0); /* m: 12861 -> 0,12865 */
	reached1[12861] = 1;
	trans[1][12823]	= settr(13130,0,12834,5668,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][12834] = settr(13141,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13141,0,12830,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12830] = settr(13137,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13137,0,12824,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13137,0,12826,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13137,0,12828,0,0,"IF", 0, 2, 0);
	trans[1][12824]	= settr(13131,0,12832,5669,5669,"((_pid==0))", 0, 2, 0); /* m: 12825 -> 12832,0 */
	reached1[12825] = 1;
	trans[1][12825]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12831]	= settr(13138,0,12832,1,0,".(goto)", 0, 2, 0);
	trans[1][12826]	= settr(13133,0,12832,5670,5670,"((_pid==1))", 0, 2, 0); /* m: 12827 -> 12832,0 */
	reached1[12827] = 1;
	trans[1][12827]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12828]	= settr(13135,0,12832,5671,5671,"((_pid>1))", 0, 2, 0); /* m: 12829 -> 12832,0 */
	reached1[12829] = 1;
	trans[1][12829]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12832]	= settr(13139,0,12833,5672,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12833]	= settr(13140,0,12865,5673,5673,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12861 -> 0,12865 */
	reached1[12861] = 1;
	trans[1][12835]	= settr(13142,0,12846,5674,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][12846] = settr(13153,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13153,0,12842,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12842] = settr(13149,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13149,0,12836,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13149,0,12838,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13149,0,12840,0,0,"IF", 0, 2, 0);
	trans[1][12836]	= settr(13143,0,12844,5675,5675,"((_pid==0))", 0, 2, 0); /* m: 12837 -> 12844,0 */
	reached1[12837] = 1;
	trans[1][12837]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12843]	= settr(13150,0,12844,1,0,".(goto)", 0, 2, 0);
	trans[1][12838]	= settr(13145,0,12844,5676,5676,"((_pid==1))", 0, 2, 0); /* m: 12839 -> 12844,0 */
	reached1[12839] = 1;
	trans[1][12839]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12840]	= settr(13147,0,12844,5677,5677,"((_pid>1))", 0, 2, 0); /* m: 12841 -> 12844,0 */
	reached1[12841] = 1;
	trans[1][12841]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12844]	= settr(13151,0,12845,5678,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12845]	= settr(13152,0,12865,5679,5679,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12861 -> 0,12865 */
	reached1[12861] = 1;
	trans[1][12847]	= settr(13154,0,12858,5680,0,"((12==STOP))", 0, 2, 0);
	T = trans[ 1][12858] = settr(13165,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13165,0,12854,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12854] = settr(13161,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13161,0,12848,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13161,0,12850,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13161,0,12852,0,0,"IF", 0, 2, 0);
	trans[1][12848]	= settr(13155,0,12856,5681,5681,"((_pid==0))", 0, 2, 0); /* m: 12849 -> 12856,0 */
	reached1[12849] = 1;
	trans[1][12849]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12855]	= settr(13162,0,12856,1,0,".(goto)", 0, 2, 0);
	trans[1][12850]	= settr(13157,0,12856,5682,5682,"((_pid==1))", 0, 2, 0); /* m: 12851 -> 12856,0 */
	reached1[12851] = 1;
	trans[1][12851]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12852]	= settr(13159,0,12856,5683,5683,"((_pid>1))", 0, 2, 0); /* m: 12853 -> 12856,0 */
	reached1[12853] = 1;
	trans[1][12853]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12856]	= settr(13163,0,12857,5684,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12857]	= settr(13164,0,12865,5685,5685,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 12861 -> 0,12865 */
	reached1[12861] = 1;
	trans[1][12861]	= settr(13168,0,12865,5686,5686,"j = (j+1)", 0, 2, 0);
	trans[1][12862]	= settr(13169,0,12863,2,0,"else", 0, 2, 0);
	trans[1][12863]	= settr(13170,0,14616,5687,5687,"j = 1", 0, 2, 0);
	trans[1][12864]	= settr(13171,0,14616,1,0,"goto :b90", 0, 2, 0);
	trans[1][12867]	= settr(13174,0,14616,1,0,"break", 0, 2, 0);
	trans[1][12874]	= settr(13181,0,12875,2,0,"else", 0, 2, 0);
	trans[1][12875]	= settr(13182,0,14616,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][14616] = settr(14923,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14923,0,14603,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][14603] = settr(14910,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14910,0,14601,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14601] = settr(14908,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14908,0,12880,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14908,0,13453,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14908,0,14026,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14908,0,14599,0,0,"IF", 0, 2, 0);
	trans[1][12880]	= settr(13187,0,13452,5688,0,"((11==RUNNING))", 0, 2, 0);
	T = trans[ 1][13452] = settr(13759,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13759,0,13450,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13450] = settr(13757,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13757,0,12881,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13757,0,12884,0,0,"IF", 0, 2, 0);
	trans[1][12881]	= settr(13188,0,12882,5689,0,"(((6==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][12882]	= settr(13189,0,12883,5690,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][12883]	= settr(13190,0,14614,5691,5691,"supervisor_started = 1", 1, 2, 0);
	trans[1][13451]	= settr(13758,0,14614,1,0,".(goto)", 0, 2, 0);
	trans[1][12884]	= settr(13191,0,13448,2,0,"else", 0, 2, 0);
	T = trans[1][13448] = settr(13755,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13755,0,12885,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13755,0,13222,0,0,"IF", 0, 2, 0);
	trans[1][12885]	= settr(13192,0,13221,5692,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][13221] = settr(13528,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13528,0,13219,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13219] = settr(13526,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13526,0,12886,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13526,0,13052,0,0,"IF", 0, 2, 0);
	trans[1][12886]	= settr(13193,0,13051,5693,0,"(((6==START)||(6==PAUSED)))", 0, 2, 0);
	T = trans[ 1][13051] = settr(13358,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13358,0,13048,0,0,"sub-sequence", 0, 2, 0);
	trans[1][13049]	= settr(13356,0,13048,1,0,".(goto)", 0, 2, 0);
	T = trans[1][13048] = settr(13355,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(13355,0,12887,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(13355,0,13045,0,0,"DO", 0, 2, 0);
	trans[1][12887]	= settr(13194,0,13043,5694,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][13043] = settr(13350,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13350,0,13041,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13041] = settr(13348,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13348,0,12888,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13348,0,12927,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13348,0,12965,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13348,0,13003,0,0,"IF", 0, 2, 0);
	trans[1][12888]	= settr(13195,0,12926,5695,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][12926] = settr(13233,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13233,0,12908,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12908] = settr(13215,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13215,2,12906,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12906] = settr(13213,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13213,2,12889,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13213,2,12892,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13213,2,12895,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13213,2,12898,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13213,2,12901,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13213,2,12904,0,0,"IF", 1, 2, 0);
	trans[1][12889]	= settr(13196,4,12909,5696,5696,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12890 -> 12909,0 */
	reached1[12890] = 1;
	trans[1][12890]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12891]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12907]	= settr(13214,0,12909,5697,5697,".(goto)", 1, 2, 0);
	trans[1][12892]	= settr(13199,4,12909,5698,5698,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12893 -> 12909,0 */
	reached1[12893] = 1;
	trans[1][12893]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12894]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12895]	= settr(13202,4,12909,5699,5699,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12896 -> 12909,0 */
	reached1[12896] = 1;
	trans[1][12896]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12897]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12898]	= settr(13205,4,12909,5700,5700,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12899 -> 12909,0 */
	reached1[12899] = 1;
	trans[1][12899]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12900]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12901]	= settr(13208,4,12909,5701,5701,"((START==ABORT))", 1, 2, 0); /* m: 12902 -> 12909,0 */
	reached1[12902] = 1;
	trans[1][12902]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12903]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12904]	= settr(13211,2,12905,2,0,"else", 1, 2, 0);
	trans[1][12905]	= settr(13212,4,12909,5702,5702,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12907 -> 0,12909 */
	reached1[12907] = 1;
	trans[1][12909]	= settr(13216,0,12924,5703,5703,"(run Thread(j))", 0, 2, 0);
	T = trans[1][12924] = settr(13231,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13231,0,12910,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13231,0,12922,0,0,"IF", 0, 2, 0);
	trans[1][12910]	= settr(13217,0,12921,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][12921] = settr(13228,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13228,0,12917,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12917] = settr(13224,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13224,0,12911,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13224,0,12913,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13224,0,12915,0,0,"IF", 0, 2, 0);
	trans[1][12911]	= settr(13218,0,12919,5704,5704,"((_pid==0))", 0, 2, 0); /* m: 12912 -> 12919,0 */
	reached1[12912] = 1;
	trans[1][12912]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12918]	= settr(13225,0,12919,1,0,".(goto)", 0, 2, 0);
	trans[1][12913]	= settr(13220,0,12919,5705,5705,"((_pid==1))", 0, 2, 0); /* m: 12914 -> 12919,0 */
	reached1[12914] = 1;
	trans[1][12914]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12915]	= settr(13222,0,12919,5706,5706,"((_pid>1))", 0, 2, 0); /* m: 12916 -> 12919,0 */
	reached1[12916] = 1;
	trans[1][12916]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12919]	= settr(13226,0,12920,5707,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12920]	= settr(13227,0,13048,5708,5708,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13044 -> 0,13048 */
	reached1[13044] = 1;
	trans[1][12925]	= settr(13232,0,13044,1,0,".(goto)", 0, 2, 0); /* m: 13044 -> 0,13048 */
	reached1[13044] = 1;
	trans[1][12922]	= settr(13229,0,12923,2,0,"else", 0, 2, 0);
	trans[1][12923]	= settr(13230,0,13048,5709,5709,"(1)", 0, 2, 0); /* m: 13044 -> 13048,0 */
	reached1[13044] = 1;
	trans[1][13042]	= settr(13349,0,13044,1,0,".(goto)", 0, 2, 0); /* m: 13044 -> 0,13048 */
	reached1[13044] = 1;
	trans[1][12927]	= settr(13234,0,12964,5710,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][12964] = settr(13271,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13271,0,12947,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12947] = settr(13254,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13254,2,12945,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12945] = settr(13252,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13252,2,12928,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13252,2,12931,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13252,2,12934,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13252,2,12937,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13252,2,12940,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13252,2,12943,0,0,"IF", 1, 2, 0);
	trans[1][12928]	= settr(13235,4,12962,5711,5711,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12929 -> 12962,0 */
	reached1[12929] = 1;
	trans[1][12929]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12930]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12946]	= settr(13253,0,12962,5712,5712,".(goto)", 1, 2, 0);
	trans[1][12931]	= settr(13238,4,12962,5713,5713,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12932 -> 12962,0 */
	reached1[12932] = 1;
	trans[1][12932]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12933]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12934]	= settr(13241,4,12962,5714,5714,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12935 -> 12962,0 */
	reached1[12935] = 1;
	trans[1][12935]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12936]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12937]	= settr(13244,4,12962,5715,5715,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12938 -> 12962,0 */
	reached1[12938] = 1;
	trans[1][12938]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12939]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12940]	= settr(13247,4,12962,5716,5716,"((PAUSE==ABORT))", 1, 2, 0); /* m: 12941 -> 12962,0 */
	reached1[12941] = 1;
	trans[1][12941]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12942]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12943]	= settr(13250,2,12944,2,0,"else", 1, 2, 0);
	trans[1][12944]	= settr(13251,4,12962,5717,5717,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12946 -> 0,12962 */
	reached1[12946] = 1;
	T = trans[1][12962] = settr(13269,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13269,0,12948,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13269,0,12960,0,0,"IF", 0, 2, 0);
	trans[1][12948]	= settr(13255,0,12959,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][12959] = settr(13266,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13266,0,12955,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12955] = settr(13262,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13262,0,12949,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13262,0,12951,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13262,0,12953,0,0,"IF", 0, 2, 0);
	trans[1][12949]	= settr(13256,0,12957,5718,5718,"((_pid==0))", 0, 2, 0); /* m: 12950 -> 12957,0 */
	reached1[12950] = 1;
	trans[1][12950]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12956]	= settr(13263,0,12957,1,0,".(goto)", 0, 2, 0);
	trans[1][12951]	= settr(13258,0,12957,5719,5719,"((_pid==1))", 0, 2, 0); /* m: 12952 -> 12957,0 */
	reached1[12952] = 1;
	trans[1][12952]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12953]	= settr(13260,0,12957,5720,5720,"((_pid>1))", 0, 2, 0); /* m: 12954 -> 12957,0 */
	reached1[12954] = 1;
	trans[1][12954]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12957]	= settr(13264,0,12958,5721,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12958]	= settr(13265,0,13048,5722,5722,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13044 -> 0,13048 */
	reached1[13044] = 1;
	trans[1][12963]	= settr(13270,0,13044,1,0,".(goto)", 0, 2, 0); /* m: 13044 -> 0,13048 */
	reached1[13044] = 1;
	trans[1][12960]	= settr(13267,0,12961,2,0,"else", 0, 2, 0);
	trans[1][12961]	= settr(13268,0,13048,5723,5723,"(1)", 0, 2, 0); /* m: 13044 -> 13048,0 */
	reached1[13044] = 1;
	trans[1][12965]	= settr(13272,0,13002,5724,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][13002] = settr(13309,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13309,0,12985,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][12985] = settr(13292,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13292,2,12983,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][12983] = settr(13290,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13290,2,12966,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13290,2,12969,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13290,2,12972,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13290,2,12975,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13290,2,12978,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13290,2,12981,0,0,"IF", 1, 2, 0);
	trans[1][12966]	= settr(13273,4,13000,5725,5725,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12967 -> 13000,0 */
	reached1[12967] = 1;
	trans[1][12967]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][12968]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][12984]	= settr(13291,0,13000,5726,5726,".(goto)", 1, 2, 0);
	trans[1][12969]	= settr(13276,4,13000,5727,5727,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 12970 -> 13000,0 */
	reached1[12970] = 1;
	trans[1][12970]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][12971]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][12972]	= settr(13279,4,13000,5728,5728,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12973 -> 13000,0 */
	reached1[12973] = 1;
	trans[1][12973]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][12974]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][12975]	= settr(13282,4,13000,5729,5729,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 12976 -> 13000,0 */
	reached1[12976] = 1;
	trans[1][12976]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][12977]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][12978]	= settr(13285,4,13000,5730,5730,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 12979 -> 13000,0 */
	reached1[12979] = 1;
	trans[1][12979]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][12980]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][12981]	= settr(13288,2,12982,2,0,"else", 1, 2, 0);
	trans[1][12982]	= settr(13289,4,13000,5731,5731,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 12984 -> 0,13000 */
	reached1[12984] = 1;
	T = trans[1][13000] = settr(13307,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13307,0,12986,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13307,0,12998,0,0,"IF", 0, 2, 0);
	trans[1][12986]	= settr(13293,0,12997,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][12997] = settr(13304,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13304,0,12993,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][12993] = settr(13300,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13300,0,12987,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13300,0,12989,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13300,0,12991,0,0,"IF", 0, 2, 0);
	trans[1][12987]	= settr(13294,0,12995,5732,5732,"((_pid==0))", 0, 2, 0); /* m: 12988 -> 12995,0 */
	reached1[12988] = 1;
	trans[1][12988]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12994]	= settr(13301,0,12995,1,0,".(goto)", 0, 2, 0);
	trans[1][12989]	= settr(13296,0,12995,5733,5733,"((_pid==1))", 0, 2, 0); /* m: 12990 -> 12995,0 */
	reached1[12990] = 1;
	trans[1][12990]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][12991]	= settr(13298,0,12995,5734,5734,"((_pid>1))", 0, 2, 0); /* m: 12992 -> 12995,0 */
	reached1[12992] = 1;
	trans[1][12992]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][12995]	= settr(13302,0,12996,5735,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][12996]	= settr(13303,0,13048,5736,5736,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13044 -> 0,13048 */
	reached1[13044] = 1;
	trans[1][13001]	= settr(13308,0,13044,1,0,".(goto)", 0, 2, 0); /* m: 13044 -> 0,13048 */
	reached1[13044] = 1;
	trans[1][12998]	= settr(13305,0,12999,2,0,"else", 0, 2, 0);
	trans[1][12999]	= settr(13306,0,13048,5737,5737,"(1)", 0, 2, 0); /* m: 13044 -> 13048,0 */
	reached1[13044] = 1;
	trans[1][13003]	= settr(13310,0,13040,5738,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][13040] = settr(13347,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13347,0,13023,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13023] = settr(13330,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13330,2,13021,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13021] = settr(13328,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13328,2,13004,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13328,2,13007,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13328,2,13010,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13328,2,13013,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13328,2,13016,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13328,2,13019,0,0,"IF", 1, 2, 0);
	trans[1][13004]	= settr(13311,4,13038,5739,5739,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13005 -> 13038,0 */
	reached1[13005] = 1;
	trans[1][13005]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13006]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13022]	= settr(13329,0,13038,5740,5740,".(goto)", 1, 2, 0);
	trans[1][13007]	= settr(13314,4,13038,5741,5741,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13008 -> 13038,0 */
	reached1[13008] = 1;
	trans[1][13008]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13009]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13010]	= settr(13317,4,13038,5742,5742,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13011 -> 13038,0 */
	reached1[13011] = 1;
	trans[1][13011]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13012]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13013]	= settr(13320,4,13038,5743,5743,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13014 -> 13038,0 */
	reached1[13014] = 1;
	trans[1][13014]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13015]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13016]	= settr(13323,4,13038,5744,5744,"((STOP==ABORT))", 1, 2, 0); /* m: 13017 -> 13038,0 */
	reached1[13017] = 1;
	trans[1][13017]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13018]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13019]	= settr(13326,2,13020,2,0,"else", 1, 2, 0);
	trans[1][13020]	= settr(13327,4,13038,5745,5745,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13022 -> 0,13038 */
	reached1[13022] = 1;
	T = trans[1][13038] = settr(13345,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13345,0,13024,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13345,0,13036,0,0,"IF", 0, 2, 0);
	trans[1][13024]	= settr(13331,0,13035,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][13035] = settr(13342,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13342,0,13031,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13031] = settr(13338,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13338,0,13025,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13338,0,13027,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13338,0,13029,0,0,"IF", 0, 2, 0);
	trans[1][13025]	= settr(13332,0,13033,5746,5746,"((_pid==0))", 0, 2, 0); /* m: 13026 -> 13033,0 */
	reached1[13026] = 1;
	trans[1][13026]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13032]	= settr(13339,0,13033,1,0,".(goto)", 0, 2, 0);
	trans[1][13027]	= settr(13334,0,13033,5747,5747,"((_pid==1))", 0, 2, 0); /* m: 13028 -> 13033,0 */
	reached1[13028] = 1;
	trans[1][13028]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13029]	= settr(13336,0,13033,5748,5748,"((_pid>1))", 0, 2, 0); /* m: 13030 -> 13033,0 */
	reached1[13030] = 1;
	trans[1][13030]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13033]	= settr(13340,0,13034,5749,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13034]	= settr(13341,0,13048,5750,5750,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13044 -> 0,13048 */
	reached1[13044] = 1;
	trans[1][13039]	= settr(13346,0,13044,1,0,".(goto)", 0, 2, 0); /* m: 13044 -> 0,13048 */
	reached1[13044] = 1;
	trans[1][13036]	= settr(13343,0,13037,2,0,"else", 0, 2, 0);
	trans[1][13037]	= settr(13344,0,13048,5751,5751,"(1)", 0, 2, 0); /* m: 13044 -> 13048,0 */
	reached1[13044] = 1;
	trans[1][13044]	= settr(13351,0,13048,5752,5752,"j = (j+1)", 0, 2, 0);
	trans[1][13045]	= settr(13352,0,13046,2,0,"else", 0, 2, 0);
	trans[1][13046]	= settr(13353,0,14614,5753,5753,"j = 1", 0, 2, 0);
	trans[1][13047]	= settr(13354,0,14614,1,0,"goto :b91", 0, 2, 0);
	trans[1][13050]	= settr(13357,0,14614,1,0,"break", 0, 2, 0);
	trans[1][13220]	= settr(13527,0,14614,1,0,".(goto)", 0, 2, 0);
	trans[1][13052]	= settr(13359,0,13218,2,0,"else", 0, 2, 0);
	T = trans[ 1][13218] = settr(13525,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13525,0,13053,0,0,"sub-sequence", 0, 2, 0);
	trans[1][13053]	= settr(13360,0,13215,5754,5754,"j = (3-1)", 0, 2, 0);
	trans[1][13216]	= settr(13523,0,13215,1,0,".(goto)", 0, 2, 0);
	T = trans[1][13215] = settr(13522,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(13522,0,13054,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(13522,0,13212,0,0,"DO", 0, 2, 0);
	trans[1][13054]	= settr(13361,0,13210,5755,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][13210] = settr(13517,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13517,0,13208,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13208] = settr(13515,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13515,0,13055,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13515,0,13094,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13515,0,13132,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13515,0,13170,0,0,"IF", 0, 2, 0);
	trans[1][13055]	= settr(13362,0,13093,5756,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][13093] = settr(13400,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13400,0,13075,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13075] = settr(13382,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13382,2,13073,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13073] = settr(13380,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13380,2,13056,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13380,2,13059,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13380,2,13062,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13380,2,13065,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13380,2,13068,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13380,2,13071,0,0,"IF", 1, 2, 0);
	trans[1][13056]	= settr(13363,4,13076,5757,5757,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13057 -> 13076,0 */
	reached1[13057] = 1;
	trans[1][13057]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13058]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13074]	= settr(13381,0,13076,5758,5758,".(goto)", 1, 2, 0);
	trans[1][13059]	= settr(13366,4,13076,5759,5759,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13060 -> 13076,0 */
	reached1[13060] = 1;
	trans[1][13060]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13061]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13062]	= settr(13369,4,13076,5760,5760,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13063 -> 13076,0 */
	reached1[13063] = 1;
	trans[1][13063]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13064]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13065]	= settr(13372,4,13076,5761,5761,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13066 -> 13076,0 */
	reached1[13066] = 1;
	trans[1][13066]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13067]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13068]	= settr(13375,4,13076,5762,5762,"((START==ABORT))", 1, 2, 0); /* m: 13069 -> 13076,0 */
	reached1[13069] = 1;
	trans[1][13069]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13070]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13071]	= settr(13378,2,13072,2,0,"else", 1, 2, 0);
	trans[1][13072]	= settr(13379,4,13076,5763,5763,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13074 -> 0,13076 */
	reached1[13074] = 1;
	trans[1][13076]	= settr(13383,0,13091,5764,5764,"(run Thread(j))", 0, 2, 0);
	T = trans[1][13091] = settr(13398,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13398,0,13077,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13398,0,13089,0,0,"IF", 0, 2, 0);
	trans[1][13077]	= settr(13384,0,13088,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][13088] = settr(13395,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13395,0,13084,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13084] = settr(13391,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13391,0,13078,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13391,0,13080,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13391,0,13082,0,0,"IF", 0, 2, 0);
	trans[1][13078]	= settr(13385,0,13086,5765,5765,"((_pid==0))", 0, 2, 0); /* m: 13079 -> 13086,0 */
	reached1[13079] = 1;
	trans[1][13079]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13085]	= settr(13392,0,13086,1,0,".(goto)", 0, 2, 0);
	trans[1][13080]	= settr(13387,0,13086,5766,5766,"((_pid==1))", 0, 2, 0); /* m: 13081 -> 13086,0 */
	reached1[13081] = 1;
	trans[1][13081]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13082]	= settr(13389,0,13086,5767,5767,"((_pid>1))", 0, 2, 0); /* m: 13083 -> 13086,0 */
	reached1[13083] = 1;
	trans[1][13083]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13086]	= settr(13393,0,13087,5768,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13087]	= settr(13394,0,13215,5769,5769,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13211 -> 0,13215 */
	reached1[13211] = 1;
	trans[1][13092]	= settr(13399,0,13211,1,0,".(goto)", 0, 2, 0); /* m: 13211 -> 0,13215 */
	reached1[13211] = 1;
	trans[1][13089]	= settr(13396,0,13090,2,0,"else", 0, 2, 0);
	trans[1][13090]	= settr(13397,0,13215,5770,5770,"(1)", 0, 2, 0); /* m: 13211 -> 13215,0 */
	reached1[13211] = 1;
	trans[1][13209]	= settr(13516,0,13211,1,0,".(goto)", 0, 2, 0); /* m: 13211 -> 0,13215 */
	reached1[13211] = 1;
	trans[1][13094]	= settr(13401,0,13131,5771,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][13131] = settr(13438,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13438,0,13114,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13114] = settr(13421,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13421,2,13112,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13112] = settr(13419,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13419,2,13095,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13419,2,13098,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13419,2,13101,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13419,2,13104,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13419,2,13107,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13419,2,13110,0,0,"IF", 1, 2, 0);
	trans[1][13095]	= settr(13402,4,13129,5772,5772,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13096 -> 13129,0 */
	reached1[13096] = 1;
	trans[1][13096]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13097]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13113]	= settr(13420,0,13129,5773,5773,".(goto)", 1, 2, 0);
	trans[1][13098]	= settr(13405,4,13129,5774,5774,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13099 -> 13129,0 */
	reached1[13099] = 1;
	trans[1][13099]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13100]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13101]	= settr(13408,4,13129,5775,5775,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13102 -> 13129,0 */
	reached1[13102] = 1;
	trans[1][13102]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13103]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13104]	= settr(13411,4,13129,5776,5776,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13105 -> 13129,0 */
	reached1[13105] = 1;
	trans[1][13105]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13106]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13107]	= settr(13414,4,13129,5777,5777,"((PAUSE==ABORT))", 1, 2, 0); /* m: 13108 -> 13129,0 */
	reached1[13108] = 1;
	trans[1][13108]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13109]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13110]	= settr(13417,2,13111,2,0,"else", 1, 2, 0);
	trans[1][13111]	= settr(13418,4,13129,5778,5778,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13113 -> 0,13129 */
	reached1[13113] = 1;
	T = trans[1][13129] = settr(13436,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13436,0,13115,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13436,0,13127,0,0,"IF", 0, 2, 0);
	trans[1][13115]	= settr(13422,0,13126,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][13126] = settr(13433,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13433,0,13122,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13122] = settr(13429,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13429,0,13116,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13429,0,13118,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13429,0,13120,0,0,"IF", 0, 2, 0);
	trans[1][13116]	= settr(13423,0,13124,5779,5779,"((_pid==0))", 0, 2, 0); /* m: 13117 -> 13124,0 */
	reached1[13117] = 1;
	trans[1][13117]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13123]	= settr(13430,0,13124,1,0,".(goto)", 0, 2, 0);
	trans[1][13118]	= settr(13425,0,13124,5780,5780,"((_pid==1))", 0, 2, 0); /* m: 13119 -> 13124,0 */
	reached1[13119] = 1;
	trans[1][13119]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13120]	= settr(13427,0,13124,5781,5781,"((_pid>1))", 0, 2, 0); /* m: 13121 -> 13124,0 */
	reached1[13121] = 1;
	trans[1][13121]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13124]	= settr(13431,0,13125,5782,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13125]	= settr(13432,0,13215,5783,5783,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13211 -> 0,13215 */
	reached1[13211] = 1;
	trans[1][13130]	= settr(13437,0,13211,1,0,".(goto)", 0, 2, 0); /* m: 13211 -> 0,13215 */
	reached1[13211] = 1;
	trans[1][13127]	= settr(13434,0,13128,2,0,"else", 0, 2, 0);
	trans[1][13128]	= settr(13435,0,13215,5784,5784,"(1)", 0, 2, 0); /* m: 13211 -> 13215,0 */
	reached1[13211] = 1;
	trans[1][13132]	= settr(13439,0,13169,5785,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][13169] = settr(13476,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13476,0,13152,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13152] = settr(13459,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13459,2,13150,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13150] = settr(13457,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13457,2,13133,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13457,2,13136,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13457,2,13139,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13457,2,13142,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13457,2,13145,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13457,2,13148,0,0,"IF", 1, 2, 0);
	trans[1][13133]	= settr(13440,4,13167,5786,5786,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13134 -> 13167,0 */
	reached1[13134] = 1;
	trans[1][13134]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13135]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13151]	= settr(13458,0,13167,5787,5787,".(goto)", 1, 2, 0);
	trans[1][13136]	= settr(13443,4,13167,5788,5788,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13137 -> 13167,0 */
	reached1[13137] = 1;
	trans[1][13137]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13138]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13139]	= settr(13446,4,13167,5789,5789,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13140 -> 13167,0 */
	reached1[13140] = 1;
	trans[1][13140]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13141]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13142]	= settr(13449,4,13167,5790,5790,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13143 -> 13167,0 */
	reached1[13143] = 1;
	trans[1][13143]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13144]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13145]	= settr(13452,4,13167,5791,5791,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 13146 -> 13167,0 */
	reached1[13146] = 1;
	trans[1][13146]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13147]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13148]	= settr(13455,2,13149,2,0,"else", 1, 2, 0);
	trans[1][13149]	= settr(13456,4,13167,5792,5792,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13151 -> 0,13167 */
	reached1[13151] = 1;
	T = trans[1][13167] = settr(13474,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13474,0,13153,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13474,0,13165,0,0,"IF", 0, 2, 0);
	trans[1][13153]	= settr(13460,0,13164,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][13164] = settr(13471,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13471,0,13160,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13160] = settr(13467,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13467,0,13154,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13467,0,13156,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13467,0,13158,0,0,"IF", 0, 2, 0);
	trans[1][13154]	= settr(13461,0,13162,5793,5793,"((_pid==0))", 0, 2, 0); /* m: 13155 -> 13162,0 */
	reached1[13155] = 1;
	trans[1][13155]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13161]	= settr(13468,0,13162,1,0,".(goto)", 0, 2, 0);
	trans[1][13156]	= settr(13463,0,13162,5794,5794,"((_pid==1))", 0, 2, 0); /* m: 13157 -> 13162,0 */
	reached1[13157] = 1;
	trans[1][13157]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13158]	= settr(13465,0,13162,5795,5795,"((_pid>1))", 0, 2, 0); /* m: 13159 -> 13162,0 */
	reached1[13159] = 1;
	trans[1][13159]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13162]	= settr(13469,0,13163,5796,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13163]	= settr(13470,0,13215,5797,5797,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13211 -> 0,13215 */
	reached1[13211] = 1;
	trans[1][13168]	= settr(13475,0,13211,1,0,".(goto)", 0, 2, 0); /* m: 13211 -> 0,13215 */
	reached1[13211] = 1;
	trans[1][13165]	= settr(13472,0,13166,2,0,"else", 0, 2, 0);
	trans[1][13166]	= settr(13473,0,13215,5798,5798,"(1)", 0, 2, 0); /* m: 13211 -> 13215,0 */
	reached1[13211] = 1;
	trans[1][13170]	= settr(13477,0,13207,5799,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][13207] = settr(13514,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13514,0,13190,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13190] = settr(13497,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13497,2,13188,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13188] = settr(13495,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13495,2,13171,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13495,2,13174,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13495,2,13177,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13495,2,13180,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13495,2,13183,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13495,2,13186,0,0,"IF", 1, 2, 0);
	trans[1][13171]	= settr(13478,4,13205,5800,5800,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13172 -> 13205,0 */
	reached1[13172] = 1;
	trans[1][13172]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13173]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13189]	= settr(13496,0,13205,5801,5801,".(goto)", 1, 2, 0);
	trans[1][13174]	= settr(13481,4,13205,5802,5802,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13175 -> 13205,0 */
	reached1[13175] = 1;
	trans[1][13175]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13176]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13177]	= settr(13484,4,13205,5803,5803,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13178 -> 13205,0 */
	reached1[13178] = 1;
	trans[1][13178]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13179]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13180]	= settr(13487,4,13205,5804,5804,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13181 -> 13205,0 */
	reached1[13181] = 1;
	trans[1][13181]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13182]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13183]	= settr(13490,4,13205,5805,5805,"((STOP==ABORT))", 1, 2, 0); /* m: 13184 -> 13205,0 */
	reached1[13184] = 1;
	trans[1][13184]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13185]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13186]	= settr(13493,2,13187,2,0,"else", 1, 2, 0);
	trans[1][13187]	= settr(13494,4,13205,5806,5806,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13189 -> 0,13205 */
	reached1[13189] = 1;
	T = trans[1][13205] = settr(13512,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13512,0,13191,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13512,0,13203,0,0,"IF", 0, 2, 0);
	trans[1][13191]	= settr(13498,0,13202,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][13202] = settr(13509,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13509,0,13198,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13198] = settr(13505,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13505,0,13192,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13505,0,13194,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13505,0,13196,0,0,"IF", 0, 2, 0);
	trans[1][13192]	= settr(13499,0,13200,5807,5807,"((_pid==0))", 0, 2, 0); /* m: 13193 -> 13200,0 */
	reached1[13193] = 1;
	trans[1][13193]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13199]	= settr(13506,0,13200,1,0,".(goto)", 0, 2, 0);
	trans[1][13194]	= settr(13501,0,13200,5808,5808,"((_pid==1))", 0, 2, 0); /* m: 13195 -> 13200,0 */
	reached1[13195] = 1;
	trans[1][13195]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13196]	= settr(13503,0,13200,5809,5809,"((_pid>1))", 0, 2, 0); /* m: 13197 -> 13200,0 */
	reached1[13197] = 1;
	trans[1][13197]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13200]	= settr(13507,0,13201,5810,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13201]	= settr(13508,0,13215,5811,5811,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13211 -> 0,13215 */
	reached1[13211] = 1;
	trans[1][13206]	= settr(13513,0,13211,1,0,".(goto)", 0, 2, 0); /* m: 13211 -> 0,13215 */
	reached1[13211] = 1;
	trans[1][13203]	= settr(13510,0,13204,2,0,"else", 0, 2, 0);
	trans[1][13204]	= settr(13511,0,13215,5812,5812,"(1)", 0, 2, 0); /* m: 13211 -> 13215,0 */
	reached1[13211] = 1;
	trans[1][13211]	= settr(13518,0,13215,5813,5813,"j = (j-1)", 0, 2, 0);
	trans[1][13212]	= settr(13519,0,13213,2,0,"else", 0, 2, 0);
	trans[1][13213]	= settr(13520,0,14614,5814,5814,"j = 1", 0, 2, 0);
	trans[1][13214]	= settr(13521,0,14614,1,0,"goto :b92", 0, 2, 0);
	trans[1][13217]	= settr(13524,0,14614,1,0,"break", 0, 2, 0);
	trans[1][13449]	= settr(13756,0,14614,1,0,".(goto)", 0, 2, 0);
	trans[1][13222]	= settr(13529,0,13447,2,0,"else", 0, 2, 0);
	T = trans[ 1][13447] = settr(13754,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13754,0,13223,0,0,"sub-sequence", 0, 2, 0);
	trans[1][13223]	= settr(13530,0,13388,5815,0,"printf('Supervisor propagating command %e...\\n',6)", 0, 2, 0);
	T = trans[ 1][13388] = settr(13695,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13695,0,13385,0,0,"sub-sequence", 0, 2, 0);
	trans[1][13386]	= settr(13693,0,13385,1,0,".(goto)", 0, 2, 0);
	T = trans[1][13385] = settr(13692,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(13692,0,13224,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(13692,0,13382,0,0,"DO", 0, 2, 0);
	trans[1][13224]	= settr(13531,0,13380,5816,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][13380] = settr(13687,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13687,0,13378,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13378] = settr(13685,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13685,0,13225,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13685,0,13264,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13685,0,13302,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13685,0,13340,0,0,"IF", 0, 2, 0);
	trans[1][13225]	= settr(13532,0,13263,5817,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][13263] = settr(13570,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13570,0,13245,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13245] = settr(13552,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13552,2,13243,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13243] = settr(13550,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13550,2,13226,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13550,2,13229,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13550,2,13232,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13550,2,13235,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13550,2,13238,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13550,2,13241,0,0,"IF", 1, 2, 0);
	trans[1][13226]	= settr(13533,4,13246,5818,5818,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13227 -> 13246,0 */
	reached1[13227] = 1;
	trans[1][13227]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13228]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13244]	= settr(13551,0,13246,5819,5819,".(goto)", 1, 2, 0);
	trans[1][13229]	= settr(13536,4,13246,5820,5820,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13230 -> 13246,0 */
	reached1[13230] = 1;
	trans[1][13230]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13231]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13232]	= settr(13539,4,13246,5821,5821,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13233 -> 13246,0 */
	reached1[13233] = 1;
	trans[1][13233]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13234]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13235]	= settr(13542,4,13246,5822,5822,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13236 -> 13246,0 */
	reached1[13236] = 1;
	trans[1][13236]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13237]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13238]	= settr(13545,4,13246,5823,5823,"((START==ABORT))", 1, 2, 0); /* m: 13239 -> 13246,0 */
	reached1[13239] = 1;
	trans[1][13239]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13240]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13241]	= settr(13548,2,13242,2,0,"else", 1, 2, 0);
	trans[1][13242]	= settr(13549,4,13246,5824,5824,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13244 -> 0,13246 */
	reached1[13244] = 1;
	trans[1][13246]	= settr(13553,0,13261,5825,5825,"(run Thread(j))", 0, 2, 0);
	T = trans[1][13261] = settr(13568,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(13568,0,13247,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(13568,0,13259,0,0,"IF", 0, 2, 0);
	trans[1][13247]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][13258] = settr(13565,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13565,0,13254,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13254] = settr(13561,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13561,0,13248,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13561,0,13250,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13561,0,13252,0,0,"IF", 0, 2, 0);
	trans[1][13248]	= settr(13555,0,13256,5826,5826,"((_pid==0))", 0, 2, 0); /* m: 13249 -> 13256,0 */
	reached1[13249] = 1;
	trans[1][13249]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13255]	= settr(13562,0,13256,1,0,".(goto)", 0, 2, 0);
	trans[1][13250]	= settr(13557,0,13256,5827,5827,"((_pid==1))", 0, 2, 0); /* m: 13251 -> 13256,0 */
	reached1[13251] = 1;
	trans[1][13251]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13252]	= settr(13559,0,13256,5828,5828,"((_pid>1))", 0, 2, 0); /* m: 13253 -> 13256,0 */
	reached1[13253] = 1;
	trans[1][13253]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13256]	= settr(13563,0,13257,5829,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13257]	= settr(13564,0,13385,5830,5830,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13381 -> 0,13385 */
	reached1[13381] = 1;
	trans[1][13262]	= settr(13569,0,13381,1,0,".(goto)", 0, 2, 0); /* m: 13381 -> 0,13385 */
	reached1[13381] = 1;
	trans[1][13259]	= settr(13566,0,13260,2,0,"else", 0, 2, 0);
	trans[1][13260]	= settr(13567,0,13385,5831,5831,"(1)", 0, 2, 0); /* m: 13381 -> 13385,0 */
	reached1[13381] = 1;
	trans[1][13379]	= settr(13686,0,13381,1,0,".(goto)", 0, 2, 0); /* m: 13381 -> 0,13385 */
	reached1[13381] = 1;
	trans[1][13264]	= settr(13571,0,13301,5832,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][13301] = settr(13608,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13608,0,13284,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13284] = settr(13591,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13591,2,13282,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13282] = settr(13589,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13589,2,13265,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13589,2,13268,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13589,2,13271,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13589,2,13274,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13589,2,13277,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13589,2,13280,0,0,"IF", 1, 2, 0);
	trans[1][13265]	= settr(13572,4,13299,5833,5833,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13266 -> 13299,0 */
	reached1[13266] = 1;
	trans[1][13266]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13267]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13283]	= settr(13590,0,13299,5834,5834,".(goto)", 1, 2, 0);
	trans[1][13268]	= settr(13575,4,13299,5835,5835,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13269 -> 13299,0 */
	reached1[13269] = 1;
	trans[1][13269]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13270]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13271]	= settr(13578,4,13299,5836,5836,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13272 -> 13299,0 */
	reached1[13272] = 1;
	trans[1][13272]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13273]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13274]	= settr(13581,4,13299,5837,5837,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13275 -> 13299,0 */
	reached1[13275] = 1;
	trans[1][13275]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13276]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13277]	= settr(13584,4,13299,5838,5838,"((PAUSE==ABORT))", 1, 2, 0); /* m: 13278 -> 13299,0 */
	reached1[13278] = 1;
	trans[1][13278]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13279]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13280]	= settr(13587,2,13281,2,0,"else", 1, 2, 0);
	trans[1][13281]	= settr(13588,4,13299,5839,5839,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13283 -> 0,13299 */
	reached1[13283] = 1;
	T = trans[1][13299] = settr(13606,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(13606,0,13285,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(13606,0,13297,0,0,"IF", 0, 2, 0);
	trans[1][13285]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][13296] = settr(13603,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13603,0,13292,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13292] = settr(13599,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13599,0,13286,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13599,0,13288,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13599,0,13290,0,0,"IF", 0, 2, 0);
	trans[1][13286]	= settr(13593,0,13294,5840,5840,"((_pid==0))", 0, 2, 0); /* m: 13287 -> 13294,0 */
	reached1[13287] = 1;
	trans[1][13287]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13293]	= settr(13600,0,13294,1,0,".(goto)", 0, 2, 0);
	trans[1][13288]	= settr(13595,0,13294,5841,5841,"((_pid==1))", 0, 2, 0); /* m: 13289 -> 13294,0 */
	reached1[13289] = 1;
	trans[1][13289]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13290]	= settr(13597,0,13294,5842,5842,"((_pid>1))", 0, 2, 0); /* m: 13291 -> 13294,0 */
	reached1[13291] = 1;
	trans[1][13291]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13294]	= settr(13601,0,13295,5843,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13295]	= settr(13602,0,13385,5844,5844,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13381 -> 0,13385 */
	reached1[13381] = 1;
	trans[1][13300]	= settr(13607,0,13381,1,0,".(goto)", 0, 2, 0); /* m: 13381 -> 0,13385 */
	reached1[13381] = 1;
	trans[1][13297]	= settr(13604,0,13298,2,0,"else", 0, 2, 0);
	trans[1][13298]	= settr(13605,0,13385,5845,5845,"(1)", 0, 2, 0); /* m: 13381 -> 13385,0 */
	reached1[13381] = 1;
	trans[1][13302]	= settr(13609,0,13339,5846,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][13339] = settr(13646,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13646,0,13322,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13322] = settr(13629,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13629,2,13320,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13320] = settr(13627,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13627,2,13303,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13627,2,13306,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13627,2,13309,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13627,2,13312,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13627,2,13315,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13627,2,13318,0,0,"IF", 1, 2, 0);
	trans[1][13303]	= settr(13610,4,13337,5847,5847,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13304 -> 13337,0 */
	reached1[13304] = 1;
	trans[1][13304]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13305]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13321]	= settr(13628,0,13337,5848,5848,".(goto)", 1, 2, 0);
	trans[1][13306]	= settr(13613,4,13337,5849,5849,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13307 -> 13337,0 */
	reached1[13307] = 1;
	trans[1][13307]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13308]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13309]	= settr(13616,4,13337,5850,5850,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13310 -> 13337,0 */
	reached1[13310] = 1;
	trans[1][13310]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13311]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13312]	= settr(13619,4,13337,5851,5851,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13313 -> 13337,0 */
	reached1[13313] = 1;
	trans[1][13313]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13314]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13315]	= settr(13622,4,13337,5852,5852,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 13316 -> 13337,0 */
	reached1[13316] = 1;
	trans[1][13316]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13317]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13318]	= settr(13625,2,13319,2,0,"else", 1, 2, 0);
	trans[1][13319]	= settr(13626,4,13337,5853,5853,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13321 -> 0,13337 */
	reached1[13321] = 1;
	T = trans[1][13337] = settr(13644,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(13644,0,13323,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(13644,0,13335,0,0,"IF", 0, 2, 0);
	trans[1][13323]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][13334] = settr(13641,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13641,0,13330,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13330] = settr(13637,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13637,0,13324,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13637,0,13326,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13637,0,13328,0,0,"IF", 0, 2, 0);
	trans[1][13324]	= settr(13631,0,13332,5854,5854,"((_pid==0))", 0, 2, 0); /* m: 13325 -> 13332,0 */
	reached1[13325] = 1;
	trans[1][13325]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13331]	= settr(13638,0,13332,1,0,".(goto)", 0, 2, 0);
	trans[1][13326]	= settr(13633,0,13332,5855,5855,"((_pid==1))", 0, 2, 0); /* m: 13327 -> 13332,0 */
	reached1[13327] = 1;
	trans[1][13327]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13328]	= settr(13635,0,13332,5856,5856,"((_pid>1))", 0, 2, 0); /* m: 13329 -> 13332,0 */
	reached1[13329] = 1;
	trans[1][13329]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13332]	= settr(13639,0,13333,5857,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13333]	= settr(13640,0,13385,5858,5858,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13381 -> 0,13385 */
	reached1[13381] = 1;
	trans[1][13338]	= settr(13645,0,13381,1,0,".(goto)", 0, 2, 0); /* m: 13381 -> 0,13385 */
	reached1[13381] = 1;
	trans[1][13335]	= settr(13642,0,13336,2,0,"else", 0, 2, 0);
	trans[1][13336]	= settr(13643,0,13385,5859,5859,"(1)", 0, 2, 0); /* m: 13381 -> 13385,0 */
	reached1[13381] = 1;
	trans[1][13340]	= settr(13647,0,13377,5860,0,"(((6==STOP)||(6==ABORT)))", 0, 2, 0);
	T = trans[ 1][13377] = settr(13684,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13684,0,13360,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13360] = settr(13667,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13667,2,13358,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13358] = settr(13665,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13665,2,13341,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13665,2,13344,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13665,2,13347,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13665,2,13350,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13665,2,13353,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13665,2,13356,0,0,"IF", 1, 2, 0);
	trans[1][13341]	= settr(13648,4,13375,5861,5861,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13342 -> 13375,0 */
	reached1[13342] = 1;
	trans[1][13342]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13343]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13359]	= settr(13666,0,13375,5862,5862,".(goto)", 1, 2, 0);
	trans[1][13344]	= settr(13651,4,13375,5863,5863,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13345 -> 13375,0 */
	reached1[13345] = 1;
	trans[1][13345]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13346]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13347]	= settr(13654,4,13375,5864,5864,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13348 -> 13375,0 */
	reached1[13348] = 1;
	trans[1][13348]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13349]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13350]	= settr(13657,4,13375,5865,5865,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13351 -> 13375,0 */
	reached1[13351] = 1;
	trans[1][13351]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13352]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13353]	= settr(13660,4,13375,5866,5866,"((STOP==ABORT))", 1, 2, 0); /* m: 13354 -> 13375,0 */
	reached1[13354] = 1;
	trans[1][13354]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13355]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13356]	= settr(13663,2,13357,2,0,"else", 1, 2, 0);
	trans[1][13357]	= settr(13664,4,13375,5867,5867,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13359 -> 0,13375 */
	reached1[13359] = 1;
	T = trans[1][13375] = settr(13682,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(13682,0,13361,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(13682,0,13373,0,0,"IF", 0, 2, 0);
	trans[1][13361]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][13372] = settr(13679,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13679,0,13368,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13368] = settr(13675,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13675,0,13362,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13675,0,13364,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13675,0,13366,0,0,"IF", 0, 2, 0);
	trans[1][13362]	= settr(13669,0,13370,5868,5868,"((_pid==0))", 0, 2, 0); /* m: 13363 -> 13370,0 */
	reached1[13363] = 1;
	trans[1][13363]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13369]	= settr(13676,0,13370,1,0,".(goto)", 0, 2, 0);
	trans[1][13364]	= settr(13671,0,13370,5869,5869,"((_pid==1))", 0, 2, 0); /* m: 13365 -> 13370,0 */
	reached1[13365] = 1;
	trans[1][13365]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13366]	= settr(13673,0,13370,5870,5870,"((_pid>1))", 0, 2, 0); /* m: 13367 -> 13370,0 */
	reached1[13367] = 1;
	trans[1][13367]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13370]	= settr(13677,0,13371,5871,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13371]	= settr(13678,0,13385,5872,5872,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13381 -> 0,13385 */
	reached1[13381] = 1;
	trans[1][13376]	= settr(13683,0,13381,1,0,".(goto)", 0, 2, 0); /* m: 13381 -> 0,13385 */
	reached1[13381] = 1;
	trans[1][13373]	= settr(13680,0,13374,2,0,"else", 0, 2, 0);
	trans[1][13374]	= settr(13681,0,13385,5873,5873,"(1)", 0, 2, 0); /* m: 13381 -> 13385,0 */
	reached1[13381] = 1;
	trans[1][13381]	= settr(13688,0,13385,5874,5874,"j = (j+1)", 0, 2, 0);
	trans[1][13382]	= settr(13689,0,13383,2,0,"else", 0, 2, 0);
	trans[1][13383]	= settr(13690,0,13444,5875,5875,"j = 1", 0, 2, 0);
	trans[1][13384]	= settr(13691,0,13444,1,0,"goto :b93", 0, 2, 0);
	trans[1][13387]	= settr(13694,0,13444,1,0,"break", 0, 2, 0);
	trans[1][13445]	= settr(13752,0,13444,1,0,".(goto)", 0, 2, 0);
	T = trans[1][13444] = settr(13751,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(13751,0,13389,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(13751,0,13441,0,0,"DO", 0, 2, 0);
	trans[1][13389]	= settr(13696,0,13438,5876,0,"((j<3))", 0, 2, 0);
	T = trans[1][13438] = settr(13745,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13745,0,13390,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13745,0,13402,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13745,0,13414,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13745,0,13426,0,0,"IF", 0, 2, 0);
	trans[1][13390]	= settr(13697,0,13401,5877,0,"((6==START))", 0, 2, 0);
	T = trans[ 1][13401] = settr(13708,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13708,0,13397,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13397] = settr(13704,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13704,0,13391,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13704,0,13393,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13704,0,13395,0,0,"IF", 0, 2, 0);
	trans[1][13391]	= settr(13698,0,13399,5878,5878,"((_pid==0))", 0, 2, 0); /* m: 13392 -> 13399,0 */
	reached1[13392] = 1;
	trans[1][13392]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13398]	= settr(13705,0,13399,1,0,".(goto)", 0, 2, 0);
	trans[1][13393]	= settr(13700,0,13399,5879,5879,"((_pid==1))", 0, 2, 0); /* m: 13394 -> 13399,0 */
	reached1[13394] = 1;
	trans[1][13394]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13395]	= settr(13702,0,13399,5880,5880,"((_pid>1))", 0, 2, 0); /* m: 13396 -> 13399,0 */
	reached1[13396] = 1;
	trans[1][13396]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13399]	= settr(13706,0,13400,5881,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13400]	= settr(13707,0,13444,5882,5882,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13440 -> 0,13444 */
	reached1[13440] = 1;
	trans[1][13439]	= settr(13746,0,13440,1,0,".(goto)", 0, 2, 0); /* m: 13440 -> 0,13444 */
	reached1[13440] = 1;
	trans[1][13402]	= settr(13709,0,13413,5883,0,"((6==CONTINUE))", 0, 2, 0);
	T = trans[ 1][13413] = settr(13720,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13720,0,13409,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13409] = settr(13716,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13716,0,13403,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13716,0,13405,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13716,0,13407,0,0,"IF", 0, 2, 0);
	trans[1][13403]	= settr(13710,0,13411,5884,5884,"((_pid==0))", 0, 2, 0); /* m: 13404 -> 13411,0 */
	reached1[13404] = 1;
	trans[1][13404]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13410]	= settr(13717,0,13411,1,0,".(goto)", 0, 2, 0);
	trans[1][13405]	= settr(13712,0,13411,5885,5885,"((_pid==1))", 0, 2, 0); /* m: 13406 -> 13411,0 */
	reached1[13406] = 1;
	trans[1][13406]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13407]	= settr(13714,0,13411,5886,5886,"((_pid>1))", 0, 2, 0); /* m: 13408 -> 13411,0 */
	reached1[13408] = 1;
	trans[1][13408]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13411]	= settr(13718,0,13412,5887,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13412]	= settr(13719,0,13444,5888,5888,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13440 -> 0,13444 */
	reached1[13440] = 1;
	trans[1][13414]	= settr(13721,0,13425,5889,0,"((6==PAUSE))", 0, 2, 0);
	T = trans[ 1][13425] = settr(13732,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13732,0,13421,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13421] = settr(13728,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13728,0,13415,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13728,0,13417,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13728,0,13419,0,0,"IF", 0, 2, 0);
	trans[1][13415]	= settr(13722,0,13423,5890,5890,"((_pid==0))", 0, 2, 0); /* m: 13416 -> 13423,0 */
	reached1[13416] = 1;
	trans[1][13416]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13422]	= settr(13729,0,13423,1,0,".(goto)", 0, 2, 0);
	trans[1][13417]	= settr(13724,0,13423,5891,5891,"((_pid==1))", 0, 2, 0); /* m: 13418 -> 13423,0 */
	reached1[13418] = 1;
	trans[1][13418]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13419]	= settr(13726,0,13423,5892,5892,"((_pid>1))", 0, 2, 0); /* m: 13420 -> 13423,0 */
	reached1[13420] = 1;
	trans[1][13420]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13423]	= settr(13730,0,13424,5893,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13424]	= settr(13731,0,13444,5894,5894,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13440 -> 0,13444 */
	reached1[13440] = 1;
	trans[1][13426]	= settr(13733,0,13437,5895,0,"((6==STOP))", 0, 2, 0);
	T = trans[ 1][13437] = settr(13744,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13744,0,13433,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13433] = settr(13740,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13740,0,13427,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13740,0,13429,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13740,0,13431,0,0,"IF", 0, 2, 0);
	trans[1][13427]	= settr(13734,0,13435,5896,5896,"((_pid==0))", 0, 2, 0); /* m: 13428 -> 13435,0 */
	reached1[13428] = 1;
	trans[1][13428]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13434]	= settr(13741,0,13435,1,0,".(goto)", 0, 2, 0);
	trans[1][13429]	= settr(13736,0,13435,5897,5897,"((_pid==1))", 0, 2, 0); /* m: 13430 -> 13435,0 */
	reached1[13430] = 1;
	trans[1][13430]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13431]	= settr(13738,0,13435,5898,5898,"((_pid>1))", 0, 2, 0); /* m: 13432 -> 13435,0 */
	reached1[13432] = 1;
	trans[1][13432]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13435]	= settr(13742,0,13436,5899,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13436]	= settr(13743,0,13444,5900,5900,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13440 -> 0,13444 */
	reached1[13440] = 1;
	trans[1][13440]	= settr(13747,0,13444,5901,5901,"j = (j+1)", 0, 2, 0);
	trans[1][13441]	= settr(13748,0,13442,2,0,"else", 0, 2, 0);
	trans[1][13442]	= settr(13749,0,14614,5902,5902,"j = 1", 0, 2, 0);
	trans[1][13443]	= settr(13750,0,14614,1,0,"goto :b94", 0, 2, 0);
	trans[1][13446]	= settr(13753,0,14614,1,0,"break", 0, 2, 0);
	trans[1][14602]	= settr(14909,0,14614,1,0,".(goto)", 0, 2, 0);
	trans[1][13453]	= settr(13760,0,14025,5903,0,"((11==PAUSED))", 0, 2, 0);
	T = trans[ 1][14025] = settr(14332,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14332,0,14023,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14023] = settr(14330,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14330,0,13454,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14330,0,13457,0,0,"IF", 0, 2, 0);
	trans[1][13454]	= settr(13761,0,13455,5904,0,"(((8==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][13455]	= settr(13762,0,13456,5905,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][13456]	= settr(13763,0,14614,5906,5906,"supervisor_started = 1", 1, 2, 0);
	trans[1][14024]	= settr(14331,0,14614,1,0,".(goto)", 0, 2, 0);
	trans[1][13457]	= settr(13764,0,14021,2,0,"else", 0, 2, 0);
	T = trans[1][14021] = settr(14328,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14328,0,13458,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14328,0,13795,0,0,"IF", 0, 2, 0);
	trans[1][13458]	= settr(13765,0,13794,5907,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][13794] = settr(14101,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14101,0,13792,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13792] = settr(14099,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14099,0,13459,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14099,0,13625,0,0,"IF", 0, 2, 0);
	trans[1][13459]	= settr(13766,0,13624,5908,0,"(((8==START)||(8==PAUSED)))", 0, 2, 0);
	T = trans[ 1][13624] = settr(13931,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13931,0,13621,0,0,"sub-sequence", 0, 2, 0);
	trans[1][13622]	= settr(13929,0,13621,1,0,".(goto)", 0, 2, 0);
	T = trans[1][13621] = settr(13928,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(13928,0,13460,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(13928,0,13618,0,0,"DO", 0, 2, 0);
	trans[1][13460]	= settr(13767,0,13616,5909,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][13616] = settr(13923,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13923,0,13614,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13614] = settr(13921,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13921,0,13461,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13921,0,13500,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13921,0,13538,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13921,0,13576,0,0,"IF", 0, 2, 0);
	trans[1][13461]	= settr(13768,0,13499,5910,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][13499] = settr(13806,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13806,0,13481,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13481] = settr(13788,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13788,2,13479,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13479] = settr(13786,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13786,2,13462,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13786,2,13465,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13786,2,13468,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13786,2,13471,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13786,2,13474,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13786,2,13477,0,0,"IF", 1, 2, 0);
	trans[1][13462]	= settr(13769,4,13482,5911,5911,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13463 -> 13482,0 */
	reached1[13463] = 1;
	trans[1][13463]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13464]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13480]	= settr(13787,0,13482,5912,5912,".(goto)", 1, 2, 0);
	trans[1][13465]	= settr(13772,4,13482,5913,5913,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13466 -> 13482,0 */
	reached1[13466] = 1;
	trans[1][13466]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13467]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13468]	= settr(13775,4,13482,5914,5914,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13469 -> 13482,0 */
	reached1[13469] = 1;
	trans[1][13469]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13470]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13471]	= settr(13778,4,13482,5915,5915,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13472 -> 13482,0 */
	reached1[13472] = 1;
	trans[1][13472]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13473]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13474]	= settr(13781,4,13482,5916,5916,"((START==ABORT))", 1, 2, 0); /* m: 13475 -> 13482,0 */
	reached1[13475] = 1;
	trans[1][13475]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13476]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13477]	= settr(13784,2,13478,2,0,"else", 1, 2, 0);
	trans[1][13478]	= settr(13785,4,13482,5917,5917,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13480 -> 0,13482 */
	reached1[13480] = 1;
	trans[1][13482]	= settr(13789,0,13497,5918,5918,"(run Thread(j))", 0, 2, 0);
	T = trans[1][13497] = settr(13804,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13804,0,13483,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13804,0,13495,0,0,"IF", 0, 2, 0);
	trans[1][13483]	= settr(13790,0,13494,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][13494] = settr(13801,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13801,0,13490,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13490] = settr(13797,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13797,0,13484,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13797,0,13486,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13797,0,13488,0,0,"IF", 0, 2, 0);
	trans[1][13484]	= settr(13791,0,13492,5919,5919,"((_pid==0))", 0, 2, 0); /* m: 13485 -> 13492,0 */
	reached1[13485] = 1;
	trans[1][13485]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13491]	= settr(13798,0,13492,1,0,".(goto)", 0, 2, 0);
	trans[1][13486]	= settr(13793,0,13492,5920,5920,"((_pid==1))", 0, 2, 0); /* m: 13487 -> 13492,0 */
	reached1[13487] = 1;
	trans[1][13487]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13488]	= settr(13795,0,13492,5921,5921,"((_pid>1))", 0, 2, 0); /* m: 13489 -> 13492,0 */
	reached1[13489] = 1;
	trans[1][13489]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13492]	= settr(13799,0,13493,5922,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13493]	= settr(13800,0,13621,5923,5923,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13617 -> 0,13621 */
	reached1[13617] = 1;
	trans[1][13498]	= settr(13805,0,13617,1,0,".(goto)", 0, 2, 0); /* m: 13617 -> 0,13621 */
	reached1[13617] = 1;
	trans[1][13495]	= settr(13802,0,13496,2,0,"else", 0, 2, 0);
	trans[1][13496]	= settr(13803,0,13621,5924,5924,"(1)", 0, 2, 0); /* m: 13617 -> 13621,0 */
	reached1[13617] = 1;
	trans[1][13615]	= settr(13922,0,13617,1,0,".(goto)", 0, 2, 0); /* m: 13617 -> 0,13621 */
	reached1[13617] = 1;
	trans[1][13500]	= settr(13807,0,13537,5925,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][13537] = settr(13844,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13844,0,13520,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13520] = settr(13827,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13827,2,13518,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13518] = settr(13825,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13825,2,13501,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13825,2,13504,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13825,2,13507,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13825,2,13510,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13825,2,13513,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13825,2,13516,0,0,"IF", 1, 2, 0);
	trans[1][13501]	= settr(13808,4,13535,5926,5926,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13502 -> 13535,0 */
	reached1[13502] = 1;
	trans[1][13502]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13503]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13519]	= settr(13826,0,13535,5927,5927,".(goto)", 1, 2, 0);
	trans[1][13504]	= settr(13811,4,13535,5928,5928,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13505 -> 13535,0 */
	reached1[13505] = 1;
	trans[1][13505]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13506]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13507]	= settr(13814,4,13535,5929,5929,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13508 -> 13535,0 */
	reached1[13508] = 1;
	trans[1][13508]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13509]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13510]	= settr(13817,4,13535,5930,5930,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13511 -> 13535,0 */
	reached1[13511] = 1;
	trans[1][13511]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13512]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13513]	= settr(13820,4,13535,5931,5931,"((PAUSE==ABORT))", 1, 2, 0); /* m: 13514 -> 13535,0 */
	reached1[13514] = 1;
	trans[1][13514]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13515]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13516]	= settr(13823,2,13517,2,0,"else", 1, 2, 0);
	trans[1][13517]	= settr(13824,4,13535,5932,5932,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13519 -> 0,13535 */
	reached1[13519] = 1;
	T = trans[1][13535] = settr(13842,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13842,0,13521,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13842,0,13533,0,0,"IF", 0, 2, 0);
	trans[1][13521]	= settr(13828,0,13532,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][13532] = settr(13839,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13839,0,13528,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13528] = settr(13835,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13835,0,13522,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13835,0,13524,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13835,0,13526,0,0,"IF", 0, 2, 0);
	trans[1][13522]	= settr(13829,0,13530,5933,5933,"((_pid==0))", 0, 2, 0); /* m: 13523 -> 13530,0 */
	reached1[13523] = 1;
	trans[1][13523]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13529]	= settr(13836,0,13530,1,0,".(goto)", 0, 2, 0);
	trans[1][13524]	= settr(13831,0,13530,5934,5934,"((_pid==1))", 0, 2, 0); /* m: 13525 -> 13530,0 */
	reached1[13525] = 1;
	trans[1][13525]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13526]	= settr(13833,0,13530,5935,5935,"((_pid>1))", 0, 2, 0); /* m: 13527 -> 13530,0 */
	reached1[13527] = 1;
	trans[1][13527]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13530]	= settr(13837,0,13531,5936,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13531]	= settr(13838,0,13621,5937,5937,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13617 -> 0,13621 */
	reached1[13617] = 1;
	trans[1][13536]	= settr(13843,0,13617,1,0,".(goto)", 0, 2, 0); /* m: 13617 -> 0,13621 */
	reached1[13617] = 1;
	trans[1][13533]	= settr(13840,0,13534,2,0,"else", 0, 2, 0);
	trans[1][13534]	= settr(13841,0,13621,5938,5938,"(1)", 0, 2, 0); /* m: 13617 -> 13621,0 */
	reached1[13617] = 1;
	trans[1][13538]	= settr(13845,0,13575,5939,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][13575] = settr(13882,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13882,0,13558,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13558] = settr(13865,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13865,2,13556,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13556] = settr(13863,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13863,2,13539,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13863,2,13542,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13863,2,13545,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13863,2,13548,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13863,2,13551,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13863,2,13554,0,0,"IF", 1, 2, 0);
	trans[1][13539]	= settr(13846,4,13573,5940,5940,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13540 -> 13573,0 */
	reached1[13540] = 1;
	trans[1][13540]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13541]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13557]	= settr(13864,0,13573,5941,5941,".(goto)", 1, 2, 0);
	trans[1][13542]	= settr(13849,4,13573,5942,5942,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13543 -> 13573,0 */
	reached1[13543] = 1;
	trans[1][13543]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13544]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13545]	= settr(13852,4,13573,5943,5943,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13546 -> 13573,0 */
	reached1[13546] = 1;
	trans[1][13546]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13547]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13548]	= settr(13855,4,13573,5944,5944,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13549 -> 13573,0 */
	reached1[13549] = 1;
	trans[1][13549]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13550]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13551]	= settr(13858,4,13573,5945,5945,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 13552 -> 13573,0 */
	reached1[13552] = 1;
	trans[1][13552]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13553]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13554]	= settr(13861,2,13555,2,0,"else", 1, 2, 0);
	trans[1][13555]	= settr(13862,4,13573,5946,5946,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13557 -> 0,13573 */
	reached1[13557] = 1;
	T = trans[1][13573] = settr(13880,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13880,0,13559,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13880,0,13571,0,0,"IF", 0, 2, 0);
	trans[1][13559]	= settr(13866,0,13570,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][13570] = settr(13877,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13877,0,13566,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13566] = settr(13873,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13873,0,13560,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13873,0,13562,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13873,0,13564,0,0,"IF", 0, 2, 0);
	trans[1][13560]	= settr(13867,0,13568,5947,5947,"((_pid==0))", 0, 2, 0); /* m: 13561 -> 13568,0 */
	reached1[13561] = 1;
	trans[1][13561]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13567]	= settr(13874,0,13568,1,0,".(goto)", 0, 2, 0);
	trans[1][13562]	= settr(13869,0,13568,5948,5948,"((_pid==1))", 0, 2, 0); /* m: 13563 -> 13568,0 */
	reached1[13563] = 1;
	trans[1][13563]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13564]	= settr(13871,0,13568,5949,5949,"((_pid>1))", 0, 2, 0); /* m: 13565 -> 13568,0 */
	reached1[13565] = 1;
	trans[1][13565]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13568]	= settr(13875,0,13569,5950,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13569]	= settr(13876,0,13621,5951,5951,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13617 -> 0,13621 */
	reached1[13617] = 1;
	trans[1][13574]	= settr(13881,0,13617,1,0,".(goto)", 0, 2, 0); /* m: 13617 -> 0,13621 */
	reached1[13617] = 1;
	trans[1][13571]	= settr(13878,0,13572,2,0,"else", 0, 2, 0);
	trans[1][13572]	= settr(13879,0,13621,5952,5952,"(1)", 0, 2, 0); /* m: 13617 -> 13621,0 */
	reached1[13617] = 1;
	trans[1][13576]	= settr(13883,0,13613,5953,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][13613] = settr(13920,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13920,0,13596,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13596] = settr(13903,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13903,2,13594,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13594] = settr(13901,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13901,2,13577,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13901,2,13580,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13901,2,13583,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13901,2,13586,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13901,2,13589,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13901,2,13592,0,0,"IF", 1, 2, 0);
	trans[1][13577]	= settr(13884,4,13611,5954,5954,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13578 -> 13611,0 */
	reached1[13578] = 1;
	trans[1][13578]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13579]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13595]	= settr(13902,0,13611,5955,5955,".(goto)", 1, 2, 0);
	trans[1][13580]	= settr(13887,4,13611,5956,5956,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13581 -> 13611,0 */
	reached1[13581] = 1;
	trans[1][13581]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13582]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13583]	= settr(13890,4,13611,5957,5957,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13584 -> 13611,0 */
	reached1[13584] = 1;
	trans[1][13584]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13585]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13586]	= settr(13893,4,13611,5958,5958,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13587 -> 13611,0 */
	reached1[13587] = 1;
	trans[1][13587]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13588]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13589]	= settr(13896,4,13611,5959,5959,"((STOP==ABORT))", 1, 2, 0); /* m: 13590 -> 13611,0 */
	reached1[13590] = 1;
	trans[1][13590]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13591]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13592]	= settr(13899,2,13593,2,0,"else", 1, 2, 0);
	trans[1][13593]	= settr(13900,4,13611,5960,5960,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13595 -> 0,13611 */
	reached1[13595] = 1;
	T = trans[1][13611] = settr(13918,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13918,0,13597,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13918,0,13609,0,0,"IF", 0, 2, 0);
	trans[1][13597]	= settr(13904,0,13608,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][13608] = settr(13915,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13915,0,13604,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13604] = settr(13911,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13911,0,13598,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13911,0,13600,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13911,0,13602,0,0,"IF", 0, 2, 0);
	trans[1][13598]	= settr(13905,0,13606,5961,5961,"((_pid==0))", 0, 2, 0); /* m: 13599 -> 13606,0 */
	reached1[13599] = 1;
	trans[1][13599]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13605]	= settr(13912,0,13606,1,0,".(goto)", 0, 2, 0);
	trans[1][13600]	= settr(13907,0,13606,5962,5962,"((_pid==1))", 0, 2, 0); /* m: 13601 -> 13606,0 */
	reached1[13601] = 1;
	trans[1][13601]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13602]	= settr(13909,0,13606,5963,5963,"((_pid>1))", 0, 2, 0); /* m: 13603 -> 13606,0 */
	reached1[13603] = 1;
	trans[1][13603]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13606]	= settr(13913,0,13607,5964,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13607]	= settr(13914,0,13621,5965,5965,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13617 -> 0,13621 */
	reached1[13617] = 1;
	trans[1][13612]	= settr(13919,0,13617,1,0,".(goto)", 0, 2, 0); /* m: 13617 -> 0,13621 */
	reached1[13617] = 1;
	trans[1][13609]	= settr(13916,0,13610,2,0,"else", 0, 2, 0);
	trans[1][13610]	= settr(13917,0,13621,5966,5966,"(1)", 0, 2, 0); /* m: 13617 -> 13621,0 */
	reached1[13617] = 1;
	trans[1][13617]	= settr(13924,0,13621,5967,5967,"j = (j+1)", 0, 2, 0);
	trans[1][13618]	= settr(13925,0,13619,2,0,"else", 0, 2, 0);
	trans[1][13619]	= settr(13926,0,14614,5968,5968,"j = 1", 0, 2, 0);
	trans[1][13620]	= settr(13927,0,14614,1,0,"goto :b95", 0, 2, 0);
	trans[1][13623]	= settr(13930,0,14614,1,0,"break", 0, 2, 0);
	trans[1][13793]	= settr(14100,0,14614,1,0,".(goto)", 0, 2, 0);
	trans[1][13625]	= settr(13932,0,13791,2,0,"else", 0, 2, 0);
	T = trans[ 1][13791] = settr(14098,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14098,0,13626,0,0,"sub-sequence", 0, 2, 0);
	trans[1][13626]	= settr(13933,0,13788,5969,5969,"j = (3-1)", 0, 2, 0);
	trans[1][13789]	= settr(14096,0,13788,1,0,".(goto)", 0, 2, 0);
	T = trans[1][13788] = settr(14095,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(14095,0,13627,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(14095,0,13785,0,0,"DO", 0, 2, 0);
	trans[1][13627]	= settr(13934,0,13783,5970,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][13783] = settr(14090,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14090,0,13781,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13781] = settr(14088,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14088,0,13628,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14088,0,13667,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14088,0,13705,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14088,0,13743,0,0,"IF", 0, 2, 0);
	trans[1][13628]	= settr(13935,0,13666,5971,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][13666] = settr(13973,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13973,0,13648,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13648] = settr(13955,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13955,2,13646,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13646] = settr(13953,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13953,2,13629,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13953,2,13632,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13953,2,13635,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13953,2,13638,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13953,2,13641,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13953,2,13644,0,0,"IF", 1, 2, 0);
	trans[1][13629]	= settr(13936,4,13649,5972,5972,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13630 -> 13649,0 */
	reached1[13630] = 1;
	trans[1][13630]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13631]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13647]	= settr(13954,0,13649,5973,5973,".(goto)", 1, 2, 0);
	trans[1][13632]	= settr(13939,4,13649,5974,5974,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13633 -> 13649,0 */
	reached1[13633] = 1;
	trans[1][13633]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13634]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13635]	= settr(13942,4,13649,5975,5975,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13636 -> 13649,0 */
	reached1[13636] = 1;
	trans[1][13636]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13637]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13638]	= settr(13945,4,13649,5976,5976,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13639 -> 13649,0 */
	reached1[13639] = 1;
	trans[1][13639]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13640]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13641]	= settr(13948,4,13649,5977,5977,"((START==ABORT))", 1, 2, 0); /* m: 13642 -> 13649,0 */
	reached1[13642] = 1;
	trans[1][13642]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13643]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13644]	= settr(13951,2,13645,2,0,"else", 1, 2, 0);
	trans[1][13645]	= settr(13952,4,13649,5978,5978,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13647 -> 0,13649 */
	reached1[13647] = 1;
	trans[1][13649]	= settr(13956,0,13664,5979,5979,"(run Thread(j))", 0, 2, 0);
	T = trans[1][13664] = settr(13971,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13971,0,13650,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13971,0,13662,0,0,"IF", 0, 2, 0);
	trans[1][13650]	= settr(13957,0,13661,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][13661] = settr(13968,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13968,0,13657,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13657] = settr(13964,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13964,0,13651,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(13964,0,13653,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(13964,0,13655,0,0,"IF", 0, 2, 0);
	trans[1][13651]	= settr(13958,0,13659,5980,5980,"((_pid==0))", 0, 2, 0); /* m: 13652 -> 13659,0 */
	reached1[13652] = 1;
	trans[1][13652]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13658]	= settr(13965,0,13659,1,0,".(goto)", 0, 2, 0);
	trans[1][13653]	= settr(13960,0,13659,5981,5981,"((_pid==1))", 0, 2, 0); /* m: 13654 -> 13659,0 */
	reached1[13654] = 1;
	trans[1][13654]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13655]	= settr(13962,0,13659,5982,5982,"((_pid>1))", 0, 2, 0); /* m: 13656 -> 13659,0 */
	reached1[13656] = 1;
	trans[1][13656]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13659]	= settr(13966,0,13660,5983,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13660]	= settr(13967,0,13788,5984,5984,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13784 -> 0,13788 */
	reached1[13784] = 1;
	trans[1][13665]	= settr(13972,0,13784,1,0,".(goto)", 0, 2, 0); /* m: 13784 -> 0,13788 */
	reached1[13784] = 1;
	trans[1][13662]	= settr(13969,0,13663,2,0,"else", 0, 2, 0);
	trans[1][13663]	= settr(13970,0,13788,5985,5985,"(1)", 0, 2, 0); /* m: 13784 -> 13788,0 */
	reached1[13784] = 1;
	trans[1][13782]	= settr(14089,0,13784,1,0,".(goto)", 0, 2, 0); /* m: 13784 -> 0,13788 */
	reached1[13784] = 1;
	trans[1][13667]	= settr(13974,0,13704,5986,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][13704] = settr(14011,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14011,0,13687,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13687] = settr(13994,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(13994,2,13685,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13685] = settr(13992,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13992,2,13668,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13992,2,13671,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13992,2,13674,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13992,2,13677,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(13992,2,13680,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(13992,2,13683,0,0,"IF", 1, 2, 0);
	trans[1][13668]	= settr(13975,4,13702,5987,5987,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13669 -> 13702,0 */
	reached1[13669] = 1;
	trans[1][13669]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13670]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13686]	= settr(13993,0,13702,5988,5988,".(goto)", 1, 2, 0);
	trans[1][13671]	= settr(13978,4,13702,5989,5989,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13672 -> 13702,0 */
	reached1[13672] = 1;
	trans[1][13672]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13673]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13674]	= settr(13981,4,13702,5990,5990,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13675 -> 13702,0 */
	reached1[13675] = 1;
	trans[1][13675]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13676]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13677]	= settr(13984,4,13702,5991,5991,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13678 -> 13702,0 */
	reached1[13678] = 1;
	trans[1][13678]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13679]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13680]	= settr(13987,4,13702,5992,5992,"((PAUSE==ABORT))", 1, 2, 0); /* m: 13681 -> 13702,0 */
	reached1[13681] = 1;
	trans[1][13681]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13682]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13683]	= settr(13990,2,13684,2,0,"else", 1, 2, 0);
	trans[1][13684]	= settr(13991,4,13702,5993,5993,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13686 -> 0,13702 */
	reached1[13686] = 1;
	T = trans[1][13702] = settr(14009,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14009,0,13688,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14009,0,13700,0,0,"IF", 0, 2, 0);
	trans[1][13688]	= settr(13995,0,13699,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][13699] = settr(14006,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14006,0,13695,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13695] = settr(14002,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14002,0,13689,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14002,0,13691,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14002,0,13693,0,0,"IF", 0, 2, 0);
	trans[1][13689]	= settr(13996,0,13697,5994,5994,"((_pid==0))", 0, 2, 0); /* m: 13690 -> 13697,0 */
	reached1[13690] = 1;
	trans[1][13690]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13696]	= settr(14003,0,13697,1,0,".(goto)", 0, 2, 0);
	trans[1][13691]	= settr(13998,0,13697,5995,5995,"((_pid==1))", 0, 2, 0); /* m: 13692 -> 13697,0 */
	reached1[13692] = 1;
	trans[1][13692]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13693]	= settr(14000,0,13697,5996,5996,"((_pid>1))", 0, 2, 0); /* m: 13694 -> 13697,0 */
	reached1[13694] = 1;
	trans[1][13694]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13697]	= settr(14004,0,13698,5997,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13698]	= settr(14005,0,13788,5998,5998,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13784 -> 0,13788 */
	reached1[13784] = 1;
	trans[1][13703]	= settr(14010,0,13784,1,0,".(goto)", 0, 2, 0); /* m: 13784 -> 0,13788 */
	reached1[13784] = 1;
	trans[1][13700]	= settr(14007,0,13701,2,0,"else", 0, 2, 0);
	trans[1][13701]	= settr(14008,0,13788,5999,5999,"(1)", 0, 2, 0); /* m: 13784 -> 13788,0 */
	reached1[13784] = 1;
	trans[1][13705]	= settr(14012,0,13742,6000,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][13742] = settr(14049,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14049,0,13725,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13725] = settr(14032,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14032,2,13723,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13723] = settr(14030,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14030,2,13706,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14030,2,13709,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14030,2,13712,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14030,2,13715,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14030,2,13718,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14030,2,13721,0,0,"IF", 1, 2, 0);
	trans[1][13706]	= settr(14013,4,13740,6001,6001,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13707 -> 13740,0 */
	reached1[13707] = 1;
	trans[1][13707]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13708]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13724]	= settr(14031,0,13740,6002,6002,".(goto)", 1, 2, 0);
	trans[1][13709]	= settr(14016,4,13740,6003,6003,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13710 -> 13740,0 */
	reached1[13710] = 1;
	trans[1][13710]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13711]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13712]	= settr(14019,4,13740,6004,6004,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13713 -> 13740,0 */
	reached1[13713] = 1;
	trans[1][13713]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13714]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13715]	= settr(14022,4,13740,6005,6005,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13716 -> 13740,0 */
	reached1[13716] = 1;
	trans[1][13716]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13717]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13718]	= settr(14025,4,13740,6006,6006,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 13719 -> 13740,0 */
	reached1[13719] = 1;
	trans[1][13719]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13720]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13721]	= settr(14028,2,13722,2,0,"else", 1, 2, 0);
	trans[1][13722]	= settr(14029,4,13740,6007,6007,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13724 -> 0,13740 */
	reached1[13724] = 1;
	T = trans[1][13740] = settr(14047,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14047,0,13726,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14047,0,13738,0,0,"IF", 0, 2, 0);
	trans[1][13726]	= settr(14033,0,13737,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][13737] = settr(14044,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14044,0,13733,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13733] = settr(14040,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14040,0,13727,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14040,0,13729,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14040,0,13731,0,0,"IF", 0, 2, 0);
	trans[1][13727]	= settr(14034,0,13735,6008,6008,"((_pid==0))", 0, 2, 0); /* m: 13728 -> 13735,0 */
	reached1[13728] = 1;
	trans[1][13728]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13734]	= settr(14041,0,13735,1,0,".(goto)", 0, 2, 0);
	trans[1][13729]	= settr(14036,0,13735,6009,6009,"((_pid==1))", 0, 2, 0); /* m: 13730 -> 13735,0 */
	reached1[13730] = 1;
	trans[1][13730]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13731]	= settr(14038,0,13735,6010,6010,"((_pid>1))", 0, 2, 0); /* m: 13732 -> 13735,0 */
	reached1[13732] = 1;
	trans[1][13732]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13735]	= settr(14042,0,13736,6011,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13736]	= settr(14043,0,13788,6012,6012,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13784 -> 0,13788 */
	reached1[13784] = 1;
	trans[1][13741]	= settr(14048,0,13784,1,0,".(goto)", 0, 2, 0); /* m: 13784 -> 0,13788 */
	reached1[13784] = 1;
	trans[1][13738]	= settr(14045,0,13739,2,0,"else", 0, 2, 0);
	trans[1][13739]	= settr(14046,0,13788,6013,6013,"(1)", 0, 2, 0); /* m: 13784 -> 13788,0 */
	reached1[13784] = 1;
	trans[1][13743]	= settr(14050,0,13780,6014,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][13780] = settr(14087,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14087,0,13763,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13763] = settr(14070,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14070,2,13761,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13761] = settr(14068,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14068,2,13744,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14068,2,13747,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14068,2,13750,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14068,2,13753,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14068,2,13756,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14068,2,13759,0,0,"IF", 1, 2, 0);
	trans[1][13744]	= settr(14051,4,13778,6015,6015,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13745 -> 13778,0 */
	reached1[13745] = 1;
	trans[1][13745]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13746]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13762]	= settr(14069,0,13778,6016,6016,".(goto)", 1, 2, 0);
	trans[1][13747]	= settr(14054,4,13778,6017,6017,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13748 -> 13778,0 */
	reached1[13748] = 1;
	trans[1][13748]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13749]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13750]	= settr(14057,4,13778,6018,6018,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13751 -> 13778,0 */
	reached1[13751] = 1;
	trans[1][13751]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13752]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13753]	= settr(14060,4,13778,6019,6019,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13754 -> 13778,0 */
	reached1[13754] = 1;
	trans[1][13754]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13755]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13756]	= settr(14063,4,13778,6020,6020,"((STOP==ABORT))", 1, 2, 0); /* m: 13757 -> 13778,0 */
	reached1[13757] = 1;
	trans[1][13757]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13758]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13759]	= settr(14066,2,13760,2,0,"else", 1, 2, 0);
	trans[1][13760]	= settr(14067,4,13778,6021,6021,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13762 -> 0,13778 */
	reached1[13762] = 1;
	T = trans[1][13778] = settr(14085,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14085,0,13764,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14085,0,13776,0,0,"IF", 0, 2, 0);
	trans[1][13764]	= settr(14071,0,13775,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][13775] = settr(14082,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14082,0,13771,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13771] = settr(14078,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14078,0,13765,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14078,0,13767,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14078,0,13769,0,0,"IF", 0, 2, 0);
	trans[1][13765]	= settr(14072,0,13773,6022,6022,"((_pid==0))", 0, 2, 0); /* m: 13766 -> 13773,0 */
	reached1[13766] = 1;
	trans[1][13766]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13772]	= settr(14079,0,13773,1,0,".(goto)", 0, 2, 0);
	trans[1][13767]	= settr(14074,0,13773,6023,6023,"((_pid==1))", 0, 2, 0); /* m: 13768 -> 13773,0 */
	reached1[13768] = 1;
	trans[1][13768]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13769]	= settr(14076,0,13773,6024,6024,"((_pid>1))", 0, 2, 0); /* m: 13770 -> 13773,0 */
	reached1[13770] = 1;
	trans[1][13770]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13773]	= settr(14080,0,13774,6025,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13774]	= settr(14081,0,13788,6026,6026,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13784 -> 0,13788 */
	reached1[13784] = 1;
	trans[1][13779]	= settr(14086,0,13784,1,0,".(goto)", 0, 2, 0); /* m: 13784 -> 0,13788 */
	reached1[13784] = 1;
	trans[1][13776]	= settr(14083,0,13777,2,0,"else", 0, 2, 0);
	trans[1][13777]	= settr(14084,0,13788,6027,6027,"(1)", 0, 2, 0); /* m: 13784 -> 13788,0 */
	reached1[13784] = 1;
	trans[1][13784]	= settr(14091,0,13788,6028,6028,"j = (j-1)", 0, 2, 0);
	trans[1][13785]	= settr(14092,0,13786,2,0,"else", 0, 2, 0);
	trans[1][13786]	= settr(14093,0,14614,6029,6029,"j = 1", 0, 2, 0);
	trans[1][13787]	= settr(14094,0,14614,1,0,"goto :b96", 0, 2, 0);
	trans[1][13790]	= settr(14097,0,14614,1,0,"break", 0, 2, 0);
	trans[1][14022]	= settr(14329,0,14614,1,0,".(goto)", 0, 2, 0);
	trans[1][13795]	= settr(14102,0,14020,2,0,"else", 0, 2, 0);
	T = trans[ 1][14020] = settr(14327,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14327,0,13796,0,0,"sub-sequence", 0, 2, 0);
	trans[1][13796]	= settr(14103,0,13961,6030,0,"printf('Supervisor propagating command %e...\\n',8)", 0, 2, 0);
	T = trans[ 1][13961] = settr(14268,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14268,0,13958,0,0,"sub-sequence", 0, 2, 0);
	trans[1][13959]	= settr(14266,0,13958,1,0,".(goto)", 0, 2, 0);
	T = trans[1][13958] = settr(14265,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(14265,0,13797,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(14265,0,13955,0,0,"DO", 0, 2, 0);
	trans[1][13797]	= settr(14104,0,13953,6031,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][13953] = settr(14260,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14260,0,13951,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13951] = settr(14258,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14258,0,13798,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14258,0,13837,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14258,0,13875,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14258,0,13913,0,0,"IF", 0, 2, 0);
	trans[1][13798]	= settr(14105,0,13836,6032,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][13836] = settr(14143,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14143,0,13818,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13818] = settr(14125,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14125,2,13816,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13816] = settr(14123,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14123,2,13799,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14123,2,13802,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14123,2,13805,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14123,2,13808,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14123,2,13811,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14123,2,13814,0,0,"IF", 1, 2, 0);
	trans[1][13799]	= settr(14106,4,13819,6033,6033,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13800 -> 13819,0 */
	reached1[13800] = 1;
	trans[1][13800]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13801]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13817]	= settr(14124,0,13819,6034,6034,".(goto)", 1, 2, 0);
	trans[1][13802]	= settr(14109,4,13819,6035,6035,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13803 -> 13819,0 */
	reached1[13803] = 1;
	trans[1][13803]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13804]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13805]	= settr(14112,4,13819,6036,6036,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13806 -> 13819,0 */
	reached1[13806] = 1;
	trans[1][13806]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13807]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13808]	= settr(14115,4,13819,6037,6037,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13809 -> 13819,0 */
	reached1[13809] = 1;
	trans[1][13809]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13810]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13811]	= settr(14118,4,13819,6038,6038,"((START==ABORT))", 1, 2, 0); /* m: 13812 -> 13819,0 */
	reached1[13812] = 1;
	trans[1][13812]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13813]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13814]	= settr(14121,2,13815,2,0,"else", 1, 2, 0);
	trans[1][13815]	= settr(14122,4,13819,6039,6039,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13817 -> 0,13819 */
	reached1[13817] = 1;
	trans[1][13819]	= settr(14126,0,13834,6040,6040,"(run Thread(j))", 0, 2, 0);
	T = trans[1][13834] = settr(14141,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(14141,0,13820,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(14141,0,13832,0,0,"IF", 0, 2, 0);
	trans[1][13820]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][13831] = settr(14138,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14138,0,13827,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13827] = settr(14134,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14134,0,13821,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14134,0,13823,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14134,0,13825,0,0,"IF", 0, 2, 0);
	trans[1][13821]	= settr(14128,0,13829,6041,6041,"((_pid==0))", 0, 2, 0); /* m: 13822 -> 13829,0 */
	reached1[13822] = 1;
	trans[1][13822]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13828]	= settr(14135,0,13829,1,0,".(goto)", 0, 2, 0);
	trans[1][13823]	= settr(14130,0,13829,6042,6042,"((_pid==1))", 0, 2, 0); /* m: 13824 -> 13829,0 */
	reached1[13824] = 1;
	trans[1][13824]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13825]	= settr(14132,0,13829,6043,6043,"((_pid>1))", 0, 2, 0); /* m: 13826 -> 13829,0 */
	reached1[13826] = 1;
	trans[1][13826]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13829]	= settr(14136,0,13830,6044,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13830]	= settr(14137,0,13958,6045,6045,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13954 -> 0,13958 */
	reached1[13954] = 1;
	trans[1][13835]	= settr(14142,0,13954,1,0,".(goto)", 0, 2, 0); /* m: 13954 -> 0,13958 */
	reached1[13954] = 1;
	trans[1][13832]	= settr(14139,0,13833,2,0,"else", 0, 2, 0);
	trans[1][13833]	= settr(14140,0,13958,6046,6046,"(1)", 0, 2, 0); /* m: 13954 -> 13958,0 */
	reached1[13954] = 1;
	trans[1][13952]	= settr(14259,0,13954,1,0,".(goto)", 0, 2, 0); /* m: 13954 -> 0,13958 */
	reached1[13954] = 1;
	trans[1][13837]	= settr(14144,0,13874,6047,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][13874] = settr(14181,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14181,0,13857,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13857] = settr(14164,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14164,2,13855,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13855] = settr(14162,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14162,2,13838,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14162,2,13841,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14162,2,13844,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14162,2,13847,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14162,2,13850,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14162,2,13853,0,0,"IF", 1, 2, 0);
	trans[1][13838]	= settr(14145,4,13872,6048,6048,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13839 -> 13872,0 */
	reached1[13839] = 1;
	trans[1][13839]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13840]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13856]	= settr(14163,0,13872,6049,6049,".(goto)", 1, 2, 0);
	trans[1][13841]	= settr(14148,4,13872,6050,6050,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13842 -> 13872,0 */
	reached1[13842] = 1;
	trans[1][13842]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13843]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13844]	= settr(14151,4,13872,6051,6051,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13845 -> 13872,0 */
	reached1[13845] = 1;
	trans[1][13845]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13846]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13847]	= settr(14154,4,13872,6052,6052,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13848 -> 13872,0 */
	reached1[13848] = 1;
	trans[1][13848]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13849]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13850]	= settr(14157,4,13872,6053,6053,"((PAUSE==ABORT))", 1, 2, 0); /* m: 13851 -> 13872,0 */
	reached1[13851] = 1;
	trans[1][13851]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13852]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13853]	= settr(14160,2,13854,2,0,"else", 1, 2, 0);
	trans[1][13854]	= settr(14161,4,13872,6054,6054,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13856 -> 0,13872 */
	reached1[13856] = 1;
	T = trans[1][13872] = settr(14179,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(14179,0,13858,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(14179,0,13870,0,0,"IF", 0, 2, 0);
	trans[1][13858]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][13869] = settr(14176,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14176,0,13865,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13865] = settr(14172,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14172,0,13859,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14172,0,13861,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14172,0,13863,0,0,"IF", 0, 2, 0);
	trans[1][13859]	= settr(14166,0,13867,6055,6055,"((_pid==0))", 0, 2, 0); /* m: 13860 -> 13867,0 */
	reached1[13860] = 1;
	trans[1][13860]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13866]	= settr(14173,0,13867,1,0,".(goto)", 0, 2, 0);
	trans[1][13861]	= settr(14168,0,13867,6056,6056,"((_pid==1))", 0, 2, 0); /* m: 13862 -> 13867,0 */
	reached1[13862] = 1;
	trans[1][13862]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13863]	= settr(14170,0,13867,6057,6057,"((_pid>1))", 0, 2, 0); /* m: 13864 -> 13867,0 */
	reached1[13864] = 1;
	trans[1][13864]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13867]	= settr(14174,0,13868,6058,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13868]	= settr(14175,0,13958,6059,6059,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13954 -> 0,13958 */
	reached1[13954] = 1;
	trans[1][13873]	= settr(14180,0,13954,1,0,".(goto)", 0, 2, 0); /* m: 13954 -> 0,13958 */
	reached1[13954] = 1;
	trans[1][13870]	= settr(14177,0,13871,2,0,"else", 0, 2, 0);
	trans[1][13871]	= settr(14178,0,13958,6060,6060,"(1)", 0, 2, 0); /* m: 13954 -> 13958,0 */
	reached1[13954] = 1;
	trans[1][13875]	= settr(14182,0,13912,6061,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][13912] = settr(14219,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14219,0,13895,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13895] = settr(14202,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14202,2,13893,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13893] = settr(14200,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14200,2,13876,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14200,2,13879,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14200,2,13882,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14200,2,13885,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14200,2,13888,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14200,2,13891,0,0,"IF", 1, 2, 0);
	trans[1][13876]	= settr(14183,4,13910,6062,6062,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13877 -> 13910,0 */
	reached1[13877] = 1;
	trans[1][13877]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13878]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13894]	= settr(14201,0,13910,6063,6063,".(goto)", 1, 2, 0);
	trans[1][13879]	= settr(14186,4,13910,6064,6064,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13880 -> 13910,0 */
	reached1[13880] = 1;
	trans[1][13880]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13881]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13882]	= settr(14189,4,13910,6065,6065,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13883 -> 13910,0 */
	reached1[13883] = 1;
	trans[1][13883]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13884]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13885]	= settr(14192,4,13910,6066,6066,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13886 -> 13910,0 */
	reached1[13886] = 1;
	trans[1][13886]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13887]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13888]	= settr(14195,4,13910,6067,6067,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 13889 -> 13910,0 */
	reached1[13889] = 1;
	trans[1][13889]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13890]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13891]	= settr(14198,2,13892,2,0,"else", 1, 2, 0);
	trans[1][13892]	= settr(14199,4,13910,6068,6068,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13894 -> 0,13910 */
	reached1[13894] = 1;
	T = trans[1][13910] = settr(14217,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(14217,0,13896,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(14217,0,13908,0,0,"IF", 0, 2, 0);
	trans[1][13896]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][13907] = settr(14214,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14214,0,13903,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13903] = settr(14210,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14210,0,13897,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14210,0,13899,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14210,0,13901,0,0,"IF", 0, 2, 0);
	trans[1][13897]	= settr(14204,0,13905,6069,6069,"((_pid==0))", 0, 2, 0); /* m: 13898 -> 13905,0 */
	reached1[13898] = 1;
	trans[1][13898]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13904]	= settr(14211,0,13905,1,0,".(goto)", 0, 2, 0);
	trans[1][13899]	= settr(14206,0,13905,6070,6070,"((_pid==1))", 0, 2, 0); /* m: 13900 -> 13905,0 */
	reached1[13900] = 1;
	trans[1][13900]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13901]	= settr(14208,0,13905,6071,6071,"((_pid>1))", 0, 2, 0); /* m: 13902 -> 13905,0 */
	reached1[13902] = 1;
	trans[1][13902]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13905]	= settr(14212,0,13906,6072,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13906]	= settr(14213,0,13958,6073,6073,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13954 -> 0,13958 */
	reached1[13954] = 1;
	trans[1][13911]	= settr(14218,0,13954,1,0,".(goto)", 0, 2, 0); /* m: 13954 -> 0,13958 */
	reached1[13954] = 1;
	trans[1][13908]	= settr(14215,0,13909,2,0,"else", 0, 2, 0);
	trans[1][13909]	= settr(14216,0,13958,6074,6074,"(1)", 0, 2, 0); /* m: 13954 -> 13958,0 */
	reached1[13954] = 1;
	trans[1][13913]	= settr(14220,0,13950,6075,0,"(((8==STOP)||(8==ABORT)))", 0, 2, 0);
	T = trans[ 1][13950] = settr(14257,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14257,0,13933,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][13933] = settr(14240,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14240,2,13931,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][13931] = settr(14238,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14238,2,13914,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14238,2,13917,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14238,2,13920,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14238,2,13923,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14238,2,13926,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14238,2,13929,0,0,"IF", 1, 2, 0);
	trans[1][13914]	= settr(14221,4,13948,6076,6076,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13915 -> 13948,0 */
	reached1[13915] = 1;
	trans[1][13915]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][13916]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][13932]	= settr(14239,0,13948,6077,6077,".(goto)", 1, 2, 0);
	trans[1][13917]	= settr(14224,4,13948,6078,6078,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 13918 -> 13948,0 */
	reached1[13918] = 1;
	trans[1][13918]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][13919]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][13920]	= settr(14227,4,13948,6079,6079,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13921 -> 13948,0 */
	reached1[13921] = 1;
	trans[1][13921]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][13922]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][13923]	= settr(14230,4,13948,6080,6080,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 13924 -> 13948,0 */
	reached1[13924] = 1;
	trans[1][13924]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][13925]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][13926]	= settr(14233,4,13948,6081,6081,"((STOP==ABORT))", 1, 2, 0); /* m: 13927 -> 13948,0 */
	reached1[13927] = 1;
	trans[1][13927]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][13928]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][13929]	= settr(14236,2,13930,2,0,"else", 1, 2, 0);
	trans[1][13930]	= settr(14237,4,13948,6082,6082,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 13932 -> 0,13948 */
	reached1[13932] = 1;
	T = trans[1][13948] = settr(14255,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(14255,0,13934,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(14255,0,13946,0,0,"IF", 0, 2, 0);
	trans[1][13934]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][13945] = settr(14252,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14252,0,13941,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13941] = settr(14248,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14248,0,13935,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14248,0,13937,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14248,0,13939,0,0,"IF", 0, 2, 0);
	trans[1][13935]	= settr(14242,0,13943,6083,6083,"((_pid==0))", 0, 2, 0); /* m: 13936 -> 13943,0 */
	reached1[13936] = 1;
	trans[1][13936]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13942]	= settr(14249,0,13943,1,0,".(goto)", 0, 2, 0);
	trans[1][13937]	= settr(14244,0,13943,6084,6084,"((_pid==1))", 0, 2, 0); /* m: 13938 -> 13943,0 */
	reached1[13938] = 1;
	trans[1][13938]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13939]	= settr(14246,0,13943,6085,6085,"((_pid>1))", 0, 2, 0); /* m: 13940 -> 13943,0 */
	reached1[13940] = 1;
	trans[1][13940]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13943]	= settr(14250,0,13944,6086,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13944]	= settr(14251,0,13958,6087,6087,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 13954 -> 0,13958 */
	reached1[13954] = 1;
	trans[1][13949]	= settr(14256,0,13954,1,0,".(goto)", 0, 2, 0); /* m: 13954 -> 0,13958 */
	reached1[13954] = 1;
	trans[1][13946]	= settr(14253,0,13947,2,0,"else", 0, 2, 0);
	trans[1][13947]	= settr(14254,0,13958,6088,6088,"(1)", 0, 2, 0); /* m: 13954 -> 13958,0 */
	reached1[13954] = 1;
	trans[1][13954]	= settr(14261,0,13958,6089,6089,"j = (j+1)", 0, 2, 0);
	trans[1][13955]	= settr(14262,0,13956,2,0,"else", 0, 2, 0);
	trans[1][13956]	= settr(14263,0,14017,6090,6090,"j = 1", 0, 2, 0);
	trans[1][13957]	= settr(14264,0,14017,1,0,"goto :b97", 0, 2, 0);
	trans[1][13960]	= settr(14267,0,14017,1,0,"break", 0, 2, 0);
	trans[1][14018]	= settr(14325,0,14017,1,0,".(goto)", 0, 2, 0);
	T = trans[1][14017] = settr(14324,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(14324,0,13962,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(14324,0,14014,0,0,"DO", 0, 2, 0);
	trans[1][13962]	= settr(14269,0,14011,6091,0,"((j<3))", 0, 2, 0);
	T = trans[1][14011] = settr(14318,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14318,0,13963,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14318,0,13975,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14318,0,13987,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14318,0,13999,0,0,"IF", 0, 2, 0);
	trans[1][13963]	= settr(14270,0,13974,6092,0,"((8==START))", 0, 2, 0);
	T = trans[ 1][13974] = settr(14281,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14281,0,13970,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13970] = settr(14277,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14277,0,13964,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14277,0,13966,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14277,0,13968,0,0,"IF", 0, 2, 0);
	trans[1][13964]	= settr(14271,0,13972,6093,6093,"((_pid==0))", 0, 2, 0); /* m: 13965 -> 13972,0 */
	reached1[13965] = 1;
	trans[1][13965]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13971]	= settr(14278,0,13972,1,0,".(goto)", 0, 2, 0);
	trans[1][13966]	= settr(14273,0,13972,6094,6094,"((_pid==1))", 0, 2, 0); /* m: 13967 -> 13972,0 */
	reached1[13967] = 1;
	trans[1][13967]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13968]	= settr(14275,0,13972,6095,6095,"((_pid>1))", 0, 2, 0); /* m: 13969 -> 13972,0 */
	reached1[13969] = 1;
	trans[1][13969]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13972]	= settr(14279,0,13973,6096,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13973]	= settr(14280,0,14017,6097,6097,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14013 -> 0,14017 */
	reached1[14013] = 1;
	trans[1][14012]	= settr(14319,0,14013,1,0,".(goto)", 0, 2, 0); /* m: 14013 -> 0,14017 */
	reached1[14013] = 1;
	trans[1][13975]	= settr(14282,0,13986,6098,0,"((8==CONTINUE))", 0, 2, 0);
	T = trans[ 1][13986] = settr(14293,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14293,0,13982,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13982] = settr(14289,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14289,0,13976,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14289,0,13978,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14289,0,13980,0,0,"IF", 0, 2, 0);
	trans[1][13976]	= settr(14283,0,13984,6099,6099,"((_pid==0))", 0, 2, 0); /* m: 13977 -> 13984,0 */
	reached1[13977] = 1;
	trans[1][13977]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13983]	= settr(14290,0,13984,1,0,".(goto)", 0, 2, 0);
	trans[1][13978]	= settr(14285,0,13984,6100,6100,"((_pid==1))", 0, 2, 0); /* m: 13979 -> 13984,0 */
	reached1[13979] = 1;
	trans[1][13979]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13980]	= settr(14287,0,13984,6101,6101,"((_pid>1))", 0, 2, 0); /* m: 13981 -> 13984,0 */
	reached1[13981] = 1;
	trans[1][13981]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13984]	= settr(14291,0,13985,6102,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13985]	= settr(14292,0,14017,6103,6103,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14013 -> 0,14017 */
	reached1[14013] = 1;
	trans[1][13987]	= settr(14294,0,13998,6104,0,"((8==PAUSE))", 0, 2, 0);
	T = trans[ 1][13998] = settr(14305,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14305,0,13994,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][13994] = settr(14301,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14301,0,13988,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14301,0,13990,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14301,0,13992,0,0,"IF", 0, 2, 0);
	trans[1][13988]	= settr(14295,0,13996,6105,6105,"((_pid==0))", 0, 2, 0); /* m: 13989 -> 13996,0 */
	reached1[13989] = 1;
	trans[1][13989]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13995]	= settr(14302,0,13996,1,0,".(goto)", 0, 2, 0);
	trans[1][13990]	= settr(14297,0,13996,6106,6106,"((_pid==1))", 0, 2, 0); /* m: 13991 -> 13996,0 */
	reached1[13991] = 1;
	trans[1][13991]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][13992]	= settr(14299,0,13996,6107,6107,"((_pid>1))", 0, 2, 0); /* m: 13993 -> 13996,0 */
	reached1[13993] = 1;
	trans[1][13993]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][13996]	= settr(14303,0,13997,6108,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][13997]	= settr(14304,0,14017,6109,6109,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14013 -> 0,14017 */
	reached1[14013] = 1;
	trans[1][13999]	= settr(14306,0,14010,6110,0,"((8==STOP))", 0, 2, 0);
	T = trans[ 1][14010] = settr(14317,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14317,0,14006,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14006] = settr(14313,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14313,0,14000,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14313,0,14002,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14313,0,14004,0,0,"IF", 0, 2, 0);
	trans[1][14000]	= settr(14307,0,14008,6111,6111,"((_pid==0))", 0, 2, 0); /* m: 14001 -> 14008,0 */
	reached1[14001] = 1;
	trans[1][14001]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14007]	= settr(14314,0,14008,1,0,".(goto)", 0, 2, 0);
	trans[1][14002]	= settr(14309,0,14008,6112,6112,"((_pid==1))", 0, 2, 0); /* m: 14003 -> 14008,0 */
	reached1[14003] = 1;
	trans[1][14003]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14004]	= settr(14311,0,14008,6113,6113,"((_pid>1))", 0, 2, 0); /* m: 14005 -> 14008,0 */
	reached1[14005] = 1;
	trans[1][14005]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14008]	= settr(14315,0,14009,6114,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14009]	= settr(14316,0,14017,6115,6115,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14013 -> 0,14017 */
	reached1[14013] = 1;
	trans[1][14013]	= settr(14320,0,14017,6116,6116,"j = (j+1)", 0, 2, 0);
	trans[1][14014]	= settr(14321,0,14015,2,0,"else", 0, 2, 0);
	trans[1][14015]	= settr(14322,0,14614,6117,6117,"j = 1", 0, 2, 0);
	trans[1][14016]	= settr(14323,0,14614,1,0,"goto :b98", 0, 2, 0);
	trans[1][14019]	= settr(14326,0,14614,1,0,"break", 0, 2, 0);
	trans[1][14026]	= settr(14333,0,14598,6118,0,"(((11==ABORTING)||(11==STOPPING)))", 0, 2, 0);
	T = trans[ 1][14598] = settr(14905,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14905,0,14596,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14596] = settr(14903,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14903,0,14027,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14903,0,14030,0,0,"IF", 0, 2, 0);
	trans[1][14027]	= settr(14334,0,14028,6119,0,"(((12==CONTINUE)&&!(supervisor_started)))", 1, 2, 0);
	trans[1][14028]	= settr(14335,0,14029,6120,0,"printf('Supervisor doesn't propagate the first CONTINUE command.\\n')", 0, 2, 0);
	trans[1][14029]	= settr(14336,0,14614,6121,6121,"supervisor_started = 1", 1, 2, 0);
	trans[1][14597]	= settr(14904,0,14614,1,0,".(goto)", 0, 2, 0);
	trans[1][14030]	= settr(14337,0,14594,2,0,"else", 0, 2, 0);
	T = trans[1][14594] = settr(14901,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14901,0,14031,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14901,0,14368,0,0,"IF", 0, 2, 0);
	trans[1][14031]	= settr(14338,0,14367,6122,0,"(serialize_commands)", 1, 2, 0);
	T = trans[ 1][14367] = settr(14674,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14674,0,14365,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14365] = settr(14672,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14672,0,14032,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14672,0,14198,0,0,"IF", 0, 2, 0);
	trans[1][14032]	= settr(14339,0,14197,6123,0,"(((12==START)||(12==PAUSED)))", 0, 2, 0);
	T = trans[ 1][14197] = settr(14504,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14504,0,14194,0,0,"sub-sequence", 0, 2, 0);
	trans[1][14195]	= settr(14502,0,14194,1,0,".(goto)", 0, 2, 0);
	T = trans[1][14194] = settr(14501,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(14501,0,14033,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(14501,0,14191,0,0,"DO", 0, 2, 0);
	trans[1][14033]	= settr(14340,0,14189,6124,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][14189] = settr(14496,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14496,0,14187,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14187] = settr(14494,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14494,0,14034,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14494,0,14073,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14494,0,14111,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14494,0,14149,0,0,"IF", 0, 2, 0);
	trans[1][14034]	= settr(14341,0,14072,6125,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][14072] = settr(14379,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14379,0,14054,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][14054] = settr(14361,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14361,2,14052,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][14052] = settr(14359,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14359,2,14035,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14359,2,14038,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14359,2,14041,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14359,2,14044,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14359,2,14047,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14359,2,14050,0,0,"IF", 1, 2, 0);
	trans[1][14035]	= settr(14342,4,14055,6126,6126,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14036 -> 14055,0 */
	reached1[14036] = 1;
	trans[1][14036]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][14037]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][14053]	= settr(14360,0,14055,6127,6127,".(goto)", 1, 2, 0);
	trans[1][14038]	= settr(14345,4,14055,6128,6128,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14039 -> 14055,0 */
	reached1[14039] = 1;
	trans[1][14039]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][14040]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][14041]	= settr(14348,4,14055,6129,6129,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14042 -> 14055,0 */
	reached1[14042] = 1;
	trans[1][14042]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][14043]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][14044]	= settr(14351,4,14055,6130,6130,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14045 -> 14055,0 */
	reached1[14045] = 1;
	trans[1][14045]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][14046]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][14047]	= settr(14354,4,14055,6131,6131,"((START==ABORT))", 1, 2, 0); /* m: 14048 -> 14055,0 */
	reached1[14048] = 1;
	trans[1][14048]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][14049]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][14050]	= settr(14357,2,14051,2,0,"else", 1, 2, 0);
	trans[1][14051]	= settr(14358,4,14055,6132,6132,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 14053 -> 0,14055 */
	reached1[14053] = 1;
	trans[1][14055]	= settr(14362,0,14070,6133,6133,"(run Thread(j))", 0, 2, 0);
	T = trans[1][14070] = settr(14377,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14377,0,14056,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14377,0,14068,0,0,"IF", 0, 2, 0);
	trans[1][14056]	= settr(14363,0,14067,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][14067] = settr(14374,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14374,0,14063,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14063] = settr(14370,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14370,0,14057,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14370,0,14059,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14370,0,14061,0,0,"IF", 0, 2, 0);
	trans[1][14057]	= settr(14364,0,14065,6134,6134,"((_pid==0))", 0, 2, 0); /* m: 14058 -> 14065,0 */
	reached1[14058] = 1;
	trans[1][14058]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14064]	= settr(14371,0,14065,1,0,".(goto)", 0, 2, 0);
	trans[1][14059]	= settr(14366,0,14065,6135,6135,"((_pid==1))", 0, 2, 0); /* m: 14060 -> 14065,0 */
	reached1[14060] = 1;
	trans[1][14060]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14061]	= settr(14368,0,14065,6136,6136,"((_pid>1))", 0, 2, 0); /* m: 14062 -> 14065,0 */
	reached1[14062] = 1;
	trans[1][14062]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14065]	= settr(14372,0,14066,6137,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14066]	= settr(14373,0,14194,6138,6138,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14190 -> 0,14194 */
	reached1[14190] = 1;
	trans[1][14071]	= settr(14378,0,14190,1,0,".(goto)", 0, 2, 0); /* m: 14190 -> 0,14194 */
	reached1[14190] = 1;
	trans[1][14068]	= settr(14375,0,14069,2,0,"else", 0, 2, 0);
	trans[1][14069]	= settr(14376,0,14194,6139,6139,"(1)", 0, 2, 0); /* m: 14190 -> 14194,0 */
	reached1[14190] = 1;
	trans[1][14188]	= settr(14495,0,14190,1,0,".(goto)", 0, 2, 0); /* m: 14190 -> 0,14194 */
	reached1[14190] = 1;
	trans[1][14073]	= settr(14380,0,14110,6140,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][14110] = settr(14417,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14417,0,14093,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][14093] = settr(14400,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14400,2,14091,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][14091] = settr(14398,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14398,2,14074,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14398,2,14077,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14398,2,14080,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14398,2,14083,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14398,2,14086,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14398,2,14089,0,0,"IF", 1, 2, 0);
	trans[1][14074]	= settr(14381,4,14108,6141,6141,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14075 -> 14108,0 */
	reached1[14075] = 1;
	trans[1][14075]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][14076]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][14092]	= settr(14399,0,14108,6142,6142,".(goto)", 1, 2, 0);
	trans[1][14077]	= settr(14384,4,14108,6143,6143,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14078 -> 14108,0 */
	reached1[14078] = 1;
	trans[1][14078]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][14079]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][14080]	= settr(14387,4,14108,6144,6144,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14081 -> 14108,0 */
	reached1[14081] = 1;
	trans[1][14081]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][14082]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][14083]	= settr(14390,4,14108,6145,6145,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14084 -> 14108,0 */
	reached1[14084] = 1;
	trans[1][14084]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][14085]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][14086]	= settr(14393,4,14108,6146,6146,"((PAUSE==ABORT))", 1, 2, 0); /* m: 14087 -> 14108,0 */
	reached1[14087] = 1;
	trans[1][14087]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][14088]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][14089]	= settr(14396,2,14090,2,0,"else", 1, 2, 0);
	trans[1][14090]	= settr(14397,4,14108,6147,6147,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 14092 -> 0,14108 */
	reached1[14092] = 1;
	T = trans[1][14108] = settr(14415,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14415,0,14094,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14415,0,14106,0,0,"IF", 0, 2, 0);
	trans[1][14094]	= settr(14401,0,14105,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][14105] = settr(14412,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14412,0,14101,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14101] = settr(14408,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14408,0,14095,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14408,0,14097,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14408,0,14099,0,0,"IF", 0, 2, 0);
	trans[1][14095]	= settr(14402,0,14103,6148,6148,"((_pid==0))", 0, 2, 0); /* m: 14096 -> 14103,0 */
	reached1[14096] = 1;
	trans[1][14096]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14102]	= settr(14409,0,14103,1,0,".(goto)", 0, 2, 0);
	trans[1][14097]	= settr(14404,0,14103,6149,6149,"((_pid==1))", 0, 2, 0); /* m: 14098 -> 14103,0 */
	reached1[14098] = 1;
	trans[1][14098]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14099]	= settr(14406,0,14103,6150,6150,"((_pid>1))", 0, 2, 0); /* m: 14100 -> 14103,0 */
	reached1[14100] = 1;
	trans[1][14100]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14103]	= settr(14410,0,14104,6151,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14104]	= settr(14411,0,14194,6152,6152,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14190 -> 0,14194 */
	reached1[14190] = 1;
	trans[1][14109]	= settr(14416,0,14190,1,0,".(goto)", 0, 2, 0); /* m: 14190 -> 0,14194 */
	reached1[14190] = 1;
	trans[1][14106]	= settr(14413,0,14107,2,0,"else", 0, 2, 0);
	trans[1][14107]	= settr(14414,0,14194,6153,6153,"(1)", 0, 2, 0); /* m: 14190 -> 14194,0 */
	reached1[14190] = 1;
	trans[1][14111]	= settr(14418,0,14148,6154,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][14148] = settr(14455,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14455,0,14131,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][14131] = settr(14438,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14438,2,14129,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][14129] = settr(14436,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14436,2,14112,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14436,2,14115,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14436,2,14118,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14436,2,14121,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14436,2,14124,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14436,2,14127,0,0,"IF", 1, 2, 0);
	trans[1][14112]	= settr(14419,4,14146,6155,6155,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14113 -> 14146,0 */
	reached1[14113] = 1;
	trans[1][14113]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][14114]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][14130]	= settr(14437,0,14146,6156,6156,".(goto)", 1, 2, 0);
	trans[1][14115]	= settr(14422,4,14146,6157,6157,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14116 -> 14146,0 */
	reached1[14116] = 1;
	trans[1][14116]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][14117]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][14118]	= settr(14425,4,14146,6158,6158,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14119 -> 14146,0 */
	reached1[14119] = 1;
	trans[1][14119]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][14120]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][14121]	= settr(14428,4,14146,6159,6159,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14122 -> 14146,0 */
	reached1[14122] = 1;
	trans[1][14122]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][14123]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][14124]	= settr(14431,4,14146,6160,6160,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 14125 -> 14146,0 */
	reached1[14125] = 1;
	trans[1][14125]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][14126]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][14127]	= settr(14434,2,14128,2,0,"else", 1, 2, 0);
	trans[1][14128]	= settr(14435,4,14146,6161,6161,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 14130 -> 0,14146 */
	reached1[14130] = 1;
	T = trans[1][14146] = settr(14453,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14453,0,14132,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14453,0,14144,0,0,"IF", 0, 2, 0);
	trans[1][14132]	= settr(14439,0,14143,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][14143] = settr(14450,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14450,0,14139,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14139] = settr(14446,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14446,0,14133,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14446,0,14135,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14446,0,14137,0,0,"IF", 0, 2, 0);
	trans[1][14133]	= settr(14440,0,14141,6162,6162,"((_pid==0))", 0, 2, 0); /* m: 14134 -> 14141,0 */
	reached1[14134] = 1;
	trans[1][14134]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14140]	= settr(14447,0,14141,1,0,".(goto)", 0, 2, 0);
	trans[1][14135]	= settr(14442,0,14141,6163,6163,"((_pid==1))", 0, 2, 0); /* m: 14136 -> 14141,0 */
	reached1[14136] = 1;
	trans[1][14136]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14137]	= settr(14444,0,14141,6164,6164,"((_pid>1))", 0, 2, 0); /* m: 14138 -> 14141,0 */
	reached1[14138] = 1;
	trans[1][14138]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14141]	= settr(14448,0,14142,6165,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14142]	= settr(14449,0,14194,6166,6166,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14190 -> 0,14194 */
	reached1[14190] = 1;
	trans[1][14147]	= settr(14454,0,14190,1,0,".(goto)", 0, 2, 0); /* m: 14190 -> 0,14194 */
	reached1[14190] = 1;
	trans[1][14144]	= settr(14451,0,14145,2,0,"else", 0, 2, 0);
	trans[1][14145]	= settr(14452,0,14194,6167,6167,"(1)", 0, 2, 0); /* m: 14190 -> 14194,0 */
	reached1[14190] = 1;
	trans[1][14149]	= settr(14456,0,14186,6168,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][14186] = settr(14493,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14493,0,14169,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][14169] = settr(14476,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14476,2,14167,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][14167] = settr(14474,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14474,2,14150,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14474,2,14153,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14474,2,14156,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14474,2,14159,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14474,2,14162,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14474,2,14165,0,0,"IF", 1, 2, 0);
	trans[1][14150]	= settr(14457,4,14184,6169,6169,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14151 -> 14184,0 */
	reached1[14151] = 1;
	trans[1][14151]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][14152]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][14168]	= settr(14475,0,14184,6170,6170,".(goto)", 1, 2, 0);
	trans[1][14153]	= settr(14460,4,14184,6171,6171,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14154 -> 14184,0 */
	reached1[14154] = 1;
	trans[1][14154]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][14155]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][14156]	= settr(14463,4,14184,6172,6172,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14157 -> 14184,0 */
	reached1[14157] = 1;
	trans[1][14157]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][14158]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][14159]	= settr(14466,4,14184,6173,6173,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14160 -> 14184,0 */
	reached1[14160] = 1;
	trans[1][14160]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][14161]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][14162]	= settr(14469,4,14184,6174,6174,"((STOP==ABORT))", 1, 2, 0); /* m: 14163 -> 14184,0 */
	reached1[14163] = 1;
	trans[1][14163]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][14164]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][14165]	= settr(14472,2,14166,2,0,"else", 1, 2, 0);
	trans[1][14166]	= settr(14473,4,14184,6175,6175,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 14168 -> 0,14184 */
	reached1[14168] = 1;
	T = trans[1][14184] = settr(14491,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14491,0,14170,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14491,0,14182,0,0,"IF", 0, 2, 0);
	trans[1][14170]	= settr(14477,0,14181,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][14181] = settr(14488,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14488,0,14177,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14177] = settr(14484,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14484,0,14171,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14484,0,14173,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14484,0,14175,0,0,"IF", 0, 2, 0);
	trans[1][14171]	= settr(14478,0,14179,6176,6176,"((_pid==0))", 0, 2, 0); /* m: 14172 -> 14179,0 */
	reached1[14172] = 1;
	trans[1][14172]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14178]	= settr(14485,0,14179,1,0,".(goto)", 0, 2, 0);
	trans[1][14173]	= settr(14480,0,14179,6177,6177,"((_pid==1))", 0, 2, 0); /* m: 14174 -> 14179,0 */
	reached1[14174] = 1;
	trans[1][14174]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14175]	= settr(14482,0,14179,6178,6178,"((_pid>1))", 0, 2, 0); /* m: 14176 -> 14179,0 */
	reached1[14176] = 1;
	trans[1][14176]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14179]	= settr(14486,0,14180,6179,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14180]	= settr(14487,0,14194,6180,6180,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14190 -> 0,14194 */
	reached1[14190] = 1;
	trans[1][14185]	= settr(14492,0,14190,1,0,".(goto)", 0, 2, 0); /* m: 14190 -> 0,14194 */
	reached1[14190] = 1;
	trans[1][14182]	= settr(14489,0,14183,2,0,"else", 0, 2, 0);
	trans[1][14183]	= settr(14490,0,14194,6181,6181,"(1)", 0, 2, 0); /* m: 14190 -> 14194,0 */
	reached1[14190] = 1;
	trans[1][14190]	= settr(14497,0,14194,6182,6182,"j = (j+1)", 0, 2, 0);
	trans[1][14191]	= settr(14498,0,14192,2,0,"else", 0, 2, 0);
	trans[1][14192]	= settr(14499,0,14614,6183,6183,"j = 1", 0, 2, 0);
	trans[1][14193]	= settr(14500,0,14614,1,0,"goto :b99", 0, 2, 0);
	trans[1][14196]	= settr(14503,0,14614,1,0,"break", 0, 2, 0);
	trans[1][14366]	= settr(14673,0,14614,1,0,".(goto)", 0, 2, 0);
	trans[1][14198]	= settr(14505,0,14364,2,0,"else", 0, 2, 0);
	T = trans[ 1][14364] = settr(14671,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14671,0,14199,0,0,"sub-sequence", 0, 2, 0);
	trans[1][14199]	= settr(14506,0,14361,6184,6184,"j = (3-1)", 0, 2, 0);
	trans[1][14362]	= settr(14669,0,14361,1,0,".(goto)", 0, 2, 0);
	T = trans[1][14361] = settr(14668,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(14668,0,14200,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(14668,0,14358,0,0,"DO", 0, 2, 0);
	trans[1][14200]	= settr(14507,0,14356,6185,0,"((j>0))", 0, 2, 0);
	T = trans[ 1][14356] = settr(14663,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14663,0,14354,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14354] = settr(14661,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14661,0,14201,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14661,0,14240,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14661,0,14278,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14661,0,14316,0,0,"IF", 0, 2, 0);
	trans[1][14201]	= settr(14508,0,14239,6186,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][14239] = settr(14546,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14546,0,14221,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][14221] = settr(14528,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14528,2,14219,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][14219] = settr(14526,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14526,2,14202,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14526,2,14205,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14526,2,14208,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14526,2,14211,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14526,2,14214,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14526,2,14217,0,0,"IF", 1, 2, 0);
	trans[1][14202]	= settr(14509,4,14222,6187,6187,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14203 -> 14222,0 */
	reached1[14203] = 1;
	trans[1][14203]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][14204]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][14220]	= settr(14527,0,14222,6188,6188,".(goto)", 1, 2, 0);
	trans[1][14205]	= settr(14512,4,14222,6189,6189,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14206 -> 14222,0 */
	reached1[14206] = 1;
	trans[1][14206]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][14207]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][14208]	= settr(14515,4,14222,6190,6190,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14209 -> 14222,0 */
	reached1[14209] = 1;
	trans[1][14209]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][14210]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][14211]	= settr(14518,4,14222,6191,6191,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14212 -> 14222,0 */
	reached1[14212] = 1;
	trans[1][14212]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][14213]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][14214]	= settr(14521,4,14222,6192,6192,"((START==ABORT))", 1, 2, 0); /* m: 14215 -> 14222,0 */
	reached1[14215] = 1;
	trans[1][14215]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][14216]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][14217]	= settr(14524,2,14218,2,0,"else", 1, 2, 0);
	trans[1][14218]	= settr(14525,4,14222,6193,6193,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 14220 -> 0,14222 */
	reached1[14220] = 1;
	trans[1][14222]	= settr(14529,0,14237,6194,6194,"(run Thread(j))", 0, 2, 0);
	T = trans[1][14237] = settr(14544,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14544,0,14223,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14544,0,14235,0,0,"IF", 0, 2, 0);
	trans[1][14223]	= settr(14530,0,14234,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][14234] = settr(14541,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14541,0,14230,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14230] = settr(14537,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14537,0,14224,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14537,0,14226,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14537,0,14228,0,0,"IF", 0, 2, 0);
	trans[1][14224]	= settr(14531,0,14232,6195,6195,"((_pid==0))", 0, 2, 0); /* m: 14225 -> 14232,0 */
	reached1[14225] = 1;
	trans[1][14225]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14231]	= settr(14538,0,14232,1,0,".(goto)", 0, 2, 0);
	trans[1][14226]	= settr(14533,0,14232,6196,6196,"((_pid==1))", 0, 2, 0); /* m: 14227 -> 14232,0 */
	reached1[14227] = 1;
	trans[1][14227]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14228]	= settr(14535,0,14232,6197,6197,"((_pid>1))", 0, 2, 0); /* m: 14229 -> 14232,0 */
	reached1[14229] = 1;
	trans[1][14229]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14232]	= settr(14539,0,14233,6198,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14233]	= settr(14540,0,14361,6199,6199,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14357 -> 0,14361 */
	reached1[14357] = 1;
	trans[1][14238]	= settr(14545,0,14357,1,0,".(goto)", 0, 2, 0); /* m: 14357 -> 0,14361 */
	reached1[14357] = 1;
	trans[1][14235]	= settr(14542,0,14236,2,0,"else", 0, 2, 0);
	trans[1][14236]	= settr(14543,0,14361,6200,6200,"(1)", 0, 2, 0); /* m: 14357 -> 14361,0 */
	reached1[14357] = 1;
	trans[1][14355]	= settr(14662,0,14357,1,0,".(goto)", 0, 2, 0); /* m: 14357 -> 0,14361 */
	reached1[14357] = 1;
	trans[1][14240]	= settr(14547,0,14277,6201,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][14277] = settr(14584,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14584,0,14260,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][14260] = settr(14567,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14567,2,14258,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][14258] = settr(14565,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14565,2,14241,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14565,2,14244,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14565,2,14247,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14565,2,14250,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14565,2,14253,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14565,2,14256,0,0,"IF", 1, 2, 0);
	trans[1][14241]	= settr(14548,4,14275,6202,6202,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14242 -> 14275,0 */
	reached1[14242] = 1;
	trans[1][14242]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][14243]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][14259]	= settr(14566,0,14275,6203,6203,".(goto)", 1, 2, 0);
	trans[1][14244]	= settr(14551,4,14275,6204,6204,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14245 -> 14275,0 */
	reached1[14245] = 1;
	trans[1][14245]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][14246]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][14247]	= settr(14554,4,14275,6205,6205,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14248 -> 14275,0 */
	reached1[14248] = 1;
	trans[1][14248]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][14249]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][14250]	= settr(14557,4,14275,6206,6206,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14251 -> 14275,0 */
	reached1[14251] = 1;
	trans[1][14251]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][14252]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][14253]	= settr(14560,4,14275,6207,6207,"((PAUSE==ABORT))", 1, 2, 0); /* m: 14254 -> 14275,0 */
	reached1[14254] = 1;
	trans[1][14254]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][14255]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][14256]	= settr(14563,2,14257,2,0,"else", 1, 2, 0);
	trans[1][14257]	= settr(14564,4,14275,6208,6208,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 14259 -> 0,14275 */
	reached1[14259] = 1;
	T = trans[1][14275] = settr(14582,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14582,0,14261,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14582,0,14273,0,0,"IF", 0, 2, 0);
	trans[1][14261]	= settr(14568,0,14272,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][14272] = settr(14579,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14579,0,14268,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14268] = settr(14575,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14575,0,14262,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14575,0,14264,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14575,0,14266,0,0,"IF", 0, 2, 0);
	trans[1][14262]	= settr(14569,0,14270,6209,6209,"((_pid==0))", 0, 2, 0); /* m: 14263 -> 14270,0 */
	reached1[14263] = 1;
	trans[1][14263]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14269]	= settr(14576,0,14270,1,0,".(goto)", 0, 2, 0);
	trans[1][14264]	= settr(14571,0,14270,6210,6210,"((_pid==1))", 0, 2, 0); /* m: 14265 -> 14270,0 */
	reached1[14265] = 1;
	trans[1][14265]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14266]	= settr(14573,0,14270,6211,6211,"((_pid>1))", 0, 2, 0); /* m: 14267 -> 14270,0 */
	reached1[14267] = 1;
	trans[1][14267]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14270]	= settr(14577,0,14271,6212,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14271]	= settr(14578,0,14361,6213,6213,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14357 -> 0,14361 */
	reached1[14357] = 1;
	trans[1][14276]	= settr(14583,0,14357,1,0,".(goto)", 0, 2, 0); /* m: 14357 -> 0,14361 */
	reached1[14357] = 1;
	trans[1][14273]	= settr(14580,0,14274,2,0,"else", 0, 2, 0);
	trans[1][14274]	= settr(14581,0,14361,6214,6214,"(1)", 0, 2, 0); /* m: 14357 -> 14361,0 */
	reached1[14357] = 1;
	trans[1][14278]	= settr(14585,0,14315,6215,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][14315] = settr(14622,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14622,0,14298,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][14298] = settr(14605,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14605,2,14296,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][14296] = settr(14603,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14603,2,14279,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14603,2,14282,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14603,2,14285,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14603,2,14288,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14603,2,14291,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14603,2,14294,0,0,"IF", 1, 2, 0);
	trans[1][14279]	= settr(14586,4,14313,6216,6216,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14280 -> 14313,0 */
	reached1[14280] = 1;
	trans[1][14280]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][14281]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][14297]	= settr(14604,0,14313,6217,6217,".(goto)", 1, 2, 0);
	trans[1][14282]	= settr(14589,4,14313,6218,6218,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14283 -> 14313,0 */
	reached1[14283] = 1;
	trans[1][14283]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][14284]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][14285]	= settr(14592,4,14313,6219,6219,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14286 -> 14313,0 */
	reached1[14286] = 1;
	trans[1][14286]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][14287]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][14288]	= settr(14595,4,14313,6220,6220,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14289 -> 14313,0 */
	reached1[14289] = 1;
	trans[1][14289]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][14290]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][14291]	= settr(14598,4,14313,6221,6221,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 14292 -> 14313,0 */
	reached1[14292] = 1;
	trans[1][14292]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][14293]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][14294]	= settr(14601,2,14295,2,0,"else", 1, 2, 0);
	trans[1][14295]	= settr(14602,4,14313,6222,6222,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 14297 -> 0,14313 */
	reached1[14297] = 1;
	T = trans[1][14313] = settr(14620,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14620,0,14299,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14620,0,14311,0,0,"IF", 0, 2, 0);
	trans[1][14299]	= settr(14606,0,14310,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][14310] = settr(14617,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14617,0,14306,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14306] = settr(14613,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14613,0,14300,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14613,0,14302,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14613,0,14304,0,0,"IF", 0, 2, 0);
	trans[1][14300]	= settr(14607,0,14308,6223,6223,"((_pid==0))", 0, 2, 0); /* m: 14301 -> 14308,0 */
	reached1[14301] = 1;
	trans[1][14301]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14307]	= settr(14614,0,14308,1,0,".(goto)", 0, 2, 0);
	trans[1][14302]	= settr(14609,0,14308,6224,6224,"((_pid==1))", 0, 2, 0); /* m: 14303 -> 14308,0 */
	reached1[14303] = 1;
	trans[1][14303]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14304]	= settr(14611,0,14308,6225,6225,"((_pid>1))", 0, 2, 0); /* m: 14305 -> 14308,0 */
	reached1[14305] = 1;
	trans[1][14305]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14308]	= settr(14615,0,14309,6226,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14309]	= settr(14616,0,14361,6227,6227,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14357 -> 0,14361 */
	reached1[14357] = 1;
	trans[1][14314]	= settr(14621,0,14357,1,0,".(goto)", 0, 2, 0); /* m: 14357 -> 0,14361 */
	reached1[14357] = 1;
	trans[1][14311]	= settr(14618,0,14312,2,0,"else", 0, 2, 0);
	trans[1][14312]	= settr(14619,0,14361,6228,6228,"(1)", 0, 2, 0); /* m: 14357 -> 14361,0 */
	reached1[14357] = 1;
	trans[1][14316]	= settr(14623,0,14353,6229,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][14353] = settr(14660,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14660,0,14336,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][14336] = settr(14643,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14643,2,14334,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][14334] = settr(14641,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14641,2,14317,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14641,2,14320,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14641,2,14323,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14641,2,14326,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14641,2,14329,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14641,2,14332,0,0,"IF", 1, 2, 0);
	trans[1][14317]	= settr(14624,4,14351,6230,6230,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14318 -> 14351,0 */
	reached1[14318] = 1;
	trans[1][14318]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][14319]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][14335]	= settr(14642,0,14351,6231,6231,".(goto)", 1, 2, 0);
	trans[1][14320]	= settr(14627,4,14351,6232,6232,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14321 -> 14351,0 */
	reached1[14321] = 1;
	trans[1][14321]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][14322]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][14323]	= settr(14630,4,14351,6233,6233,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14324 -> 14351,0 */
	reached1[14324] = 1;
	trans[1][14324]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][14325]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][14326]	= settr(14633,4,14351,6234,6234,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14327 -> 14351,0 */
	reached1[14327] = 1;
	trans[1][14327]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][14328]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][14329]	= settr(14636,4,14351,6235,6235,"((STOP==ABORT))", 1, 2, 0); /* m: 14330 -> 14351,0 */
	reached1[14330] = 1;
	trans[1][14330]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][14331]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][14332]	= settr(14639,2,14333,2,0,"else", 1, 2, 0);
	trans[1][14333]	= settr(14640,4,14351,6236,6236,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 14335 -> 0,14351 */
	reached1[14335] = 1;
	T = trans[1][14351] = settr(14658,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14658,0,14337,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14658,0,14349,0,0,"IF", 0, 2, 0);
	trans[1][14337]	= settr(14644,0,14348,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][14348] = settr(14655,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14655,0,14344,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14344] = settr(14651,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14651,0,14338,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14651,0,14340,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14651,0,14342,0,0,"IF", 0, 2, 0);
	trans[1][14338]	= settr(14645,0,14346,6237,6237,"((_pid==0))", 0, 2, 0); /* m: 14339 -> 14346,0 */
	reached1[14339] = 1;
	trans[1][14339]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14345]	= settr(14652,0,14346,1,0,".(goto)", 0, 2, 0);
	trans[1][14340]	= settr(14647,0,14346,6238,6238,"((_pid==1))", 0, 2, 0); /* m: 14341 -> 14346,0 */
	reached1[14341] = 1;
	trans[1][14341]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14342]	= settr(14649,0,14346,6239,6239,"((_pid>1))", 0, 2, 0); /* m: 14343 -> 14346,0 */
	reached1[14343] = 1;
	trans[1][14343]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14346]	= settr(14653,0,14347,6240,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14347]	= settr(14654,0,14361,6241,6241,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14357 -> 0,14361 */
	reached1[14357] = 1;
	trans[1][14352]	= settr(14659,0,14357,1,0,".(goto)", 0, 2, 0); /* m: 14357 -> 0,14361 */
	reached1[14357] = 1;
	trans[1][14349]	= settr(14656,0,14350,2,0,"else", 0, 2, 0);
	trans[1][14350]	= settr(14657,0,14361,6242,6242,"(1)", 0, 2, 0); /* m: 14357 -> 14361,0 */
	reached1[14357] = 1;
	trans[1][14357]	= settr(14664,0,14361,6243,6243,"j = (j-1)", 0, 2, 0);
	trans[1][14358]	= settr(14665,0,14359,2,0,"else", 0, 2, 0);
	trans[1][14359]	= settr(14666,0,14614,6244,6244,"j = 1", 0, 2, 0);
	trans[1][14360]	= settr(14667,0,14614,1,0,"goto :b100", 0, 2, 0);
	trans[1][14363]	= settr(14670,0,14614,1,0,"break", 0, 2, 0);
	trans[1][14595]	= settr(14902,0,14614,1,0,".(goto)", 0, 2, 0);
	trans[1][14368]	= settr(14675,0,14593,2,0,"else", 0, 2, 0);
	T = trans[ 1][14593] = settr(14900,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14900,0,14369,0,0,"sub-sequence", 0, 2, 0);
	trans[1][14369]	= settr(14676,0,14534,6245,0,"printf('Supervisor propagating command %e...\\n',12)", 0, 2, 0);
	T = trans[ 1][14534] = settr(14841,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14841,0,14531,0,0,"sub-sequence", 0, 2, 0);
	trans[1][14532]	= settr(14839,0,14531,1,0,".(goto)", 0, 2, 0);
	T = trans[1][14531] = settr(14838,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(14838,0,14370,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(14838,0,14528,0,0,"DO", 0, 2, 0);
	trans[1][14370]	= settr(14677,0,14526,6246,0,"((j<3))", 0, 2, 0);
	T = trans[ 1][14526] = settr(14833,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14833,0,14524,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14524] = settr(14831,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14831,0,14371,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14831,0,14410,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14831,0,14448,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14831,0,14486,0,0,"IF", 0, 2, 0);
	trans[1][14371]	= settr(14678,0,14409,6247,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][14409] = settr(14716,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14716,0,14391,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][14391] = settr(14698,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14698,2,14389,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][14389] = settr(14696,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14696,2,14372,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14696,2,14375,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14696,2,14378,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14696,2,14381,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14696,2,14384,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14696,2,14387,0,0,"IF", 1, 2, 0);
	trans[1][14372]	= settr(14679,4,14392,6248,6248,"(((START==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14373 -> 14392,0 */
	reached1[14373] = 1;
	trans[1][14373]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][14374]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][14390]	= settr(14697,0,14392,6249,6249,".(goto)", 1, 2, 0);
	trans[1][14375]	= settr(14682,4,14392,6250,6250,"(((START==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14376 -> 14392,0 */
	reached1[14376] = 1;
	trans[1][14376]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][14377]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][14378]	= settr(14685,4,14392,6251,6251,"(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14379 -> 14392,0 */
	reached1[14379] = 1;
	trans[1][14379]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][14380]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][14381]	= settr(14688,4,14392,6252,6252,"(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14382 -> 14392,0 */
	reached1[14382] = 1;
	trans[1][14382]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][14383]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][14384]	= settr(14691,4,14392,6253,6253,"((START==ABORT))", 1, 2, 0); /* m: 14385 -> 14392,0 */
	reached1[14385] = 1;
	trans[1][14385]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][14386]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][14387]	= settr(14694,2,14388,2,0,"else", 1, 2, 0);
	trans[1][14388]	= settr(14695,4,14392,6254,6254,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 14390 -> 0,14392 */
	reached1[14390] = 1;
	trans[1][14392]	= settr(14699,0,14407,6255,6255,"(run Thread(j))", 0, 2, 0);
	T = trans[1][14407] = settr(14714,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(14714,0,14393,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(14714,0,14405,0,0,"IF", 0, 2, 0);
	trans[1][14393]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][14404] = settr(14711,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14711,0,14400,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14400] = settr(14707,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14707,0,14394,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14707,0,14396,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14707,0,14398,0,0,"IF", 0, 2, 0);
	trans[1][14394]	= settr(14701,0,14402,6256,6256,"((_pid==0))", 0, 2, 0); /* m: 14395 -> 14402,0 */
	reached1[14395] = 1;
	trans[1][14395]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14401]	= settr(14708,0,14402,1,0,".(goto)", 0, 2, 0);
	trans[1][14396]	= settr(14703,0,14402,6257,6257,"((_pid==1))", 0, 2, 0); /* m: 14397 -> 14402,0 */
	reached1[14397] = 1;
	trans[1][14397]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14398]	= settr(14705,0,14402,6258,6258,"((_pid>1))", 0, 2, 0); /* m: 14399 -> 14402,0 */
	reached1[14399] = 1;
	trans[1][14399]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14402]	= settr(14709,0,14403,6259,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14403]	= settr(14710,0,14531,6260,6260,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14527 -> 0,14531 */
	reached1[14527] = 1;
	trans[1][14408]	= settr(14715,0,14527,1,0,".(goto)", 0, 2, 0); /* m: 14527 -> 0,14531 */
	reached1[14527] = 1;
	trans[1][14405]	= settr(14712,0,14406,2,0,"else", 0, 2, 0);
	trans[1][14406]	= settr(14713,0,14531,6261,6261,"(1)", 0, 2, 0); /* m: 14527 -> 14531,0 */
	reached1[14527] = 1;
	trans[1][14525]	= settr(14832,0,14527,1,0,".(goto)", 0, 2, 0); /* m: 14527 -> 0,14531 */
	reached1[14527] = 1;
	trans[1][14410]	= settr(14717,0,14447,6262,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][14447] = settr(14754,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14754,0,14430,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][14430] = settr(14737,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14737,2,14428,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][14428] = settr(14735,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14735,2,14411,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14735,2,14414,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14735,2,14417,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14735,2,14420,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14735,2,14423,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14735,2,14426,0,0,"IF", 1, 2, 0);
	trans[1][14411]	= settr(14718,4,14445,6263,6263,"(((PAUSE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14412 -> 14445,0 */
	reached1[14412] = 1;
	trans[1][14412]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][14413]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][14429]	= settr(14736,0,14445,6264,6264,".(goto)", 1, 2, 0);
	trans[1][14414]	= settr(14721,4,14445,6265,6265,"(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14415 -> 14445,0 */
	reached1[14415] = 1;
	trans[1][14415]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][14416]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][14417]	= settr(14724,4,14445,6266,6266,"(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14418 -> 14445,0 */
	reached1[14418] = 1;
	trans[1][14418]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][14419]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][14420]	= settr(14727,4,14445,6267,6267,"(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14421 -> 14445,0 */
	reached1[14421] = 1;
	trans[1][14421]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][14422]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][14423]	= settr(14730,4,14445,6268,6268,"((PAUSE==ABORT))", 1, 2, 0); /* m: 14424 -> 14445,0 */
	reached1[14424] = 1;
	trans[1][14424]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][14425]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][14426]	= settr(14733,2,14427,2,0,"else", 1, 2, 0);
	trans[1][14427]	= settr(14734,4,14445,6269,6269,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 14429 -> 0,14445 */
	reached1[14429] = 1;
	T = trans[1][14445] = settr(14752,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(14752,0,14431,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(14752,0,14443,0,0,"IF", 0, 2, 0);
	trans[1][14431]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][14442] = settr(14749,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14749,0,14438,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14438] = settr(14745,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14745,0,14432,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14745,0,14434,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14745,0,14436,0,0,"IF", 0, 2, 0);
	trans[1][14432]	= settr(14739,0,14440,6270,6270,"((_pid==0))", 0, 2, 0); /* m: 14433 -> 14440,0 */
	reached1[14433] = 1;
	trans[1][14433]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14439]	= settr(14746,0,14440,1,0,".(goto)", 0, 2, 0);
	trans[1][14434]	= settr(14741,0,14440,6271,6271,"((_pid==1))", 0, 2, 0); /* m: 14435 -> 14440,0 */
	reached1[14435] = 1;
	trans[1][14435]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14436]	= settr(14743,0,14440,6272,6272,"((_pid>1))", 0, 2, 0); /* m: 14437 -> 14440,0 */
	reached1[14437] = 1;
	trans[1][14437]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14440]	= settr(14747,0,14441,6273,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14441]	= settr(14748,0,14531,6274,6274,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14527 -> 0,14531 */
	reached1[14527] = 1;
	trans[1][14446]	= settr(14753,0,14527,1,0,".(goto)", 0, 2, 0); /* m: 14527 -> 0,14531 */
	reached1[14527] = 1;
	trans[1][14443]	= settr(14750,0,14444,2,0,"else", 0, 2, 0);
	trans[1][14444]	= settr(14751,0,14531,6275,6275,"(1)", 0, 2, 0); /* m: 14527 -> 14531,0 */
	reached1[14527] = 1;
	trans[1][14448]	= settr(14755,0,14485,6276,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][14485] = settr(14792,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14792,0,14468,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][14468] = settr(14775,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14775,2,14466,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][14466] = settr(14773,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14773,2,14449,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14773,2,14452,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14773,2,14455,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14773,2,14458,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14773,2,14461,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14773,2,14464,0,0,"IF", 1, 2, 0);
	trans[1][14449]	= settr(14756,4,14483,6277,6277,"(((CONTINUE==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14450 -> 14483,0 */
	reached1[14450] = 1;
	trans[1][14450]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][14451]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][14467]	= settr(14774,0,14483,6278,6278,".(goto)", 1, 2, 0);
	trans[1][14452]	= settr(14759,4,14483,6279,6279,"(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14453 -> 14483,0 */
	reached1[14453] = 1;
	trans[1][14453]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][14454]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][14455]	= settr(14762,4,14483,6280,6280,"(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14456 -> 14483,0 */
	reached1[14456] = 1;
	trans[1][14456]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][14457]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][14458]	= settr(14765,4,14483,6281,6281,"(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14459 -> 14483,0 */
	reached1[14459] = 1;
	trans[1][14459]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][14460]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][14461]	= settr(14768,4,14483,6282,6282,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 14462 -> 14483,0 */
	reached1[14462] = 1;
	trans[1][14462]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][14463]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][14464]	= settr(14771,2,14465,2,0,"else", 1, 2, 0);
	trans[1][14465]	= settr(14772,4,14483,6283,6283,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 14467 -> 0,14483 */
	reached1[14467] = 1;
	T = trans[1][14483] = settr(14790,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(14790,0,14469,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(14790,0,14481,0,0,"IF", 0, 2, 0);
	trans[1][14469]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][14480] = settr(14787,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14787,0,14476,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14476] = settr(14783,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14783,0,14470,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14783,0,14472,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14783,0,14474,0,0,"IF", 0, 2, 0);
	trans[1][14470]	= settr(14777,0,14478,6284,6284,"((_pid==0))", 0, 2, 0); /* m: 14471 -> 14478,0 */
	reached1[14471] = 1;
	trans[1][14471]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14477]	= settr(14784,0,14478,1,0,".(goto)", 0, 2, 0);
	trans[1][14472]	= settr(14779,0,14478,6285,6285,"((_pid==1))", 0, 2, 0); /* m: 14473 -> 14478,0 */
	reached1[14473] = 1;
	trans[1][14473]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14474]	= settr(14781,0,14478,6286,6286,"((_pid>1))", 0, 2, 0); /* m: 14475 -> 14478,0 */
	reached1[14475] = 1;
	trans[1][14475]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14478]	= settr(14785,0,14479,6287,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14479]	= settr(14786,0,14531,6288,6288,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14527 -> 0,14531 */
	reached1[14527] = 1;
	trans[1][14484]	= settr(14791,0,14527,1,0,".(goto)", 0, 2, 0); /* m: 14527 -> 0,14531 */
	reached1[14527] = 1;
	trans[1][14481]	= settr(14788,0,14482,2,0,"else", 0, 2, 0);
	trans[1][14482]	= settr(14789,0,14531,6289,6289,"(1)", 0, 2, 0); /* m: 14527 -> 14531,0 */
	reached1[14527] = 1;
	trans[1][14486]	= settr(14793,0,14523,6290,0,"(((12==STOP)||(12==ABORT)))", 0, 2, 0);
	T = trans[ 1][14523] = settr(14830,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14830,0,14506,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 1][14506] = settr(14813,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(14813,2,14504,0,0,"ATOMIC", 1, 2, 0);
	T = trans[1][14504] = settr(14811,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14811,2,14487,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14811,2,14490,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14811,2,14493,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14811,2,14496,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(14811,2,14499,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(14811,2,14502,0,0,"IF", 1, 2, 0);
	trans[1][14487]	= settr(14794,4,14521,6291,6291,"(((STOP==START)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14488 -> 14521,0 */
	reached1[14488] = 1;
	trans[1][14488]	= settr(0,0,0,0,0,"assert((states[j]==READY))",0,0,0);
	trans[1][14489]	= settr(0,0,0,0,0,"commands[j] = START",0,0,0);
	trans[1][14505]	= settr(14812,0,14521,6292,6292,".(goto)", 1, 2, 0);
	trans[1][14490]	= settr(14797,4,14521,6293,6293,"(((STOP==PAUSE)&&(commands[j]==CONTINUE)))", 1, 2, 0); /* m: 14491 -> 14521,0 */
	reached1[14491] = 1;
	trans[1][14491]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==RUNNING)))",0,0,0);
	trans[1][14492]	= settr(0,0,0,0,0,"commands[j] = PAUSE",0,0,0);
	trans[1][14493]	= settr(14800,4,14521,6294,6294,"(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14494 -> 14521,0 */
	reached1[14494] = 1;
	trans[1][14494]	= settr(0,0,0,0,0,"assert(((states[j]==STARTING)||(states[j]==PAUSED)))",0,0,0);
	trans[1][14495]	= settr(0,0,0,0,0,"commands[j] = CONTINUE",0,0,0);
	trans[1][14496]	= settr(14803,4,14521,6295,6295,"(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))", 1, 2, 0); /* m: 14497 -> 14521,0 */
	reached1[14497] = 1;
	trans[1][14497]	= settr(0,0,0,0,0,"assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))",0,0,0);
	trans[1][14498]	= settr(0,0,0,0,0,"commands[j] = STOP",0,0,0);
	trans[1][14499]	= settr(14806,4,14521,6296,6296,"((STOP==ABORT))", 1, 2, 0); /* m: 14500 -> 14521,0 */
	reached1[14500] = 1;
	trans[1][14500]	= settr(0,0,0,0,0,"assert((states[j]!=READY))",0,0,0);
	trans[1][14501]	= settr(0,0,0,0,0,"commands[j] = ABORT",0,0,0);
	trans[1][14502]	= settr(14809,2,14503,2,0,"else", 1, 2, 0);
	trans[1][14503]	= settr(14810,4,14521,6297,6297,"printf('Thread %d ignores command %e.\\n',j,commands[j])", 1, 2, 0); /* m: 14505 -> 0,14521 */
	reached1[14505] = 1;
	T = trans[1][14521] = settr(14828,0,0,0,0,"IF", 0, 2, 0);
#if 0
	/* dead link: */
	T = T->nxt	= settr(14828,0,14507,0,0,"IF", 0, 2, 0);
#endif
	    T->nxt	= settr(14828,0,14519,0,0,"IF", 0, 2, 0);
	trans[1][14507]	= settr(0,0,0,0,0,"(0)",0,0,0);
	T = trans[ 1][14518] = settr(14825,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14825,0,14514,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14514] = settr(14821,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14821,0,14508,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14821,0,14510,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14821,0,14512,0,0,"IF", 0, 2, 0);
	trans[1][14508]	= settr(14815,0,14516,6298,6298,"((_pid==0))", 0, 2, 0); /* m: 14509 -> 14516,0 */
	reached1[14509] = 1;
	trans[1][14509]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14515]	= settr(14822,0,14516,1,0,".(goto)", 0, 2, 0);
	trans[1][14510]	= settr(14817,0,14516,6299,6299,"((_pid==1))", 0, 2, 0); /* m: 14511 -> 14516,0 */
	reached1[14511] = 1;
	trans[1][14511]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14512]	= settr(14819,0,14516,6300,6300,"((_pid>1))", 0, 2, 0); /* m: 14513 -> 14516,0 */
	reached1[14513] = 1;
	trans[1][14513]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14516]	= settr(14823,0,14517,6301,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14517]	= settr(14824,0,14531,6302,6302,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14527 -> 0,14531 */
	reached1[14527] = 1;
	trans[1][14522]	= settr(14829,0,14527,1,0,".(goto)", 0, 2, 0); /* m: 14527 -> 0,14531 */
	reached1[14527] = 1;
	trans[1][14519]	= settr(14826,0,14520,2,0,"else", 0, 2, 0);
	trans[1][14520]	= settr(14827,0,14531,6303,6303,"(1)", 0, 2, 0); /* m: 14527 -> 14531,0 */
	reached1[14527] = 1;
	trans[1][14527]	= settr(14834,0,14531,6304,6304,"j = (j+1)", 0, 2, 0);
	trans[1][14528]	= settr(14835,0,14529,2,0,"else", 0, 2, 0);
	trans[1][14529]	= settr(14836,0,14590,6305,6305,"j = 1", 0, 2, 0);
	trans[1][14530]	= settr(14837,0,14590,1,0,"goto :b101", 0, 2, 0);
	trans[1][14533]	= settr(14840,0,14590,1,0,"break", 0, 2, 0);
	trans[1][14591]	= settr(14898,0,14590,1,0,".(goto)", 0, 2, 0);
	T = trans[1][14590] = settr(14897,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(14897,0,14535,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(14897,0,14587,0,0,"DO", 0, 2, 0);
	trans[1][14535]	= settr(14842,0,14584,6306,0,"((j<3))", 0, 2, 0);
	T = trans[1][14584] = settr(14891,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14891,0,14536,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14891,0,14548,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14891,0,14560,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14891,0,14572,0,0,"IF", 0, 2, 0);
	trans[1][14536]	= settr(14843,0,14547,6307,0,"((12==START))", 0, 2, 0);
	T = trans[ 1][14547] = settr(14854,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14854,0,14543,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14543] = settr(14850,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14850,0,14537,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14850,0,14539,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14850,0,14541,0,0,"IF", 0, 2, 0);
	trans[1][14537]	= settr(14844,0,14545,6308,6308,"((_pid==0))", 0, 2, 0); /* m: 14538 -> 14545,0 */
	reached1[14538] = 1;
	trans[1][14538]	= settr(0,0,0,0,0,"printf('Init is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14544]	= settr(14851,0,14545,1,0,".(goto)", 0, 2, 0);
	trans[1][14539]	= settr(14846,0,14545,6309,6309,"((_pid==1))", 0, 2, 0); /* m: 14540 -> 14545,0 */
	reached1[14540] = 1;
	trans[1][14540]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for START mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14541]	= settr(14848,0,14545,6310,6310,"((_pid>1))", 0, 2, 0); /* m: 14542 -> 14545,0 */
	reached1[14542] = 1;
	trans[1][14542]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for START mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14545]	= settr(14852,0,14546,6311,0,"(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14546]	= settr(14853,0,14590,6312,6312,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14586 -> 0,14590 */
	reached1[14586] = 1;
	trans[1][14585]	= settr(14892,0,14586,1,0,".(goto)", 0, 2, 0); /* m: 14586 -> 0,14590 */
	reached1[14586] = 1;
	trans[1][14548]	= settr(14855,0,14559,6313,0,"((12==CONTINUE))", 0, 2, 0);
	T = trans[ 1][14559] = settr(14866,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14866,0,14555,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14555] = settr(14862,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14862,0,14549,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14862,0,14551,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14862,0,14553,0,0,"IF", 0, 2, 0);
	trans[1][14549]	= settr(14856,0,14557,6314,6314,"((_pid==0))", 0, 2, 0); /* m: 14550 -> 14557,0 */
	reached1[14550] = 1;
	trans[1][14550]	= settr(0,0,0,0,0,"printf('Init is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14556]	= settr(14863,0,14557,1,0,".(goto)", 0, 2, 0);
	trans[1][14551]	= settr(14858,0,14557,6315,6315,"((_pid==1))", 0, 2, 0); /* m: 14552 -> 14557,0 */
	reached1[14552] = 1;
	trans[1][14552]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for RESUME mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14553]	= settr(14860,0,14557,6316,6316,"((_pid>1))", 0, 2, 0); /* m: 14554 -> 14557,0 */
	reached1[14554] = 1;
	trans[1][14554]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for RESUME mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14557]	= settr(14864,0,14558,6317,0,"((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14558]	= settr(14865,0,14590,6318,6318,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14586 -> 0,14590 */
	reached1[14586] = 1;
	trans[1][14560]	= settr(14867,0,14571,6319,0,"((12==PAUSE))", 0, 2, 0);
	T = trans[ 1][14571] = settr(14878,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14878,0,14567,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14567] = settr(14874,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14874,0,14561,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14874,0,14563,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14874,0,14565,0,0,"IF", 0, 2, 0);
	trans[1][14561]	= settr(14868,0,14569,6320,6320,"((_pid==0))", 0, 2, 0); /* m: 14562 -> 14569,0 */
	reached1[14562] = 1;
	trans[1][14562]	= settr(0,0,0,0,0,"printf('Init is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14568]	= settr(14875,0,14569,1,0,".(goto)", 0, 2, 0);
	trans[1][14563]	= settr(14870,0,14569,6321,6321,"((_pid==1))", 0, 2, 0); /* m: 14564 -> 14569,0 */
	reached1[14564] = 1;
	trans[1][14564]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for PAUSED mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14565]	= settr(14872,0,14569,6322,6322,"((_pid>1))", 0, 2, 0); /* m: 14566 -> 14569,0 */
	reached1[14566] = 1;
	trans[1][14566]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for PAUSED mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14569]	= settr(14876,0,14570,6323,0,"((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14570]	= settr(14877,0,14590,6324,6324,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14586 -> 0,14590 */
	reached1[14586] = 1;
	trans[1][14572]	= settr(14879,0,14583,6325,0,"((12==STOP))", 0, 2, 0);
	T = trans[ 1][14583] = settr(14890,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14890,0,14579,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14579] = settr(14886,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14886,0,14573,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14886,0,14575,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14886,0,14577,0,0,"IF", 0, 2, 0);
	trans[1][14573]	= settr(14880,0,14581,6326,6326,"((_pid==0))", 0, 2, 0); /* m: 14574 -> 14581,0 */
	reached1[14574] = 1;
	trans[1][14574]	= settr(0,0,0,0,0,"printf('Init is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14580]	= settr(14887,0,14581,1,0,".(goto)", 0, 2, 0);
	trans[1][14575]	= settr(14882,0,14581,6327,6327,"((_pid==1))", 0, 2, 0); /* m: 14576 -> 14581,0 */
	reached1[14576] = 1;
	trans[1][14576]	= settr(0,0,0,0,0,"printf('Supervisor is waiiting for HALT mask on Thread %d...\\n',j)",0,0,0);
	trans[1][14577]	= settr(14884,0,14581,6328,6328,"((_pid>1))", 0, 2, 0); /* m: 14578 -> 14581,0 */
	reached1[14578] = 1;
	trans[1][14578]	= settr(0,0,0,0,0,"printf('Worker %d is waiiting for HALT mask on Thread %d...\\n',(_pid-1),j)",0,0,0);
	trans[1][14581]	= settr(14888,0,14582,6329,0,"(((states[j]==STOPPED)||(states[j]==ABORTED)))", 1, 2, 0);
	trans[1][14582]	= settr(14889,0,14590,6330,6330,"printf('waiiting ended.\\n')", 0, 2, 0); /* m: 14586 -> 0,14590 */
	reached1[14586] = 1;
	trans[1][14586]	= settr(14893,0,14590,6331,6331,"j = (j+1)", 0, 2, 0);
	trans[1][14587]	= settr(14894,0,14588,2,0,"else", 0, 2, 0);
	trans[1][14588]	= settr(14895,0,14614,6332,6332,"j = 1", 0, 2, 0);
	trans[1][14589]	= settr(14896,0,14614,1,0,"goto :b102", 0, 2, 0);
	trans[1][14592]	= settr(14899,0,14614,1,0,"break", 0, 2, 0);
	trans[1][14599]	= settr(14906,0,14600,2,0,"else", 0, 2, 0);
	trans[1][14600]	= settr(14907,0,14614,1,0,"(1)", 0, 2, 0);
	T = trans[ 1][14614] = settr(14921,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(14921,0,14612,0,0,"sub-sequence", 0, 2, 0);
	T = trans[1][14612] = settr(14919,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14919,0,14604,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14919,0,14606,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(14919,0,14608,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(14919,0,14610,0,0,"IF", 0, 2, 0);
	trans[1][14604]	= settr(14911,0,14615,6333,6333,"(((0==0)&&(13==0)))", 0, 2, 0); /* m: 14605 -> 14615,0 */
	reached1[14605] = 1;
	trans[1][14605]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, _) -> %e\\n',10,11)",0,0,0);
	trans[1][14613]	= settr(14920,0,14615,1,0,".(goto)", 0, 2, 0);
	trans[1][14606]	= settr(14913,0,14615,6334,6334,"(((0==0)&&(13>0)))", 0, 2, 0); /* m: 14607 -> 14615,0 */
	reached1[14607] = 1;
	trans[1][14607]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, %e) -> %e\\n',10,13,11)",0,0,0);
	trans[1][14608]	= settr(14915,0,14615,6335,6335,"(((0>0)&&(13==0)))", 0, 2, 0); /* m: 14609 -> 14615,0 */
	reached1[14609] = 1;
	trans[1][14609]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, _) -> %e\\n',0,10,11)",0,0,0);
	trans[1][14610]	= settr(14917,0,14615,6336,6336,"(((0>0)&&(13>0)))", 0, 2, 0); /* m: 14611 -> 14615,0 */
	reached1[14611] = 1;
	trans[1][14611]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, %e) -> %e\\n',0,10,13,11)",0,0,0);
	trans[1][14615]	= settr(14922,0,14621,6337,6337,"states[0] = 11", 1, 2, 0);
	trans[1][14617]	= settr(14924,0,14618,2,0,"else", 0, 2, 0);
	trans[1][14618]	= settr(14925,0,14621,6338,0,"assert(0)", 0, 2, 0);
	trans[1][14621]	= settr(14928,0,0,6339,6339,"-end-", 0, 3500, 0);

	/* proctype 0: Thread */

	trans[0] = (Trans **) emalloc(309*sizeof(Trans *));

	trans[0][1]	= settr(0,0,14,6340,0,"((commands[k]==START))", 1, 2, 0);
	T = trans[ 0][14] = settr(13,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(13,0,12,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 0][12] = settr(11,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(11,0,10,0,0,"sub-sequence", 0, 2, 0);
	T = trans[0][10] = settr(9,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9,0,2,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9,0,4,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(9,0,6,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(9,0,8,0,0,"IF", 0, 2, 0);
	trans[0][2]	= settr(1,0,13,6341,6341,"(((k==0)&&(5==0)))", 0, 2, 0); /* m: 3 -> 13,0 */
	reached0[3] = 1;
	trans[0][3]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, _) -> %e\\n',1,2)",0,0,0);
	trans[0][11]	= settr(10,0,13,1,0,".(goto)", 0, 2, 0);
	trans[0][4]	= settr(3,0,13,6342,6342,"(((k==0)&&(5>0)))", 0, 2, 0); /* m: 5 -> 13,0 */
	reached0[5] = 1;
	trans[0][5]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, %e) -> %e\\n',1,5,2)",0,0,0);
	trans[0][6]	= settr(5,0,13,6343,6343,"(((k>0)&&(5==0)))", 0, 2, 0); /* m: 7 -> 13,0 */
	reached0[7] = 1;
	trans[0][7]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, _) -> %e\\n',k,1,2)",0,0,0);
	trans[0][8]	= settr(7,0,13,6344,6344,"(((k>0)&&(5>0)))", 0, 2, 0); /* m: 9 -> 13,0 */
	reached0[9] = 1;
	trans[0][9]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, %e) -> %e\\n',k,1,5,2)",0,0,0);
	trans[0][13]	= settr(12,0,34,6345,6345,"states[k] = 2", 1, 2, 0);
	T = trans[ 0][34] = settr(33,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(33,2,32,0,0,"ATOMIC", 1, 2, 0);
	T = trans[0][32] = settr(31,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(31,2,15,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(31,2,18,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(31,2,21,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(31,2,24,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(31,2,27,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(31,2,30,0,0,"IF", 1, 2, 0);
	trans[0][15]	= settr(14,4,104,6346,6346,"(((CONTINUE==START)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 16 -> 104,0 */
	reached0[16] = 1;
	trans[0][16]	= settr(0,0,0,0,0,"assert((states[k]==READY))",0,0,0);
	trans[0][17]	= settr(0,0,0,0,0,"commands[k] = START",0,0,0);
	trans[0][33]	= settr(32,0,104,6347,6347,".(goto)", 1, 2, 0);
	trans[0][18]	= settr(17,4,104,6348,6348,"(((CONTINUE==PAUSE)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 19 -> 104,0 */
	reached0[19] = 1;
	trans[0][19]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==RUNNING)))",0,0,0);
	trans[0][20]	= settr(0,0,0,0,0,"commands[k] = PAUSE",0,0,0);
	trans[0][21]	= settr(20,4,104,6349,6349,"(((CONTINUE==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 22 -> 104,0 */
	reached0[22] = 1;
	trans[0][22]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==PAUSED)))",0,0,0);
	trans[0][23]	= settr(0,0,0,0,0,"commands[k] = CONTINUE",0,0,0);
	trans[0][24]	= settr(23,4,104,6350,6350,"(((CONTINUE==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 25 -> 104,0 */
	reached0[25] = 1;
	trans[0][25]	= settr(0,0,0,0,0,"assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))",0,0,0);
	trans[0][26]	= settr(0,0,0,0,0,"commands[k] = STOP",0,0,0);
	trans[0][27]	= settr(26,4,104,6351,6351,"((CONTINUE==ABORT))", 1, 2, 0); /* m: 28 -> 104,0 */
	reached0[28] = 1;
	trans[0][28]	= settr(0,0,0,0,0,"assert((states[k]!=READY))",0,0,0);
	trans[0][29]	= settr(0,0,0,0,0,"commands[k] = ABORT",0,0,0);
	trans[0][30]	= settr(29,2,31,2,0,"else", 1, 2, 0);
	trans[0][31]	= settr(30,4,104,6352,6352,"printf('Thread %d ignores command %e.\\n',k,commands[k])", 1, 2, 0); /* m: 33 -> 0,104 */
	reached0[33] = 1;
	T = trans[ 0][104] = settr(103,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(103,0,102,0,0,"sub-sequence", 0, 2, 0);
	T = trans[0][102] = settr(101,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(101,0,35,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(101,0,58,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(101,0,79,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(101,0,100,0,0,"IF", 0, 2, 0);
	trans[0][35]	= settr(34,0,57,1,0,"(1)", 0, 2, 0);
	T = trans[ 0][57] = settr(56,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(56,0,36,0,0,"sub-sequence", 0, 2, 0);
	trans[0][36]	= settr(35,0,56,6353,0,"assert((_pid!=1))", 0, 2, 0);
	T = trans[ 0][56] = settr(55,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(55,2,54,0,0,"ATOMIC", 1, 2, 0);
	T = trans[0][54] = settr(53,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(53,2,37,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(53,2,40,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(53,2,43,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(53,2,46,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(53,2,49,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(53,2,52,0,0,"IF", 1, 2, 0);
	trans[0][37]	= settr(36,0,217,6354,6354,"(((ABORT==START)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 38 -> 217,0 */
	reached0[38] = 1;
	trans[0][38]	= settr(0,0,0,0,0,"assert((states[k]==READY))",0,0,0);
	trans[0][39]	= settr(0,0,0,0,0,"commands[k] = START",0,0,0);
	trans[0][55]	= settr(54,0,217,6355,6355,".(goto)", 1, 2, 0);
	trans[0][40]	= settr(39,0,217,6356,6356,"(((ABORT==PAUSE)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 41 -> 217,0 */
	reached0[41] = 1;
	trans[0][41]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==RUNNING)))",0,0,0);
	trans[0][42]	= settr(0,0,0,0,0,"commands[k] = PAUSE",0,0,0);
	trans[0][43]	= settr(42,0,217,6357,6357,"(((ABORT==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 44 -> 217,0 */
	reached0[44] = 1;
	trans[0][44]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==PAUSED)))",0,0,0);
	trans[0][45]	= settr(0,0,0,0,0,"commands[k] = CONTINUE",0,0,0);
	trans[0][46]	= settr(45,0,217,6358,6358,"(((ABORT==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 47 -> 217,0 */
	reached0[47] = 1;
	trans[0][47]	= settr(0,0,0,0,0,"assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))",0,0,0);
	trans[0][48]	= settr(0,0,0,0,0,"commands[k] = STOP",0,0,0);
	trans[0][49]	= settr(48,0,217,6359,6359,"((ABORT==ABORT))", 1, 2, 0); /* m: 50 -> 217,0 */
	reached0[50] = 1;
	trans[0][50]	= settr(0,0,0,0,0,"assert((states[k]!=READY))",0,0,0);
	trans[0][51]	= settr(0,0,0,0,0,"commands[k] = ABORT",0,0,0);
	trans[0][52]	= settr(51,2,53,2,0,"else", 1, 2, 0);
	trans[0][53]	= settr(52,0,217,6360,6360,"printf('Thread %d ignores command %e.\\n',k,commands[k])", 1, 2, 0); /* m: 55 -> 0,217 */
	reached0[55] = 1;
	trans[0][103]	= settr(102,0,217,1,0,".(goto)", 0, 2, 0);
	trans[0][58]	= settr(57,0,78,1,0,"(1)", 0, 2, 0);
	T = trans[ 0][78] = settr(77,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(77,2,76,0,0,"ATOMIC", 1, 2, 0);
	T = trans[0][76] = settr(75,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(75,2,59,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(75,2,62,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(75,2,65,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(75,2,68,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(75,2,71,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(75,2,74,0,0,"IF", 1, 2, 0);
	trans[0][59]	= settr(58,0,217,6361,6361,"(((PAUSE==START)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 60 -> 217,0 */
	reached0[60] = 1;
	trans[0][60]	= settr(0,0,0,0,0,"assert((states[k]==READY))",0,0,0);
	trans[0][61]	= settr(0,0,0,0,0,"commands[k] = START",0,0,0);
	trans[0][77]	= settr(76,0,217,6362,6362,".(goto)", 1, 2, 0);
	trans[0][62]	= settr(61,0,217,6363,6363,"(((PAUSE==PAUSE)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 63 -> 217,0 */
	reached0[63] = 1;
	trans[0][63]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==RUNNING)))",0,0,0);
	trans[0][64]	= settr(0,0,0,0,0,"commands[k] = PAUSE",0,0,0);
	trans[0][65]	= settr(64,0,217,6364,6364,"(((PAUSE==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 66 -> 217,0 */
	reached0[66] = 1;
	trans[0][66]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==PAUSED)))",0,0,0);
	trans[0][67]	= settr(0,0,0,0,0,"commands[k] = CONTINUE",0,0,0);
	trans[0][68]	= settr(67,0,217,6365,6365,"(((PAUSE==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 69 -> 217,0 */
	reached0[69] = 1;
	trans[0][69]	= settr(0,0,0,0,0,"assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))",0,0,0);
	trans[0][70]	= settr(0,0,0,0,0,"commands[k] = STOP",0,0,0);
	trans[0][71]	= settr(70,0,217,6366,6366,"((PAUSE==ABORT))", 1, 2, 0); /* m: 72 -> 217,0 */
	reached0[72] = 1;
	trans[0][72]	= settr(0,0,0,0,0,"assert((states[k]!=READY))",0,0,0);
	trans[0][73]	= settr(0,0,0,0,0,"commands[k] = ABORT",0,0,0);
	trans[0][74]	= settr(73,2,75,2,0,"else", 1, 2, 0);
	trans[0][75]	= settr(74,0,217,6367,6367,"printf('Thread %d ignores command %e.\\n',k,commands[k])", 1, 2, 0); /* m: 77 -> 0,217 */
	reached0[77] = 1;
	trans[0][79]	= settr(78,0,99,1,0,"(1)", 0, 2, 0);
	T = trans[ 0][99] = settr(98,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(98,2,97,0,0,"ATOMIC", 1, 2, 0);
	T = trans[0][97] = settr(96,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(96,2,80,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(96,2,83,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(96,2,86,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(96,2,89,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(96,2,92,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(96,2,95,0,0,"IF", 1, 2, 0);
	trans[0][80]	= settr(79,0,217,6368,6368,"(((STOP==START)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 81 -> 217,0 */
	reached0[81] = 1;
	trans[0][81]	= settr(0,0,0,0,0,"assert((states[k]==READY))",0,0,0);
	trans[0][82]	= settr(0,0,0,0,0,"commands[k] = START",0,0,0);
	trans[0][98]	= settr(97,0,217,6369,6369,".(goto)", 1, 2, 0);
	trans[0][83]	= settr(82,0,217,6370,6370,"(((STOP==PAUSE)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 84 -> 217,0 */
	reached0[84] = 1;
	trans[0][84]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==RUNNING)))",0,0,0);
	trans[0][85]	= settr(0,0,0,0,0,"commands[k] = PAUSE",0,0,0);
	trans[0][86]	= settr(85,0,217,6371,6371,"(((STOP==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 87 -> 217,0 */
	reached0[87] = 1;
	trans[0][87]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==PAUSED)))",0,0,0);
	trans[0][88]	= settr(0,0,0,0,0,"commands[k] = CONTINUE",0,0,0);
	trans[0][89]	= settr(88,0,217,6372,6372,"(((STOP==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 90 -> 217,0 */
	reached0[90] = 1;
	trans[0][90]	= settr(0,0,0,0,0,"assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))",0,0,0);
	trans[0][91]	= settr(0,0,0,0,0,"commands[k] = STOP",0,0,0);
	trans[0][92]	= settr(91,0,217,6373,6373,"((STOP==ABORT))", 1, 2, 0); /* m: 93 -> 217,0 */
	reached0[93] = 1;
	trans[0][93]	= settr(0,0,0,0,0,"assert((states[k]!=READY))",0,0,0);
	trans[0][94]	= settr(0,0,0,0,0,"commands[k] = ABORT",0,0,0);
	trans[0][95]	= settr(94,2,96,2,0,"else", 1, 2, 0);
	trans[0][96]	= settr(95,0,217,6374,6374,"printf('Thread %d ignores command %e.\\n',k,commands[k])", 1, 2, 0); /* m: 98 -> 0,217 */
	reached0[98] = 1;
	trans[0][100]	= settr(99,0,101,1,0,"(1)", 0, 2, 0);
	trans[0][101]	= settr(100,0,217,1,0,"(1)", 0, 2, 0);
	trans[0][218]	= settr(217,0,217,1,0,".(goto)", 0, 2, 0);
	T = trans[0][217] = settr(216,0,0,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(216,0,105,0,0,"DO", 0, 2, 0);
	T = T->nxt	= settr(216,0,190,0,0,"DO", 0, 2, 0);
	    T->nxt	= settr(216,0,215,0,0,"DO", 0, 2, 0);
	trans[0][105]	= settr(104,0,106,6375,0,"((commands[k]==CONTINUE))", 1, 2, 0);
	trans[0][106]	= settr(105,0,137,6376,0,"assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))", 1, 2, 0);
	T = trans[0][137] = settr(136,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(136,0,107,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(136,0,121,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(136,0,135,0,0,"IF", 0, 2, 0);
	trans[0][107]	= settr(106,0,120,6377,0,"((states[k]==STARTING))", 1, 2, 0);
	T = trans[ 0][120] = settr(119,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(119,0,118,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 0][118] = settr(117,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(117,0,116,0,0,"sub-sequence", 0, 2, 0);
	T = trans[0][116] = settr(115,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(115,0,108,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(115,0,110,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(115,0,112,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(115,0,114,0,0,"IF", 0, 2, 0);
	trans[0][108]	= settr(107,0,119,6378,6378,"(((k==0)&&(6==0)))", 0, 2, 0); /* m: 109 -> 119,0 */
	reached0[109] = 1;
	trans[0][109]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, _) -> %e\\n',2,3)",0,0,0);
	trans[0][117]	= settr(116,0,119,1,0,".(goto)", 0, 2, 0);
	trans[0][110]	= settr(109,0,119,6379,6379,"(((k==0)&&(6>0)))", 0, 2, 0); /* m: 111 -> 119,0 */
	reached0[111] = 1;
	trans[0][111]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, %e) -> %e\\n',2,6,3)",0,0,0);
	trans[0][112]	= settr(111,0,119,6380,6380,"(((k>0)&&(6==0)))", 0, 2, 0); /* m: 113 -> 119,0 */
	reached0[113] = 1;
	trans[0][113]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, _) -> %e\\n',k,2,3)",0,0,0);
	trans[0][114]	= settr(113,0,119,6381,6381,"(((k>0)&&(6>0)))", 0, 2, 0); /* m: 115 -> 119,0 */
	reached0[115] = 1;
	trans[0][115]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, %e) -> %e\\n',k,2,6,3)",0,0,0);
	trans[0][119]	= settr(118,0,189,6382,6382,"states[k] = 3", 1, 2, 0);
	trans[0][138]	= settr(137,0,189,1,0,".(goto)", 0, 2, 0);
	trans[0][121]	= settr(120,0,134,6383,0,"((states[k]==PAUSED))", 1, 2, 0);
	T = trans[ 0][134] = settr(133,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(133,0,132,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 0][132] = settr(131,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(131,0,130,0,0,"sub-sequence", 0, 2, 0);
	T = trans[0][130] = settr(129,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(129,0,122,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(129,0,124,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(129,0,126,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(129,0,128,0,0,"IF", 0, 2, 0);
	trans[0][122]	= settr(121,0,133,6384,6384,"(((k==0)&&(6==0)))", 0, 2, 0); /* m: 123 -> 133,0 */
	reached0[123] = 1;
	trans[0][123]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, _) -> %e\\n',4,3)",0,0,0);
	trans[0][131]	= settr(130,0,133,1,0,".(goto)", 0, 2, 0);
	trans[0][124]	= settr(123,0,133,6385,6385,"(((k==0)&&(6>0)))", 0, 2, 0); /* m: 125 -> 133,0 */
	reached0[125] = 1;
	trans[0][125]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, %e) -> %e\\n',4,6,3)",0,0,0);
	trans[0][126]	= settr(125,0,133,6386,6386,"(((k>0)&&(6==0)))", 0, 2, 0); /* m: 127 -> 133,0 */
	reached0[127] = 1;
	trans[0][127]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, _) -> %e\\n',k,4,3)",0,0,0);
	trans[0][128]	= settr(127,0,133,6387,6387,"(((k>0)&&(6>0)))", 0, 2, 0); /* m: 129 -> 133,0 */
	reached0[129] = 1;
	trans[0][129]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, %e) -> %e\\n',k,4,6,3)",0,0,0);
	trans[0][133]	= settr(132,0,189,6388,6388,"states[k] = 3", 1, 2, 0);
	trans[0][135]	= settr(134,0,136,2,0,"else", 0, 2, 0);
	trans[0][136]	= settr(135,0,189,1,0,"(1)", 0, 2, 0);
	T = trans[ 0][189] = settr(188,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(188,0,139,0,0,"sub-sequence", 0, 2, 0);
	trans[0][139]	= settr(138,0,186,6389,6389,"executing[k] = 1", 1, 2, 0);
	T = trans[0][186] = settr(185,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(185,0,140,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(185,0,163,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(185,0,184,0,0,"IF", 0, 2, 0);
	trans[0][140]	= settr(139,0,162,1,0,"(1)", 0, 2, 0);
	T = trans[ 0][162] = settr(161,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(161,0,141,0,0,"sub-sequence", 0, 2, 0);
	trans[0][141]	= settr(140,0,161,6390,0,"assert((_pid!=1))", 0, 2, 0);
	T = trans[ 0][161] = settr(160,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(160,2,159,0,0,"ATOMIC", 1, 2, 0);
	T = trans[0][159] = settr(158,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(158,2,142,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(158,2,145,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(158,2,148,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(158,2,151,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(158,2,154,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(158,2,157,0,0,"IF", 1, 2, 0);
	trans[0][142]	= settr(141,0,188,6391,6391,"(((ABORT==START)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 143 -> 188,0 */
	reached0[143] = 1;
	trans[0][143]	= settr(0,0,0,0,0,"assert((states[k]==READY))",0,0,0);
	trans[0][144]	= settr(0,0,0,0,0,"commands[k] = START",0,0,0);
	trans[0][160]	= settr(159,0,188,6392,6392,".(goto)", 1, 2, 0);
	trans[0][145]	= settr(144,0,188,6393,6393,"(((ABORT==PAUSE)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 146 -> 188,0 */
	reached0[146] = 1;
	trans[0][146]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==RUNNING)))",0,0,0);
	trans[0][147]	= settr(0,0,0,0,0,"commands[k] = PAUSE",0,0,0);
	trans[0][148]	= settr(147,0,188,6394,6394,"(((ABORT==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 149 -> 188,0 */
	reached0[149] = 1;
	trans[0][149]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==PAUSED)))",0,0,0);
	trans[0][150]	= settr(0,0,0,0,0,"commands[k] = CONTINUE",0,0,0);
	trans[0][151]	= settr(150,0,188,6395,6395,"(((ABORT==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 152 -> 188,0 */
	reached0[152] = 1;
	trans[0][152]	= settr(0,0,0,0,0,"assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))",0,0,0);
	trans[0][153]	= settr(0,0,0,0,0,"commands[k] = STOP",0,0,0);
	trans[0][154]	= settr(153,0,188,6396,6396,"((ABORT==ABORT))", 1, 2, 0); /* m: 155 -> 188,0 */
	reached0[155] = 1;
	trans[0][155]	= settr(0,0,0,0,0,"assert((states[k]!=READY))",0,0,0);
	trans[0][156]	= settr(0,0,0,0,0,"commands[k] = ABORT",0,0,0);
	trans[0][157]	= settr(156,2,158,2,0,"else", 1, 2, 0);
	trans[0][158]	= settr(157,0,188,6397,6397,"printf('Thread %d ignores command %e.\\n',k,commands[k])", 1, 2, 0); /* m: 160 -> 0,188 */
	reached0[160] = 1;
	trans[0][187]	= settr(186,0,188,1,0,".(goto)", 0, 2, 0);
	trans[0][163]	= settr(162,0,183,1,0,"(1)", 0, 2, 0);
	T = trans[ 0][183] = settr(182,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(182,2,181,0,0,"ATOMIC", 1, 2, 0);
	T = trans[0][181] = settr(180,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(180,2,164,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(180,2,167,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(180,2,170,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(180,2,173,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(180,2,176,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(180,2,179,0,0,"IF", 1, 2, 0);
	trans[0][164]	= settr(163,0,188,6398,6398,"(((STOP==START)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 165 -> 188,0 */
	reached0[165] = 1;
	trans[0][165]	= settr(0,0,0,0,0,"assert((states[k]==READY))",0,0,0);
	trans[0][166]	= settr(0,0,0,0,0,"commands[k] = START",0,0,0);
	trans[0][182]	= settr(181,0,188,6399,6399,".(goto)", 1, 2, 0);
	trans[0][167]	= settr(166,0,188,6400,6400,"(((STOP==PAUSE)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 168 -> 188,0 */
	reached0[168] = 1;
	trans[0][168]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==RUNNING)))",0,0,0);
	trans[0][169]	= settr(0,0,0,0,0,"commands[k] = PAUSE",0,0,0);
	trans[0][170]	= settr(169,0,188,6401,6401,"(((STOP==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 171 -> 188,0 */
	reached0[171] = 1;
	trans[0][171]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==PAUSED)))",0,0,0);
	trans[0][172]	= settr(0,0,0,0,0,"commands[k] = CONTINUE",0,0,0);
	trans[0][173]	= settr(172,0,188,6402,6402,"(((STOP==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 174 -> 188,0 */
	reached0[174] = 1;
	trans[0][174]	= settr(0,0,0,0,0,"assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))",0,0,0);
	trans[0][175]	= settr(0,0,0,0,0,"commands[k] = STOP",0,0,0);
	trans[0][176]	= settr(175,0,188,6403,6403,"((STOP==ABORT))", 1, 2, 0); /* m: 177 -> 188,0 */
	reached0[177] = 1;
	trans[0][177]	= settr(0,0,0,0,0,"assert((states[k]!=READY))",0,0,0);
	trans[0][178]	= settr(0,0,0,0,0,"commands[k] = ABORT",0,0,0);
	trans[0][179]	= settr(178,2,180,2,0,"else", 1, 2, 0);
	trans[0][180]	= settr(179,0,188,6404,6404,"printf('Thread %d ignores command %e.\\n',k,commands[k])", 1, 2, 0); /* m: 182 -> 0,188 */
	reached0[182] = 1;
	trans[0][184]	= settr(183,0,185,1,0,"(1)", 0, 2, 0);
	trans[0][185]	= settr(184,0,188,1,0,"(1)", 0, 2, 0);
	trans[0][188]	= settr(187,0,217,6405,6405,"executing[k] = 0", 1, 2, 0);
	trans[0][190]	= settr(189,0,213,6406,0,"((commands[k]==PAUSE))", 1, 2, 0);
	T = trans[0][213] = settr(212,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(212,0,191,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(212,0,193,0,0,"IF", 0, 2, 0);
	trans[0][191]	= settr(190,0,192,6407,0,"((states[k]==PAUSED))", 1, 2, 0);
	trans[0][192]	= settr(191,0,217,6408,0,"((commands[k]!=PAUSED))", 1, 2, 0);
	trans[0][214]	= settr(213,0,217,1,0,".(goto)", 0, 2, 0);
	trans[0][193]	= settr(192,0,194,2,0,"else", 0, 2, 0);
	trans[0][194]	= settr(193,0,211,6409,0,"assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==STARTING)))", 1, 2, 0);
	T = trans[0][211] = settr(210,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(210,0,195,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(210,0,209,0,0,"IF", 0, 2, 0);
	trans[0][195]	= settr(194,0,208,6410,0,"(((states[k]==STARTING)||(states[k]==RUNNING)))", 1, 2, 0);
	T = trans[ 0][208] = settr(207,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(207,0,206,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 0][206] = settr(205,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(205,0,204,0,0,"sub-sequence", 0, 2, 0);
	T = trans[0][204] = settr(203,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(203,0,196,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(203,0,198,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(203,0,200,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(203,0,202,0,0,"IF", 0, 2, 0);
	trans[0][196]	= settr(195,0,207,6411,6411,"(((k==0)&&(8==0)))", 0, 2, 0); /* m: 197 -> 207,0 */
	reached0[197] = 1;
	trans[0][197]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, _) -> %e\\n',3,4)",0,0,0);
	trans[0][205]	= settr(204,0,207,1,0,".(goto)", 0, 2, 0);
	trans[0][198]	= settr(197,0,207,6412,6412,"(((k==0)&&(8>0)))", 0, 2, 0); /* m: 199 -> 207,0 */
	reached0[199] = 1;
	trans[0][199]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, %e) -> %e\\n',3,8,4)",0,0,0);
	trans[0][200]	= settr(199,0,207,6413,6413,"(((k>0)&&(8==0)))", 0, 2, 0); /* m: 201 -> 207,0 */
	reached0[201] = 1;
	trans[0][201]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, _) -> %e\\n',k,3,4)",0,0,0);
	trans[0][202]	= settr(201,0,207,6414,6414,"(((k>0)&&(8>0)))", 0, 2, 0); /* m: 203 -> 207,0 */
	reached0[203] = 1;
	trans[0][203]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, %e) -> %e\\n',k,3,8,4)",0,0,0);
	trans[0][207]	= settr(206,0,217,6415,6415,"states[k] = 4", 1, 2, 0);
	trans[0][212]	= settr(211,0,217,1,0,".(goto)", 0, 2, 0);
	trans[0][209]	= settr(208,0,210,2,0,"else", 0, 2, 0);
	trans[0][210]	= settr(209,0,217,1,0,"(1)", 0, 2, 0);
	trans[0][215]	= settr(214,0,306,6416,0,"(((commands[k]==STOP)||(commands[k]==ABORT)))", 1, 2, 0);
	trans[0][216]	= settr(215,0,306,1,0,"goto :b0", 0, 2, 0);
	trans[0][219]	= settr(218,0,306,1,0,"break", 0, 2, 0);
	T = trans[0][306] = settr(305,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(305,0,220,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(305,0,276,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(305,0,304,0,0,"IF", 0, 2, 0);
	trans[0][220]	= settr(219,0,221,6417,0,"((commands[k]==STOP))", 1, 2, 0);
	trans[0][221]	= settr(220,0,234,6418,0,"assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))", 1, 2, 0);
	T = trans[ 0][234] = settr(233,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(233,0,232,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 0][232] = settr(231,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(231,0,230,0,0,"sub-sequence", 0, 2, 0);
	T = trans[0][230] = settr(229,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(229,0,222,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(229,0,224,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(229,0,226,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(229,0,228,0,0,"IF", 0, 2, 0);
	trans[0][222]	= settr(221,0,223,6419,0,"(((k==0)&&(12==0)))", 0, 2, 0);
	trans[0][223]	= settr(222,0,233,6420,0,"printf('Supervisor: (%e, _) -> %e\\n',states[k],7)", 1, 2, 0);
	trans[0][231]	= settr(230,0,233,1,0,".(goto)", 0, 2, 0);
	trans[0][224]	= settr(223,0,225,6421,0,"(((k==0)&&(12>0)))", 0, 2, 0);
	trans[0][225]	= settr(224,0,233,6422,0,"printf('Supervisor: (%e, %e) -> %e\\n',states[k],12,7)", 1, 2, 0);
	trans[0][226]	= settr(225,0,227,6423,0,"(((k>0)&&(12==0)))", 0, 2, 0);
	trans[0][227]	= settr(226,0,233,6424,0,"printf('Worker %d: (%e, _) -> %e\\n',k,states[k],7)", 1, 2, 0);
	trans[0][228]	= settr(227,0,229,6425,0,"(((k>0)&&(12>0)))", 0, 2, 0);
	trans[0][229]	= settr(228,0,233,6426,0,"printf('Worker %d: (%e, %e) -> %e\\n',k,states[k],12,7)", 1, 2, 0);
	trans[0][233]	= settr(232,0,262,6427,6427,"states[k] = 7", 1, 2, 0);
	T = trans[ 0][262] = settr(261,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(261,0,260,0,0,"sub-sequence", 0, 2, 0);
	T = trans[0][260] = settr(259,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(259,0,235,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(259,0,258,0,0,"IF", 0, 2, 0);
	trans[0][235]	= settr(234,0,257,1,0,"(1)", 0, 2, 0);
	T = trans[ 0][257] = settr(256,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(256,0,236,0,0,"sub-sequence", 0, 2, 0);
	trans[0][236]	= settr(235,0,256,6428,0,"assert((_pid!=1))", 0, 2, 0);
	T = trans[ 0][256] = settr(255,2,0,0,0,"ATOMIC", 1, 2, 0);
	T->nxt	= settr(255,2,254,0,0,"ATOMIC", 1, 2, 0);
	T = trans[0][254] = settr(253,2,0,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(253,2,237,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(253,2,240,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(253,2,243,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(253,2,246,0,0,"IF", 1, 2, 0);
	T = T->nxt	= settr(253,2,249,0,0,"IF", 1, 2, 0);
	    T->nxt	= settr(253,2,252,0,0,"IF", 1, 2, 0);
	trans[0][237]	= settr(236,0,275,6429,6429,"(((ABORT==START)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 238 -> 275,0 */
	reached0[238] = 1;
	trans[0][238]	= settr(0,0,0,0,0,"assert((states[k]==READY))",0,0,0);
	trans[0][239]	= settr(0,0,0,0,0,"commands[k] = START",0,0,0);
	trans[0][255]	= settr(254,0,275,6430,6430,".(goto)", 1, 2, 0);
	trans[0][240]	= settr(239,0,275,6431,6431,"(((ABORT==PAUSE)&&(commands[k]==CONTINUE)))", 1, 2, 0); /* m: 241 -> 275,0 */
	reached0[241] = 1;
	trans[0][241]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==RUNNING)))",0,0,0);
	trans[0][242]	= settr(0,0,0,0,0,"commands[k] = PAUSE",0,0,0);
	trans[0][243]	= settr(242,0,275,6432,6432,"(((ABORT==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 244 -> 275,0 */
	reached0[244] = 1;
	trans[0][244]	= settr(0,0,0,0,0,"assert(((states[k]==STARTING)||(states[k]==PAUSED)))",0,0,0);
	trans[0][245]	= settr(0,0,0,0,0,"commands[k] = CONTINUE",0,0,0);
	trans[0][246]	= settr(245,0,275,6433,6433,"(((ABORT==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))", 1, 2, 0); /* m: 247 -> 275,0 */
	reached0[247] = 1;
	trans[0][247]	= settr(0,0,0,0,0,"assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))",0,0,0);
	trans[0][248]	= settr(0,0,0,0,0,"commands[k] = STOP",0,0,0);
	trans[0][249]	= settr(248,0,275,6434,6434,"((ABORT==ABORT))", 1, 2, 0); /* m: 250 -> 275,0 */
	reached0[250] = 1;
	trans[0][250]	= settr(0,0,0,0,0,"assert((states[k]!=READY))",0,0,0);
	trans[0][251]	= settr(0,0,0,0,0,"commands[k] = ABORT",0,0,0);
	trans[0][252]	= settr(251,2,253,2,0,"else", 1, 2, 0);
	trans[0][253]	= settr(252,0,275,6435,6435,"printf('Thread %d ignores command %e.\\n',k,commands[k])", 1, 2, 0); /* m: 255 -> 0,275 */
	reached0[255] = 1;
	trans[0][261]	= settr(260,0,275,1,0,".(goto)", 0, 2, 0);
	trans[0][258]	= settr(257,0,259,1,0,"(1)", 0, 2, 0);
	trans[0][259]	= settr(258,0,275,1,0,"(1)", 0, 2, 0);
	T = trans[ 0][275] = settr(274,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(274,0,273,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 0][273] = settr(272,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(272,0,271,0,0,"sub-sequence", 0, 2, 0);
	T = trans[0][271] = settr(270,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(270,0,263,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(270,0,265,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(270,0,267,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(270,0,269,0,0,"IF", 0, 2, 0);
	trans[0][263]	= settr(262,0,274,6436,6436,"(((k==0)&&(12==0)))", 0, 2, 0); /* m: 264 -> 274,0 */
	reached0[264] = 1;
	trans[0][264]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, _) -> %e\\n',7,9)",0,0,0);
	trans[0][272]	= settr(271,0,274,1,0,".(goto)", 0, 2, 0);
	trans[0][265]	= settr(264,0,274,6437,6437,"(((k==0)&&(12>0)))", 0, 2, 0); /* m: 266 -> 274,0 */
	reached0[266] = 1;
	trans[0][266]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, %e) -> %e\\n',7,12,9)",0,0,0);
	trans[0][267]	= settr(266,0,274,6438,6438,"(((k>0)&&(12==0)))", 0, 2, 0); /* m: 268 -> 274,0 */
	reached0[268] = 1;
	trans[0][268]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, _) -> %e\\n',k,7,9)",0,0,0);
	trans[0][269]	= settr(268,0,274,6439,6439,"(((k>0)&&(12>0)))", 0, 2, 0); /* m: 270 -> 274,0 */
	reached0[270] = 1;
	trans[0][270]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, %e) -> %e\\n',k,7,12,9)",0,0,0);
	trans[0][274]	= settr(273,0,308,6440,6440,"states[k] = 9", 1, 2, 0);
	trans[0][307]	= settr(306,0,308,1,0,".(goto)", 0, 2, 0);
	trans[0][276]	= settr(275,0,277,6441,0,"((commands[k]==ABORT))", 1, 2, 0);
	trans[0][277]	= settr(276,0,290,6442,0,"assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==STOPPING)))", 1, 2, 0);
	T = trans[ 0][290] = settr(289,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(289,0,288,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 0][288] = settr(287,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(287,0,286,0,0,"sub-sequence", 0, 2, 0);
	T = trans[0][286] = settr(285,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(285,0,278,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(285,0,280,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(285,0,282,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(285,0,284,0,0,"IF", 0, 2, 0);
	trans[0][278]	= settr(277,0,279,6443,0,"(((k==0)&&(13==0)))", 0, 2, 0);
	trans[0][279]	= settr(278,0,289,6444,0,"printf('Supervisor: (%e, _) -> %e\\n',states[k],10)", 1, 2, 0);
	trans[0][287]	= settr(286,0,289,1,0,".(goto)", 0, 2, 0);
	trans[0][280]	= settr(279,0,281,6445,0,"(((k==0)&&(13>0)))", 0, 2, 0);
	trans[0][281]	= settr(280,0,289,6446,0,"printf('Supervisor: (%e, %e) -> %e\\n',states[k],13,10)", 1, 2, 0);
	trans[0][282]	= settr(281,0,283,6447,0,"(((k>0)&&(13==0)))", 0, 2, 0);
	trans[0][283]	= settr(282,0,289,6448,0,"printf('Worker %d: (%e, _) -> %e\\n',k,states[k],10)", 1, 2, 0);
	trans[0][284]	= settr(283,0,285,6449,0,"(((k>0)&&(13>0)))", 0, 2, 0);
	trans[0][285]	= settr(284,0,289,6450,0,"printf('Worker %d: (%e, %e) -> %e\\n',k,states[k],13,10)", 1, 2, 0);
	trans[0][289]	= settr(288,0,303,6451,6451,"states[k] = 10", 1, 2, 0);
	T = trans[ 0][303] = settr(302,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(302,0,301,0,0,"sub-sequence", 0, 2, 0);
	T = trans[ 0][301] = settr(300,0,0,0,0,"sub-sequence", 0, 2, 0);
	T->nxt	= settr(300,0,299,0,0,"sub-sequence", 0, 2, 0);
	T = trans[0][299] = settr(298,0,0,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(298,0,291,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(298,0,293,0,0,"IF", 0, 2, 0);
	T = T->nxt	= settr(298,0,295,0,0,"IF", 0, 2, 0);
	    T->nxt	= settr(298,0,297,0,0,"IF", 0, 2, 0);
	trans[0][291]	= settr(290,0,302,6452,6452,"(((k==0)&&(13==0)))", 0, 2, 0); /* m: 292 -> 302,0 */
	reached0[292] = 1;
	trans[0][292]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, _) -> %e\\n',10,11)",0,0,0);
	trans[0][300]	= settr(299,0,302,1,0,".(goto)", 0, 2, 0);
	trans[0][293]	= settr(292,0,302,6453,6453,"(((k==0)&&(13>0)))", 0, 2, 0); /* m: 294 -> 302,0 */
	reached0[294] = 1;
	trans[0][294]	= settr(0,0,0,0,0,"printf('Supervisor: (%e, %e) -> %e\\n',10,13,11)",0,0,0);
	trans[0][295]	= settr(294,0,302,6454,6454,"(((k>0)&&(13==0)))", 0, 2, 0); /* m: 296 -> 302,0 */
	reached0[296] = 1;
	trans[0][296]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, _) -> %e\\n',k,10,11)",0,0,0);
	trans[0][297]	= settr(296,0,302,6455,6455,"(((k>0)&&(13>0)))", 0, 2, 0); /* m: 298 -> 302,0 */
	reached0[298] = 1;
	trans[0][298]	= settr(0,0,0,0,0,"printf('Worker %d: (%e, %e) -> %e\\n',k,10,13,11)",0,0,0);
	trans[0][302]	= settr(301,0,308,6456,6456,"states[k] = 11", 1, 2, 0);
	trans[0][304]	= settr(303,0,305,2,0,"else", 0, 2, 0);
	trans[0][305]	= settr(304,0,308,6457,0,"assert(0)", 0, 2, 0);
	trans[0][308]	= settr(307,0,0,6458,6458,"-end-", 0, 3500, 0);
	/* np_ demon: */
	trans[_NP_] = (Trans **) emalloc(3*sizeof(Trans *));
	T = trans[_NP_][0] = settr(9997,0,1,_T5,0,"(np_)", 1,2,0);
	    T->nxt	  = settr(9998,0,0,_T2,0,"(1)",   0,2,0);
	T = trans[_NP_][1] = settr(9999,0,1,_T5,0,"(np_)", 1,2,0);
}

Trans *
settr(	int t_id, int a, int b, int c, int d,
	char *t, int g, int tpe0, int tpe1)
{	Trans *tmp = (Trans *) emalloc(sizeof(Trans));

	tmp->atom  = a&(6|32);	/* only (2|8|32) have meaning */
	if (!g) tmp->atom |= 8;	/* no global references */
	tmp->st    = b;
	tmp->tpe[0] = tpe0;
	tmp->tpe[1] = tpe1;
	tmp->tp    = t;
	tmp->t_id  = t_id;
	tmp->forw  = c;
	tmp->back  = d;
	return tmp;
}

Trans *
cpytr(Trans *a)
{	Trans *tmp = (Trans *) emalloc(sizeof(Trans));

	int i;
	tmp->atom  = a->atom;
	tmp->st    = a->st;
#ifdef HAS_UNLESS
	tmp->e_trans = a->e_trans;
	for (i = 0; i < HAS_UNLESS; i++)
		tmp->escp[i] = a->escp[i];
#endif
	tmp->tpe[0] = a->tpe[0];
	tmp->tpe[1] = a->tpe[1];
	for (i = 0; i < 6; i++)
	{	tmp->qu[i] = a->qu[i];
		tmp->ty[i] = a->ty[i];
	}
	tmp->tp    = (char *) emalloc(strlen(a->tp)+1);
	strcpy(tmp->tp, a->tp);
	tmp->t_id  = a->t_id;
	tmp->forw  = a->forw;
	tmp->back  = a->back;
	return tmp;
}

#ifndef NOREDUCE
int
srinc_set(int n)
{	if (n <= 2) return LOCAL;
	if (n <= 2+  DELTA) return Q_FULL_F; /* 's' or nfull  */
	if (n <= 2+2*DELTA) return Q_EMPT_F; /* 'r' or nempty */
	if (n <= 2+3*DELTA) return Q_EMPT_T; /* empty */
	if (n <= 2+4*DELTA) return Q_FULL_T; /* full  */
	if (n ==   5*DELTA) return GLOBAL;
	if (n ==   6*DELTA) return TIMEOUT_F;
	if (n ==   7*DELTA) return ALPHA_F;
	Uerror("cannot happen srinc_class");
	return BAD;
}
int
srunc(int n, int m)
{	switch(m) {
	case Q_FULL_F: return n-2;
	case Q_EMPT_F: return n-2-DELTA;
	case Q_EMPT_T: return n-2-2*DELTA;
	case Q_FULL_T: return n-2-3*DELTA;
	case ALPHA_F:
	case TIMEOUT_F: return 257; /* non-zero, and > MAXQ */
	}
	Uerror("cannot happen srunc");
	return 0;
}
#endif
int cnt;
#ifdef HAS_UNLESS
int
isthere(Trans *a, int b)
{	Trans *t;
	for (t = a; t; t = t->nxt)
		if (t->t_id == b)
			return 1;
	return 0;
}
#endif
#ifndef NOREDUCE
int
mark_safety(Trans *t) /* for conditional safety */
{	int g = 0, i, j, k;

	if (!t) return 0;
	if (t->qu[0])
		return (t->qu[1])?2:1;	/* marked */

	for (i = 0; i < 2; i++)
	{	j = srinc_set(t->tpe[i]);
		if (j >= GLOBAL && j != ALPHA_F)
			return -1;
		if (j != LOCAL)
		{	k = srunc(t->tpe[i], j);
			if (g == 0
			||  t->qu[0] != k
			||  t->ty[0] != j)
			{	t->qu[g] = k;
				t->ty[g] = j;
				g++;
	}	}	}
	return g;
}
#endif
void
retrans(int n, int m, int is, short srcln[], uchar reach[], uchar lpstate[])
	/* process n, with m states, is=initial state */
{	Trans *T0, *T1, *T2, *T3;
	Trans *T4, *T5; /* t_reverse or has_unless */
	int i;
#if defined(HAS_UNLESS) || !defined(NOREDUCE)
	int k;
#endif
#ifndef NOREDUCE
	int g, h, j, aa;
#endif
#ifdef HAS_UNLESS
	int p;
#endif
	if (state_tables >= 4)
	{	printf("STEP 1 %s\n", 
			procname[n]);
		for (i = 1; i < m; i++)
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			crack(n, i, T0, srcln);
		return;
	}
	do {
		for (i = 1, cnt = 0; i < m; i++)
		{	T2 = trans[n][i];
			T1 = T2?T2->nxt:(Trans *)0;
/* prescan: */		for (T0 = T1; T0; T0 = T0->nxt)
/* choice in choice */	{	if (T0->st && trans[n][T0->st]
				&&  trans[n][T0->st]->nxt)
					break;
			}
#if 0
		if (T0)
		printf("\tstate %d / %d: choice in choice\n",
		i, T0->st);
#endif
			if (T0)
			for (T0 = T1; T0; T0 = T0->nxt)
			{	T3 = trans[n][T0->st];
				if (!T3->nxt)
				{	T2->nxt = cpytr(T0);
					T2 = T2->nxt;
					imed(T2, T0->st, n, i);
					continue;
				}
				do {	T3 = T3->nxt;
					T2->nxt = cpytr(T3);
					T2 = T2->nxt;
					imed(T2, T0->st, n, i);
				} while (T3->nxt);
				cnt++;
			}
		}
	} while (cnt);
	if (state_tables >= 3)
	{	printf("STEP 2 %s\n", 
			procname[n]);
		for (i = 1; i < m; i++)
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			crack(n, i, T0, srcln);
		return;
	}
	for (i = 1; i < m; i++)
	{	if (trans[n][i] && trans[n][i]->nxt) /* optimize */
		{	T1 = trans[n][i]->nxt;
#if 0
			printf("\t\tpull %d (%d) to %d\n",
			T1->st, T1->forw, i);
#endif
			srcln[i] = srcln[T1->st];	/* Oyvind Teig, 5.2.0 */

			if (!trans[n][T1->st]) continue;
			T0 = cpytr(trans[n][T1->st]);
			trans[n][i] = T0;
			reach[T1->st] = 1;
			imed(T0, T1->st, n, i);
			for (T1 = T1->nxt; T1; T1 = T1->nxt)
			{
#if 0
			printf("\t\tpull %d (%d) to %d\n",
				T1->st, T1->forw, i);
#endif
		/*		srcln[i] = srcln[T1->st];  gh: not useful */
				if (!trans[n][T1->st]) continue;
				T0->nxt = cpytr(trans[n][T1->st]);
				T0 = T0->nxt;
				reach[T1->st] = 1;
				imed(T0, T1->st, n, i);
	}	}	}
	if (state_tables >= 2)
	{	printf("STEP 3 %s\n", 
			procname[n]);
		for (i = 1; i < m; i++)
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			crack(n, i, T0, srcln);
		return;
	}
#ifdef HAS_UNLESS
	for (i = 1; i < m; i++)
	{	if (!trans[n][i]) continue;
		/* check for each state i if an
		 * escape to some state p is defined
		 * if so, copy and mark p's transitions
		 * and prepend them to the transition-
		 * list of state i
		 */
	 if (!like_java) /* the default */
	 {	for (T0 = trans[n][i]; T0; T0 = T0->nxt)
		for (k = HAS_UNLESS-1; k >= 0; k--)
		{	if (p = T0->escp[k])
			for (T1 = trans[n][p]; T1; T1 = T1->nxt)
			{	if (isthere(trans[n][i], T1->t_id))
					continue;
				T2 = cpytr(T1);
				T2->e_trans = p;
				T2->nxt = trans[n][i];
				trans[n][i] = T2;
		}	}
	 } else /* outermost unless checked first */
	 {	T4 = T3 = (Trans *) 0;
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
		for (k = HAS_UNLESS-1; k >= 0; k--)
		{	if (p = T0->escp[k])
			for (T1 = trans[n][p]; T1; T1 = T1->nxt)
			{	if (isthere(trans[n][i], T1->t_id))
					continue;
				T2 = cpytr(T1);
				T2->nxt = (Trans *) 0;
				T2->e_trans = p;
				if (T3)	T3->nxt = T2;
				else	T4 = T2;
				T3 = T2;
		}	}
		if (T4)
		{	T3->nxt = trans[n][i];
			trans[n][i] = T4;
		}
	 }
	}
#endif
#ifndef NOREDUCE
	for (i = 1; i < m; i++)
	{	if (a_cycles)
		{ /* moves through these states are visible */
	#if PROG_LAB>0 && defined(HAS_NP)
			if (progstate[n][i])
				goto degrade;
			for (T1 = trans[n][i]; T1; T1 = T1->nxt)
				if (progstate[n][T1->st])
					goto degrade;
	#endif
			if (accpstate[n][i] || visstate[n][i])
				goto degrade;
			for (T1 = trans[n][i]; T1; T1 = T1->nxt)
				if (accpstate[n][T1->st])
					goto degrade;
		}
		T1 = trans[n][i];
		if (!T1) continue;
		g = mark_safety(T1);	/* V3.3.1 */
		if (g < 0) goto degrade; /* global */
		/* check if mixing of guards preserves reduction */
		if (T1->nxt)
		{	k = 0;
			for (T0 = T1; T0; T0 = T0->nxt)
			{	if (!(T0->atom&8))
					goto degrade;
				for (aa = 0; aa < 2; aa++)
				{	j = srinc_set(T0->tpe[aa]);
					if (j >= GLOBAL && j != ALPHA_F)
						goto degrade;
					if (T0->tpe[aa]
					&&  T0->tpe[aa]
					!=  T1->tpe[0])
						k = 1;
			}	}
			/* g = 0;	V3.3.1 */
			if (k)	/* non-uniform selection */
			for (T0 = T1; T0; T0 = T0->nxt)
			for (aa = 0; aa < 2; aa++)
			{	j = srinc_set(T0->tpe[aa]);
				if (j != LOCAL)
				{	k = srunc(T0->tpe[aa], j);
					for (h = 0; h < 6; h++)
						if (T1->qu[h] == k
						&&  T1->ty[h] == j)
							break;
					if (h >= 6)
					{	T1->qu[g%6] = k;
						T1->ty[g%6] = j;
						g++;
			}	}	}
			if (g > 6)
			{	T1->qu[0] = 0;	/* turn it off */
				printf("pan: warning, line %d, ",
					srcln[i]);
			 	printf("too many stmnt types (%d)",
					g);
			  	printf(" in selection\n");
			  goto degrade;
			}
		}
		/* mark all options global if >=1 is global */
		for (T1 = trans[n][i]; T1; T1 = T1->nxt)
			if (!(T1->atom&8)) break;
		if (T1)
degrade:	for (T1 = trans[n][i]; T1; T1 = T1->nxt)
			T1->atom &= ~8;	/* mark as unsafe */
		/* can only mix 'r's or 's's if on same chan */
		/* and not mixed with other local operations */
		T1 = trans[n][i];
		if (!T1 || T1->qu[0]) continue;
		j = T1->tpe[0];
		if (T1->nxt && T1->atom&8)
		{ if (j == 5*DELTA)
		  {	printf("warning: line %d ", srcln[i]);
			printf("mixed condition ");
			printf("(defeats reduction)\n");
			goto degrade;
		  }
		  for (T0 = T1; T0; T0 = T0->nxt)
		  for (aa = 0; aa < 2; aa++)
		  if  (T0->tpe[aa] && T0->tpe[aa] != j)
		  {	printf("warning: line %d ", srcln[i]);
			printf("[%d-%d] mixed %stion ",
				T0->tpe[aa], j, 
				(j==5*DELTA)?"condi":"selec");
			printf("(defeats reduction)\n");
			printf("	'%s' <-> '%s'\n",
				T1->tp, T0->tp);
			goto degrade;
		} }
	}
#endif
	for (i = 1; i < m; i++)
	{	T2 = trans[n][i];
		if (!T2
		||  T2->nxt
		||  strncmp(T2->tp, ".(goto)", 7)
		||  !stopstate[n][i])
			continue;
		stopstate[n][T2->st] = 1;
	}
	if (state_tables && !verbose)
	{	if (dodot)
		{	char buf[256], *q = buf, *p = procname[n];
			while (*p != '\0')
			{	if (*p != ':')
				{	*q++ = *p;
				}
				p++;
			}
			*q = '\0';
			printf("digraph ");
			switch (Btypes[n]) {
			case I_PROC:  printf("init {\n"); break;
			case N_CLAIM: printf("claim_%s {\n", buf); break;
			case E_TRACE: printf("notrace {\n"); break;
			case N_TRACE: printf("trace {\n"); break;
			default:      printf("p_%s {\n", buf); break;
			}
			printf("size=\"8,10\";\n");
			printf("  GT [shape=box,style=dotted,label=\"%s\"];\n", buf);
			printf("  GT -> S%d;\n", is);
		} else
		{	switch (Btypes[n]) {
			case I_PROC:  printf("init\n"); break;
			case N_CLAIM: printf("claim %s\n", procname[n]); break;
			case E_TRACE: printf("notrace assertion\n"); break;
			case N_TRACE: printf("trace assertion\n"); break;
			default:      printf("proctype %s\n", procname[n]); break;
		}	}
		for (i = 1; i < m; i++)
		{	reach[i] = 1;
		}
		tagtable(n, m, is, srcln, reach);
		if (dodot) printf("}\n");
	} else
	for (i = 1; i < m; i++)
	{	int nrelse;
		if (Btypes[n] != N_CLAIM)
		{	for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			{	if (T0->st == i
				&& strcmp(T0->tp, "(1)") == 0)
				{	printf("error: proctype '%s' ",
						procname[n]);
		  			printf("line %d, state %d: has un",
						srcln[i], i);
					printf("conditional self-loop\n");
					pan_exit(1);
		}	}	}
		nrelse = 0;
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
		{	if (strcmp(T0->tp, "else") == 0)
				nrelse++;
		}
		if (nrelse > 1)
		{	printf("error: proctype '%s' state",
				procname[n]);
		  	printf(" %d, inherits %d", i, nrelse);
		  	printf(" 'else' stmnts\n");
			pan_exit(1);
	}	}
#if !defined(LOOPSTATE) && !defined(BFS_PAR)
	if (state_tables)
#endif
	do_dfs(n, m, is, srcln, reach, lpstate);

	if (!t_reverse)
	{	return;
	}
	/* process n, with m states, is=initial state -- reverse list */
	if (!state_tables && Btypes[n] != N_CLAIM)
	{	for (i = 1; i < m; i++)
		{	Trans *Tx = (Trans *) 0; /* list of escapes */
			Trans *Ty = (Trans *) 0; /* its tail element */
			T1 = (Trans *) 0; /* reversed list */
			T2 = (Trans *) 0; /* its tail */
			T3 = (Trans *) 0; /* remembers possible 'else' */

			/* find unless-escapes, they should go first */
			T4 = T5 = T0 = trans[n][i];
	#ifdef HAS_UNLESS
			while (T4 && T4->e_trans) /* escapes are first in orig list */
			{	T5 = T4;	  /* remember predecessor */
				T4 = T4->nxt;
			}
	#endif
			/* T4 points to first non-escape, T5 to its parent, T0 to original list */
			if (T4 != T0)		 /* there was at least one escape */
			{	T3 = T5->nxt;		 /* start of non-escapes */
				T5->nxt = (Trans *) 0;	 /* separate */
				Tx = T0;		 /* start of the escapes */
				Ty = T5;		 /* its tail */
				T0 = T3;		 /* the rest, to be reversed */
			}
			/* T0 points to first non-escape, Tx to the list of escapes, Ty to its tail */

			/* first tail-add non-escape transitions, reversed */
			T3 = (Trans *) 0;
			for (T5 = T0; T5; T5 = T4)
			{	T4 = T5->nxt;
	#ifdef HAS_UNLESS
				if (T5->e_trans)
				{	printf("error: cannot happen!\n");
					continue;
				}
	#endif
				if (strcmp(T5->tp, "else") == 0)
				{	T3 = T5;
					T5->nxt = (Trans *) 0;
				} else
				{	T5->nxt = T1;
					if (!T1) { T2 = T5; }
					T1 = T5;
			}	}
			/* T3 points to a possible else, which is removed from the list */
			/* T1 points to the reversed list so far (without escapes) */
			/* T2 points to the tail element -- where the else should go */
			if (T2 && T3)
			{	T2->nxt = T3;	/* add else */
			} else
			{	if (T3) /* there was an else, but there's no tail */
				{	if (!T1)	/* and no reversed list */
					{	T1 = T3; /* odd, but possible */
					} else		/* even stranger */
					{	T1->nxt = T3;
			}	}	}

			/* add in the escapes, to that they appear at the front */
			if (Tx && Ty) { Ty->nxt = T1; T1 = Tx; }

			trans[n][i] = T1;
			/* reversed, with escapes first and else last */
	}	}
	if (state_tables && verbose)
	{	printf("FINAL proctype %s\n", 
			procname[n]);
		for (i = 1; i < m; i++)
		for (T0 = trans[n][i]; T0; T0 = T0->nxt)
			crack(n, i, T0, srcln);
	}
}
void
imed(Trans *T, int v, int n, int j)	/* set intermediate state */
{	progstate[n][T->st] |= progstate[n][v];
	accpstate[n][T->st] |= accpstate[n][v];
	stopstate[n][T->st] |= stopstate[n][v];
	mapstate[n][j] = T->st;
}
void
tagtable(int n, int m, int is, short srcln[], uchar reach[])
{	Trans *z;

	if (is >= m || !trans[n][is]
	||  is <= 0 || reach[is] == 0)
		return;
	reach[is] = 0;
	if (state_tables)
	for (z = trans[n][is]; z; z = z->nxt)
	{	if (dodot)
			dot_crack(n, is, z);
		else
			crack(n, is, z, srcln);
	}

	for (z = trans[n][is]; z; z = z->nxt)
	{
#ifdef HAS_UNLESS
		int i, j;
#endif
		tagtable(n, m, z->st, srcln, reach);
#ifdef HAS_UNLESS
		for (i = 0; i < HAS_UNLESS; i++)
		{	j = trans[n][is]->escp[i];
			if (!j) break;
			tagtable(n, m, j, srcln, reach);
		}
#endif
	}
}

extern Trans *t_id_lkup[];

void
dfs_table(int n, int m, int is, short srcln[], uchar reach[], uchar lpstate[])
{	Trans *z;

	if (is >= m || is <= 0 || !trans[n][is])
		return;
	if ((reach[is] & (4|8|16)) != 0)
	{	if ((reach[is] & (8|16)) == 16)	/* on stack, not yet recorded */
		{	lpstate[is] = 1;
			reach[is] |= 8; /* recorded */
			if (state_tables && verbose)
			{	printf("state %d line %d is a loopstate\n", is, srcln[is]);
		}	}
		return;
	}
	reach[is] |= (4|16);	/* visited | onstack */
	for (z = trans[n][is]; z; z = z->nxt)
	{	t_id_lkup[z->t_id] = z;
#ifdef HAS_UNLESS
		int i, j;
#endif
		dfs_table(n, m, z->st, srcln, reach, lpstate);
#ifdef HAS_UNLESS
		for (i = 0; i < HAS_UNLESS; i++)
		{	j = trans[n][is]->escp[i];
			if (!j) break;
			dfs_table(n, m, j, srcln, reach, lpstate);
		}
#endif
	}
	reach[is] &= ~16; /* no longer on stack */
}
void
do_dfs(int n, int m, int is, short srcln[], uchar reach[], uchar lpstate[])
{	int i;
	dfs_table(n, m, is, srcln, reach, lpstate);
	for (i = 0; i < m; i++)
		reach[i] &= ~(4|8|16);
}
void
crack(int n, int j, Trans *z, short srcln[])
{	int i;

	if (!z) return;
	printf("	state %3d -(tr %3d)-> state %3d  ",
		j, z->forw, z->st);
	printf("[id %3d tp %3d", z->t_id, z->tpe[0]);
	if (z->tpe[1]) printf(",%d", z->tpe[1]);
#ifdef HAS_UNLESS
	if (z->e_trans)
		printf(" org %3d", z->e_trans);
	else if (state_tables >= 2)
	for (i = 0; i < HAS_UNLESS; i++)
	{	if (!z->escp[i]) break;
		printf(" esc %d", z->escp[i]);
	}
#endif
	printf("]");
	printf(" [%s%s%s%s%s] %s:%d => ",
		z->atom&6?"A":z->atom&32?"D":"-",
		accpstate[n][j]?"a" :"-",
		stopstate[n][j]?"e" : "-",
		progstate[n][j]?"p" : "-",
		z->atom & 8 ?"L":"G",
		PanSource, srcln[j]);
	for (i = 0; z->tp[i]; i++)
		if (z->tp[i] == '\n')
			printf("\\n");
		else
			putchar(z->tp[i]);
	if (verbose && z->qu[0])
	{	printf("\t[");
		for (i = 0; i < 6; i++)
			if (z->qu[i])
				printf("(%d,%d)",
				z->qu[i], z->ty[i]);
		printf("]");
	}
	printf("\n");
	fflush(stdout);
}
/* spin -a m.pml; cc -o pan pan.c; ./pan -D | dot -Tps > foo.ps; ps2pdf foo.ps */
void
dot_crack(int n, int j, Trans *z)
{	int i;

	if (!z) return;
	printf("	S%d -> S%d  [color=black", j, z->st);

	if (z->atom&6) printf(",style=dashed");
	else if (z->atom&32) printf(",style=dotted");
	else if (z->atom&8) printf(",style=solid");
	else printf(",style=bold");

	printf(",label=\"");
	for (i = 0; z->tp[i]; i++)
	{	if (z->tp[i] == '\\'
		&&  z->tp[i+1] == 'n')
		{	i++; printf(" ");
		} else
		{	putchar(z->tp[i]);
	}	}
	printf("\"];\n");
	if (accpstate[n][j]) printf("  S%d [color=red,style=bold];\n", j);
	else if (progstate[n][j]) printf("  S%d [color=green,style=bold];\n", j);
	if (stopstate[n][j]) printf("  S%d [color=blue,style=bold,shape=box];\n", j);
}

#ifdef VAR_RANGES
#define BYTESIZE	32	/* 2^8 : 2^3 = 256:8 = 32 */

typedef struct Vr_Ptr {
	char	*nm;
	uchar	vals[BYTESIZE];
	struct Vr_Ptr *nxt;
} Vr_Ptr;
Vr_Ptr *ranges = (Vr_Ptr *) 0;

void
logval(char *s, int v)
{	Vr_Ptr *tmp;

	if (v<0 || v > 255) return;
	for (tmp = ranges; tmp; tmp = tmp->nxt)
		if (!strcmp(tmp->nm, s))
			goto found;
	tmp = (Vr_Ptr *) emalloc(sizeof(Vr_Ptr));
	tmp->nxt = ranges;
	ranges = tmp;
	tmp->nm = s;
found:
	tmp->vals[(v)/8] |= 1<<((v)%8);
}

void
dumpval(uchar X[], int range)
{	int w, x, i, j = -1;

	for (w = i = 0; w < range; w++)
	for (x = 0; x < 8; x++, i++)
	{
from:		if ((X[w] & (1<<x)))
		{	printf("%d", i);
			j = i;
			goto upto;
	}	}
	return;
	for (w = 0; w < range; w++)
	for (x = 0; x < 8; x++, i++)
	{
upto:		if (!(X[w] & (1<<x)))
		{	if (i-1 == j)
				printf(", ");
			else
				printf("-%d, ", i-1);
			goto from;
	}	}
	if (j >= 0 && j != 255)
		printf("-255");
}

void
dumpranges(void)
{	Vr_Ptr *tmp;
	printf("\nValues assigned within ");
	printf("interval [0..255]:\n");
	for (tmp = ranges; tmp; tmp = tmp->nxt)
	{	printf("\t%s\t: ", tmp->nm);
		dumpval(tmp->vals, BYTESIZE);
		printf("\n");
	}
}
#endif

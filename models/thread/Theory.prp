/*
 * This file contains the theory of ADAPRO, expressed in the language of linear
 * temporal logic (notated in Promela, with the help of CPP macros). It defines 
 * the formal specification of the framework.
 */
/******************************************************************************/

/**
 * Expresses the predicate that Supervisor is in the given state.
 */
#define supervisor_in_state(state)                                             \
    states[0] == state

/**
 * Expresses the predicate that all Workers are in the given state.
 */
#define all_workers_in_state(state)                                            \
    states[1] == state && states[2] == state

/**
 * Expresses the predicate that there exists a Worker in the given state.
 */
#define some_workers_in_state(state)                                           \
    states[1] == state || states[2] == state

/**
 * Expresses the predicate that Supervisor is either in the state STOPPING or
 * ABORTING.
 */
#define supervisor_halting                                                     \
    states[0] == STOPPING || states[0] == ABORTING

/**
 * Expresses the predicate that Supervisor is either in the state STOPPED or
 * ABORTED.
 */
#define supervisor_halted                                                      \
    states[0] == STOPPED || states[0] == ABORTED

/**
 * Expresses the predicate that every Worker is either in the state STOPPED or
 * ABORTED.
 */
#define all_workers_halted                                                     \
    (states[1] == STOPPED || states[1] == ABORTED || states[1] == 0) &&        \
    (states[2] == STOPPED || states[2] == ABORTED || states[2] == 0)

/**
 * Expresses the predicate that Thread number i is in the state RUNNING with
 * command CONTINUE.
 */
#define executable(i)                                                          \
    states[i] == RUNNING && commands[i] == CONTINUE 

/**
 * Expresses the predicate that, infinitely often, every executable Thread gets
 * to execute its user-defined program logic.
 */
#define all_alive                                                              \
    []<>((executable(0)) -> (executing[0])) &&                                 \
    []<>((executable(1)) -> (executing[1])) &&                                 \
    []<>((executable(2)) -> (executing[2]))

/**
 * Expresses weak fairness, i.e. that every Thread that is persistently 
 * executable, will eventually get to execute its action.
 */
#define weak_fairness                                                          \
    (<>[](executable(0)) -> []<>(executing[0])) &&                             \
    (<>[](executable(1)) -> []<>(executing[1])) &&                             \
    (<>[](executable(2)) -> []<>(executing[2]))
/**
 * Expresses strong fairness, i.e. that every Thread that is infinitely often 
 * executable, will eventually get to execute its action.
 */
#define strong_fairness                                                        \
    ([]<>(executable(0)) -> []<>(executing[0])) &&                             \
    ([]<>(executable(1)) -> []<>(executing[1])) &&                             \
    ([]<>(executable(2)) -> []<>(executing[2]))

/**
 * Expresses the predicate that the initial state of any constructed Thread is 
 * READY and that its only possible successor state is STARTING. (This means 
 * that READY is a safe state, i.e. cannot directly lead into a transition to 
 * ABORTING.)
 */
#define READY_property(i)                                                      \
    states[i] == 0 U ((states[i] == READY) W (states[i] == STARTING))

/**
 * Expresses the predicate that the only possible successor states of STARTING
 * are RUNNING, PAUSED, and ABORTING. (Note that STARTING is not a safe state,
 * because it has an outgoing transition to ABORTING.)
 */
#define STARTING_property(i)                                                   \
    states[i] == STARTING -> (states[i] == STARTING U                          \
        (states[i] == RUNNING || states[i] == PAUSED ||                        \
         states[i] == STOPPING || states[i] == ABORTING))

/**
 * Expresses the predicate that the only possible successor states of RUNNING
 * are RUNNING, PAUSED, STOPPING, STOPPED. A Thread is allowed to stay in the
 * RUNNING state forever. (Note that RUNNING is not a safe state, since it has
 * an outgoing transition to ABORTING.)
 */
#define RUNNING_property(i)                                                    \
    states[i] == RUNNING -> ((states[i] == RUNNING) W                          \
    (states[i] == PAUSED || states[i] == STOPPING || states[i] == ABORTING))

/**
 * Expresses the predicate that the only possible successor states of PAUSED are
 * RUNNING and STOPPING. (PAUSED is a safe state, because it doesn't have an
 * outgoing transition to ABORTING.)
 */
#define PAUSED_property(i)                                                     \
    states[i] == PAUSED ->                                                     \
    ((states[i] == PAUSED) W (states[i] == RUNNING || states[i] == STOPPING))

/**
 * Expresses the predicate that the only possible successor states of STOPPING
 * are STOPPED and ABORTING. (STOPPING is not a safe state because it has an
 * outgoing transition to ABORTING.)
 */
#define STOPPING_property(i)                                                   \
    [](states[i] == STOPPING -> (states[i] == STOPPING U                       \
        (states[i] == STOPPED || states[i] == ABORTING)))

/**
 * Expresses the predicate that the only possible successor state of ABORTING is
 * ABORTED. (Since it doesn't have a loop, it is a safe state.)
 */
#define ABORTING_property(i)                                                   \
    [](states[i] == ABORTING -> (states[i] == ABORTING U                       \
        (states[i] == ABORTED)))

/**
 * Expresses the predicate that the values in the array lhs that equal to rhs
 * remain constant.
 */
#define final(lhs, rhs)                                                        \
    ((lhs[0] == rhs) -> ((lhs[0] == rhs) W [](lhs[0] == 0))) &&                \
    ((lhs[1] == rhs) -> ((lhs[1] == rhs) W [](lhs[1] == 0))) &&                \
    ((lhs[2] == rhs) -> ((lhs[2] == rhs) W [](lhs[2] == 0)))

/******************************************************************************/

/**
 * See READY_property.
 */
ltl fsm_ready
{
    (READY_property(0)) && (READY_property(1)) && (READY_property(2))
}

/**
 * See STARTING_property.
 */
ltl fsm_starting
{
    []((STARTING_property(0)) && (STARTING_property(1)) && (STARTING_property(2)))
}

/**
 * See RUNNING_property.
 */
ltl fsm_running
{
    []((RUNNING_property(0)) && (RUNNING_property(1)) && (RUNNING_property(2)))
}

/**
 * See PAUSED_property.
 */
ltl fsm_paused
{
    []((PAUSED_property(0)) && (PAUSED_property(1)) && (PAUSED_property(2)))
}

/**
 * See STOPPING_property.
 */
ltl fsm_stopping
{
    []((STOPPING_property(0)) && (STOPPING_property(1)) && (STOPPING_property(2)))
}

/**
 * Expresses the predicate that the state STOPPED is a fixed point state for any
 * Thread.
 */
ltl fsm_stopped
{
    [](final(states, STOPPED))
}

/**
 * See ABORTING_property.
 */
ltl fsm_aborting
{
    []((ABORTING_property(0)) && (ABORTING_property(1)) && (ABORTING_property(2)))
}

/**
 * Expresses the predicate that the state ABORTED is a fixed point state for any
 * Thread.
 */
ltl fsm_aborted
{
    [](final(states, ABORTED))
}

/**
 * Expresses the predicate that the command ABORT is a fixed point command for
 * any Thread.
 */
ltl abort_is_undoable
{
    [](final(commands, ABORT))
}

/**
 * Expresses the predicate that Supervisor is the first Thread that will be
 * created.
 */
ltl supervisor_is_the_first_thread
{
    []((supervisor_in_state(0)) -> (all_workers_in_state(0)))
}

/**
 * Expresses the predicate that the only situation in which a Worker is in state 
 * READY is the one where Supervisor is in state STARTING. The justification for
 * this claim is that Supervisor is the Thread that constructs Workers, i.e.
 * causes them to obtain their initial states and commands.
 */
ltl supervisor_constructs_workers
{
    []((some_workers_in_state(READY)) -> !(supervisor_in_state(0)))
}

/**
 * Expresses the predicate that once all workers have stopped, Supervisor
 * eventually stops, unless an external command pauses Supervisor indefinitely.
 * (Without external interference, Supervisor is always guaranteed to eventually 
 * stop after all workers have stopped.)
 */
ltl supervisor_stops_after_all_workers_stop
{
    []((all_workers_in_state(STOPPED)) -> 
        ([]<>(supervisor_in_state(PAUSED)) || <>(supervisor_in_state(STOPPED))))
}

/**
 * Expresses the predicate, that unless paused by an external command, 
 * Supervisor will eventually halt after one or more Workers have aborted.
 */
ltl supervisor_stops_after_some_workers_abort
{
    []((some_workers_in_state(ABORTED)) -> 
        ([]<>(supervisor_in_state(PAUSED)) || <>(supervisor_in_state(STOPPED))))
}

/**
 * Expresses the predicate that Supervisor never aborts.
 */
ltl supervisor_never_aborts {!<>(states[0] == ABORTED || commands[0] == ABORT)}

/**
 * Expresses the predicate that Supervisor is the last Thread to halt.
 */
ltl supervisor_halts_last
{
    []((supervisor_halting) -> <>(all_workers_halted))
}

ltl liveness
{
    (all_alive) W (supervisor_halting)
}

ltl fairness
{
    (strong_fairness)
}
#define rand	pan_rand
#define pthread_equal(a,b)	((a)==(b))
#if defined(HAS_CODE) && defined(VERBOSE)
	#ifdef BFS_PAR
		bfs_printf("Pr: %d Tr: %d\n", II, t->forw);
	#else
		cpu_printf("Pr: %d Tr: %d\n", II, t->forw);
	#endif
#endif
	switch (t->forw) {
	default: Uerror("bad forward move");
	case 0:	/* if without executable clauses */
		continue;
	case 1: /* generic 'goto' or 'skip' */
		IfNotBlocked
		_m = 3; goto P999;
	case 2: /* generic 'else' */
		IfNotBlocked
		if (trpt->o_pm&1) continue;
		_m = 3; goto P999;

		 /* CLAIM fairness */
	case 3: // STATE 1 - _spin_nvr.tmp:1516 - [((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][1] = 1;
		if (!(( !(((int)now.executing[2]))&&((now.states[2]==11)&&(now.commands[2]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4: // STATE 3 - _spin_nvr.tmp:1517 - [(!(executing[2]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][3] = 1;
		if (!( !(((int)now.executing[2]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 5: // STATE 7 - _spin_nvr.tmp:1519 - [((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported7 = 0;
			if (verbose && !reported7)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported7 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported7 = 0;
			if (verbose && !reported7)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported7 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][7] = 1;
		if (!(( !(((int)now.executing[1]))&&((now.states[1]==11)&&(now.commands[1]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 6: // STATE 9 - _spin_nvr.tmp:1520 - [(!(executing[1]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported9 = 0;
			if (verbose && !reported9)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported9 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported9 = 0;
			if (verbose && !reported9)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported9 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][9] = 1;
		if (!( !(((int)now.executing[1]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 7: // STATE 13 - _spin_nvr.tmp:1522 - [((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported13 = 0;
			if (verbose && !reported13)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported13 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported13 = 0;
			if (verbose && !reported13)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported13 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][13] = 1;
		if (!(( !(((int)now.executing[0]))&&((now.states[0]==11)&&(now.commands[0]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 8: // STATE 15 - _spin_nvr.tmp:1523 - [(!(executing[0]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][15] = 1;
		if (!( !(((int)now.executing[0]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 9: // STATE 22 - _spin_nvr.tmp:1528 - [((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][22] = 1;
		if (!(( !(((int)now.executing[2]))&&((now.states[2]==11)&&(now.commands[2]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 10: // STATE 24 - _spin_nvr.tmp:1529 - [(!(executing[2]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][24] = 1;
		if (!( !(((int)now.executing[2]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 11: // STATE 29 - _spin_nvr.tmp:1533 - [(!(executing[2]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported29 = 0;
			if (verbose && !reported29)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported29 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported29 = 0;
			if (verbose && !reported29)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported29 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][29] = 1;
		if (!( !(((int)now.executing[2]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 12: // STATE 34 - _spin_nvr.tmp:1537 - [((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][34] = 1;
		if (!(( !(((int)now.executing[1]))&&((now.states[1]==11)&&(now.commands[1]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 13: // STATE 36 - _spin_nvr.tmp:1538 - [(!(executing[1]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][36] = 1;
		if (!( !(((int)now.executing[1]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 14: // STATE 41 - _spin_nvr.tmp:1542 - [(!(executing[1]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported41 = 0;
			if (verbose && !reported41)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported41 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported41 = 0;
			if (verbose && !reported41)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported41 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][41] = 1;
		if (!( !(((int)now.executing[1]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 15: // STATE 46 - _spin_nvr.tmp:1546 - [((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported46 = 0;
			if (verbose && !reported46)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported46 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported46 = 0;
			if (verbose && !reported46)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported46 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][46] = 1;
		if (!(( !(((int)now.executing[0]))&&((now.states[0]==11)&&(now.commands[0]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 16: // STATE 48 - _spin_nvr.tmp:1547 - [(!(executing[0]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported48 = 0;
			if (verbose && !reported48)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported48 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported48 = 0;
			if (verbose && !reported48)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported48 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][48] = 1;
		if (!( !(((int)now.executing[0]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 17: // STATE 53 - _spin_nvr.tmp:1551 - [(!(executing[0]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported53 = 0;
			if (verbose && !reported53)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported53 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported53 = 0;
			if (verbose && !reported53)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported53 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][53] = 1;
		if (!( !(((int)now.executing[0]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 18: // STATE 58 - _spin_nvr.tmp:1555 - [((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][58] = 1;
		if (!(( !(((int)now.executing[2]))&&((now.states[2]==11)&&(now.commands[2]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 19: // STATE 60 - _spin_nvr.tmp:1556 - [(!(executing[2]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported60 = 0;
			if (verbose && !reported60)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported60 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported60 = 0;
			if (verbose && !reported60)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported60 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][60] = 1;
		if (!( !(((int)now.executing[2]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 20: // STATE 65 - _spin_nvr.tmp:1560 - [(!(executing[2]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported65 = 0;
			if (verbose && !reported65)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported65 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported65 = 0;
			if (verbose && !reported65)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported65 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][65] = 1;
		if (!( !(((int)now.executing[2]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 21: // STATE 67 - _spin_nvr.tmp:1561 - [((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][67] = 1;
		if (!(( !(((int)now.executing[2]))&&((now.states[2]==11)&&(now.commands[2]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 22: // STATE 72 - _spin_nvr.tmp:1565 - [(!(executing[2]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported72 = 0;
			if (verbose && !reported72)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported72 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported72 = 0;
			if (verbose && !reported72)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported72 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][72] = 1;
		if (!( !(((int)now.executing[2]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 23: // STATE 76 - _spin_nvr.tmp:1567 - [((!(executing[2])&&((states[2]==RUNNING)&&(commands[2]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported76 = 0;
			if (verbose && !reported76)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported76 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported76 = 0;
			if (verbose && !reported76)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported76 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][76] = 1;
		if (!(( !(((int)now.executing[2]))&&((now.states[2]==11)&&(now.commands[2]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 24: // STATE 81 - _spin_nvr.tmp:1571 - [((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported81 = 0;
			if (verbose && !reported81)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported81 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported81 = 0;
			if (verbose && !reported81)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported81 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][81] = 1;
		if (!(( !(((int)now.executing[1]))&&((now.states[1]==11)&&(now.commands[1]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 25: // STATE 83 - _spin_nvr.tmp:1572 - [(!(executing[1]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported83 = 0;
			if (verbose && !reported83)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported83 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported83 = 0;
			if (verbose && !reported83)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported83 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][83] = 1;
		if (!( !(((int)now.executing[1]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 26: // STATE 88 - _spin_nvr.tmp:1576 - [(!(executing[1]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported88 = 0;
			if (verbose && !reported88)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported88 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported88 = 0;
			if (verbose && !reported88)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported88 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][88] = 1;
		if (!( !(((int)now.executing[1]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 27: // STATE 90 - _spin_nvr.tmp:1577 - [((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported90 = 0;
			if (verbose && !reported90)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported90 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported90 = 0;
			if (verbose && !reported90)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported90 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][90] = 1;
		if (!(( !(((int)now.executing[1]))&&((now.states[1]==11)&&(now.commands[1]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 28: // STATE 95 - _spin_nvr.tmp:1581 - [(!(executing[1]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][95] = 1;
		if (!( !(((int)now.executing[1]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 29: // STATE 99 - _spin_nvr.tmp:1583 - [((!(executing[1])&&((states[1]==RUNNING)&&(commands[1]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported99 = 0;
			if (verbose && !reported99)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported99 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported99 = 0;
			if (verbose && !reported99)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported99 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][99] = 1;
		if (!(( !(((int)now.executing[1]))&&((now.states[1]==11)&&(now.commands[1]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 30: // STATE 104 - _spin_nvr.tmp:1587 - [((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported104 = 0;
			if (verbose && !reported104)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported104 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported104 = 0;
			if (verbose && !reported104)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported104 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][104] = 1;
		if (!(( !(((int)now.executing[0]))&&((now.states[0]==11)&&(now.commands[0]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 31: // STATE 106 - _spin_nvr.tmp:1588 - [(!(executing[0]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported106 = 0;
			if (verbose && !reported106)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported106 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported106 = 0;
			if (verbose && !reported106)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported106 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][106] = 1;
		if (!( !(((int)now.executing[0]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 32: // STATE 111 - _spin_nvr.tmp:1592 - [(!(executing[0]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][111] = 1;
		if (!( !(((int)now.executing[0]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 33: // STATE 113 - _spin_nvr.tmp:1593 - [((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported113 = 0;
			if (verbose && !reported113)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported113 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported113 = 0;
			if (verbose && !reported113)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported113 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][113] = 1;
		if (!(( !(((int)now.executing[0]))&&((now.states[0]==11)&&(now.commands[0]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 34: // STATE 118 - _spin_nvr.tmp:1597 - [(!(executing[0]))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported118 = 0;
			if (verbose && !reported118)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported118 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported118 = 0;
			if (verbose && !reported118)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported118 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][118] = 1;
		if (!( !(((int)now.executing[0]))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 35: // STATE 122 - _spin_nvr.tmp:1599 - [((!(executing[0])&&((states[0]==RUNNING)&&(commands[0]==CONTINUE))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][122] = 1;
		if (!(( !(((int)now.executing[0]))&&((now.states[0]==11)&&(now.commands[0]==8)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 36: // STATE 127 - _spin_nvr.tmp:1601 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[19][127] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM liveness */
	case 37: // STATE 1 - _spin_nvr.tmp:1391 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][1] = 1;
		if (!(( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 38: // STATE 3 - _spin_nvr.tmp:1392 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][3] = 1;
		if (!(( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 39: // STATE 5 - _spin_nvr.tmp:1393 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][5] = 1;
		if (!(( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 40: // STATE 7 - _spin_nvr.tmp:1394 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported7 = 0;
			if (verbose && !reported7)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported7 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported7 = 0;
			if (verbose && !reported7)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported7 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][7] = 1;
		if (!(( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 41: // STATE 9 - _spin_nvr.tmp:1395 - [(!(((states[0]==STOPPING)||(states[0]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported9 = 0;
			if (verbose && !reported9)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported9 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported9 = 0;
			if (verbose && !reported9)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported9 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][9] = 1;
		if (!( !(((now.states[0]==7)||(now.states[0]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 42: // STATE 11 - _spin_nvr.tmp:1396 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported11 = 0;
			if (verbose && !reported11)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported11 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported11 = 0;
			if (verbose && !reported11)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported11 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][11] = 1;
		if (!(( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 43: // STATE 13 - _spin_nvr.tmp:1397 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported13 = 0;
			if (verbose && !reported13)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported13 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported13 = 0;
			if (verbose && !reported13)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported13 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][13] = 1;
		if (!(( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 44: // STATE 15 - _spin_nvr.tmp:1398 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][15] = 1;
		if (!(( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 45: // STATE 17 - _spin_nvr.tmp:1399 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][17] = 1;
		if (!(( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 46: // STATE 19 - _spin_nvr.tmp:1400 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported19 = 0;
			if (verbose && !reported19)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported19 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported19 = 0;
			if (verbose && !reported19)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported19 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][19] = 1;
		if (!(( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 47: // STATE 21 - _spin_nvr.tmp:1401 - [(!(((states[0]==STOPPING)||(states[0]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported21 = 0;
			if (verbose && !reported21)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported21 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported21 = 0;
			if (verbose && !reported21)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported21 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][21] = 1;
		if (!( !(((now.states[0]==7)||(now.states[0]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 48: // STATE 26 - _spin_nvr.tmp:1405 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][26] = 1;
		if (!(( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 49: // STATE 28 - _spin_nvr.tmp:1406 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][28] = 1;
		if (!(( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 50: // STATE 30 - _spin_nvr.tmp:1407 - [(((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][30] = 1;
		if (!((( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 51: // STATE 32 - _spin_nvr.tmp:1408 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][32] = 1;
		if (!((( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 52: // STATE 34 - _spin_nvr.tmp:1409 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][34] = 1;
		if (!(( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 53: // STATE 39 - _spin_nvr.tmp:1413 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported39 = 0;
			if (verbose && !reported39)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported39 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported39 = 0;
			if (verbose && !reported39)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported39 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][39] = 1;
		if (!(( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2]))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 54: // STATE 44 - _spin_nvr.tmp:1417 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][44] = 1;
		if (!(( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2]))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 55: // STATE 49 - _spin_nvr.tmp:1421 - [(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported49 = 0;
			if (verbose && !reported49)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported49 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported49 = 0;
			if (verbose && !reported49)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported49 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][49] = 1;
		if (!( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 56: // STATE 54 - _spin_nvr.tmp:1425 - [(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported54 = 0;
			if (verbose && !reported54)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported54 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported54 = 0;
			if (verbose && !reported54)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported54 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][54] = 1;
		if (!( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 57: // STATE 59 - _spin_nvr.tmp:1429 - [(((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported59 = 0;
			if (verbose && !reported59)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported59 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported59 = 0;
			if (verbose && !reported59)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported59 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][59] = 1;
		if (!((( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 58: // STATE 61 - _spin_nvr.tmp:1430 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][61] = 1;
		if (!(( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 59: // STATE 63 - _spin_nvr.tmp:1431 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][63] = 1;
		if (!(( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 60: // STATE 65 - _spin_nvr.tmp:1432 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported65 = 0;
			if (verbose && !reported65)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported65 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported65 = 0;
			if (verbose && !reported65)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported65 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][65] = 1;
		if (!((( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1]))))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 61: // STATE 67 - _spin_nvr.tmp:1433 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][67] = 1;
		if (!(( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 62: // STATE 72 - _spin_nvr.tmp:1437 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported72 = 0;
			if (verbose && !reported72)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported72 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported72 = 0;
			if (verbose && !reported72)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported72 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][72] = 1;
		if (!(( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1]))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 63: // STATE 77 - _spin_nvr.tmp:1441 - [(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported77 = 0;
			if (verbose && !reported77)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported77 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported77 = 0;
			if (verbose && !reported77)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported77 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][77] = 1;
		if (!( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 64: // STATE 82 - _spin_nvr.tmp:1445 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][82] = 1;
		if (!((( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 65: // STATE 84 - _spin_nvr.tmp:1446 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][84] = 1;
		if (!(( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 66: // STATE 86 - _spin_nvr.tmp:1447 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported86 = 0;
			if (verbose && !reported86)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported86 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported86 = 0;
			if (verbose && !reported86)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported86 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][86] = 1;
		if (!((( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1]))))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 67: // STATE 88 - _spin_nvr.tmp:1448 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported88 = 0;
			if (verbose && !reported88)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported88 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported88 = 0;
			if (verbose && !reported88)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported88 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][88] = 1;
		if (!(( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 68: // STATE 90 - _spin_nvr.tmp:1449 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported90 = 0;
			if (verbose && !reported90)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported90 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported90 = 0;
			if (verbose && !reported90)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported90 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][90] = 1;
		if (!(( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 69: // STATE 95 - _spin_nvr.tmp:1453 - [(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][95] = 1;
		if (!( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 70: // STATE 97 - _spin_nvr.tmp:1454 - [(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][97] = 1;
		if (!( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 71: // STATE 102 - _spin_nvr.tmp:1458 - [(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported102 = 0;
			if (verbose && !reported102)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported102 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported102 = 0;
			if (verbose && !reported102)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported102 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][102] = 1;
		if (!( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 72: // STATE 104 - _spin_nvr.tmp:1459 - [(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported104 = 0;
			if (verbose && !reported104)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported104 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported104 = 0;
			if (verbose && !reported104)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported104 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][104] = 1;
		if (!( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 73: // STATE 109 - _spin_nvr.tmp:1463 - [(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported109 = 0;
			if (verbose && !reported109)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported109 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported109 = 0;
			if (verbose && !reported109)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported109 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][109] = 1;
		if (!( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 74: // STATE 111 - _spin_nvr.tmp:1464 - [(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][111] = 1;
		if (!( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 75: // STATE 116 - _spin_nvr.tmp:1468 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported116 = 0;
			if (verbose && !reported116)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported116 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported116 = 0;
			if (verbose && !reported116)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported116 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][116] = 1;
		if (!(( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 76: // STATE 118 - _spin_nvr.tmp:1469 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported118 = 0;
			if (verbose && !reported118)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported118 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported118 = 0;
			if (verbose && !reported118)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported118 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][118] = 1;
		if (!(( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 77: // STATE 120 - _spin_nvr.tmp:1470 - [(((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][120] = 1;
		if (!((( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 78: // STATE 122 - _spin_nvr.tmp:1471 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][122] = 1;
		if (!((( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 79: // STATE 124 - _spin_nvr.tmp:1472 - [((!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][124] = 1;
		if (!(( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 80: // STATE 129 - _spin_nvr.tmp:1476 - [(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported129 = 0;
			if (verbose && !reported129)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported129 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported129 = 0;
			if (verbose && !reported129)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported129 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][129] = 1;
		if (!( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 81: // STATE 131 - _spin_nvr.tmp:1477 - [(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][131] = 1;
		if (!( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 82: // STATE 133 - _spin_nvr.tmp:1478 - [(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported133 = 0;
			if (verbose && !reported133)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported133 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported133 = 0;
			if (verbose && !reported133)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported133 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][133] = 1;
		if (!( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 83: // STATE 140 - _spin_nvr.tmp:1483 - [(((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported140 = 0;
			if (verbose && !reported140)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported140 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported140 = 0;
			if (verbose && !reported140)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported140 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][140] = 1;
		if (!((( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 84: // STATE 142 - _spin_nvr.tmp:1484 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported142 = 0;
			if (verbose && !reported142)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported142 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported142 = 0;
			if (verbose && !reported142)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported142 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][142] = 1;
		if (!(( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 85: // STATE 144 - _spin_nvr.tmp:1485 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported144 = 0;
			if (verbose && !reported144)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported144 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported144 = 0;
			if (verbose && !reported144)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported144 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][144] = 1;
		if (!(( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 86: // STATE 146 - _spin_nvr.tmp:1486 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported146 = 0;
			if (verbose && !reported146)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported146 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported146 = 0;
			if (verbose && !reported146)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported146 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][146] = 1;
		if (!((( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1]))))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 87: // STATE 148 - _spin_nvr.tmp:1487 - [((!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported148 = 0;
			if (verbose && !reported148)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported148 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported148 = 0;
			if (verbose && !reported148)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported148 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][148] = 1;
		if (!(( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 88: // STATE 153 - _spin_nvr.tmp:1491 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported153 = 0;
			if (verbose && !reported153)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported153 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported153 = 0;
			if (verbose && !reported153)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported153 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][153] = 1;
		if (!((( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2]))))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 89: // STATE 155 - _spin_nvr.tmp:1492 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported155 = 0;
			if (verbose && !reported155)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported155 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported155 = 0;
			if (verbose && !reported155)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported155 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][155] = 1;
		if (!(( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 90: // STATE 157 - _spin_nvr.tmp:1493 - [(((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported157 = 0;
			if (verbose && !reported157)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported157 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported157 = 0;
			if (verbose && !reported157)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported157 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][157] = 1;
		if (!((( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1]))))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 91: // STATE 159 - _spin_nvr.tmp:1494 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][159] = 1;
		if (!(( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 92: // STATE 161 - _spin_nvr.tmp:1495 - [((!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0]))&&!(((states[0]==STOPPING)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported161 = 0;
			if (verbose && !reported161)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported161 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported161 = 0;
			if (verbose && !reported161)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported161 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][161] = 1;
		if (!(( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))&& !(((now.states[0]==7)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 93: // STATE 166 - _spin_nvr.tmp:1499 - [(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported166 = 0;
			if (verbose && !reported166)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported166 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported166 = 0;
			if (verbose && !reported166)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported166 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][166] = 1;
		if (!( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 94: // STATE 168 - _spin_nvr.tmp:1500 - [(!((!(((states[2]==RUNNING)&&(commands[2]==CONTINUE)))||executing[2])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported168 = 0;
			if (verbose && !reported168)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported168 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported168 = 0;
			if (verbose && !reported168)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported168 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][168] = 1;
		if (!( !(( !(((now.states[2]==11)&&(now.commands[2]==8)))||((int)now.executing[2])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 95: // STATE 173 - _spin_nvr.tmp:1504 - [(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported173 = 0;
			if (verbose && !reported173)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported173 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported173 = 0;
			if (verbose && !reported173)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported173 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][173] = 1;
		if (!( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 96: // STATE 175 - _spin_nvr.tmp:1505 - [(!((!(((states[1]==RUNNING)&&(commands[1]==CONTINUE)))||executing[1])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported175 = 0;
			if (verbose && !reported175)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported175 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported175 = 0;
			if (verbose && !reported175)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported175 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][175] = 1;
		if (!( !(( !(((now.states[1]==11)&&(now.commands[1]==8)))||((int)now.executing[1])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 97: // STATE 180 - _spin_nvr.tmp:1509 - [(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported180 = 0;
			if (verbose && !reported180)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported180 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported180 = 0;
			if (verbose && !reported180)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported180 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][180] = 1;
		if (!( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 98: // STATE 182 - _spin_nvr.tmp:1510 - [(!((!(((states[0]==RUNNING)&&(commands[0]==CONTINUE)))||executing[0])))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported182 = 0;
			if (verbose && !reported182)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported182 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported182 = 0;
			if (verbose && !reported182)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported182 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][182] = 1;
		if (!( !(( !(((now.states[0]==11)&&(now.commands[0]==8)))||((int)now.executing[0])))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 99: // STATE 187 - _spin_nvr.tmp:1512 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported187 = 0;
			if (verbose && !reported187)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported187 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported187 = 0;
			if (verbose && !reported187)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported187 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[18][187] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM supervisor_halts_last */
	case 100: // STATE 1 - _spin_nvr.tmp:1380 - [((!(!(((states[0]==STOPPING)||(states[0]==ABORTING))))&&!(((((states[1]==STOPPED)||(states[1]==ABORTED))||(states[1]==0))&&(((states[2]==STOPPED)||(states[2]==ABORTED))||(states[2]==0))))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[17][1] = 1;
		if (!(( !( !(((now.states[0]==7)||(now.states[0]==4))))&& !(((((now.states[1]==5)||(now.states[1]==3))||(now.states[1]==0))&&(((now.states[2]==5)||(now.states[2]==3))||(now.states[2]==0)))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 101: // STATE 8 - _spin_nvr.tmp:1385 - [(!(((((states[1]==STOPPED)||(states[1]==ABORTED))||(states[1]==0))&&(((states[2]==STOPPED)||(states[2]==ABORTED))||(states[2]==0)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[17][8] = 1;
		if (!( !(((((now.states[1]==5)||(now.states[1]==3))||(now.states[1]==0))&&(((now.states[2]==5)||(now.states[2]==3))||(now.states[2]==0))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 102: // STATE 13 - _spin_nvr.tmp:1387 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported13 = 0;
			if (verbose && !reported13)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported13 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported13 = 0;
			if (verbose && !reported13)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported13 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[17][13] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM supervisor_never_aborts */
	case 103: // STATE 1 - _spin_nvr.tmp:1371 - [(((states[0]==ABORTED)||(commands[0]==ABORT)))] (6:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[16][1] = 1;
		if (!(((now.states[0]==3)||(now.commands[0]==1))))
			continue;
		/* merge: assert(!(((states[0]==ABORTED)||(commands[0]==ABORT))))(0, 2, 6) */
		reached[16][2] = 1;
		spin_assert( !(((now.states[0]==3)||(now.commands[0]==1))), " !(((states[0]==3)||(commands[0]==1)))", II, tt, t);
		/* merge: .(goto)(0, 7, 6) */
		reached[16][7] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 104: // STATE 10 - _spin_nvr.tmp:1376 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[16][10] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM supervisor_stops_after_some_workers_abort */
	case 105: // STATE 1 - _spin_nvr.tmp:1354 - [(((!(!(((states[1]==ABORTED)||(states[2]==ABORTED))))&&!((states[0]==PAUSED)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[15][1] = 1;
		if (!((( !( !(((now.states[1]==3)||(now.states[2]==3))))&& !((now.states[0]==10)))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 106: // STATE 3 - _spin_nvr.tmp:1355 - [((!(!(((states[1]==ABORTED)||(states[2]==ABORTED))))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[15][3] = 1;
		if (!(( !( !(((now.states[1]==3)||(now.states[2]==3))))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 107: // STATE 10 - _spin_nvr.tmp:1360 - [((!((states[0]==PAUSED))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[15][10] = 1;
		if (!(( !((now.states[0]==10))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 108: // STATE 15 - _spin_nvr.tmp:1364 - [((!((states[0]==PAUSED))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[15][15] = 1;
		if (!(( !((now.states[0]==10))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 109: // STATE 17 - _spin_nvr.tmp:1365 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[15][17] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 110: // STATE 22 - _spin_nvr.tmp:1367 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[15][22] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM supervisor_stops_after_all_workers_stop */
	case 111: // STATE 1 - _spin_nvr.tmp:1337 - [(((!(!(((states[1]==STOPPED)&&(states[2]==STOPPED))))&&!((states[0]==PAUSED)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[14][1] = 1;
		if (!((( !( !(((now.states[1]==5)&&(now.states[2]==5))))&& !((now.states[0]==10)))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 112: // STATE 3 - _spin_nvr.tmp:1338 - [((!(!(((states[1]==STOPPED)&&(states[2]==STOPPED))))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[14][3] = 1;
		if (!(( !( !(((now.states[1]==5)&&(now.states[2]==5))))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 113: // STATE 10 - _spin_nvr.tmp:1343 - [((!((states[0]==PAUSED))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[14][10] = 1;
		if (!(( !((now.states[0]==10))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 114: // STATE 15 - _spin_nvr.tmp:1347 - [((!((states[0]==PAUSED))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[14][15] = 1;
		if (!(( !((now.states[0]==10))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 115: // STATE 17 - _spin_nvr.tmp:1348 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[14][17] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 116: // STATE 22 - _spin_nvr.tmp:1350 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[14][22] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM supervisor_constructs_workers */
	case 117: // STATE 1 - _spin_nvr.tmp:1328 - [(!((!(((states[1]==READY)||(states[2]==READY)))||!((states[0]==0)))))] (6:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[13][1] = 1;
		if (!( !(( !(((now.states[1]==13)||(now.states[2]==13)))|| !((now.states[0]==0))))))
			continue;
		/* merge: assert(!(!((!(((states[1]==READY)||(states[2]==READY)))||!((states[0]==0))))))(0, 2, 6) */
		reached[13][2] = 1;
		spin_assert( !( !(( !(((now.states[1]==13)||(now.states[2]==13)))|| !((now.states[0]==0))))), " !( !(( !(((states[1]==13)||(states[2]==13)))|| !((states[0]==0)))))", II, tt, t);
		/* merge: .(goto)(0, 7, 6) */
		reached[13][7] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 118: // STATE 10 - _spin_nvr.tmp:1333 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[13][10] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM supervisor_is_the_first_thread */
	case 119: // STATE 1 - _spin_nvr.tmp:1319 - [(!((!((states[0]==0))||((states[1]==0)&&(states[2]==0)))))] (6:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[12][1] = 1;
		if (!( !(( !((now.states[0]==0))||((now.states[1]==0)&&(now.states[2]==0))))))
			continue;
		/* merge: assert(!(!((!((states[0]==0))||((states[1]==0)&&(states[2]==0))))))(0, 2, 6) */
		reached[12][2] = 1;
		spin_assert( !( !(( !((now.states[0]==0))||((now.states[1]==0)&&(now.states[2]==0))))), " !( !(( !((states[0]==0))||((states[1]==0)&&(states[2]==0)))))", II, tt, t);
		/* merge: .(goto)(0, 7, 6) */
		reached[12][7] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 120: // STATE 10 - _spin_nvr.tmp:1324 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[12][10] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM abort_is_undoable */
	case 121: // STATE 1 - _spin_nvr.tmp:1028 - [(((!(!((commands[2]==ABORT)))&&!((commands[2]==0)))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][1] = 1;
		if (!((( !( !((now.commands[2]==1)))&& !((now.commands[2]==0)))&& !((now.commands[2]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 122: // STATE 3 - _spin_nvr.tmp:1029 - [((!(!((commands[2]==ABORT)))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][3] = 1;
		if (!(( !( !((now.commands[2]==1)))&& !((now.commands[2]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 123: // STATE 5 - _spin_nvr.tmp:1030 - [((((!(!((commands[0]==ABORT)))&&!((commands[0]==0)))&&!((commands[0]==ABORT)))||(((!(!((commands[1]==ABORT)))&&!((commands[1]==0)))&&!((commands[1]==ABORT)))||((!(!((commands[2]==ABORT)))&&!((commands[2]==0)))&&!((commands[2]==ABORT))))))] (48:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][5] = 1;
		if (!(((( !( !((now.commands[0]==1)))&& !((now.commands[0]==0)))&& !((now.commands[0]==1)))||((( !( !((now.commands[1]==1)))&& !((now.commands[1]==0)))&& !((now.commands[1]==1)))||(( !( !((now.commands[2]==1)))&& !((now.commands[2]==0)))&& !((now.commands[2]==1)))))))
			continue;
		/* merge: assert(!((((!(!((commands[0]==ABORT)))&&!((commands[0]==0)))&&!((commands[0]==ABORT)))||(((!(!((commands[1]==ABORT)))&&!((commands[1]==0)))&&!((commands[1]==ABORT)))||((!(!((commands[2]==ABORT)))&&!((commands[2]==0)))&&!((commands[2]==ABORT)))))))(0, 6, 48) */
		reached[11][6] = 1;
		spin_assert( !(((( !( !((now.commands[0]==1)))&& !((now.commands[0]==0)))&& !((now.commands[0]==1)))||((( !( !((now.commands[1]==1)))&& !((now.commands[1]==0)))&& !((now.commands[1]==1)))||(( !( !((now.commands[2]==1)))&& !((now.commands[2]==0)))&& !((now.commands[2]==1)))))), " !(((( !( !((commands[0]==1)))&& !((commands[0]==0)))&& !((commands[0]==1)))||((( !( !((commands[1]==1)))&& !((commands[1]==0)))&& !((commands[1]==1)))||(( !( !((commands[2]==1)))&& !((commands[2]==0)))&& !((commands[2]==1))))))", II, tt, t);
		/* merge: .(goto)(0, 49, 48) */
		reached[11][49] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 124: // STATE 8 - _spin_nvr.tmp:1031 - [((!(!((commands[2]==ABORT)))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][8] = 1;
		if (!(( !( !((now.commands[2]==1)))&& !((now.commands[2]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 125: // STATE 10 - _spin_nvr.tmp:1032 - [((!(!((commands[2]==ABORT)))&&!((commands[2]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][10] = 1;
		if (!(( !( !((now.commands[2]==1)))&& !((now.commands[2]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 126: // STATE 12 - _spin_nvr.tmp:1033 - [(!(!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][12] = 1;
		if (!( !( !((now.commands[2]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 127: // STATE 14 - _spin_nvr.tmp:1034 - [(((!(!((commands[2]==ABORT)))&&!((commands[2]==0)))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][14] = 1;
		if (!((( !( !((now.commands[2]==1)))&& !((now.commands[2]==0)))&& !((now.commands[2]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 128: // STATE 16 - _spin_nvr.tmp:1035 - [((!(!((commands[2]==ABORT)))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][16] = 1;
		if (!(( !( !((now.commands[2]==1)))&& !((now.commands[2]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 129: // STATE 18 - _spin_nvr.tmp:1036 - [(((!(!((commands[1]==ABORT)))&&!((commands[1]==0)))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][18] = 1;
		if (!((( !( !((now.commands[1]==1)))&& !((now.commands[1]==0)))&& !((now.commands[1]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 130: // STATE 20 - _spin_nvr.tmp:1037 - [((!(!((commands[1]==ABORT)))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][20] = 1;
		if (!(( !( !((now.commands[1]==1)))&& !((now.commands[1]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 131: // STATE 22 - _spin_nvr.tmp:1038 - [((!(!((commands[1]==ABORT)))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][22] = 1;
		if (!(( !( !((now.commands[1]==1)))&& !((now.commands[1]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 132: // STATE 24 - _spin_nvr.tmp:1039 - [((!(!((commands[1]==ABORT)))&&!((commands[1]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][24] = 1;
		if (!(( !( !((now.commands[1]==1)))&& !((now.commands[1]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 133: // STATE 26 - _spin_nvr.tmp:1040 - [(!(!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][26] = 1;
		if (!( !( !((now.commands[1]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 134: // STATE 28 - _spin_nvr.tmp:1041 - [(((!(!((commands[1]==ABORT)))&&!((commands[1]==0)))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][28] = 1;
		if (!((( !( !((now.commands[1]==1)))&& !((now.commands[1]==0)))&& !((now.commands[1]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 135: // STATE 30 - _spin_nvr.tmp:1042 - [((!(!((commands[1]==ABORT)))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][30] = 1;
		if (!(( !( !((now.commands[1]==1)))&& !((now.commands[1]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 136: // STATE 32 - _spin_nvr.tmp:1043 - [(((!(!((commands[0]==ABORT)))&&!((commands[0]==0)))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][32] = 1;
		if (!((( !( !((now.commands[0]==1)))&& !((now.commands[0]==0)))&& !((now.commands[0]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 137: // STATE 34 - _spin_nvr.tmp:1044 - [((!(!((commands[0]==ABORT)))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][34] = 1;
		if (!(( !( !((now.commands[0]==1)))&& !((now.commands[0]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 138: // STATE 36 - _spin_nvr.tmp:1045 - [((!(!((commands[0]==ABORT)))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][36] = 1;
		if (!(( !( !((now.commands[0]==1)))&& !((now.commands[0]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 139: // STATE 38 - _spin_nvr.tmp:1046 - [((!(!((commands[0]==ABORT)))&&!((commands[0]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported38 = 0;
			if (verbose && !reported38)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported38 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported38 = 0;
			if (verbose && !reported38)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported38 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][38] = 1;
		if (!(( !( !((now.commands[0]==1)))&& !((now.commands[0]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 140: // STATE 40 - _spin_nvr.tmp:1047 - [(!(!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][40] = 1;
		if (!( !( !((now.commands[0]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 141: // STATE 42 - _spin_nvr.tmp:1048 - [(((!(!((commands[0]==ABORT)))&&!((commands[0]==0)))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported42 = 0;
			if (verbose && !reported42)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported42 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported42 = 0;
			if (verbose && !reported42)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported42 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][42] = 1;
		if (!((( !( !((now.commands[0]==1)))&& !((now.commands[0]==0)))&& !((now.commands[0]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 142: // STATE 44 - _spin_nvr.tmp:1049 - [((!(!((commands[0]==ABORT)))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][44] = 1;
		if (!(( !( !((now.commands[0]==1)))&& !((now.commands[0]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 143: // STATE 51 - _spin_nvr.tmp:1054 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][51] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 144: // STATE 55 - _spin_nvr.tmp:1056 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (60:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported55 = 0;
			if (verbose && !reported55)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported55 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported55 = 0;
			if (verbose && !reported55)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported55 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][55] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 56, 60) */
		reached[11][56] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==1)))), " !(( !((commands[2]==0))&& !((commands[2]==1))))", II, tt, t);
		/* merge: .(goto)(0, 61, 60) */
		reached[11][61] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 145: // STATE 58 - _spin_nvr.tmp:1057 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][58] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 146: // STATE 63 - _spin_nvr.tmp:1061 - [(!((commands[2]==0)))] (68:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][63] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		/* merge: assert(!(!((commands[2]==0))))(0, 64, 68) */
		reached[11][64] = 1;
		spin_assert( !( !((now.commands[2]==0))), " !( !((commands[2]==0)))", II, tt, t);
		/* merge: .(goto)(0, 69, 68) */
		reached[11][69] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 147: // STATE 71 - _spin_nvr.tmp:1066 - [(!((commands[2]==ABORT)))] (76:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][71] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		/* merge: assert(!(!((commands[2]==ABORT))))(0, 72, 76) */
		reached[11][72] = 1;
		spin_assert( !( !((now.commands[2]==1))), " !( !((commands[2]==1)))", II, tt, t);
		/* merge: .(goto)(0, 77, 76) */
		reached[11][77] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 148: // STATE 79 - _spin_nvr.tmp:1071 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (88:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported79 = 0;
			if (verbose && !reported79)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported79 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported79 = 0;
			if (verbose && !reported79)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported79 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][79] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 80, 88) */
		reached[11][80] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==1)))), " !(( !((commands[2]==0))&& !((commands[2]==1))))", II, tt, t);
		/* merge: .(goto)(0, 89, 88) */
		reached[11][89] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 149: // STATE 82 - _spin_nvr.tmp:1072 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][82] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 150: // STATE 84 - _spin_nvr.tmp:1073 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][84] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 151: // STATE 91 - _spin_nvr.tmp:1078 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][91] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 152: // STATE 95 - _spin_nvr.tmp:1080 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (100:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][95] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 96, 100) */
		reached[11][96] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==1)))), " !(( !((commands[1]==0))&& !((commands[1]==1))))", II, tt, t);
		/* merge: .(goto)(0, 101, 100) */
		reached[11][101] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 153: // STATE 98 - _spin_nvr.tmp:1081 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported98 = 0;
			if (verbose && !reported98)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported98 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported98 = 0;
			if (verbose && !reported98)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported98 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][98] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 154: // STATE 103 - _spin_nvr.tmp:1085 - [(!((commands[1]==0)))] (108:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported103 = 0;
			if (verbose && !reported103)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported103 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported103 = 0;
			if (verbose && !reported103)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported103 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][103] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		/* merge: assert(!(!((commands[1]==0))))(0, 104, 108) */
		reached[11][104] = 1;
		spin_assert( !( !((now.commands[1]==0))), " !( !((commands[1]==0)))", II, tt, t);
		/* merge: .(goto)(0, 109, 108) */
		reached[11][109] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 155: // STATE 111 - _spin_nvr.tmp:1090 - [(!((commands[1]==ABORT)))] (116:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][111] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		/* merge: assert(!(!((commands[1]==ABORT))))(0, 112, 116) */
		reached[11][112] = 1;
		spin_assert( !( !((now.commands[1]==1))), " !( !((commands[1]==1)))", II, tt, t);
		/* merge: .(goto)(0, 117, 116) */
		reached[11][117] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 156: // STATE 119 - _spin_nvr.tmp:1095 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (128:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported119 = 0;
			if (verbose && !reported119)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported119 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported119 = 0;
			if (verbose && !reported119)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported119 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][119] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 120, 128) */
		reached[11][120] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==1)))), " !(( !((commands[1]==0))&& !((commands[1]==1))))", II, tt, t);
		/* merge: .(goto)(0, 129, 128) */
		reached[11][129] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 157: // STATE 122 - _spin_nvr.tmp:1096 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][122] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 158: // STATE 124 - _spin_nvr.tmp:1097 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][124] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 159: // STATE 131 - _spin_nvr.tmp:1102 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][131] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 160: // STATE 135 - _spin_nvr.tmp:1104 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (140:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][135] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 136, 140) */
		reached[11][136] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==1)))), " !(( !((commands[0]==0))&& !((commands[0]==1))))", II, tt, t);
		/* merge: .(goto)(0, 141, 140) */
		reached[11][141] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 161: // STATE 138 - _spin_nvr.tmp:1105 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported138 = 0;
			if (verbose && !reported138)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported138 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported138 = 0;
			if (verbose && !reported138)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported138 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][138] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 162: // STATE 143 - _spin_nvr.tmp:1109 - [(!((commands[0]==0)))] (148:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported143 = 0;
			if (verbose && !reported143)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported143 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported143 = 0;
			if (verbose && !reported143)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported143 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][143] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		/* merge: assert(!(!((commands[0]==0))))(0, 144, 148) */
		reached[11][144] = 1;
		spin_assert( !( !((now.commands[0]==0))), " !( !((commands[0]==0)))", II, tt, t);
		/* merge: .(goto)(0, 149, 148) */
		reached[11][149] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 163: // STATE 151 - _spin_nvr.tmp:1114 - [(!((commands[0]==ABORT)))] (156:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported151 = 0;
			if (verbose && !reported151)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported151 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported151 = 0;
			if (verbose && !reported151)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported151 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][151] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		/* merge: assert(!(!((commands[0]==ABORT))))(0, 152, 156) */
		reached[11][152] = 1;
		spin_assert( !( !((now.commands[0]==1))), " !( !((commands[0]==1)))", II, tt, t);
		/* merge: .(goto)(0, 157, 156) */
		reached[11][157] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 164: // STATE 159 - _spin_nvr.tmp:1119 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (168:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][159] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 160, 168) */
		reached[11][160] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==1)))), " !(( !((commands[0]==0))&& !((commands[0]==1))))", II, tt, t);
		/* merge: .(goto)(0, 169, 168) */
		reached[11][169] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 165: // STATE 162 - _spin_nvr.tmp:1120 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][162] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 166: // STATE 164 - _spin_nvr.tmp:1121 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][164] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 167: // STATE 171 - _spin_nvr.tmp:1126 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (180:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][171] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 172, 180) */
		reached[11][172] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==1)))), " !(( !((commands[2]==0))&& !((commands[2]==1))))", II, tt, t);
		/* merge: .(goto)(0, 181, 180) */
		reached[11][181] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 168: // STATE 174 - _spin_nvr.tmp:1127 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported174 = 0;
			if (verbose && !reported174)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported174 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported174 = 0;
			if (verbose && !reported174)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported174 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][174] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 169: // STATE 176 - _spin_nvr.tmp:1128 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported176 = 0;
			if (verbose && !reported176)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported176 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported176 = 0;
			if (verbose && !reported176)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported176 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][176] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 170: // STATE 183 - _spin_nvr.tmp:1133 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (192:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported183 = 0;
			if (verbose && !reported183)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported183 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported183 = 0;
			if (verbose && !reported183)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported183 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][183] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 184, 192) */
		reached[11][184] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==1)))), " !(( !((commands[1]==0))&& !((commands[1]==1))))", II, tt, t);
		/* merge: .(goto)(0, 193, 192) */
		reached[11][193] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 171: // STATE 186 - _spin_nvr.tmp:1134 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported186 = 0;
			if (verbose && !reported186)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported186 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported186 = 0;
			if (verbose && !reported186)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported186 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][186] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 172: // STATE 188 - _spin_nvr.tmp:1135 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported188 = 0;
			if (verbose && !reported188)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported188 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported188 = 0;
			if (verbose && !reported188)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported188 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][188] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 173: // STATE 195 - _spin_nvr.tmp:1140 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (204:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported195 = 0;
			if (verbose && !reported195)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported195 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported195 = 0;
			if (verbose && !reported195)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported195 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][195] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 196, 204) */
		reached[11][196] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==1)))), " !(( !((commands[0]==0))&& !((commands[0]==1))))", II, tt, t);
		/* merge: .(goto)(0, 205, 204) */
		reached[11][205] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 174: // STATE 198 - _spin_nvr.tmp:1141 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][198] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 175: // STATE 200 - _spin_nvr.tmp:1142 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported200 = 0;
			if (verbose && !reported200)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported200 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported200 = 0;
			if (verbose && !reported200)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported200 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][200] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 176: // STATE 207 - _spin_nvr.tmp:1147 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported207 = 0;
			if (verbose && !reported207)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported207 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported207 = 0;
			if (verbose && !reported207)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported207 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][207] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 177: // STATE 211 - _spin_nvr.tmp:1149 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (216:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][211] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 212, 216) */
		reached[11][212] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==1)))), " !(( !((commands[2]==0))&& !((commands[2]==1))))", II, tt, t);
		/* merge: .(goto)(0, 217, 216) */
		reached[11][217] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 178: // STATE 214 - _spin_nvr.tmp:1150 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported214 = 0;
			if (verbose && !reported214)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported214 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported214 = 0;
			if (verbose && !reported214)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported214 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][214] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 179: // STATE 219 - _spin_nvr.tmp:1154 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported219 = 0;
			if (verbose && !reported219)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported219 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported219 = 0;
			if (verbose && !reported219)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported219 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][219] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 180: // STATE 221 - _spin_nvr.tmp:1155 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported221 = 0;
			if (verbose && !reported221)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported221 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported221 = 0;
			if (verbose && !reported221)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported221 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][221] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 181: // STATE 223 - _spin_nvr.tmp:1156 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (236:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][223] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 224, 236) */
		reached[11][224] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==1)))), " !(( !((commands[2]==0))&& !((commands[2]==1))))", II, tt, t);
		/* merge: .(goto)(0, 237, 236) */
		reached[11][237] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 182: // STATE 226 - _spin_nvr.tmp:1157 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported226 = 0;
			if (verbose && !reported226)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported226 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported226 = 0;
			if (verbose && !reported226)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported226 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][226] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 183: // STATE 228 - _spin_nvr.tmp:1158 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported228 = 0;
			if (verbose && !reported228)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported228 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported228 = 0;
			if (verbose && !reported228)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported228 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][228] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 184: // STATE 232 - _spin_nvr.tmp:1160 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][232] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 185: // STATE 234 - _spin_nvr.tmp:1161 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][234] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 186: // STATE 239 - _spin_nvr.tmp:1165 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][239] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 187: // STATE 243 - _spin_nvr.tmp:1167 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (250:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][243] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 244, 250) */
		reached[11][244] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==1)))), " !(( !((commands[2]==0))&& !((commands[2]==1))))", II, tt, t);
		/* merge: .(goto)(0, 251, 250) */
		reached[11][251] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 188: // STATE 246 - _spin_nvr.tmp:1168 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported246 = 0;
			if (verbose && !reported246)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported246 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported246 = 0;
			if (verbose && !reported246)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported246 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][246] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 189: // STATE 248 - _spin_nvr.tmp:1169 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported248 = 0;
			if (verbose && !reported248)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported248 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported248 = 0;
			if (verbose && !reported248)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported248 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][248] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 190: // STATE 253 - _spin_nvr.tmp:1173 - [(!((commands[2]==0)))] (258:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported253 = 0;
			if (verbose && !reported253)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported253 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported253 = 0;
			if (verbose && !reported253)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported253 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][253] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		/* merge: assert(!(!((commands[2]==0))))(0, 254, 258) */
		reached[11][254] = 1;
		spin_assert( !( !((now.commands[2]==0))), " !( !((commands[2]==0)))", II, tt, t);
		/* merge: .(goto)(0, 259, 258) */
		reached[11][259] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 191: // STATE 261 - _spin_nvr.tmp:1178 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported261 = 0;
			if (verbose && !reported261)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported261 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported261 = 0;
			if (verbose && !reported261)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported261 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][261] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 192: // STATE 263 - _spin_nvr.tmp:1179 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported263 = 0;
			if (verbose && !reported263)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported263 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported263 = 0;
			if (verbose && !reported263)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported263 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][263] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 193: // STATE 265 - _spin_nvr.tmp:1180 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (282:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][265] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 266, 282) */
		reached[11][266] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==1)))), " !(( !((commands[2]==0))&& !((commands[2]==1))))", II, tt, t);
		/* merge: .(goto)(0, 283, 282) */
		reached[11][283] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 194: // STATE 268 - _spin_nvr.tmp:1181 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported268 = 0;
			if (verbose && !reported268)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported268 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported268 = 0;
			if (verbose && !reported268)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported268 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][268] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 195: // STATE 270 - _spin_nvr.tmp:1182 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][270] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 196: // STATE 274 - _spin_nvr.tmp:1184 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported274 = 0;
			if (verbose && !reported274)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported274 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported274 = 0;
			if (verbose && !reported274)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported274 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][274] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 197: // STATE 276 - _spin_nvr.tmp:1185 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported276 = 0;
			if (verbose && !reported276)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported276 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported276 = 0;
			if (verbose && !reported276)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported276 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][276] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 198: // STATE 278 - _spin_nvr.tmp:1186 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported278 = 0;
			if (verbose && !reported278)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported278 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported278 = 0;
			if (verbose && !reported278)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported278 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][278] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 199: // STATE 280 - _spin_nvr.tmp:1187 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported280 = 0;
			if (verbose && !reported280)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported280 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported280 = 0;
			if (verbose && !reported280)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported280 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][280] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 200: // STATE 285 - _spin_nvr.tmp:1191 - [(!((commands[2]==ABORT)))] (290:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported285 = 0;
			if (verbose && !reported285)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported285 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported285 = 0;
			if (verbose && !reported285)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported285 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][285] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		/* merge: assert(!(!((commands[2]==ABORT))))(0, 286, 290) */
		reached[11][286] = 1;
		spin_assert( !( !((now.commands[2]==1))), " !( !((commands[2]==1)))", II, tt, t);
		/* merge: .(goto)(0, 291, 290) */
		reached[11][291] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 201: // STATE 293 - _spin_nvr.tmp:1196 - [((!((commands[2]==0))&&!((commands[2]==ABORT))))] (302:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][293] = 1;
		if (!(( !((now.commands[2]==0))&& !((now.commands[2]==1)))))
			continue;
		/* merge: assert(!((!((commands[2]==0))&&!((commands[2]==ABORT)))))(0, 294, 302) */
		reached[11][294] = 1;
		spin_assert( !(( !((now.commands[2]==0))&& !((now.commands[2]==1)))), " !(( !((commands[2]==0))&& !((commands[2]==1))))", II, tt, t);
		/* merge: .(goto)(0, 303, 302) */
		reached[11][303] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 202: // STATE 296 - _spin_nvr.tmp:1197 - [(!((commands[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported296 = 0;
			if (verbose && !reported296)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported296 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported296 = 0;
			if (verbose && !reported296)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported296 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][296] = 1;
		if (!( !((now.commands[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 203: // STATE 298 - _spin_nvr.tmp:1198 - [(!((commands[2]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported298 = 0;
			if (verbose && !reported298)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported298 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported298 = 0;
			if (verbose && !reported298)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported298 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][298] = 1;
		if (!( !((now.commands[2]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 204: // STATE 305 - _spin_nvr.tmp:1203 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported305 = 0;
			if (verbose && !reported305)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported305 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported305 = 0;
			if (verbose && !reported305)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported305 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][305] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 205: // STATE 309 - _spin_nvr.tmp:1205 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (314:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported309 = 0;
			if (verbose && !reported309)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported309 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported309 = 0;
			if (verbose && !reported309)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported309 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][309] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 310, 314) */
		reached[11][310] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==1)))), " !(( !((commands[1]==0))&& !((commands[1]==1))))", II, tt, t);
		/* merge: .(goto)(0, 315, 314) */
		reached[11][315] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 206: // STATE 312 - _spin_nvr.tmp:1206 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported312 = 0;
			if (verbose && !reported312)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported312 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported312 = 0;
			if (verbose && !reported312)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported312 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][312] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 207: // STATE 317 - _spin_nvr.tmp:1210 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported317 = 0;
			if (verbose && !reported317)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported317 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported317 = 0;
			if (verbose && !reported317)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported317 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][317] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 208: // STATE 319 - _spin_nvr.tmp:1211 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][319] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 209: // STATE 321 - _spin_nvr.tmp:1212 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (334:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][321] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 322, 334) */
		reached[11][322] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==1)))), " !(( !((commands[1]==0))&& !((commands[1]==1))))", II, tt, t);
		/* merge: .(goto)(0, 335, 334) */
		reached[11][335] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 210: // STATE 324 - _spin_nvr.tmp:1213 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][324] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 211: // STATE 326 - _spin_nvr.tmp:1214 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][326] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 212: // STATE 330 - _spin_nvr.tmp:1216 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported330 = 0;
			if (verbose && !reported330)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported330 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported330 = 0;
			if (verbose && !reported330)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported330 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][330] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 213: // STATE 332 - _spin_nvr.tmp:1217 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][332] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 214: // STATE 337 - _spin_nvr.tmp:1221 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported337 = 0;
			if (verbose && !reported337)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported337 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported337 = 0;
			if (verbose && !reported337)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported337 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][337] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 215: // STATE 341 - _spin_nvr.tmp:1223 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (348:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported341 = 0;
			if (verbose && !reported341)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported341 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported341 = 0;
			if (verbose && !reported341)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported341 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][341] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 342, 348) */
		reached[11][342] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==1)))), " !(( !((commands[1]==0))&& !((commands[1]==1))))", II, tt, t);
		/* merge: .(goto)(0, 349, 348) */
		reached[11][349] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 216: // STATE 344 - _spin_nvr.tmp:1224 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported344 = 0;
			if (verbose && !reported344)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported344 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported344 = 0;
			if (verbose && !reported344)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported344 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][344] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 217: // STATE 346 - _spin_nvr.tmp:1225 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported346 = 0;
			if (verbose && !reported346)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported346 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported346 = 0;
			if (verbose && !reported346)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported346 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][346] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 218: // STATE 351 - _spin_nvr.tmp:1229 - [(!((commands[1]==0)))] (356:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported351 = 0;
			if (verbose && !reported351)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported351 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported351 = 0;
			if (verbose && !reported351)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported351 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][351] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		/* merge: assert(!(!((commands[1]==0))))(0, 352, 356) */
		reached[11][352] = 1;
		spin_assert( !( !((now.commands[1]==0))), " !( !((commands[1]==0)))", II, tt, t);
		/* merge: .(goto)(0, 357, 356) */
		reached[11][357] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 219: // STATE 359 - _spin_nvr.tmp:1234 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported359 = 0;
			if (verbose && !reported359)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported359 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported359 = 0;
			if (verbose && !reported359)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported359 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][359] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 220: // STATE 361 - _spin_nvr.tmp:1235 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported361 = 0;
			if (verbose && !reported361)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported361 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported361 = 0;
			if (verbose && !reported361)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported361 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][361] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 221: // STATE 363 - _spin_nvr.tmp:1236 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (380:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported363 = 0;
			if (verbose && !reported363)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported363 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported363 = 0;
			if (verbose && !reported363)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported363 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][363] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 364, 380) */
		reached[11][364] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==1)))), " !(( !((commands[1]==0))&& !((commands[1]==1))))", II, tt, t);
		/* merge: .(goto)(0, 381, 380) */
		reached[11][381] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 222: // STATE 366 - _spin_nvr.tmp:1237 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported366 = 0;
			if (verbose && !reported366)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported366 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported366 = 0;
			if (verbose && !reported366)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported366 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][366] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 223: // STATE 368 - _spin_nvr.tmp:1238 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported368 = 0;
			if (verbose && !reported368)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported368 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported368 = 0;
			if (verbose && !reported368)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported368 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][368] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 224: // STATE 372 - _spin_nvr.tmp:1240 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported372 = 0;
			if (verbose && !reported372)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported372 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported372 = 0;
			if (verbose && !reported372)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported372 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][372] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 225: // STATE 374 - _spin_nvr.tmp:1241 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported374 = 0;
			if (verbose && !reported374)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported374 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported374 = 0;
			if (verbose && !reported374)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported374 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][374] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 226: // STATE 376 - _spin_nvr.tmp:1242 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported376 = 0;
			if (verbose && !reported376)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported376 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported376 = 0;
			if (verbose && !reported376)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported376 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][376] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 227: // STATE 378 - _spin_nvr.tmp:1243 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported378 = 0;
			if (verbose && !reported378)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported378 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported378 = 0;
			if (verbose && !reported378)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported378 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][378] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 228: // STATE 383 - _spin_nvr.tmp:1247 - [(!((commands[1]==ABORT)))] (388:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported383 = 0;
			if (verbose && !reported383)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported383 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported383 = 0;
			if (verbose && !reported383)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported383 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][383] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		/* merge: assert(!(!((commands[1]==ABORT))))(0, 384, 388) */
		reached[11][384] = 1;
		spin_assert( !( !((now.commands[1]==1))), " !( !((commands[1]==1)))", II, tt, t);
		/* merge: .(goto)(0, 389, 388) */
		reached[11][389] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 229: // STATE 391 - _spin_nvr.tmp:1252 - [((!((commands[1]==0))&&!((commands[1]==ABORT))))] (400:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported391 = 0;
			if (verbose && !reported391)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported391 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported391 = 0;
			if (verbose && !reported391)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported391 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][391] = 1;
		if (!(( !((now.commands[1]==0))&& !((now.commands[1]==1)))))
			continue;
		/* merge: assert(!((!((commands[1]==0))&&!((commands[1]==ABORT)))))(0, 392, 400) */
		reached[11][392] = 1;
		spin_assert( !(( !((now.commands[1]==0))&& !((now.commands[1]==1)))), " !(( !((commands[1]==0))&& !((commands[1]==1))))", II, tt, t);
		/* merge: .(goto)(0, 401, 400) */
		reached[11][401] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 230: // STATE 394 - _spin_nvr.tmp:1253 - [(!((commands[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported394 = 0;
			if (verbose && !reported394)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported394 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported394 = 0;
			if (verbose && !reported394)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported394 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][394] = 1;
		if (!( !((now.commands[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 231: // STATE 396 - _spin_nvr.tmp:1254 - [(!((commands[1]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported396 = 0;
			if (verbose && !reported396)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported396 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported396 = 0;
			if (verbose && !reported396)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported396 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][396] = 1;
		if (!( !((now.commands[1]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 232: // STATE 403 - _spin_nvr.tmp:1259 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported403 = 0;
			if (verbose && !reported403)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported403 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported403 = 0;
			if (verbose && !reported403)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported403 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][403] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 233: // STATE 407 - _spin_nvr.tmp:1261 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (412:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported407 = 0;
			if (verbose && !reported407)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported407 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported407 = 0;
			if (verbose && !reported407)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported407 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][407] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 408, 412) */
		reached[11][408] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==1)))), " !(( !((commands[0]==0))&& !((commands[0]==1))))", II, tt, t);
		/* merge: .(goto)(0, 413, 412) */
		reached[11][413] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 234: // STATE 410 - _spin_nvr.tmp:1262 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported410 = 0;
			if (verbose && !reported410)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported410 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported410 = 0;
			if (verbose && !reported410)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported410 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][410] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 235: // STATE 415 - _spin_nvr.tmp:1266 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported415 = 0;
			if (verbose && !reported415)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported415 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported415 = 0;
			if (verbose && !reported415)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported415 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][415] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 236: // STATE 417 - _spin_nvr.tmp:1267 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported417 = 0;
			if (verbose && !reported417)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported417 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported417 = 0;
			if (verbose && !reported417)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported417 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][417] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 237: // STATE 419 - _spin_nvr.tmp:1268 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (432:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported419 = 0;
			if (verbose && !reported419)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported419 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported419 = 0;
			if (verbose && !reported419)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported419 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][419] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 420, 432) */
		reached[11][420] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==1)))), " !(( !((commands[0]==0))&& !((commands[0]==1))))", II, tt, t);
		/* merge: .(goto)(0, 433, 432) */
		reached[11][433] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 238: // STATE 422 - _spin_nvr.tmp:1269 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported422 = 0;
			if (verbose && !reported422)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported422 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported422 = 0;
			if (verbose && !reported422)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported422 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][422] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 239: // STATE 424 - _spin_nvr.tmp:1270 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported424 = 0;
			if (verbose && !reported424)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported424 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported424 = 0;
			if (verbose && !reported424)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported424 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][424] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 240: // STATE 428 - _spin_nvr.tmp:1272 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported428 = 0;
			if (verbose && !reported428)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported428 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported428 = 0;
			if (verbose && !reported428)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported428 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][428] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 241: // STATE 430 - _spin_nvr.tmp:1273 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported430 = 0;
			if (verbose && !reported430)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported430 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported430 = 0;
			if (verbose && !reported430)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported430 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][430] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 242: // STATE 435 - _spin_nvr.tmp:1277 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported435 = 0;
			if (verbose && !reported435)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported435 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported435 = 0;
			if (verbose && !reported435)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported435 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][435] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 243: // STATE 439 - _spin_nvr.tmp:1279 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (446:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported439 = 0;
			if (verbose && !reported439)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported439 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported439 = 0;
			if (verbose && !reported439)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported439 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][439] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 440, 446) */
		reached[11][440] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==1)))), " !(( !((commands[0]==0))&& !((commands[0]==1))))", II, tt, t);
		/* merge: .(goto)(0, 447, 446) */
		reached[11][447] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 244: // STATE 442 - _spin_nvr.tmp:1280 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported442 = 0;
			if (verbose && !reported442)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported442 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported442 = 0;
			if (verbose && !reported442)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported442 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][442] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 245: // STATE 444 - _spin_nvr.tmp:1281 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported444 = 0;
			if (verbose && !reported444)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported444 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported444 = 0;
			if (verbose && !reported444)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported444 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][444] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 246: // STATE 449 - _spin_nvr.tmp:1285 - [(!((commands[0]==0)))] (454:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported449 = 0;
			if (verbose && !reported449)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported449 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported449 = 0;
			if (verbose && !reported449)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported449 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][449] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		/* merge: assert(!(!((commands[0]==0))))(0, 450, 454) */
		reached[11][450] = 1;
		spin_assert( !( !((now.commands[0]==0))), " !( !((commands[0]==0)))", II, tt, t);
		/* merge: .(goto)(0, 455, 454) */
		reached[11][455] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 247: // STATE 457 - _spin_nvr.tmp:1290 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported457 = 0;
			if (verbose && !reported457)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported457 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported457 = 0;
			if (verbose && !reported457)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported457 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][457] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 248: // STATE 459 - _spin_nvr.tmp:1291 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported459 = 0;
			if (verbose && !reported459)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported459 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported459 = 0;
			if (verbose && !reported459)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported459 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][459] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 249: // STATE 461 - _spin_nvr.tmp:1292 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (478:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported461 = 0;
			if (verbose && !reported461)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported461 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported461 = 0;
			if (verbose && !reported461)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported461 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][461] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 462, 478) */
		reached[11][462] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==1)))), " !(( !((commands[0]==0))&& !((commands[0]==1))))", II, tt, t);
		/* merge: .(goto)(0, 479, 478) */
		reached[11][479] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 250: // STATE 464 - _spin_nvr.tmp:1293 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported464 = 0;
			if (verbose && !reported464)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported464 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported464 = 0;
			if (verbose && !reported464)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported464 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][464] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 251: // STATE 466 - _spin_nvr.tmp:1294 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported466 = 0;
			if (verbose && !reported466)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported466 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported466 = 0;
			if (verbose && !reported466)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported466 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][466] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 252: // STATE 470 - _spin_nvr.tmp:1296 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported470 = 0;
			if (verbose && !reported470)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported470 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported470 = 0;
			if (verbose && !reported470)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported470 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][470] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 253: // STATE 472 - _spin_nvr.tmp:1297 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported472 = 0;
			if (verbose && !reported472)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported472 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported472 = 0;
			if (verbose && !reported472)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported472 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][472] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 254: // STATE 474 - _spin_nvr.tmp:1298 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported474 = 0;
			if (verbose && !reported474)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported474 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported474 = 0;
			if (verbose && !reported474)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported474 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][474] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 255: // STATE 476 - _spin_nvr.tmp:1299 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported476 = 0;
			if (verbose && !reported476)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported476 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported476 = 0;
			if (verbose && !reported476)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported476 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][476] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 256: // STATE 481 - _spin_nvr.tmp:1303 - [(!((commands[0]==ABORT)))] (486:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported481 = 0;
			if (verbose && !reported481)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported481 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported481 = 0;
			if (verbose && !reported481)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported481 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][481] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		/* merge: assert(!(!((commands[0]==ABORT))))(0, 482, 486) */
		reached[11][482] = 1;
		spin_assert( !( !((now.commands[0]==1))), " !( !((commands[0]==1)))", II, tt, t);
		/* merge: .(goto)(0, 487, 486) */
		reached[11][487] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 257: // STATE 489 - _spin_nvr.tmp:1308 - [((!((commands[0]==0))&&!((commands[0]==ABORT))))] (498:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported489 = 0;
			if (verbose && !reported489)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported489 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported489 = 0;
			if (verbose && !reported489)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported489 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][489] = 1;
		if (!(( !((now.commands[0]==0))&& !((now.commands[0]==1)))))
			continue;
		/* merge: assert(!((!((commands[0]==0))&&!((commands[0]==ABORT)))))(0, 490, 498) */
		reached[11][490] = 1;
		spin_assert( !(( !((now.commands[0]==0))&& !((now.commands[0]==1)))), " !(( !((commands[0]==0))&& !((commands[0]==1))))", II, tt, t);
		/* merge: .(goto)(0, 499, 498) */
		reached[11][499] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 258: // STATE 492 - _spin_nvr.tmp:1309 - [(!((commands[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported492 = 0;
			if (verbose && !reported492)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported492 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported492 = 0;
			if (verbose && !reported492)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported492 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][492] = 1;
		if (!( !((now.commands[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 259: // STATE 494 - _spin_nvr.tmp:1310 - [(!((commands[0]==ABORT)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported494 = 0;
			if (verbose && !reported494)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported494 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported494 = 0;
			if (verbose && !reported494)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported494 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][494] = 1;
		if (!( !((now.commands[0]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 260: // STATE 502 - _spin_nvr.tmp:1315 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported502 = 0;
			if (verbose && !reported502)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported502 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported502 = 0;
			if (verbose && !reported502)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported502 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[11][502] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_aborted */
	case 261: // STATE 1 - _spin_nvr.tmp:737 - [(((!(!((states[2]==ABORTED)))&&!((states[2]==0)))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][1] = 1;
		if (!((( !( !((now.states[2]==3)))&& !((now.states[2]==0)))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 262: // STATE 3 - _spin_nvr.tmp:738 - [((!(!((states[2]==ABORTED)))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][3] = 1;
		if (!(( !( !((now.states[2]==3)))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 263: // STATE 5 - _spin_nvr.tmp:739 - [((((!(!((states[0]==ABORTED)))&&!((states[0]==0)))&&!((states[0]==ABORTED)))||(((!(!((states[1]==ABORTED)))&&!((states[1]==0)))&&!((states[1]==ABORTED)))||((!(!((states[2]==ABORTED)))&&!((states[2]==0)))&&!((states[2]==ABORTED))))))] (48:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][5] = 1;
		if (!(((( !( !((now.states[0]==3)))&& !((now.states[0]==0)))&& !((now.states[0]==3)))||((( !( !((now.states[1]==3)))&& !((now.states[1]==0)))&& !((now.states[1]==3)))||(( !( !((now.states[2]==3)))&& !((now.states[2]==0)))&& !((now.states[2]==3)))))))
			continue;
		/* merge: assert(!((((!(!((states[0]==ABORTED)))&&!((states[0]==0)))&&!((states[0]==ABORTED)))||(((!(!((states[1]==ABORTED)))&&!((states[1]==0)))&&!((states[1]==ABORTED)))||((!(!((states[2]==ABORTED)))&&!((states[2]==0)))&&!((states[2]==ABORTED)))))))(0, 6, 48) */
		reached[10][6] = 1;
		spin_assert( !(((( !( !((now.states[0]==3)))&& !((now.states[0]==0)))&& !((now.states[0]==3)))||((( !( !((now.states[1]==3)))&& !((now.states[1]==0)))&& !((now.states[1]==3)))||(( !( !((now.states[2]==3)))&& !((now.states[2]==0)))&& !((now.states[2]==3)))))), " !(((( !( !((states[0]==3)))&& !((states[0]==0)))&& !((states[0]==3)))||((( !( !((states[1]==3)))&& !((states[1]==0)))&& !((states[1]==3)))||(( !( !((states[2]==3)))&& !((states[2]==0)))&& !((states[2]==3))))))", II, tt, t);
		/* merge: .(goto)(0, 49, 48) */
		reached[10][49] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 264: // STATE 8 - _spin_nvr.tmp:740 - [((!(!((states[2]==ABORTED)))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][8] = 1;
		if (!(( !( !((now.states[2]==3)))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 265: // STATE 10 - _spin_nvr.tmp:741 - [((!(!((states[2]==ABORTED)))&&!((states[2]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][10] = 1;
		if (!(( !( !((now.states[2]==3)))&& !((now.states[2]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 266: // STATE 12 - _spin_nvr.tmp:742 - [(!(!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][12] = 1;
		if (!( !( !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 267: // STATE 14 - _spin_nvr.tmp:743 - [(((!(!((states[2]==ABORTED)))&&!((states[2]==0)))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][14] = 1;
		if (!((( !( !((now.states[2]==3)))&& !((now.states[2]==0)))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 268: // STATE 16 - _spin_nvr.tmp:744 - [((!(!((states[2]==ABORTED)))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][16] = 1;
		if (!(( !( !((now.states[2]==3)))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 269: // STATE 18 - _spin_nvr.tmp:745 - [(((!(!((states[1]==ABORTED)))&&!((states[1]==0)))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][18] = 1;
		if (!((( !( !((now.states[1]==3)))&& !((now.states[1]==0)))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 270: // STATE 20 - _spin_nvr.tmp:746 - [((!(!((states[1]==ABORTED)))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][20] = 1;
		if (!(( !( !((now.states[1]==3)))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 271: // STATE 22 - _spin_nvr.tmp:747 - [((!(!((states[1]==ABORTED)))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][22] = 1;
		if (!(( !( !((now.states[1]==3)))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 272: // STATE 24 - _spin_nvr.tmp:748 - [((!(!((states[1]==ABORTED)))&&!((states[1]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][24] = 1;
		if (!(( !( !((now.states[1]==3)))&& !((now.states[1]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 273: // STATE 26 - _spin_nvr.tmp:749 - [(!(!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][26] = 1;
		if (!( !( !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 274: // STATE 28 - _spin_nvr.tmp:750 - [(((!(!((states[1]==ABORTED)))&&!((states[1]==0)))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][28] = 1;
		if (!((( !( !((now.states[1]==3)))&& !((now.states[1]==0)))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 275: // STATE 30 - _spin_nvr.tmp:751 - [((!(!((states[1]==ABORTED)))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][30] = 1;
		if (!(( !( !((now.states[1]==3)))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 276: // STATE 32 - _spin_nvr.tmp:752 - [(((!(!((states[0]==ABORTED)))&&!((states[0]==0)))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][32] = 1;
		if (!((( !( !((now.states[0]==3)))&& !((now.states[0]==0)))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 277: // STATE 34 - _spin_nvr.tmp:753 - [((!(!((states[0]==ABORTED)))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][34] = 1;
		if (!(( !( !((now.states[0]==3)))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 278: // STATE 36 - _spin_nvr.tmp:754 - [((!(!((states[0]==ABORTED)))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][36] = 1;
		if (!(( !( !((now.states[0]==3)))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 279: // STATE 38 - _spin_nvr.tmp:755 - [((!(!((states[0]==ABORTED)))&&!((states[0]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported38 = 0;
			if (verbose && !reported38)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported38 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported38 = 0;
			if (verbose && !reported38)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported38 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][38] = 1;
		if (!(( !( !((now.states[0]==3)))&& !((now.states[0]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 280: // STATE 40 - _spin_nvr.tmp:756 - [(!(!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][40] = 1;
		if (!( !( !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 281: // STATE 42 - _spin_nvr.tmp:757 - [(((!(!((states[0]==ABORTED)))&&!((states[0]==0)))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported42 = 0;
			if (verbose && !reported42)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported42 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported42 = 0;
			if (verbose && !reported42)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported42 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][42] = 1;
		if (!((( !( !((now.states[0]==3)))&& !((now.states[0]==0)))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 282: // STATE 44 - _spin_nvr.tmp:758 - [((!(!((states[0]==ABORTED)))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][44] = 1;
		if (!(( !( !((now.states[0]==3)))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 283: // STATE 51 - _spin_nvr.tmp:763 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][51] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 284: // STATE 55 - _spin_nvr.tmp:765 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (60:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported55 = 0;
			if (verbose && !reported55)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported55 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported55 = 0;
			if (verbose && !reported55)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported55 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][55] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 56, 60) */
		reached[10][56] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==3)))), " !(( !((states[2]==0))&& !((states[2]==3))))", II, tt, t);
		/* merge: .(goto)(0, 61, 60) */
		reached[10][61] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 285: // STATE 58 - _spin_nvr.tmp:766 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][58] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 286: // STATE 63 - _spin_nvr.tmp:770 - [(!((states[2]==0)))] (68:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][63] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		/* merge: assert(!(!((states[2]==0))))(0, 64, 68) */
		reached[10][64] = 1;
		spin_assert( !( !((now.states[2]==0))), " !( !((states[2]==0)))", II, tt, t);
		/* merge: .(goto)(0, 69, 68) */
		reached[10][69] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 287: // STATE 71 - _spin_nvr.tmp:775 - [(!((states[2]==ABORTED)))] (76:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][71] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		/* merge: assert(!(!((states[2]==ABORTED))))(0, 72, 76) */
		reached[10][72] = 1;
		spin_assert( !( !((now.states[2]==3))), " !( !((states[2]==3)))", II, tt, t);
		/* merge: .(goto)(0, 77, 76) */
		reached[10][77] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 288: // STATE 79 - _spin_nvr.tmp:780 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (88:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported79 = 0;
			if (verbose && !reported79)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported79 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported79 = 0;
			if (verbose && !reported79)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported79 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][79] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 80, 88) */
		reached[10][80] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==3)))), " !(( !((states[2]==0))&& !((states[2]==3))))", II, tt, t);
		/* merge: .(goto)(0, 89, 88) */
		reached[10][89] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 289: // STATE 82 - _spin_nvr.tmp:781 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][82] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 290: // STATE 84 - _spin_nvr.tmp:782 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][84] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 291: // STATE 91 - _spin_nvr.tmp:787 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][91] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 292: // STATE 95 - _spin_nvr.tmp:789 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (100:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][95] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 96, 100) */
		reached[10][96] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==3)))), " !(( !((states[1]==0))&& !((states[1]==3))))", II, tt, t);
		/* merge: .(goto)(0, 101, 100) */
		reached[10][101] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 293: // STATE 98 - _spin_nvr.tmp:790 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported98 = 0;
			if (verbose && !reported98)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported98 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported98 = 0;
			if (verbose && !reported98)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported98 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][98] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 294: // STATE 103 - _spin_nvr.tmp:794 - [(!((states[1]==0)))] (108:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported103 = 0;
			if (verbose && !reported103)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported103 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported103 = 0;
			if (verbose && !reported103)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported103 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][103] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		/* merge: assert(!(!((states[1]==0))))(0, 104, 108) */
		reached[10][104] = 1;
		spin_assert( !( !((now.states[1]==0))), " !( !((states[1]==0)))", II, tt, t);
		/* merge: .(goto)(0, 109, 108) */
		reached[10][109] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 295: // STATE 111 - _spin_nvr.tmp:799 - [(!((states[1]==ABORTED)))] (116:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][111] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		/* merge: assert(!(!((states[1]==ABORTED))))(0, 112, 116) */
		reached[10][112] = 1;
		spin_assert( !( !((now.states[1]==3))), " !( !((states[1]==3)))", II, tt, t);
		/* merge: .(goto)(0, 117, 116) */
		reached[10][117] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 296: // STATE 119 - _spin_nvr.tmp:804 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (128:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported119 = 0;
			if (verbose && !reported119)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported119 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported119 = 0;
			if (verbose && !reported119)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported119 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][119] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 120, 128) */
		reached[10][120] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==3)))), " !(( !((states[1]==0))&& !((states[1]==3))))", II, tt, t);
		/* merge: .(goto)(0, 129, 128) */
		reached[10][129] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 297: // STATE 122 - _spin_nvr.tmp:805 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][122] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 298: // STATE 124 - _spin_nvr.tmp:806 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][124] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 299: // STATE 131 - _spin_nvr.tmp:811 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][131] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 300: // STATE 135 - _spin_nvr.tmp:813 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (140:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][135] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 136, 140) */
		reached[10][136] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==3)))), " !(( !((states[0]==0))&& !((states[0]==3))))", II, tt, t);
		/* merge: .(goto)(0, 141, 140) */
		reached[10][141] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 301: // STATE 138 - _spin_nvr.tmp:814 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported138 = 0;
			if (verbose && !reported138)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported138 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported138 = 0;
			if (verbose && !reported138)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported138 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][138] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 302: // STATE 143 - _spin_nvr.tmp:818 - [(!((states[0]==0)))] (148:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported143 = 0;
			if (verbose && !reported143)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported143 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported143 = 0;
			if (verbose && !reported143)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported143 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][143] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		/* merge: assert(!(!((states[0]==0))))(0, 144, 148) */
		reached[10][144] = 1;
		spin_assert( !( !((now.states[0]==0))), " !( !((states[0]==0)))", II, tt, t);
		/* merge: .(goto)(0, 149, 148) */
		reached[10][149] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 303: // STATE 151 - _spin_nvr.tmp:823 - [(!((states[0]==ABORTED)))] (156:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported151 = 0;
			if (verbose && !reported151)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported151 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported151 = 0;
			if (verbose && !reported151)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported151 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][151] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		/* merge: assert(!(!((states[0]==ABORTED))))(0, 152, 156) */
		reached[10][152] = 1;
		spin_assert( !( !((now.states[0]==3))), " !( !((states[0]==3)))", II, tt, t);
		/* merge: .(goto)(0, 157, 156) */
		reached[10][157] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 304: // STATE 159 - _spin_nvr.tmp:828 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (168:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][159] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 160, 168) */
		reached[10][160] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==3)))), " !(( !((states[0]==0))&& !((states[0]==3))))", II, tt, t);
		/* merge: .(goto)(0, 169, 168) */
		reached[10][169] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 305: // STATE 162 - _spin_nvr.tmp:829 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][162] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 306: // STATE 164 - _spin_nvr.tmp:830 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][164] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 307: // STATE 171 - _spin_nvr.tmp:835 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (180:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][171] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 172, 180) */
		reached[10][172] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==3)))), " !(( !((states[2]==0))&& !((states[2]==3))))", II, tt, t);
		/* merge: .(goto)(0, 181, 180) */
		reached[10][181] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 308: // STATE 174 - _spin_nvr.tmp:836 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported174 = 0;
			if (verbose && !reported174)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported174 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported174 = 0;
			if (verbose && !reported174)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported174 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][174] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 309: // STATE 176 - _spin_nvr.tmp:837 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported176 = 0;
			if (verbose && !reported176)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported176 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported176 = 0;
			if (verbose && !reported176)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported176 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][176] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 310: // STATE 183 - _spin_nvr.tmp:842 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (192:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported183 = 0;
			if (verbose && !reported183)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported183 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported183 = 0;
			if (verbose && !reported183)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported183 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][183] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 184, 192) */
		reached[10][184] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==3)))), " !(( !((states[1]==0))&& !((states[1]==3))))", II, tt, t);
		/* merge: .(goto)(0, 193, 192) */
		reached[10][193] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 311: // STATE 186 - _spin_nvr.tmp:843 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported186 = 0;
			if (verbose && !reported186)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported186 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported186 = 0;
			if (verbose && !reported186)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported186 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][186] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 312: // STATE 188 - _spin_nvr.tmp:844 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported188 = 0;
			if (verbose && !reported188)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported188 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported188 = 0;
			if (verbose && !reported188)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported188 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][188] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 313: // STATE 195 - _spin_nvr.tmp:849 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (204:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported195 = 0;
			if (verbose && !reported195)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported195 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported195 = 0;
			if (verbose && !reported195)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported195 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][195] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 196, 204) */
		reached[10][196] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==3)))), " !(( !((states[0]==0))&& !((states[0]==3))))", II, tt, t);
		/* merge: .(goto)(0, 205, 204) */
		reached[10][205] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 314: // STATE 198 - _spin_nvr.tmp:850 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][198] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 315: // STATE 200 - _spin_nvr.tmp:851 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported200 = 0;
			if (verbose && !reported200)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported200 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported200 = 0;
			if (verbose && !reported200)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported200 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][200] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 316: // STATE 207 - _spin_nvr.tmp:856 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported207 = 0;
			if (verbose && !reported207)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported207 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported207 = 0;
			if (verbose && !reported207)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported207 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][207] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 317: // STATE 211 - _spin_nvr.tmp:858 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (216:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][211] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 212, 216) */
		reached[10][212] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==3)))), " !(( !((states[2]==0))&& !((states[2]==3))))", II, tt, t);
		/* merge: .(goto)(0, 217, 216) */
		reached[10][217] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 318: // STATE 214 - _spin_nvr.tmp:859 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported214 = 0;
			if (verbose && !reported214)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported214 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported214 = 0;
			if (verbose && !reported214)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported214 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][214] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 319: // STATE 219 - _spin_nvr.tmp:863 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported219 = 0;
			if (verbose && !reported219)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported219 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported219 = 0;
			if (verbose && !reported219)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported219 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][219] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 320: // STATE 221 - _spin_nvr.tmp:864 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported221 = 0;
			if (verbose && !reported221)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported221 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported221 = 0;
			if (verbose && !reported221)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported221 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][221] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 321: // STATE 223 - _spin_nvr.tmp:865 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (236:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][223] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 224, 236) */
		reached[10][224] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==3)))), " !(( !((states[2]==0))&& !((states[2]==3))))", II, tt, t);
		/* merge: .(goto)(0, 237, 236) */
		reached[10][237] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 322: // STATE 226 - _spin_nvr.tmp:866 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported226 = 0;
			if (verbose && !reported226)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported226 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported226 = 0;
			if (verbose && !reported226)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported226 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][226] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 323: // STATE 228 - _spin_nvr.tmp:867 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported228 = 0;
			if (verbose && !reported228)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported228 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported228 = 0;
			if (verbose && !reported228)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported228 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][228] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 324: // STATE 232 - _spin_nvr.tmp:869 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][232] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 325: // STATE 234 - _spin_nvr.tmp:870 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][234] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 326: // STATE 239 - _spin_nvr.tmp:874 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][239] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 327: // STATE 243 - _spin_nvr.tmp:876 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (250:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][243] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 244, 250) */
		reached[10][244] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==3)))), " !(( !((states[2]==0))&& !((states[2]==3))))", II, tt, t);
		/* merge: .(goto)(0, 251, 250) */
		reached[10][251] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 328: // STATE 246 - _spin_nvr.tmp:877 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported246 = 0;
			if (verbose && !reported246)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported246 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported246 = 0;
			if (verbose && !reported246)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported246 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][246] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 329: // STATE 248 - _spin_nvr.tmp:878 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported248 = 0;
			if (verbose && !reported248)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported248 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported248 = 0;
			if (verbose && !reported248)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported248 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][248] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 330: // STATE 253 - _spin_nvr.tmp:882 - [(!((states[2]==0)))] (258:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported253 = 0;
			if (verbose && !reported253)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported253 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported253 = 0;
			if (verbose && !reported253)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported253 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][253] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		/* merge: assert(!(!((states[2]==0))))(0, 254, 258) */
		reached[10][254] = 1;
		spin_assert( !( !((now.states[2]==0))), " !( !((states[2]==0)))", II, tt, t);
		/* merge: .(goto)(0, 259, 258) */
		reached[10][259] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 331: // STATE 261 - _spin_nvr.tmp:887 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported261 = 0;
			if (verbose && !reported261)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported261 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported261 = 0;
			if (verbose && !reported261)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported261 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][261] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 332: // STATE 263 - _spin_nvr.tmp:888 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported263 = 0;
			if (verbose && !reported263)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported263 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported263 = 0;
			if (verbose && !reported263)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported263 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][263] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 333: // STATE 265 - _spin_nvr.tmp:889 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (282:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][265] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 266, 282) */
		reached[10][266] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==3)))), " !(( !((states[2]==0))&& !((states[2]==3))))", II, tt, t);
		/* merge: .(goto)(0, 283, 282) */
		reached[10][283] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 334: // STATE 268 - _spin_nvr.tmp:890 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported268 = 0;
			if (verbose && !reported268)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported268 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported268 = 0;
			if (verbose && !reported268)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported268 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][268] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 335: // STATE 270 - _spin_nvr.tmp:891 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][270] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 336: // STATE 274 - _spin_nvr.tmp:893 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported274 = 0;
			if (verbose && !reported274)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported274 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported274 = 0;
			if (verbose && !reported274)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported274 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][274] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 337: // STATE 276 - _spin_nvr.tmp:894 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported276 = 0;
			if (verbose && !reported276)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported276 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported276 = 0;
			if (verbose && !reported276)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported276 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][276] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 338: // STATE 278 - _spin_nvr.tmp:895 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported278 = 0;
			if (verbose && !reported278)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported278 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported278 = 0;
			if (verbose && !reported278)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported278 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][278] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 339: // STATE 280 - _spin_nvr.tmp:896 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported280 = 0;
			if (verbose && !reported280)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported280 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported280 = 0;
			if (verbose && !reported280)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported280 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][280] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 340: // STATE 285 - _spin_nvr.tmp:900 - [(!((states[2]==ABORTED)))] (290:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported285 = 0;
			if (verbose && !reported285)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported285 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported285 = 0;
			if (verbose && !reported285)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported285 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][285] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		/* merge: assert(!(!((states[2]==ABORTED))))(0, 286, 290) */
		reached[10][286] = 1;
		spin_assert( !( !((now.states[2]==3))), " !( !((states[2]==3)))", II, tt, t);
		/* merge: .(goto)(0, 291, 290) */
		reached[10][291] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 341: // STATE 293 - _spin_nvr.tmp:905 - [((!((states[2]==0))&&!((states[2]==ABORTED))))] (302:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][293] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==3)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==ABORTED)))))(0, 294, 302) */
		reached[10][294] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==3)))), " !(( !((states[2]==0))&& !((states[2]==3))))", II, tt, t);
		/* merge: .(goto)(0, 303, 302) */
		reached[10][303] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 342: // STATE 296 - _spin_nvr.tmp:906 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported296 = 0;
			if (verbose && !reported296)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported296 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported296 = 0;
			if (verbose && !reported296)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported296 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][296] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 343: // STATE 298 - _spin_nvr.tmp:907 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported298 = 0;
			if (verbose && !reported298)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported298 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported298 = 0;
			if (verbose && !reported298)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported298 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][298] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 344: // STATE 305 - _spin_nvr.tmp:912 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported305 = 0;
			if (verbose && !reported305)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported305 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported305 = 0;
			if (verbose && !reported305)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported305 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][305] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 345: // STATE 309 - _spin_nvr.tmp:914 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (314:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported309 = 0;
			if (verbose && !reported309)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported309 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported309 = 0;
			if (verbose && !reported309)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported309 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][309] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 310, 314) */
		reached[10][310] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==3)))), " !(( !((states[1]==0))&& !((states[1]==3))))", II, tt, t);
		/* merge: .(goto)(0, 315, 314) */
		reached[10][315] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 346: // STATE 312 - _spin_nvr.tmp:915 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported312 = 0;
			if (verbose && !reported312)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported312 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported312 = 0;
			if (verbose && !reported312)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported312 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][312] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 347: // STATE 317 - _spin_nvr.tmp:919 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported317 = 0;
			if (verbose && !reported317)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported317 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported317 = 0;
			if (verbose && !reported317)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported317 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][317] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 348: // STATE 319 - _spin_nvr.tmp:920 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][319] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 349: // STATE 321 - _spin_nvr.tmp:921 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (334:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][321] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 322, 334) */
		reached[10][322] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==3)))), " !(( !((states[1]==0))&& !((states[1]==3))))", II, tt, t);
		/* merge: .(goto)(0, 335, 334) */
		reached[10][335] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 350: // STATE 324 - _spin_nvr.tmp:922 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][324] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 351: // STATE 326 - _spin_nvr.tmp:923 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][326] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 352: // STATE 330 - _spin_nvr.tmp:925 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported330 = 0;
			if (verbose && !reported330)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported330 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported330 = 0;
			if (verbose && !reported330)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported330 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][330] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 353: // STATE 332 - _spin_nvr.tmp:926 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][332] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 354: // STATE 337 - _spin_nvr.tmp:930 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported337 = 0;
			if (verbose && !reported337)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported337 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported337 = 0;
			if (verbose && !reported337)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported337 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][337] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 355: // STATE 341 - _spin_nvr.tmp:932 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (348:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported341 = 0;
			if (verbose && !reported341)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported341 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported341 = 0;
			if (verbose && !reported341)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported341 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][341] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 342, 348) */
		reached[10][342] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==3)))), " !(( !((states[1]==0))&& !((states[1]==3))))", II, tt, t);
		/* merge: .(goto)(0, 349, 348) */
		reached[10][349] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 356: // STATE 344 - _spin_nvr.tmp:933 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported344 = 0;
			if (verbose && !reported344)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported344 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported344 = 0;
			if (verbose && !reported344)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported344 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][344] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 357: // STATE 346 - _spin_nvr.tmp:934 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported346 = 0;
			if (verbose && !reported346)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported346 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported346 = 0;
			if (verbose && !reported346)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported346 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][346] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 358: // STATE 351 - _spin_nvr.tmp:938 - [(!((states[1]==0)))] (356:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported351 = 0;
			if (verbose && !reported351)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported351 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported351 = 0;
			if (verbose && !reported351)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported351 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][351] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		/* merge: assert(!(!((states[1]==0))))(0, 352, 356) */
		reached[10][352] = 1;
		spin_assert( !( !((now.states[1]==0))), " !( !((states[1]==0)))", II, tt, t);
		/* merge: .(goto)(0, 357, 356) */
		reached[10][357] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 359: // STATE 359 - _spin_nvr.tmp:943 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported359 = 0;
			if (verbose && !reported359)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported359 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported359 = 0;
			if (verbose && !reported359)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported359 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][359] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 360: // STATE 361 - _spin_nvr.tmp:944 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported361 = 0;
			if (verbose && !reported361)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported361 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported361 = 0;
			if (verbose && !reported361)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported361 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][361] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 361: // STATE 363 - _spin_nvr.tmp:945 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (380:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported363 = 0;
			if (verbose && !reported363)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported363 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported363 = 0;
			if (verbose && !reported363)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported363 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][363] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 364, 380) */
		reached[10][364] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==3)))), " !(( !((states[1]==0))&& !((states[1]==3))))", II, tt, t);
		/* merge: .(goto)(0, 381, 380) */
		reached[10][381] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 362: // STATE 366 - _spin_nvr.tmp:946 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported366 = 0;
			if (verbose && !reported366)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported366 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported366 = 0;
			if (verbose && !reported366)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported366 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][366] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 363: // STATE 368 - _spin_nvr.tmp:947 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported368 = 0;
			if (verbose && !reported368)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported368 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported368 = 0;
			if (verbose && !reported368)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported368 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][368] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 364: // STATE 372 - _spin_nvr.tmp:949 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported372 = 0;
			if (verbose && !reported372)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported372 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported372 = 0;
			if (verbose && !reported372)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported372 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][372] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 365: // STATE 374 - _spin_nvr.tmp:950 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported374 = 0;
			if (verbose && !reported374)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported374 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported374 = 0;
			if (verbose && !reported374)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported374 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][374] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 366: // STATE 376 - _spin_nvr.tmp:951 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported376 = 0;
			if (verbose && !reported376)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported376 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported376 = 0;
			if (verbose && !reported376)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported376 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][376] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 367: // STATE 378 - _spin_nvr.tmp:952 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported378 = 0;
			if (verbose && !reported378)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported378 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported378 = 0;
			if (verbose && !reported378)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported378 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][378] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 368: // STATE 383 - _spin_nvr.tmp:956 - [(!((states[1]==ABORTED)))] (388:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported383 = 0;
			if (verbose && !reported383)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported383 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported383 = 0;
			if (verbose && !reported383)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported383 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][383] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		/* merge: assert(!(!((states[1]==ABORTED))))(0, 384, 388) */
		reached[10][384] = 1;
		spin_assert( !( !((now.states[1]==3))), " !( !((states[1]==3)))", II, tt, t);
		/* merge: .(goto)(0, 389, 388) */
		reached[10][389] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 369: // STATE 391 - _spin_nvr.tmp:961 - [((!((states[1]==0))&&!((states[1]==ABORTED))))] (400:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported391 = 0;
			if (verbose && !reported391)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported391 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported391 = 0;
			if (verbose && !reported391)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported391 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][391] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==3)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==ABORTED)))))(0, 392, 400) */
		reached[10][392] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==3)))), " !(( !((states[1]==0))&& !((states[1]==3))))", II, tt, t);
		/* merge: .(goto)(0, 401, 400) */
		reached[10][401] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 370: // STATE 394 - _spin_nvr.tmp:962 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported394 = 0;
			if (verbose && !reported394)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported394 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported394 = 0;
			if (verbose && !reported394)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported394 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][394] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 371: // STATE 396 - _spin_nvr.tmp:963 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported396 = 0;
			if (verbose && !reported396)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported396 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported396 = 0;
			if (verbose && !reported396)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported396 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][396] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 372: // STATE 403 - _spin_nvr.tmp:968 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported403 = 0;
			if (verbose && !reported403)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported403 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported403 = 0;
			if (verbose && !reported403)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported403 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][403] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 373: // STATE 407 - _spin_nvr.tmp:970 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (412:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported407 = 0;
			if (verbose && !reported407)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported407 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported407 = 0;
			if (verbose && !reported407)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported407 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][407] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 408, 412) */
		reached[10][408] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==3)))), " !(( !((states[0]==0))&& !((states[0]==3))))", II, tt, t);
		/* merge: .(goto)(0, 413, 412) */
		reached[10][413] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 374: // STATE 410 - _spin_nvr.tmp:971 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported410 = 0;
			if (verbose && !reported410)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported410 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported410 = 0;
			if (verbose && !reported410)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported410 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][410] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 375: // STATE 415 - _spin_nvr.tmp:975 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported415 = 0;
			if (verbose && !reported415)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported415 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported415 = 0;
			if (verbose && !reported415)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported415 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][415] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 376: // STATE 417 - _spin_nvr.tmp:976 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported417 = 0;
			if (verbose && !reported417)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported417 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported417 = 0;
			if (verbose && !reported417)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported417 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][417] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 377: // STATE 419 - _spin_nvr.tmp:977 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (432:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported419 = 0;
			if (verbose && !reported419)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported419 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported419 = 0;
			if (verbose && !reported419)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported419 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][419] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 420, 432) */
		reached[10][420] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==3)))), " !(( !((states[0]==0))&& !((states[0]==3))))", II, tt, t);
		/* merge: .(goto)(0, 433, 432) */
		reached[10][433] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 378: // STATE 422 - _spin_nvr.tmp:978 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported422 = 0;
			if (verbose && !reported422)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported422 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported422 = 0;
			if (verbose && !reported422)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported422 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][422] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 379: // STATE 424 - _spin_nvr.tmp:979 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported424 = 0;
			if (verbose && !reported424)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported424 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported424 = 0;
			if (verbose && !reported424)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported424 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][424] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 380: // STATE 428 - _spin_nvr.tmp:981 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported428 = 0;
			if (verbose && !reported428)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported428 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported428 = 0;
			if (verbose && !reported428)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported428 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][428] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 381: // STATE 430 - _spin_nvr.tmp:982 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported430 = 0;
			if (verbose && !reported430)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported430 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported430 = 0;
			if (verbose && !reported430)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported430 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][430] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 382: // STATE 435 - _spin_nvr.tmp:986 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported435 = 0;
			if (verbose && !reported435)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported435 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported435 = 0;
			if (verbose && !reported435)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported435 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][435] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 383: // STATE 439 - _spin_nvr.tmp:988 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (446:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported439 = 0;
			if (verbose && !reported439)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported439 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported439 = 0;
			if (verbose && !reported439)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported439 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][439] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 440, 446) */
		reached[10][440] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==3)))), " !(( !((states[0]==0))&& !((states[0]==3))))", II, tt, t);
		/* merge: .(goto)(0, 447, 446) */
		reached[10][447] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 384: // STATE 442 - _spin_nvr.tmp:989 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported442 = 0;
			if (verbose && !reported442)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported442 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported442 = 0;
			if (verbose && !reported442)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported442 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][442] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 385: // STATE 444 - _spin_nvr.tmp:990 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported444 = 0;
			if (verbose && !reported444)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported444 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported444 = 0;
			if (verbose && !reported444)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported444 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][444] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 386: // STATE 449 - _spin_nvr.tmp:994 - [(!((states[0]==0)))] (454:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported449 = 0;
			if (verbose && !reported449)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported449 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported449 = 0;
			if (verbose && !reported449)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported449 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][449] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		/* merge: assert(!(!((states[0]==0))))(0, 450, 454) */
		reached[10][450] = 1;
		spin_assert( !( !((now.states[0]==0))), " !( !((states[0]==0)))", II, tt, t);
		/* merge: .(goto)(0, 455, 454) */
		reached[10][455] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 387: // STATE 457 - _spin_nvr.tmp:999 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported457 = 0;
			if (verbose && !reported457)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported457 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported457 = 0;
			if (verbose && !reported457)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported457 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][457] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 388: // STATE 459 - _spin_nvr.tmp:1000 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported459 = 0;
			if (verbose && !reported459)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported459 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported459 = 0;
			if (verbose && !reported459)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported459 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][459] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 389: // STATE 461 - _spin_nvr.tmp:1001 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (478:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported461 = 0;
			if (verbose && !reported461)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported461 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported461 = 0;
			if (verbose && !reported461)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported461 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][461] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 462, 478) */
		reached[10][462] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==3)))), " !(( !((states[0]==0))&& !((states[0]==3))))", II, tt, t);
		/* merge: .(goto)(0, 479, 478) */
		reached[10][479] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 390: // STATE 464 - _spin_nvr.tmp:1002 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported464 = 0;
			if (verbose && !reported464)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported464 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported464 = 0;
			if (verbose && !reported464)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported464 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][464] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 391: // STATE 466 - _spin_nvr.tmp:1003 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported466 = 0;
			if (verbose && !reported466)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported466 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported466 = 0;
			if (verbose && !reported466)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported466 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][466] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 392: // STATE 470 - _spin_nvr.tmp:1005 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported470 = 0;
			if (verbose && !reported470)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported470 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported470 = 0;
			if (verbose && !reported470)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported470 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][470] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 393: // STATE 472 - _spin_nvr.tmp:1006 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported472 = 0;
			if (verbose && !reported472)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported472 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported472 = 0;
			if (verbose && !reported472)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported472 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][472] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 394: // STATE 474 - _spin_nvr.tmp:1007 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported474 = 0;
			if (verbose && !reported474)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported474 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported474 = 0;
			if (verbose && !reported474)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported474 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][474] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 395: // STATE 476 - _spin_nvr.tmp:1008 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported476 = 0;
			if (verbose && !reported476)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported476 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported476 = 0;
			if (verbose && !reported476)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported476 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][476] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 396: // STATE 481 - _spin_nvr.tmp:1012 - [(!((states[0]==ABORTED)))] (486:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported481 = 0;
			if (verbose && !reported481)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported481 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported481 = 0;
			if (verbose && !reported481)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported481 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][481] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		/* merge: assert(!(!((states[0]==ABORTED))))(0, 482, 486) */
		reached[10][482] = 1;
		spin_assert( !( !((now.states[0]==3))), " !( !((states[0]==3)))", II, tt, t);
		/* merge: .(goto)(0, 487, 486) */
		reached[10][487] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 397: // STATE 489 - _spin_nvr.tmp:1017 - [((!((states[0]==0))&&!((states[0]==ABORTED))))] (498:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported489 = 0;
			if (verbose && !reported489)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported489 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported489 = 0;
			if (verbose && !reported489)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported489 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][489] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==3)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==ABORTED)))))(0, 490, 498) */
		reached[10][490] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==3)))), " !(( !((states[0]==0))&& !((states[0]==3))))", II, tt, t);
		/* merge: .(goto)(0, 499, 498) */
		reached[10][499] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 398: // STATE 492 - _spin_nvr.tmp:1018 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported492 = 0;
			if (verbose && !reported492)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported492 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported492 = 0;
			if (verbose && !reported492)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported492 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][492] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 399: // STATE 494 - _spin_nvr.tmp:1019 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported494 = 0;
			if (verbose && !reported494)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported494 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported494 = 0;
			if (verbose && !reported494)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported494 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][494] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 400: // STATE 502 - _spin_nvr.tmp:1024 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported502 = 0;
			if (verbose && !reported502)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported502 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported502 = 0;
			if (verbose && !reported502)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported502 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[10][502] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_aborting */
	case 401: // STATE 1 - _spin_nvr.tmp:710 - [((!(!((states[2]==ABORTING)))&&!((states[2]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][1] = 1;
		if (!(( !( !((now.states[2]==4)))&& !((now.states[2]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 402: // STATE 3 - _spin_nvr.tmp:711 - [((((!(!((states[0]==ABORTING)))&&!((states[0]==ABORTED)))&&!((states[0]==ABORTING)))||(((!(!((states[1]==ABORTING)))&&!((states[1]==ABORTED)))&&!((states[1]==ABORTING)))||((!(!((states[2]==ABORTING)))&&!((states[2]==ABORTED)))&&!((states[2]==ABORTING))))))] (12:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][3] = 1;
		if (!(((( !( !((now.states[0]==4)))&& !((now.states[0]==3)))&& !((now.states[0]==4)))||((( !( !((now.states[1]==4)))&& !((now.states[1]==3)))&& !((now.states[1]==4)))||(( !( !((now.states[2]==4)))&& !((now.states[2]==3)))&& !((now.states[2]==4)))))))
			continue;
		/* merge: assert(!((((!(!((states[0]==ABORTING)))&&!((states[0]==ABORTED)))&&!((states[0]==ABORTING)))||(((!(!((states[1]==ABORTING)))&&!((states[1]==ABORTED)))&&!((states[1]==ABORTING)))||((!(!((states[2]==ABORTING)))&&!((states[2]==ABORTED)))&&!((states[2]==ABORTING)))))))(0, 4, 12) */
		reached[9][4] = 1;
		spin_assert( !(((( !( !((now.states[0]==4)))&& !((now.states[0]==3)))&& !((now.states[0]==4)))||((( !( !((now.states[1]==4)))&& !((now.states[1]==3)))&& !((now.states[1]==4)))||(( !( !((now.states[2]==4)))&& !((now.states[2]==3)))&& !((now.states[2]==4)))))), " !(((( !( !((states[0]==4)))&& !((states[0]==3)))&& !((states[0]==4)))||((( !( !((states[1]==4)))&& !((states[1]==3)))&& !((states[1]==4)))||(( !( !((states[2]==4)))&& !((states[2]==3)))&& !((states[2]==4))))))", II, tt, t);
		/* merge: .(goto)(0, 13, 12) */
		reached[9][13] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 403: // STATE 6 - _spin_nvr.tmp:712 - [((!(!((states[1]==ABORTING)))&&!((states[1]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][6] = 1;
		if (!(( !( !((now.states[1]==4)))&& !((now.states[1]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 404: // STATE 8 - _spin_nvr.tmp:713 - [((!(!((states[0]==ABORTING)))&&!((states[0]==ABORTED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][8] = 1;
		if (!(( !( !((now.states[0]==4)))&& !((now.states[0]==3)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 405: // STATE 15 - _spin_nvr.tmp:718 - [(!((states[2]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][15] = 1;
		if (!( !((now.states[2]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 406: // STATE 17 - _spin_nvr.tmp:719 - [((!((states[2]==ABORTED))&&!((states[2]==ABORTING))))] (20:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][17] = 1;
		if (!(( !((now.states[2]==3))&& !((now.states[2]==4)))))
			continue;
		/* merge: assert(!((!((states[2]==ABORTED))&&!((states[2]==ABORTING)))))(0, 18, 20) */
		reached[9][18] = 1;
		spin_assert( !(( !((now.states[2]==3))&& !((now.states[2]==4)))), " !(( !((states[2]==3))&& !((states[2]==4))))", II, tt, t);
		/* merge: .(goto)(0, 21, 20) */
		reached[9][21] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 407: // STATE 23 - _spin_nvr.tmp:723 - [(!((states[1]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported23 = 0;
			if (verbose && !reported23)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported23 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported23 = 0;
			if (verbose && !reported23)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported23 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][23] = 1;
		if (!( !((now.states[1]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 408: // STATE 25 - _spin_nvr.tmp:724 - [((!((states[1]==ABORTED))&&!((states[1]==ABORTING))))] (28:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported25 = 0;
			if (verbose && !reported25)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported25 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported25 = 0;
			if (verbose && !reported25)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported25 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][25] = 1;
		if (!(( !((now.states[1]==3))&& !((now.states[1]==4)))))
			continue;
		/* merge: assert(!((!((states[1]==ABORTED))&&!((states[1]==ABORTING)))))(0, 26, 28) */
		reached[9][26] = 1;
		spin_assert( !(( !((now.states[1]==3))&& !((now.states[1]==4)))), " !(( !((states[1]==3))&& !((states[1]==4))))", II, tt, t);
		/* merge: .(goto)(0, 29, 28) */
		reached[9][29] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 409: // STATE 31 - _spin_nvr.tmp:728 - [(!((states[0]==ABORTED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported31 = 0;
			if (verbose && !reported31)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported31 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported31 = 0;
			if (verbose && !reported31)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported31 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][31] = 1;
		if (!( !((now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 410: // STATE 33 - _spin_nvr.tmp:729 - [((!((states[0]==ABORTED))&&!((states[0]==ABORTING))))] (36:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported33 = 0;
			if (verbose && !reported33)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported33 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported33 = 0;
			if (verbose && !reported33)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported33 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][33] = 1;
		if (!(( !((now.states[0]==3))&& !((now.states[0]==4)))))
			continue;
		/* merge: assert(!((!((states[0]==ABORTED))&&!((states[0]==ABORTING)))))(0, 34, 36) */
		reached[9][34] = 1;
		spin_assert( !(( !((now.states[0]==3))&& !((now.states[0]==4)))), " !(( !((states[0]==3))&& !((states[0]==4))))", II, tt, t);
		/* merge: .(goto)(0, 37, 36) */
		reached[9][37] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 411: // STATE 40 - _spin_nvr.tmp:733 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[9][40] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_stopped */
	case 412: // STATE 1 - _spin_nvr.tmp:419 - [(((!(!((states[2]==STOPPED)))&&!((states[2]==0)))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][1] = 1;
		if (!((( !( !((now.states[2]==5)))&& !((now.states[2]==0)))&& !((now.states[2]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 413: // STATE 3 - _spin_nvr.tmp:420 - [((!(!((states[2]==STOPPED)))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][3] = 1;
		if (!(( !( !((now.states[2]==5)))&& !((now.states[2]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 414: // STATE 5 - _spin_nvr.tmp:421 - [((((!(!((states[0]==STOPPED)))&&!((states[0]==0)))&&!((states[0]==STOPPED)))||(((!(!((states[1]==STOPPED)))&&!((states[1]==0)))&&!((states[1]==STOPPED)))||((!(!((states[2]==STOPPED)))&&!((states[2]==0)))&&!((states[2]==STOPPED))))))] (48:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][5] = 1;
		if (!(((( !( !((now.states[0]==5)))&& !((now.states[0]==0)))&& !((now.states[0]==5)))||((( !( !((now.states[1]==5)))&& !((now.states[1]==0)))&& !((now.states[1]==5)))||(( !( !((now.states[2]==5)))&& !((now.states[2]==0)))&& !((now.states[2]==5)))))))
			continue;
		/* merge: assert(!((((!(!((states[0]==STOPPED)))&&!((states[0]==0)))&&!((states[0]==STOPPED)))||(((!(!((states[1]==STOPPED)))&&!((states[1]==0)))&&!((states[1]==STOPPED)))||((!(!((states[2]==STOPPED)))&&!((states[2]==0)))&&!((states[2]==STOPPED)))))))(0, 6, 48) */
		reached[8][6] = 1;
		spin_assert( !(((( !( !((now.states[0]==5)))&& !((now.states[0]==0)))&& !((now.states[0]==5)))||((( !( !((now.states[1]==5)))&& !((now.states[1]==0)))&& !((now.states[1]==5)))||(( !( !((now.states[2]==5)))&& !((now.states[2]==0)))&& !((now.states[2]==5)))))), " !(((( !( !((states[0]==5)))&& !((states[0]==0)))&& !((states[0]==5)))||((( !( !((states[1]==5)))&& !((states[1]==0)))&& !((states[1]==5)))||(( !( !((states[2]==5)))&& !((states[2]==0)))&& !((states[2]==5))))))", II, tt, t);
		/* merge: .(goto)(0, 49, 48) */
		reached[8][49] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 415: // STATE 8 - _spin_nvr.tmp:422 - [((!(!((states[2]==STOPPED)))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][8] = 1;
		if (!(( !( !((now.states[2]==5)))&& !((now.states[2]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 416: // STATE 10 - _spin_nvr.tmp:423 - [((!(!((states[2]==STOPPED)))&&!((states[2]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][10] = 1;
		if (!(( !( !((now.states[2]==5)))&& !((now.states[2]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 417: // STATE 12 - _spin_nvr.tmp:424 - [(!(!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][12] = 1;
		if (!( !( !((now.states[2]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 418: // STATE 14 - _spin_nvr.tmp:425 - [(((!(!((states[2]==STOPPED)))&&!((states[2]==0)))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][14] = 1;
		if (!((( !( !((now.states[2]==5)))&& !((now.states[2]==0)))&& !((now.states[2]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 419: // STATE 16 - _spin_nvr.tmp:426 - [((!(!((states[2]==STOPPED)))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][16] = 1;
		if (!(( !( !((now.states[2]==5)))&& !((now.states[2]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 420: // STATE 18 - _spin_nvr.tmp:427 - [(((!(!((states[1]==STOPPED)))&&!((states[1]==0)))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][18] = 1;
		if (!((( !( !((now.states[1]==5)))&& !((now.states[1]==0)))&& !((now.states[1]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 421: // STATE 20 - _spin_nvr.tmp:428 - [((!(!((states[1]==STOPPED)))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][20] = 1;
		if (!(( !( !((now.states[1]==5)))&& !((now.states[1]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 422: // STATE 22 - _spin_nvr.tmp:429 - [((!(!((states[1]==STOPPED)))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][22] = 1;
		if (!(( !( !((now.states[1]==5)))&& !((now.states[1]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 423: // STATE 24 - _spin_nvr.tmp:430 - [((!(!((states[1]==STOPPED)))&&!((states[1]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][24] = 1;
		if (!(( !( !((now.states[1]==5)))&& !((now.states[1]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 424: // STATE 26 - _spin_nvr.tmp:431 - [(!(!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][26] = 1;
		if (!( !( !((now.states[1]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 425: // STATE 28 - _spin_nvr.tmp:432 - [(((!(!((states[1]==STOPPED)))&&!((states[1]==0)))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][28] = 1;
		if (!((( !( !((now.states[1]==5)))&& !((now.states[1]==0)))&& !((now.states[1]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 426: // STATE 30 - _spin_nvr.tmp:433 - [((!(!((states[1]==STOPPED)))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][30] = 1;
		if (!(( !( !((now.states[1]==5)))&& !((now.states[1]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 427: // STATE 32 - _spin_nvr.tmp:434 - [(((!(!((states[0]==STOPPED)))&&!((states[0]==0)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][32] = 1;
		if (!((( !( !((now.states[0]==5)))&& !((now.states[0]==0)))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 428: // STATE 34 - _spin_nvr.tmp:435 - [((!(!((states[0]==STOPPED)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported34 = 0;
			if (verbose && !reported34)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported34 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][34] = 1;
		if (!(( !( !((now.states[0]==5)))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 429: // STATE 36 - _spin_nvr.tmp:436 - [((!(!((states[0]==STOPPED)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported36 = 0;
			if (verbose && !reported36)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported36 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][36] = 1;
		if (!(( !( !((now.states[0]==5)))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 430: // STATE 38 - _spin_nvr.tmp:437 - [((!(!((states[0]==STOPPED)))&&!((states[0]==0))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported38 = 0;
			if (verbose && !reported38)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported38 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported38 = 0;
			if (verbose && !reported38)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported38 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][38] = 1;
		if (!(( !( !((now.states[0]==5)))&& !((now.states[0]==0)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 431: // STATE 40 - _spin_nvr.tmp:438 - [(!(!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][40] = 1;
		if (!( !( !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 432: // STATE 42 - _spin_nvr.tmp:439 - [(((!(!((states[0]==STOPPED)))&&!((states[0]==0)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported42 = 0;
			if (verbose && !reported42)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported42 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported42 = 0;
			if (verbose && !reported42)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported42 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][42] = 1;
		if (!((( !( !((now.states[0]==5)))&& !((now.states[0]==0)))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 433: // STATE 44 - _spin_nvr.tmp:440 - [((!(!((states[0]==STOPPED)))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported44 = 0;
			if (verbose && !reported44)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported44 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][44] = 1;
		if (!(( !( !((now.states[0]==5)))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 434: // STATE 51 - _spin_nvr.tmp:445 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][51] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 435: // STATE 55 - _spin_nvr.tmp:447 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (60:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported55 = 0;
			if (verbose && !reported55)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported55 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported55 = 0;
			if (verbose && !reported55)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported55 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][55] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 56, 60) */
		reached[8][56] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==5)))), " !(( !((states[2]==0))&& !((states[2]==5))))", II, tt, t);
		/* merge: .(goto)(0, 61, 60) */
		reached[8][61] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 436: // STATE 58 - _spin_nvr.tmp:448 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported58 = 0;
			if (verbose && !reported58)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported58 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][58] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 437: // STATE 63 - _spin_nvr.tmp:452 - [(!((states[2]==0)))] (68:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported63 = 0;
			if (verbose && !reported63)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported63 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][63] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		/* merge: assert(!(!((states[2]==0))))(0, 64, 68) */
		reached[8][64] = 1;
		spin_assert( !( !((now.states[2]==0))), " !( !((states[2]==0)))", II, tt, t);
		/* merge: .(goto)(0, 69, 68) */
		reached[8][69] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 438: // STATE 71 - _spin_nvr.tmp:457 - [(!((states[2]==STOPPED)))] (76:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][71] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		/* merge: assert(!(!((states[2]==STOPPED))))(0, 72, 76) */
		reached[8][72] = 1;
		spin_assert( !( !((now.states[2]==5))), " !( !((states[2]==5)))", II, tt, t);
		/* merge: .(goto)(0, 77, 76) */
		reached[8][77] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 439: // STATE 79 - _spin_nvr.tmp:462 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (88:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported79 = 0;
			if (verbose && !reported79)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported79 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported79 = 0;
			if (verbose && !reported79)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported79 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][79] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 80, 88) */
		reached[8][80] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==5)))), " !(( !((states[2]==0))&& !((states[2]==5))))", II, tt, t);
		/* merge: .(goto)(0, 89, 88) */
		reached[8][89] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 440: // STATE 82 - _spin_nvr.tmp:463 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][82] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 441: // STATE 84 - _spin_nvr.tmp:464 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported84 = 0;
			if (verbose && !reported84)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported84 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][84] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 442: // STATE 91 - _spin_nvr.tmp:469 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][91] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 443: // STATE 95 - _spin_nvr.tmp:471 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (100:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][95] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 96, 100) */
		reached[8][96] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==5)))), " !(( !((states[1]==0))&& !((states[1]==5))))", II, tt, t);
		/* merge: .(goto)(0, 101, 100) */
		reached[8][101] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 444: // STATE 98 - _spin_nvr.tmp:472 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported98 = 0;
			if (verbose && !reported98)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported98 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported98 = 0;
			if (verbose && !reported98)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported98 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][98] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 445: // STATE 103 - _spin_nvr.tmp:476 - [(!((states[1]==0)))] (108:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported103 = 0;
			if (verbose && !reported103)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported103 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported103 = 0;
			if (verbose && !reported103)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported103 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][103] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		/* merge: assert(!(!((states[1]==0))))(0, 104, 108) */
		reached[8][104] = 1;
		spin_assert( !( !((now.states[1]==0))), " !( !((states[1]==0)))", II, tt, t);
		/* merge: .(goto)(0, 109, 108) */
		reached[8][109] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 446: // STATE 111 - _spin_nvr.tmp:481 - [(!((states[1]==STOPPED)))] (116:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported111 = 0;
			if (verbose && !reported111)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported111 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][111] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		/* merge: assert(!(!((states[1]==STOPPED))))(0, 112, 116) */
		reached[8][112] = 1;
		spin_assert( !( !((now.states[1]==5))), " !( !((states[1]==5)))", II, tt, t);
		/* merge: .(goto)(0, 117, 116) */
		reached[8][117] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 447: // STATE 119 - _spin_nvr.tmp:486 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (128:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported119 = 0;
			if (verbose && !reported119)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported119 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported119 = 0;
			if (verbose && !reported119)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported119 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][119] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 120, 128) */
		reached[8][120] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==5)))), " !(( !((states[1]==0))&& !((states[1]==5))))", II, tt, t);
		/* merge: .(goto)(0, 129, 128) */
		reached[8][129] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 448: // STATE 122 - _spin_nvr.tmp:487 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][122] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 449: // STATE 124 - _spin_nvr.tmp:488 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported124 = 0;
			if (verbose && !reported124)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported124 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][124] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 450: // STATE 131 - _spin_nvr.tmp:493 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported131 = 0;
			if (verbose && !reported131)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported131 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][131] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 451: // STATE 135 - _spin_nvr.tmp:495 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (140:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][135] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 136, 140) */
		reached[8][136] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==5)))), " !(( !((states[0]==0))&& !((states[0]==5))))", II, tt, t);
		/* merge: .(goto)(0, 141, 140) */
		reached[8][141] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 452: // STATE 138 - _spin_nvr.tmp:496 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported138 = 0;
			if (verbose && !reported138)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported138 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported138 = 0;
			if (verbose && !reported138)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported138 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][138] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 453: // STATE 143 - _spin_nvr.tmp:500 - [(!((states[0]==0)))] (148:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported143 = 0;
			if (verbose && !reported143)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported143 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported143 = 0;
			if (verbose && !reported143)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported143 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][143] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		/* merge: assert(!(!((states[0]==0))))(0, 144, 148) */
		reached[8][144] = 1;
		spin_assert( !( !((now.states[0]==0))), " !( !((states[0]==0)))", II, tt, t);
		/* merge: .(goto)(0, 149, 148) */
		reached[8][149] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 454: // STATE 151 - _spin_nvr.tmp:505 - [(!((states[0]==STOPPED)))] (156:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported151 = 0;
			if (verbose && !reported151)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported151 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported151 = 0;
			if (verbose && !reported151)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported151 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][151] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		/* merge: assert(!(!((states[0]==STOPPED))))(0, 152, 156) */
		reached[8][152] = 1;
		spin_assert( !( !((now.states[0]==5))), " !( !((states[0]==5)))", II, tt, t);
		/* merge: .(goto)(0, 157, 156) */
		reached[8][157] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 455: // STATE 159 - _spin_nvr.tmp:510 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (168:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][159] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 160, 168) */
		reached[8][160] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==5)))), " !(( !((states[0]==0))&& !((states[0]==5))))", II, tt, t);
		/* merge: .(goto)(0, 169, 168) */
		reached[8][169] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 456: // STATE 162 - _spin_nvr.tmp:511 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][162] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 457: // STATE 164 - _spin_nvr.tmp:512 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][164] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 458: // STATE 171 - _spin_nvr.tmp:517 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (180:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][171] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 172, 180) */
		reached[8][172] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==5)))), " !(( !((states[2]==0))&& !((states[2]==5))))", II, tt, t);
		/* merge: .(goto)(0, 181, 180) */
		reached[8][181] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 459: // STATE 174 - _spin_nvr.tmp:518 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported174 = 0;
			if (verbose && !reported174)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported174 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported174 = 0;
			if (verbose && !reported174)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported174 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][174] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 460: // STATE 176 - _spin_nvr.tmp:519 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported176 = 0;
			if (verbose && !reported176)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported176 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported176 = 0;
			if (verbose && !reported176)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported176 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][176] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 461: // STATE 183 - _spin_nvr.tmp:524 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (192:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported183 = 0;
			if (verbose && !reported183)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported183 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported183 = 0;
			if (verbose && !reported183)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported183 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][183] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 184, 192) */
		reached[8][184] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==5)))), " !(( !((states[1]==0))&& !((states[1]==5))))", II, tt, t);
		/* merge: .(goto)(0, 193, 192) */
		reached[8][193] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 462: // STATE 186 - _spin_nvr.tmp:525 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported186 = 0;
			if (verbose && !reported186)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported186 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported186 = 0;
			if (verbose && !reported186)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported186 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][186] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 463: // STATE 188 - _spin_nvr.tmp:526 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported188 = 0;
			if (verbose && !reported188)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported188 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported188 = 0;
			if (verbose && !reported188)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported188 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][188] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 464: // STATE 195 - _spin_nvr.tmp:531 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (204:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported195 = 0;
			if (verbose && !reported195)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported195 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported195 = 0;
			if (verbose && !reported195)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported195 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][195] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 196, 204) */
		reached[8][196] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==5)))), " !(( !((states[0]==0))&& !((states[0]==5))))", II, tt, t);
		/* merge: .(goto)(0, 205, 204) */
		reached[8][205] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 465: // STATE 198 - _spin_nvr.tmp:532 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][198] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 466: // STATE 200 - _spin_nvr.tmp:533 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported200 = 0;
			if (verbose && !reported200)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported200 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported200 = 0;
			if (verbose && !reported200)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported200 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][200] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 467: // STATE 207 - _spin_nvr.tmp:538 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported207 = 0;
			if (verbose && !reported207)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported207 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported207 = 0;
			if (verbose && !reported207)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported207 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][207] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 468: // STATE 211 - _spin_nvr.tmp:540 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (216:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][211] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 212, 216) */
		reached[8][212] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==5)))), " !(( !((states[2]==0))&& !((states[2]==5))))", II, tt, t);
		/* merge: .(goto)(0, 217, 216) */
		reached[8][217] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 469: // STATE 214 - _spin_nvr.tmp:541 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported214 = 0;
			if (verbose && !reported214)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported214 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported214 = 0;
			if (verbose && !reported214)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported214 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][214] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 470: // STATE 219 - _spin_nvr.tmp:545 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported219 = 0;
			if (verbose && !reported219)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported219 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported219 = 0;
			if (verbose && !reported219)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported219 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][219] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 471: // STATE 221 - _spin_nvr.tmp:546 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported221 = 0;
			if (verbose && !reported221)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported221 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported221 = 0;
			if (verbose && !reported221)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported221 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][221] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 472: // STATE 223 - _spin_nvr.tmp:547 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (236:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][223] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 224, 236) */
		reached[8][224] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==5)))), " !(( !((states[2]==0))&& !((states[2]==5))))", II, tt, t);
		/* merge: .(goto)(0, 237, 236) */
		reached[8][237] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 473: // STATE 226 - _spin_nvr.tmp:548 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported226 = 0;
			if (verbose && !reported226)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported226 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported226 = 0;
			if (verbose && !reported226)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported226 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][226] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 474: // STATE 228 - _spin_nvr.tmp:549 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported228 = 0;
			if (verbose && !reported228)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported228 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported228 = 0;
			if (verbose && !reported228)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported228 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][228] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 475: // STATE 232 - _spin_nvr.tmp:551 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][232] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 476: // STATE 234 - _spin_nvr.tmp:552 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][234] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 477: // STATE 239 - _spin_nvr.tmp:556 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][239] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 478: // STATE 243 - _spin_nvr.tmp:558 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (250:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][243] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 244, 250) */
		reached[8][244] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==5)))), " !(( !((states[2]==0))&& !((states[2]==5))))", II, tt, t);
		/* merge: .(goto)(0, 251, 250) */
		reached[8][251] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 479: // STATE 246 - _spin_nvr.tmp:559 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported246 = 0;
			if (verbose && !reported246)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported246 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported246 = 0;
			if (verbose && !reported246)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported246 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][246] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 480: // STATE 248 - _spin_nvr.tmp:560 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported248 = 0;
			if (verbose && !reported248)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported248 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported248 = 0;
			if (verbose && !reported248)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported248 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][248] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 481: // STATE 253 - _spin_nvr.tmp:564 - [(!((states[2]==0)))] (258:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported253 = 0;
			if (verbose && !reported253)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported253 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported253 = 0;
			if (verbose && !reported253)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported253 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][253] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		/* merge: assert(!(!((states[2]==0))))(0, 254, 258) */
		reached[8][254] = 1;
		spin_assert( !( !((now.states[2]==0))), " !( !((states[2]==0)))", II, tt, t);
		/* merge: .(goto)(0, 259, 258) */
		reached[8][259] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 482: // STATE 261 - _spin_nvr.tmp:569 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported261 = 0;
			if (verbose && !reported261)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported261 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported261 = 0;
			if (verbose && !reported261)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported261 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][261] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 483: // STATE 263 - _spin_nvr.tmp:570 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported263 = 0;
			if (verbose && !reported263)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported263 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported263 = 0;
			if (verbose && !reported263)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported263 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][263] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 484: // STATE 265 - _spin_nvr.tmp:571 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (282:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][265] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 266, 282) */
		reached[8][266] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==5)))), " !(( !((states[2]==0))&& !((states[2]==5))))", II, tt, t);
		/* merge: .(goto)(0, 283, 282) */
		reached[8][283] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 485: // STATE 268 - _spin_nvr.tmp:572 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported268 = 0;
			if (verbose && !reported268)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported268 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported268 = 0;
			if (verbose && !reported268)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported268 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][268] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 486: // STATE 270 - _spin_nvr.tmp:573 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][270] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 487: // STATE 274 - _spin_nvr.tmp:575 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported274 = 0;
			if (verbose && !reported274)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported274 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported274 = 0;
			if (verbose && !reported274)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported274 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][274] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 488: // STATE 276 - _spin_nvr.tmp:576 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported276 = 0;
			if (verbose && !reported276)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported276 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported276 = 0;
			if (verbose && !reported276)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported276 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][276] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 489: // STATE 278 - _spin_nvr.tmp:577 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported278 = 0;
			if (verbose && !reported278)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported278 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported278 = 0;
			if (verbose && !reported278)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported278 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][278] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 490: // STATE 280 - _spin_nvr.tmp:578 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported280 = 0;
			if (verbose && !reported280)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported280 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported280 = 0;
			if (verbose && !reported280)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported280 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][280] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 491: // STATE 285 - _spin_nvr.tmp:582 - [(!((states[2]==STOPPED)))] (290:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported285 = 0;
			if (verbose && !reported285)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported285 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported285 = 0;
			if (verbose && !reported285)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported285 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][285] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		/* merge: assert(!(!((states[2]==STOPPED))))(0, 286, 290) */
		reached[8][286] = 1;
		spin_assert( !( !((now.states[2]==5))), " !( !((states[2]==5)))", II, tt, t);
		/* merge: .(goto)(0, 291, 290) */
		reached[8][291] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 492: // STATE 293 - _spin_nvr.tmp:587 - [((!((states[2]==0))&&!((states[2]==STOPPED))))] (302:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][293] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==5)))))
			continue;
		/* merge: assert(!((!((states[2]==0))&&!((states[2]==STOPPED)))))(0, 294, 302) */
		reached[8][294] = 1;
		spin_assert( !(( !((now.states[2]==0))&& !((now.states[2]==5)))), " !(( !((states[2]==0))&& !((states[2]==5))))", II, tt, t);
		/* merge: .(goto)(0, 303, 302) */
		reached[8][303] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 493: // STATE 296 - _spin_nvr.tmp:588 - [(!((states[2]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported296 = 0;
			if (verbose && !reported296)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported296 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported296 = 0;
			if (verbose && !reported296)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported296 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][296] = 1;
		if (!( !((now.states[2]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 494: // STATE 298 - _spin_nvr.tmp:589 - [(!((states[2]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported298 = 0;
			if (verbose && !reported298)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported298 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported298 = 0;
			if (verbose && !reported298)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported298 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][298] = 1;
		if (!( !((now.states[2]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 495: // STATE 305 - _spin_nvr.tmp:594 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported305 = 0;
			if (verbose && !reported305)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported305 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported305 = 0;
			if (verbose && !reported305)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported305 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][305] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 496: // STATE 309 - _spin_nvr.tmp:596 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (314:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported309 = 0;
			if (verbose && !reported309)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported309 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported309 = 0;
			if (verbose && !reported309)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported309 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][309] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 310, 314) */
		reached[8][310] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==5)))), " !(( !((states[1]==0))&& !((states[1]==5))))", II, tt, t);
		/* merge: .(goto)(0, 315, 314) */
		reached[8][315] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 497: // STATE 312 - _spin_nvr.tmp:597 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported312 = 0;
			if (verbose && !reported312)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported312 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported312 = 0;
			if (verbose && !reported312)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported312 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][312] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 498: // STATE 317 - _spin_nvr.tmp:601 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported317 = 0;
			if (verbose && !reported317)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported317 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported317 = 0;
			if (verbose && !reported317)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported317 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][317] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 499: // STATE 319 - _spin_nvr.tmp:602 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][319] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 500: // STATE 321 - _spin_nvr.tmp:603 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (334:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][321] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 322, 334) */
		reached[8][322] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==5)))), " !(( !((states[1]==0))&& !((states[1]==5))))", II, tt, t);
		/* merge: .(goto)(0, 335, 334) */
		reached[8][335] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 501: // STATE 324 - _spin_nvr.tmp:604 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][324] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 502: // STATE 326 - _spin_nvr.tmp:605 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][326] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 503: // STATE 330 - _spin_nvr.tmp:607 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported330 = 0;
			if (verbose && !reported330)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported330 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported330 = 0;
			if (verbose && !reported330)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported330 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][330] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 504: // STATE 332 - _spin_nvr.tmp:608 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][332] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 505: // STATE 337 - _spin_nvr.tmp:612 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported337 = 0;
			if (verbose && !reported337)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported337 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported337 = 0;
			if (verbose && !reported337)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported337 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][337] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 506: // STATE 341 - _spin_nvr.tmp:614 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (348:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported341 = 0;
			if (verbose && !reported341)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported341 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported341 = 0;
			if (verbose && !reported341)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported341 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][341] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 342, 348) */
		reached[8][342] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==5)))), " !(( !((states[1]==0))&& !((states[1]==5))))", II, tt, t);
		/* merge: .(goto)(0, 349, 348) */
		reached[8][349] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 507: // STATE 344 - _spin_nvr.tmp:615 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported344 = 0;
			if (verbose && !reported344)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported344 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported344 = 0;
			if (verbose && !reported344)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported344 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][344] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 508: // STATE 346 - _spin_nvr.tmp:616 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported346 = 0;
			if (verbose && !reported346)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported346 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported346 = 0;
			if (verbose && !reported346)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported346 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][346] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 509: // STATE 351 - _spin_nvr.tmp:620 - [(!((states[1]==0)))] (356:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported351 = 0;
			if (verbose && !reported351)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported351 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported351 = 0;
			if (verbose && !reported351)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported351 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][351] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		/* merge: assert(!(!((states[1]==0))))(0, 352, 356) */
		reached[8][352] = 1;
		spin_assert( !( !((now.states[1]==0))), " !( !((states[1]==0)))", II, tt, t);
		/* merge: .(goto)(0, 357, 356) */
		reached[8][357] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 510: // STATE 359 - _spin_nvr.tmp:625 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported359 = 0;
			if (verbose && !reported359)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported359 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported359 = 0;
			if (verbose && !reported359)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported359 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][359] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 511: // STATE 361 - _spin_nvr.tmp:626 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported361 = 0;
			if (verbose && !reported361)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported361 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported361 = 0;
			if (verbose && !reported361)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported361 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][361] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 512: // STATE 363 - _spin_nvr.tmp:627 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (380:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported363 = 0;
			if (verbose && !reported363)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported363 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported363 = 0;
			if (verbose && !reported363)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported363 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][363] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 364, 380) */
		reached[8][364] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==5)))), " !(( !((states[1]==0))&& !((states[1]==5))))", II, tt, t);
		/* merge: .(goto)(0, 381, 380) */
		reached[8][381] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 513: // STATE 366 - _spin_nvr.tmp:628 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported366 = 0;
			if (verbose && !reported366)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported366 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported366 = 0;
			if (verbose && !reported366)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported366 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][366] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 514: // STATE 368 - _spin_nvr.tmp:629 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported368 = 0;
			if (verbose && !reported368)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported368 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported368 = 0;
			if (verbose && !reported368)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported368 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][368] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 515: // STATE 372 - _spin_nvr.tmp:631 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported372 = 0;
			if (verbose && !reported372)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported372 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported372 = 0;
			if (verbose && !reported372)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported372 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][372] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 516: // STATE 374 - _spin_nvr.tmp:632 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported374 = 0;
			if (verbose && !reported374)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported374 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported374 = 0;
			if (verbose && !reported374)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported374 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][374] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 517: // STATE 376 - _spin_nvr.tmp:633 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported376 = 0;
			if (verbose && !reported376)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported376 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported376 = 0;
			if (verbose && !reported376)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported376 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][376] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 518: // STATE 378 - _spin_nvr.tmp:634 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported378 = 0;
			if (verbose && !reported378)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported378 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported378 = 0;
			if (verbose && !reported378)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported378 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][378] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 519: // STATE 383 - _spin_nvr.tmp:638 - [(!((states[1]==STOPPED)))] (388:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported383 = 0;
			if (verbose && !reported383)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported383 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported383 = 0;
			if (verbose && !reported383)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported383 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][383] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		/* merge: assert(!(!((states[1]==STOPPED))))(0, 384, 388) */
		reached[8][384] = 1;
		spin_assert( !( !((now.states[1]==5))), " !( !((states[1]==5)))", II, tt, t);
		/* merge: .(goto)(0, 389, 388) */
		reached[8][389] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 520: // STATE 391 - _spin_nvr.tmp:643 - [((!((states[1]==0))&&!((states[1]==STOPPED))))] (400:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported391 = 0;
			if (verbose && !reported391)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported391 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported391 = 0;
			if (verbose && !reported391)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported391 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][391] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==5)))))
			continue;
		/* merge: assert(!((!((states[1]==0))&&!((states[1]==STOPPED)))))(0, 392, 400) */
		reached[8][392] = 1;
		spin_assert( !(( !((now.states[1]==0))&& !((now.states[1]==5)))), " !(( !((states[1]==0))&& !((states[1]==5))))", II, tt, t);
		/* merge: .(goto)(0, 401, 400) */
		reached[8][401] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 521: // STATE 394 - _spin_nvr.tmp:644 - [(!((states[1]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported394 = 0;
			if (verbose && !reported394)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported394 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported394 = 0;
			if (verbose && !reported394)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported394 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][394] = 1;
		if (!( !((now.states[1]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 522: // STATE 396 - _spin_nvr.tmp:645 - [(!((states[1]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported396 = 0;
			if (verbose && !reported396)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported396 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported396 = 0;
			if (verbose && !reported396)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported396 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][396] = 1;
		if (!( !((now.states[1]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 523: // STATE 403 - _spin_nvr.tmp:650 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported403 = 0;
			if (verbose && !reported403)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported403 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported403 = 0;
			if (verbose && !reported403)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported403 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][403] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 524: // STATE 407 - _spin_nvr.tmp:652 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (412:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported407 = 0;
			if (verbose && !reported407)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported407 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported407 = 0;
			if (verbose && !reported407)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported407 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][407] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 408, 412) */
		reached[8][408] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==5)))), " !(( !((states[0]==0))&& !((states[0]==5))))", II, tt, t);
		/* merge: .(goto)(0, 413, 412) */
		reached[8][413] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 525: // STATE 410 - _spin_nvr.tmp:653 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported410 = 0;
			if (verbose && !reported410)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported410 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported410 = 0;
			if (verbose && !reported410)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported410 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][410] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 526: // STATE 415 - _spin_nvr.tmp:657 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported415 = 0;
			if (verbose && !reported415)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported415 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported415 = 0;
			if (verbose && !reported415)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported415 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][415] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 527: // STATE 417 - _spin_nvr.tmp:658 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported417 = 0;
			if (verbose && !reported417)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported417 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported417 = 0;
			if (verbose && !reported417)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported417 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][417] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 528: // STATE 419 - _spin_nvr.tmp:659 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (432:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported419 = 0;
			if (verbose && !reported419)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported419 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported419 = 0;
			if (verbose && !reported419)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported419 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][419] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 420, 432) */
		reached[8][420] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==5)))), " !(( !((states[0]==0))&& !((states[0]==5))))", II, tt, t);
		/* merge: .(goto)(0, 433, 432) */
		reached[8][433] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 529: // STATE 422 - _spin_nvr.tmp:660 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported422 = 0;
			if (verbose && !reported422)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported422 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported422 = 0;
			if (verbose && !reported422)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported422 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][422] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 530: // STATE 424 - _spin_nvr.tmp:661 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported424 = 0;
			if (verbose && !reported424)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported424 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported424 = 0;
			if (verbose && !reported424)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported424 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][424] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 531: // STATE 428 - _spin_nvr.tmp:663 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported428 = 0;
			if (verbose && !reported428)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported428 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported428 = 0;
			if (verbose && !reported428)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported428 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][428] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 532: // STATE 430 - _spin_nvr.tmp:664 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported430 = 0;
			if (verbose && !reported430)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported430 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported430 = 0;
			if (verbose && !reported430)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported430 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][430] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 533: // STATE 435 - _spin_nvr.tmp:668 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported435 = 0;
			if (verbose && !reported435)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported435 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported435 = 0;
			if (verbose && !reported435)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported435 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][435] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 534: // STATE 439 - _spin_nvr.tmp:670 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (446:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported439 = 0;
			if (verbose && !reported439)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported439 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported439 = 0;
			if (verbose && !reported439)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported439 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][439] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 440, 446) */
		reached[8][440] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==5)))), " !(( !((states[0]==0))&& !((states[0]==5))))", II, tt, t);
		/* merge: .(goto)(0, 447, 446) */
		reached[8][447] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 535: // STATE 442 - _spin_nvr.tmp:671 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported442 = 0;
			if (verbose && !reported442)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported442 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported442 = 0;
			if (verbose && !reported442)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported442 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][442] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 536: // STATE 444 - _spin_nvr.tmp:672 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported444 = 0;
			if (verbose && !reported444)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported444 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported444 = 0;
			if (verbose && !reported444)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported444 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][444] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 537: // STATE 449 - _spin_nvr.tmp:676 - [(!((states[0]==0)))] (454:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported449 = 0;
			if (verbose && !reported449)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported449 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported449 = 0;
			if (verbose && !reported449)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported449 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][449] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		/* merge: assert(!(!((states[0]==0))))(0, 450, 454) */
		reached[8][450] = 1;
		spin_assert( !( !((now.states[0]==0))), " !( !((states[0]==0)))", II, tt, t);
		/* merge: .(goto)(0, 455, 454) */
		reached[8][455] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 538: // STATE 457 - _spin_nvr.tmp:681 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported457 = 0;
			if (verbose && !reported457)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported457 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported457 = 0;
			if (verbose && !reported457)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported457 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][457] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 539: // STATE 459 - _spin_nvr.tmp:682 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported459 = 0;
			if (verbose && !reported459)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported459 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported459 = 0;
			if (verbose && !reported459)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported459 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][459] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 540: // STATE 461 - _spin_nvr.tmp:683 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (478:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported461 = 0;
			if (verbose && !reported461)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported461 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported461 = 0;
			if (verbose && !reported461)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported461 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][461] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 462, 478) */
		reached[8][462] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==5)))), " !(( !((states[0]==0))&& !((states[0]==5))))", II, tt, t);
		/* merge: .(goto)(0, 479, 478) */
		reached[8][479] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 541: // STATE 464 - _spin_nvr.tmp:684 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported464 = 0;
			if (verbose && !reported464)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported464 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported464 = 0;
			if (verbose && !reported464)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported464 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][464] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 542: // STATE 466 - _spin_nvr.tmp:685 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported466 = 0;
			if (verbose && !reported466)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported466 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported466 = 0;
			if (verbose && !reported466)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported466 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][466] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 543: // STATE 470 - _spin_nvr.tmp:687 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported470 = 0;
			if (verbose && !reported470)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported470 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported470 = 0;
			if (verbose && !reported470)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported470 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][470] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 544: // STATE 472 - _spin_nvr.tmp:688 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported472 = 0;
			if (verbose && !reported472)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported472 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported472 = 0;
			if (verbose && !reported472)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported472 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][472] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 545: // STATE 474 - _spin_nvr.tmp:689 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported474 = 0;
			if (verbose && !reported474)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported474 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported474 = 0;
			if (verbose && !reported474)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported474 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][474] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 546: // STATE 476 - _spin_nvr.tmp:690 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported476 = 0;
			if (verbose && !reported476)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported476 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported476 = 0;
			if (verbose && !reported476)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported476 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][476] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 547: // STATE 481 - _spin_nvr.tmp:694 - [(!((states[0]==STOPPED)))] (486:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported481 = 0;
			if (verbose && !reported481)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported481 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported481 = 0;
			if (verbose && !reported481)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported481 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][481] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		/* merge: assert(!(!((states[0]==STOPPED))))(0, 482, 486) */
		reached[8][482] = 1;
		spin_assert( !( !((now.states[0]==5))), " !( !((states[0]==5)))", II, tt, t);
		/* merge: .(goto)(0, 487, 486) */
		reached[8][487] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 548: // STATE 489 - _spin_nvr.tmp:699 - [((!((states[0]==0))&&!((states[0]==STOPPED))))] (498:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported489 = 0;
			if (verbose && !reported489)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported489 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported489 = 0;
			if (verbose && !reported489)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported489 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][489] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==5)))))
			continue;
		/* merge: assert(!((!((states[0]==0))&&!((states[0]==STOPPED)))))(0, 490, 498) */
		reached[8][490] = 1;
		spin_assert( !(( !((now.states[0]==0))&& !((now.states[0]==5)))), " !(( !((states[0]==0))&& !((states[0]==5))))", II, tt, t);
		/* merge: .(goto)(0, 499, 498) */
		reached[8][499] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 549: // STATE 492 - _spin_nvr.tmp:700 - [(!((states[0]==0)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported492 = 0;
			if (verbose && !reported492)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported492 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported492 = 0;
			if (verbose && !reported492)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported492 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][492] = 1;
		if (!( !((now.states[0]==0))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 550: // STATE 494 - _spin_nvr.tmp:701 - [(!((states[0]==STOPPED)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported494 = 0;
			if (verbose && !reported494)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported494 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported494 = 0;
			if (verbose && !reported494)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported494 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][494] = 1;
		if (!( !((now.states[0]==5))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 551: // STATE 502 - _spin_nvr.tmp:706 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported502 = 0;
			if (verbose && !reported502)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported502 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported502 = 0;
			if (verbose && !reported502)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported502 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[8][502] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_stopping */
	case 552: // STATE 1 - _spin_nvr.tmp:392 - [((!(!((states[2]==STOPPING)))&&!(((states[2]==STOPPED)||(states[2]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][1] = 1;
		if (!(( !( !((now.states[2]==7)))&& !(((now.states[2]==5)||(now.states[2]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 553: // STATE 3 - _spin_nvr.tmp:393 - [((((!(!((states[0]==STOPPING)))&&!(((states[0]==STOPPED)||(states[0]==ABORTING))))&&!((states[0]==STOPPING)))||(((!(!((states[1]==STOPPING)))&&!(((states[1]==STOPPED)||(states[1]==ABORTING))))&&!((states[1]==STOPPING)))||((!(!((states[2]==STOPPING)))&&!(((states[2]==STOPPED)||(states[2]==ABORTING))))&&!((states[2]==STOPPING))))))] (12:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][3] = 1;
		if (!(((( !( !((now.states[0]==7)))&& !(((now.states[0]==5)||(now.states[0]==4))))&& !((now.states[0]==7)))||((( !( !((now.states[1]==7)))&& !(((now.states[1]==5)||(now.states[1]==4))))&& !((now.states[1]==7)))||(( !( !((now.states[2]==7)))&& !(((now.states[2]==5)||(now.states[2]==4))))&& !((now.states[2]==7)))))))
			continue;
		/* merge: assert(!((((!(!((states[0]==STOPPING)))&&!(((states[0]==STOPPED)||(states[0]==ABORTING))))&&!((states[0]==STOPPING)))||(((!(!((states[1]==STOPPING)))&&!(((states[1]==STOPPED)||(states[1]==ABORTING))))&&!((states[1]==STOPPING)))||((!(!((states[2]==STOPPING)))&&!(((states[2]==STOPPED)||(states[2]==ABORTING))))&&!((states[2]==STOPPING)))))))(0, 4, 12) */
		reached[7][4] = 1;
		spin_assert( !(((( !( !((now.states[0]==7)))&& !(((now.states[0]==5)||(now.states[0]==4))))&& !((now.states[0]==7)))||((( !( !((now.states[1]==7)))&& !(((now.states[1]==5)||(now.states[1]==4))))&& !((now.states[1]==7)))||(( !( !((now.states[2]==7)))&& !(((now.states[2]==5)||(now.states[2]==4))))&& !((now.states[2]==7)))))), " !(((( !( !((states[0]==7)))&& !(((states[0]==5)||(states[0]==4))))&& !((states[0]==7)))||((( !( !((states[1]==7)))&& !(((states[1]==5)||(states[1]==4))))&& !((states[1]==7)))||(( !( !((states[2]==7)))&& !(((states[2]==5)||(states[2]==4))))&& !((states[2]==7))))))", II, tt, t);
		/* merge: .(goto)(0, 13, 12) */
		reached[7][13] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 554: // STATE 6 - _spin_nvr.tmp:394 - [((!(!((states[1]==STOPPING)))&&!(((states[1]==STOPPED)||(states[1]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][6] = 1;
		if (!(( !( !((now.states[1]==7)))&& !(((now.states[1]==5)||(now.states[1]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 555: // STATE 8 - _spin_nvr.tmp:395 - [((!(!((states[0]==STOPPING)))&&!(((states[0]==STOPPED)||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][8] = 1;
		if (!(( !( !((now.states[0]==7)))&& !(((now.states[0]==5)||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 556: // STATE 15 - _spin_nvr.tmp:400 - [(!(((states[2]==STOPPED)||(states[2]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][15] = 1;
		if (!( !(((now.states[2]==5)||(now.states[2]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 557: // STATE 17 - _spin_nvr.tmp:401 - [((!(((states[2]==STOPPED)||(states[2]==ABORTING)))&&!((states[2]==STOPPING))))] (20:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][17] = 1;
		if (!(( !(((now.states[2]==5)||(now.states[2]==4)))&& !((now.states[2]==7)))))
			continue;
		/* merge: assert(!((!(((states[2]==STOPPED)||(states[2]==ABORTING)))&&!((states[2]==STOPPING)))))(0, 18, 20) */
		reached[7][18] = 1;
		spin_assert( !(( !(((now.states[2]==5)||(now.states[2]==4)))&& !((now.states[2]==7)))), " !(( !(((states[2]==5)||(states[2]==4)))&& !((states[2]==7))))", II, tt, t);
		/* merge: .(goto)(0, 21, 20) */
		reached[7][21] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 558: // STATE 23 - _spin_nvr.tmp:405 - [(!(((states[1]==STOPPED)||(states[1]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported23 = 0;
			if (verbose && !reported23)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported23 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported23 = 0;
			if (verbose && !reported23)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported23 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][23] = 1;
		if (!( !(((now.states[1]==5)||(now.states[1]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 559: // STATE 25 - _spin_nvr.tmp:406 - [((!(((states[1]==STOPPED)||(states[1]==ABORTING)))&&!((states[1]==STOPPING))))] (28:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported25 = 0;
			if (verbose && !reported25)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported25 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported25 = 0;
			if (verbose && !reported25)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported25 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][25] = 1;
		if (!(( !(((now.states[1]==5)||(now.states[1]==4)))&& !((now.states[1]==7)))))
			continue;
		/* merge: assert(!((!(((states[1]==STOPPED)||(states[1]==ABORTING)))&&!((states[1]==STOPPING)))))(0, 26, 28) */
		reached[7][26] = 1;
		spin_assert( !(( !(((now.states[1]==5)||(now.states[1]==4)))&& !((now.states[1]==7)))), " !(( !(((states[1]==5)||(states[1]==4)))&& !((states[1]==7))))", II, tt, t);
		/* merge: .(goto)(0, 29, 28) */
		reached[7][29] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 560: // STATE 31 - _spin_nvr.tmp:410 - [(!(((states[0]==STOPPED)||(states[0]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported31 = 0;
			if (verbose && !reported31)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported31 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported31 = 0;
			if (verbose && !reported31)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported31 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][31] = 1;
		if (!( !(((now.states[0]==5)||(now.states[0]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 561: // STATE 33 - _spin_nvr.tmp:411 - [((!(((states[0]==STOPPED)||(states[0]==ABORTING)))&&!((states[0]==STOPPING))))] (36:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported33 = 0;
			if (verbose && !reported33)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported33 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported33 = 0;
			if (verbose && !reported33)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported33 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][33] = 1;
		if (!(( !(((now.states[0]==5)||(now.states[0]==4)))&& !((now.states[0]==7)))))
			continue;
		/* merge: assert(!((!(((states[0]==STOPPED)||(states[0]==ABORTING)))&&!((states[0]==STOPPING)))))(0, 34, 36) */
		reached[7][34] = 1;
		spin_assert( !(( !(((now.states[0]==5)||(now.states[0]==4)))&& !((now.states[0]==7)))), " !(( !(((states[0]==5)||(states[0]==4)))&& !((states[0]==7))))", II, tt, t);
		/* merge: .(goto)(0, 37, 36) */
		reached[7][37] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 562: // STATE 40 - _spin_nvr.tmp:415 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[7][40] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_paused */
	case 563: // STATE 1 - _spin_nvr.tmp:308 - [(((!(!((states[2]==PAUSED)))&&!(((states[2]==RUNNING)||(states[2]==STOPPING))))&&!((states[2]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][1] = 1;
		if (!((( !( !((now.states[2]==10)))&& !(((now.states[2]==11)||(now.states[2]==7))))&& !((now.states[2]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 564: // STATE 3 - _spin_nvr.tmp:309 - [((((!(!((states[0]==PAUSED)))&&!(((states[0]==RUNNING)||(states[0]==STOPPING))))&&!((states[0]==PAUSED)))||(((!(!((states[1]==PAUSED)))&&!(((states[1]==RUNNING)||(states[1]==STOPPING))))&&!((states[1]==PAUSED)))||((!(!((states[2]==PAUSED)))&&!(((states[2]==RUNNING)||(states[2]==STOPPING))))&&!((states[2]==PAUSED))))))] (24:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][3] = 1;
		if (!(((( !( !((now.states[0]==10)))&& !(((now.states[0]==11)||(now.states[0]==7))))&& !((now.states[0]==10)))||((( !( !((now.states[1]==10)))&& !(((now.states[1]==11)||(now.states[1]==7))))&& !((now.states[1]==10)))||(( !( !((now.states[2]==10)))&& !(((now.states[2]==11)||(now.states[2]==7))))&& !((now.states[2]==10)))))))
			continue;
		/* merge: assert(!((((!(!((states[0]==PAUSED)))&&!(((states[0]==RUNNING)||(states[0]==STOPPING))))&&!((states[0]==PAUSED)))||(((!(!((states[1]==PAUSED)))&&!(((states[1]==RUNNING)||(states[1]==STOPPING))))&&!((states[1]==PAUSED)))||((!(!((states[2]==PAUSED)))&&!(((states[2]==RUNNING)||(states[2]==STOPPING))))&&!((states[2]==PAUSED)))))))(0, 4, 24) */
		reached[6][4] = 1;
		spin_assert( !(((( !( !((now.states[0]==10)))&& !(((now.states[0]==11)||(now.states[0]==7))))&& !((now.states[0]==10)))||((( !( !((now.states[1]==10)))&& !(((now.states[1]==11)||(now.states[1]==7))))&& !((now.states[1]==10)))||(( !( !((now.states[2]==10)))&& !(((now.states[2]==11)||(now.states[2]==7))))&& !((now.states[2]==10)))))), " !(((( !( !((states[0]==10)))&& !(((states[0]==11)||(states[0]==7))))&& !((states[0]==10)))||((( !( !((states[1]==10)))&& !(((states[1]==11)||(states[1]==7))))&& !((states[1]==10)))||(( !( !((states[2]==10)))&& !(((states[2]==11)||(states[2]==7))))&& !((states[2]==10))))))", II, tt, t);
		/* merge: .(goto)(0, 25, 24) */
		reached[6][25] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 565: // STATE 6 - _spin_nvr.tmp:310 - [((!(!((states[2]==PAUSED)))&&!(((states[2]==RUNNING)||(states[2]==STOPPING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][6] = 1;
		if (!(( !( !((now.states[2]==10)))&& !(((now.states[2]==11)||(now.states[2]==7))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 566: // STATE 8 - _spin_nvr.tmp:311 - [(((!(!((states[2]==PAUSED)))&&!(((states[2]==RUNNING)||(states[2]==STOPPING))))&&!((states[2]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][8] = 1;
		if (!((( !( !((now.states[2]==10)))&& !(((now.states[2]==11)||(now.states[2]==7))))&& !((now.states[2]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 567: // STATE 10 - _spin_nvr.tmp:312 - [(((!(!((states[1]==PAUSED)))&&!(((states[1]==RUNNING)||(states[1]==STOPPING))))&&!((states[1]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][10] = 1;
		if (!((( !( !((now.states[1]==10)))&& !(((now.states[1]==11)||(now.states[1]==7))))&& !((now.states[1]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 568: // STATE 12 - _spin_nvr.tmp:313 - [((!(!((states[1]==PAUSED)))&&!(((states[1]==RUNNING)||(states[1]==STOPPING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][12] = 1;
		if (!(( !( !((now.states[1]==10)))&& !(((now.states[1]==11)||(now.states[1]==7))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 569: // STATE 14 - _spin_nvr.tmp:314 - [(((!(!((states[1]==PAUSED)))&&!(((states[1]==RUNNING)||(states[1]==STOPPING))))&&!((states[1]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][14] = 1;
		if (!((( !( !((now.states[1]==10)))&& !(((now.states[1]==11)||(now.states[1]==7))))&& !((now.states[1]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 570: // STATE 16 - _spin_nvr.tmp:315 - [(((!(!((states[0]==PAUSED)))&&!(((states[0]==RUNNING)||(states[0]==STOPPING))))&&!((states[0]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][16] = 1;
		if (!((( !( !((now.states[0]==10)))&& !(((now.states[0]==11)||(now.states[0]==7))))&& !((now.states[0]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 571: // STATE 18 - _spin_nvr.tmp:316 - [((!(!((states[0]==PAUSED)))&&!(((states[0]==RUNNING)||(states[0]==STOPPING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][18] = 1;
		if (!(( !( !((now.states[0]==10)))&& !(((now.states[0]==11)||(now.states[0]==7))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 572: // STATE 20 - _spin_nvr.tmp:317 - [(((!(!((states[0]==PAUSED)))&&!(((states[0]==RUNNING)||(states[0]==STOPPING))))&&!((states[0]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][20] = 1;
		if (!((( !( !((now.states[0]==10)))&& !(((now.states[0]==11)||(now.states[0]==7))))&& !((now.states[0]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 573: // STATE 27 - _spin_nvr.tmp:322 - [(!(((states[2]==RUNNING)||(states[2]==STOPPING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported27 = 0;
			if (verbose && !reported27)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported27 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported27 = 0;
			if (verbose && !reported27)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported27 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][27] = 1;
		if (!( !(((now.states[2]==11)||(now.states[2]==7)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 574: // STATE 29 - _spin_nvr.tmp:323 - [((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))] (32:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported29 = 0;
			if (verbose && !reported29)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported29 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported29 = 0;
			if (verbose && !reported29)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported29 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][29] = 1;
		if (!(( !(((now.states[2]==11)||(now.states[2]==7)))&& !((now.states[2]==10)))))
			continue;
		/* merge: assert(!((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED)))))(0, 30, 32) */
		reached[6][30] = 1;
		spin_assert( !(( !(((now.states[2]==11)||(now.states[2]==7)))&& !((now.states[2]==10)))), " !(( !(((states[2]==11)||(states[2]==7)))&& !((states[2]==10))))", II, tt, t);
		/* merge: .(goto)(0, 33, 32) */
		reached[6][33] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 575: // STATE 35 - _spin_nvr.tmp:327 - [(!((states[2]==PAUSED)))] (40:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported35 = 0;
			if (verbose && !reported35)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported35 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported35 = 0;
			if (verbose && !reported35)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported35 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][35] = 1;
		if (!( !((now.states[2]==10))))
			continue;
		/* merge: assert(!(!((states[2]==PAUSED))))(0, 36, 40) */
		reached[6][36] = 1;
		spin_assert( !( !((now.states[2]==10))), " !( !((states[2]==10)))", II, tt, t);
		/* merge: .(goto)(0, 41, 40) */
		reached[6][41] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 576: // STATE 43 - _spin_nvr.tmp:332 - [(!(((states[1]==RUNNING)||(states[1]==STOPPING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported43 = 0;
			if (verbose && !reported43)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported43 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported43 = 0;
			if (verbose && !reported43)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported43 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][43] = 1;
		if (!( !(((now.states[1]==11)||(now.states[1]==7)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 577: // STATE 45 - _spin_nvr.tmp:333 - [((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))] (48:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported45 = 0;
			if (verbose && !reported45)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported45 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported45 = 0;
			if (verbose && !reported45)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported45 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][45] = 1;
		if (!(( !(((now.states[1]==11)||(now.states[1]==7)))&& !((now.states[1]==10)))))
			continue;
		/* merge: assert(!((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED)))))(0, 46, 48) */
		reached[6][46] = 1;
		spin_assert( !(( !(((now.states[1]==11)||(now.states[1]==7)))&& !((now.states[1]==10)))), " !(( !(((states[1]==11)||(states[1]==7)))&& !((states[1]==10))))", II, tt, t);
		/* merge: .(goto)(0, 49, 48) */
		reached[6][49] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 578: // STATE 51 - _spin_nvr.tmp:337 - [(!((states[1]==PAUSED)))] (56:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][51] = 1;
		if (!( !((now.states[1]==10))))
			continue;
		/* merge: assert(!(!((states[1]==PAUSED))))(0, 52, 56) */
		reached[6][52] = 1;
		spin_assert( !( !((now.states[1]==10))), " !( !((states[1]==10)))", II, tt, t);
		/* merge: .(goto)(0, 57, 56) */
		reached[6][57] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 579: // STATE 59 - _spin_nvr.tmp:342 - [(!(((states[0]==RUNNING)||(states[0]==STOPPING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported59 = 0;
			if (verbose && !reported59)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported59 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported59 = 0;
			if (verbose && !reported59)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported59 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][59] = 1;
		if (!( !(((now.states[0]==11)||(now.states[0]==7)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 580: // STATE 61 - _spin_nvr.tmp:343 - [((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))] (64:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][61] = 1;
		if (!(( !(((now.states[0]==11)||(now.states[0]==7)))&& !((now.states[0]==10)))))
			continue;
		/* merge: assert(!((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED)))))(0, 62, 64) */
		reached[6][62] = 1;
		spin_assert( !(( !(((now.states[0]==11)||(now.states[0]==7)))&& !((now.states[0]==10)))), " !(( !(((states[0]==11)||(states[0]==7)))&& !((states[0]==10))))", II, tt, t);
		/* merge: .(goto)(0, 65, 64) */
		reached[6][65] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 581: // STATE 67 - _spin_nvr.tmp:347 - [(!((states[0]==PAUSED)))] (72:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][67] = 1;
		if (!( !((now.states[0]==10))))
			continue;
		/* merge: assert(!(!((states[0]==PAUSED))))(0, 68, 72) */
		reached[6][68] = 1;
		spin_assert( !( !((now.states[0]==10))), " !( !((states[0]==10)))", II, tt, t);
		/* merge: .(goto)(0, 73, 72) */
		reached[6][73] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 582: // STATE 75 - _spin_nvr.tmp:352 - [((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported75 = 0;
			if (verbose && !reported75)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported75 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported75 = 0;
			if (verbose && !reported75)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported75 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][75] = 1;
		if (!(( !(((now.states[2]==11)||(now.states[2]==7)))&& !((now.states[2]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 583: // STATE 77 - _spin_nvr.tmp:353 - [((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))] (84:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported77 = 0;
			if (verbose && !reported77)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported77 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported77 = 0;
			if (verbose && !reported77)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported77 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][77] = 1;
		if (!(( !(((now.states[2]==11)||(now.states[2]==7)))&& !((now.states[2]==10)))))
			continue;
		/* merge: assert(!((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED)))))(0, 78, 84) */
		reached[6][78] = 1;
		spin_assert( !(( !(((now.states[2]==11)||(now.states[2]==7)))&& !((now.states[2]==10)))), " !(( !(((states[2]==11)||(states[2]==7)))&& !((states[2]==10))))", II, tt, t);
		/* merge: .(goto)(0, 85, 84) */
		reached[6][85] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 584: // STATE 80 - _spin_nvr.tmp:354 - [(!(((states[2]==RUNNING)||(states[2]==STOPPING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported80 = 0;
			if (verbose && !reported80)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported80 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported80 = 0;
			if (verbose && !reported80)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported80 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][80] = 1;
		if (!( !(((now.states[2]==11)||(now.states[2]==7)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 585: // STATE 82 - _spin_nvr.tmp:355 - [((!(((states[2]==RUNNING)||(states[2]==STOPPING)))&&!((states[2]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][82] = 1;
		if (!(( !(((now.states[2]==11)||(now.states[2]==7)))&& !((now.states[2]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 586: // STATE 87 - _spin_nvr.tmp:359 - [(!((states[2]==PAUSED)))] (92:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported87 = 0;
			if (verbose && !reported87)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported87 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported87 = 0;
			if (verbose && !reported87)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported87 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][87] = 1;
		if (!( !((now.states[2]==10))))
			continue;
		/* merge: assert(!(!((states[2]==PAUSED))))(0, 88, 92) */
		reached[6][88] = 1;
		spin_assert( !( !((now.states[2]==10))), " !( !((states[2]==10)))", II, tt, t);
		/* merge: .(goto)(0, 93, 92) */
		reached[6][93] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 587: // STATE 95 - _spin_nvr.tmp:364 - [((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][95] = 1;
		if (!(( !(((now.states[1]==11)||(now.states[1]==7)))&& !((now.states[1]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 588: // STATE 97 - _spin_nvr.tmp:365 - [((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))] (104:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][97] = 1;
		if (!(( !(((now.states[1]==11)||(now.states[1]==7)))&& !((now.states[1]==10)))))
			continue;
		/* merge: assert(!((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED)))))(0, 98, 104) */
		reached[6][98] = 1;
		spin_assert( !(( !(((now.states[1]==11)||(now.states[1]==7)))&& !((now.states[1]==10)))), " !(( !(((states[1]==11)||(states[1]==7)))&& !((states[1]==10))))", II, tt, t);
		/* merge: .(goto)(0, 105, 104) */
		reached[6][105] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 589: // STATE 100 - _spin_nvr.tmp:366 - [(!(((states[1]==RUNNING)||(states[1]==STOPPING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported100 = 0;
			if (verbose && !reported100)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported100 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported100 = 0;
			if (verbose && !reported100)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported100 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][100] = 1;
		if (!( !(((now.states[1]==11)||(now.states[1]==7)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 590: // STATE 102 - _spin_nvr.tmp:367 - [((!(((states[1]==RUNNING)||(states[1]==STOPPING)))&&!((states[1]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported102 = 0;
			if (verbose && !reported102)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported102 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported102 = 0;
			if (verbose && !reported102)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported102 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][102] = 1;
		if (!(( !(((now.states[1]==11)||(now.states[1]==7)))&& !((now.states[1]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 591: // STATE 107 - _spin_nvr.tmp:371 - [(!((states[1]==PAUSED)))] (112:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported107 = 0;
			if (verbose && !reported107)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported107 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported107 = 0;
			if (verbose && !reported107)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported107 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][107] = 1;
		if (!( !((now.states[1]==10))))
			continue;
		/* merge: assert(!(!((states[1]==PAUSED))))(0, 108, 112) */
		reached[6][108] = 1;
		spin_assert( !( !((now.states[1]==10))), " !( !((states[1]==10)))", II, tt, t);
		/* merge: .(goto)(0, 113, 112) */
		reached[6][113] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 592: // STATE 115 - _spin_nvr.tmp:376 - [((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported115 = 0;
			if (verbose && !reported115)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported115 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported115 = 0;
			if (verbose && !reported115)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported115 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][115] = 1;
		if (!(( !(((now.states[0]==11)||(now.states[0]==7)))&& !((now.states[0]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 593: // STATE 117 - _spin_nvr.tmp:377 - [((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))] (124:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported117 = 0;
			if (verbose && !reported117)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported117 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported117 = 0;
			if (verbose && !reported117)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported117 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][117] = 1;
		if (!(( !(((now.states[0]==11)||(now.states[0]==7)))&& !((now.states[0]==10)))))
			continue;
		/* merge: assert(!((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED)))))(0, 118, 124) */
		reached[6][118] = 1;
		spin_assert( !(( !(((now.states[0]==11)||(now.states[0]==7)))&& !((now.states[0]==10)))), " !(( !(((states[0]==11)||(states[0]==7)))&& !((states[0]==10))))", II, tt, t);
		/* merge: .(goto)(0, 125, 124) */
		reached[6][125] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 594: // STATE 120 - _spin_nvr.tmp:378 - [(!(((states[0]==RUNNING)||(states[0]==STOPPING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][120] = 1;
		if (!( !(((now.states[0]==11)||(now.states[0]==7)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 595: // STATE 122 - _spin_nvr.tmp:379 - [((!(((states[0]==RUNNING)||(states[0]==STOPPING)))&&!((states[0]==PAUSED))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][122] = 1;
		if (!(( !(((now.states[0]==11)||(now.states[0]==7)))&& !((now.states[0]==10)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 596: // STATE 127 - _spin_nvr.tmp:383 - [(!((states[0]==PAUSED)))] (132:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][127] = 1;
		if (!( !((now.states[0]==10))))
			continue;
		/* merge: assert(!(!((states[0]==PAUSED))))(0, 128, 132) */
		reached[6][128] = 1;
		spin_assert( !( !((now.states[0]==10))), " !( !((states[0]==10)))", II, tt, t);
		/* merge: .(goto)(0, 133, 132) */
		reached[6][133] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 597: // STATE 136 - _spin_nvr.tmp:388 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported136 = 0;
			if (verbose && !reported136)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported136 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported136 = 0;
			if (verbose && !reported136)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported136 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[6][136] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_running */
	case 598: // STATE 1 - _spin_nvr.tmp:224 - [(((!(!((states[2]==RUNNING)))&&!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))&&!((states[2]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][1] = 1;
		if (!((( !( !((now.states[2]==11)))&& !((((now.states[2]==10)||(now.states[2]==7))||(now.states[2]==4))))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 599: // STATE 3 - _spin_nvr.tmp:225 - [((((!(!((states[0]==RUNNING)))&&!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))&&!((states[0]==RUNNING)))||(((!(!((states[1]==RUNNING)))&&!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))&&!((states[1]==RUNNING)))||((!(!((states[2]==RUNNING)))&&!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))&&!((states[2]==RUNNING))))))] (24:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][3] = 1;
		if (!(((( !( !((now.states[0]==11)))&& !((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==4))))&& !((now.states[0]==11)))||((( !( !((now.states[1]==11)))&& !((((now.states[1]==10)||(now.states[1]==7))||(now.states[1]==4))))&& !((now.states[1]==11)))||(( !( !((now.states[2]==11)))&& !((((now.states[2]==10)||(now.states[2]==7))||(now.states[2]==4))))&& !((now.states[2]==11)))))))
			continue;
		/* merge: assert(!((((!(!((states[0]==RUNNING)))&&!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))&&!((states[0]==RUNNING)))||(((!(!((states[1]==RUNNING)))&&!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))&&!((states[1]==RUNNING)))||((!(!((states[2]==RUNNING)))&&!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))&&!((states[2]==RUNNING)))))))(0, 4, 24) */
		reached[5][4] = 1;
		spin_assert( !(((( !( !((now.states[0]==11)))&& !((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==4))))&& !((now.states[0]==11)))||((( !( !((now.states[1]==11)))&& !((((now.states[1]==10)||(now.states[1]==7))||(now.states[1]==4))))&& !((now.states[1]==11)))||(( !( !((now.states[2]==11)))&& !((((now.states[2]==10)||(now.states[2]==7))||(now.states[2]==4))))&& !((now.states[2]==11)))))), " !(((( !( !((states[0]==11)))&& !((((states[0]==10)||(states[0]==7))||(states[0]==4))))&& !((states[0]==11)))||((( !( !((states[1]==11)))&& !((((states[1]==10)||(states[1]==7))||(states[1]==4))))&& !((states[1]==11)))||(( !( !((states[2]==11)))&& !((((states[2]==10)||(states[2]==7))||(states[2]==4))))&& !((states[2]==11))))))", II, tt, t);
		/* merge: .(goto)(0, 25, 24) */
		reached[5][25] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 600: // STATE 6 - _spin_nvr.tmp:226 - [((!(!((states[2]==RUNNING)))&&!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][6] = 1;
		if (!(( !( !((now.states[2]==11)))&& !((((now.states[2]==10)||(now.states[2]==7))||(now.states[2]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 601: // STATE 8 - _spin_nvr.tmp:227 - [(((!(!((states[2]==RUNNING)))&&!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))&&!((states[2]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][8] = 1;
		if (!((( !( !((now.states[2]==11)))&& !((((now.states[2]==10)||(now.states[2]==7))||(now.states[2]==4))))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 602: // STATE 10 - _spin_nvr.tmp:228 - [(((!(!((states[1]==RUNNING)))&&!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))&&!((states[1]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][10] = 1;
		if (!((( !( !((now.states[1]==11)))&& !((((now.states[1]==10)||(now.states[1]==7))||(now.states[1]==4))))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 603: // STATE 12 - _spin_nvr.tmp:229 - [((!(!((states[1]==RUNNING)))&&!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][12] = 1;
		if (!(( !( !((now.states[1]==11)))&& !((((now.states[1]==10)||(now.states[1]==7))||(now.states[1]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 604: // STATE 14 - _spin_nvr.tmp:230 - [(((!(!((states[1]==RUNNING)))&&!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))&&!((states[1]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][14] = 1;
		if (!((( !( !((now.states[1]==11)))&& !((((now.states[1]==10)||(now.states[1]==7))||(now.states[1]==4))))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 605: // STATE 16 - _spin_nvr.tmp:231 - [(((!(!((states[0]==RUNNING)))&&!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))&&!((states[0]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][16] = 1;
		if (!((( !( !((now.states[0]==11)))&& !((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==4))))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 606: // STATE 18 - _spin_nvr.tmp:232 - [((!(!((states[0]==RUNNING)))&&!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][18] = 1;
		if (!(( !( !((now.states[0]==11)))&& !((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 607: // STATE 20 - _spin_nvr.tmp:233 - [(((!(!((states[0]==RUNNING)))&&!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))&&!((states[0]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][20] = 1;
		if (!((( !( !((now.states[0]==11)))&& !((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==4))))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 608: // STATE 27 - _spin_nvr.tmp:238 - [(!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported27 = 0;
			if (verbose && !reported27)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported27 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported27 = 0;
			if (verbose && !reported27)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported27 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][27] = 1;
		if (!( !((((now.states[2]==10)||(now.states[2]==7))||(now.states[2]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 609: // STATE 29 - _spin_nvr.tmp:239 - [((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))] (32:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported29 = 0;
			if (verbose && !reported29)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported29 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported29 = 0;
			if (verbose && !reported29)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported29 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][29] = 1;
		if (!(( !((((now.states[2]==10)||(now.states[2]==7))||(now.states[2]==4)))&& !((now.states[2]==11)))))
			continue;
		/* merge: assert(!((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING)))))(0, 30, 32) */
		reached[5][30] = 1;
		spin_assert( !(( !((((now.states[2]==10)||(now.states[2]==7))||(now.states[2]==4)))&& !((now.states[2]==11)))), " !(( !((((states[2]==10)||(states[2]==7))||(states[2]==4)))&& !((states[2]==11))))", II, tt, t);
		/* merge: .(goto)(0, 33, 32) */
		reached[5][33] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 610: // STATE 35 - _spin_nvr.tmp:243 - [(!((states[2]==RUNNING)))] (40:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported35 = 0;
			if (verbose && !reported35)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported35 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported35 = 0;
			if (verbose && !reported35)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported35 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][35] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		/* merge: assert(!(!((states[2]==RUNNING))))(0, 36, 40) */
		reached[5][36] = 1;
		spin_assert( !( !((now.states[2]==11))), " !( !((states[2]==11)))", II, tt, t);
		/* merge: .(goto)(0, 41, 40) */
		reached[5][41] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 611: // STATE 43 - _spin_nvr.tmp:248 - [(!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported43 = 0;
			if (verbose && !reported43)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported43 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported43 = 0;
			if (verbose && !reported43)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported43 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][43] = 1;
		if (!( !((((now.states[1]==10)||(now.states[1]==7))||(now.states[1]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 612: // STATE 45 - _spin_nvr.tmp:249 - [((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))] (48:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported45 = 0;
			if (verbose && !reported45)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported45 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported45 = 0;
			if (verbose && !reported45)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported45 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][45] = 1;
		if (!(( !((((now.states[1]==10)||(now.states[1]==7))||(now.states[1]==4)))&& !((now.states[1]==11)))))
			continue;
		/* merge: assert(!((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING)))))(0, 46, 48) */
		reached[5][46] = 1;
		spin_assert( !(( !((((now.states[1]==10)||(now.states[1]==7))||(now.states[1]==4)))&& !((now.states[1]==11)))), " !(( !((((states[1]==10)||(states[1]==7))||(states[1]==4)))&& !((states[1]==11))))", II, tt, t);
		/* merge: .(goto)(0, 49, 48) */
		reached[5][49] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 613: // STATE 51 - _spin_nvr.tmp:253 - [(!((states[1]==RUNNING)))] (56:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][51] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		/* merge: assert(!(!((states[1]==RUNNING))))(0, 52, 56) */
		reached[5][52] = 1;
		spin_assert( !( !((now.states[1]==11))), " !( !((states[1]==11)))", II, tt, t);
		/* merge: .(goto)(0, 57, 56) */
		reached[5][57] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 614: // STATE 59 - _spin_nvr.tmp:258 - [(!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported59 = 0;
			if (verbose && !reported59)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported59 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported59 = 0;
			if (verbose && !reported59)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported59 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][59] = 1;
		if (!( !((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 615: // STATE 61 - _spin_nvr.tmp:259 - [((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))] (64:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][61] = 1;
		if (!(( !((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==4)))&& !((now.states[0]==11)))))
			continue;
		/* merge: assert(!((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING)))))(0, 62, 64) */
		reached[5][62] = 1;
		spin_assert( !(( !((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==4)))&& !((now.states[0]==11)))), " !(( !((((states[0]==10)||(states[0]==7))||(states[0]==4)))&& !((states[0]==11))))", II, tt, t);
		/* merge: .(goto)(0, 65, 64) */
		reached[5][65] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 616: // STATE 67 - _spin_nvr.tmp:263 - [(!((states[0]==RUNNING)))] (72:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported67 = 0;
			if (verbose && !reported67)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported67 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][67] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		/* merge: assert(!(!((states[0]==RUNNING))))(0, 68, 72) */
		reached[5][68] = 1;
		spin_assert( !( !((now.states[0]==11))), " !( !((states[0]==11)))", II, tt, t);
		/* merge: .(goto)(0, 73, 72) */
		reached[5][73] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 617: // STATE 75 - _spin_nvr.tmp:268 - [((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported75 = 0;
			if (verbose && !reported75)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported75 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported75 = 0;
			if (verbose && !reported75)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported75 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][75] = 1;
		if (!(( !((((now.states[2]==10)||(now.states[2]==7))||(now.states[2]==4)))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 618: // STATE 77 - _spin_nvr.tmp:269 - [((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))] (84:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported77 = 0;
			if (verbose && !reported77)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported77 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported77 = 0;
			if (verbose && !reported77)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported77 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][77] = 1;
		if (!(( !((((now.states[2]==10)||(now.states[2]==7))||(now.states[2]==4)))&& !((now.states[2]==11)))))
			continue;
		/* merge: assert(!((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING)))))(0, 78, 84) */
		reached[5][78] = 1;
		spin_assert( !(( !((((now.states[2]==10)||(now.states[2]==7))||(now.states[2]==4)))&& !((now.states[2]==11)))), " !(( !((((states[2]==10)||(states[2]==7))||(states[2]==4)))&& !((states[2]==11))))", II, tt, t);
		/* merge: .(goto)(0, 85, 84) */
		reached[5][85] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 619: // STATE 80 - _spin_nvr.tmp:270 - [(!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported80 = 0;
			if (verbose && !reported80)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported80 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported80 = 0;
			if (verbose && !reported80)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported80 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][80] = 1;
		if (!( !((((now.states[2]==10)||(now.states[2]==7))||(now.states[2]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 620: // STATE 82 - _spin_nvr.tmp:271 - [((!((((states[2]==PAUSED)||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported82 = 0;
			if (verbose && !reported82)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported82 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][82] = 1;
		if (!(( !((((now.states[2]==10)||(now.states[2]==7))||(now.states[2]==4)))&& !((now.states[2]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 621: // STATE 87 - _spin_nvr.tmp:275 - [(!((states[2]==RUNNING)))] (92:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported87 = 0;
			if (verbose && !reported87)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported87 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported87 = 0;
			if (verbose && !reported87)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported87 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][87] = 1;
		if (!( !((now.states[2]==11))))
			continue;
		/* merge: assert(!(!((states[2]==RUNNING))))(0, 88, 92) */
		reached[5][88] = 1;
		spin_assert( !( !((now.states[2]==11))), " !( !((states[2]==11)))", II, tt, t);
		/* merge: .(goto)(0, 93, 92) */
		reached[5][93] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 622: // STATE 95 - _spin_nvr.tmp:280 - [((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][95] = 1;
		if (!(( !((((now.states[1]==10)||(now.states[1]==7))||(now.states[1]==4)))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 623: // STATE 97 - _spin_nvr.tmp:281 - [((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))] (104:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][97] = 1;
		if (!(( !((((now.states[1]==10)||(now.states[1]==7))||(now.states[1]==4)))&& !((now.states[1]==11)))))
			continue;
		/* merge: assert(!((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING)))))(0, 98, 104) */
		reached[5][98] = 1;
		spin_assert( !(( !((((now.states[1]==10)||(now.states[1]==7))||(now.states[1]==4)))&& !((now.states[1]==11)))), " !(( !((((states[1]==10)||(states[1]==7))||(states[1]==4)))&& !((states[1]==11))))", II, tt, t);
		/* merge: .(goto)(0, 105, 104) */
		reached[5][105] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 624: // STATE 100 - _spin_nvr.tmp:282 - [(!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported100 = 0;
			if (verbose && !reported100)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported100 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported100 = 0;
			if (verbose && !reported100)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported100 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][100] = 1;
		if (!( !((((now.states[1]==10)||(now.states[1]==7))||(now.states[1]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 625: // STATE 102 - _spin_nvr.tmp:283 - [((!((((states[1]==PAUSED)||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported102 = 0;
			if (verbose && !reported102)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported102 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported102 = 0;
			if (verbose && !reported102)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported102 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][102] = 1;
		if (!(( !((((now.states[1]==10)||(now.states[1]==7))||(now.states[1]==4)))&& !((now.states[1]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 626: // STATE 107 - _spin_nvr.tmp:287 - [(!((states[1]==RUNNING)))] (112:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported107 = 0;
			if (verbose && !reported107)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported107 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported107 = 0;
			if (verbose && !reported107)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported107 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][107] = 1;
		if (!( !((now.states[1]==11))))
			continue;
		/* merge: assert(!(!((states[1]==RUNNING))))(0, 108, 112) */
		reached[5][108] = 1;
		spin_assert( !( !((now.states[1]==11))), " !( !((states[1]==11)))", II, tt, t);
		/* merge: .(goto)(0, 113, 112) */
		reached[5][113] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 627: // STATE 115 - _spin_nvr.tmp:292 - [((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported115 = 0;
			if (verbose && !reported115)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported115 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported115 = 0;
			if (verbose && !reported115)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported115 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][115] = 1;
		if (!(( !((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==4)))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 628: // STATE 117 - _spin_nvr.tmp:293 - [((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))] (124:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported117 = 0;
			if (verbose && !reported117)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported117 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported117 = 0;
			if (verbose && !reported117)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported117 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][117] = 1;
		if (!(( !((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==4)))&& !((now.states[0]==11)))))
			continue;
		/* merge: assert(!((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING)))))(0, 118, 124) */
		reached[5][118] = 1;
		spin_assert( !(( !((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==4)))&& !((now.states[0]==11)))), " !(( !((((states[0]==10)||(states[0]==7))||(states[0]==4)))&& !((states[0]==11))))", II, tt, t);
		/* merge: .(goto)(0, 125, 124) */
		reached[5][125] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 629: // STATE 120 - _spin_nvr.tmp:294 - [(!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][120] = 1;
		if (!( !((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 630: // STATE 122 - _spin_nvr.tmp:295 - [((!((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==RUNNING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported122 = 0;
			if (verbose && !reported122)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported122 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][122] = 1;
		if (!(( !((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==4)))&& !((now.states[0]==11)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 631: // STATE 127 - _spin_nvr.tmp:299 - [(!((states[0]==RUNNING)))] (132:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][127] = 1;
		if (!( !((now.states[0]==11))))
			continue;
		/* merge: assert(!(!((states[0]==RUNNING))))(0, 128, 132) */
		reached[5][128] = 1;
		spin_assert( !( !((now.states[0]==11))), " !( !((states[0]==11)))", II, tt, t);
		/* merge: .(goto)(0, 133, 132) */
		reached[5][133] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 632: // STATE 136 - _spin_nvr.tmp:304 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported136 = 0;
			if (verbose && !reported136)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported136 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported136 = 0;
			if (verbose && !reported136)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported136 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[5][136] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_starting */
	case 633: // STATE 1 - _spin_nvr.tmp:197 - [((!(!((states[2]==STARTING)))&&!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][1] = 1;
		if (!(( !( !((now.states[2]==12)))&& !(((((now.states[2]==11)||(now.states[2]==10))||(now.states[2]==7))||(now.states[2]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 634: // STATE 3 - _spin_nvr.tmp:198 - [((((!(!((states[0]==STARTING)))&&!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING))))&&!((states[0]==STARTING)))||(((!(!((states[1]==STARTING)))&&!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING))))&&!((states[1]==STARTING)))||((!(!((states[2]==STARTING)))&&!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING))))&&!((states[2]==STARTING))))))] (12:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][3] = 1;
		if (!(((( !( !((now.states[0]==12)))&& !(((((now.states[0]==11)||(now.states[0]==10))||(now.states[0]==7))||(now.states[0]==4))))&& !((now.states[0]==12)))||((( !( !((now.states[1]==12)))&& !(((((now.states[1]==11)||(now.states[1]==10))||(now.states[1]==7))||(now.states[1]==4))))&& !((now.states[1]==12)))||(( !( !((now.states[2]==12)))&& !(((((now.states[2]==11)||(now.states[2]==10))||(now.states[2]==7))||(now.states[2]==4))))&& !((now.states[2]==12)))))))
			continue;
		/* merge: assert(!((((!(!((states[0]==STARTING)))&&!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING))))&&!((states[0]==STARTING)))||(((!(!((states[1]==STARTING)))&&!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING))))&&!((states[1]==STARTING)))||((!(!((states[2]==STARTING)))&&!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING))))&&!((states[2]==STARTING)))))))(0, 4, 12) */
		reached[4][4] = 1;
		spin_assert( !(((( !( !((now.states[0]==12)))&& !(((((now.states[0]==11)||(now.states[0]==10))||(now.states[0]==7))||(now.states[0]==4))))&& !((now.states[0]==12)))||((( !( !((now.states[1]==12)))&& !(((((now.states[1]==11)||(now.states[1]==10))||(now.states[1]==7))||(now.states[1]==4))))&& !((now.states[1]==12)))||(( !( !((now.states[2]==12)))&& !(((((now.states[2]==11)||(now.states[2]==10))||(now.states[2]==7))||(now.states[2]==4))))&& !((now.states[2]==12)))))), " !(((( !( !((states[0]==12)))&& !(((((states[0]==11)||(states[0]==10))||(states[0]==7))||(states[0]==4))))&& !((states[0]==12)))||((( !( !((states[1]==12)))&& !(((((states[1]==11)||(states[1]==10))||(states[1]==7))||(states[1]==4))))&& !((states[1]==12)))||(( !( !((states[2]==12)))&& !(((((states[2]==11)||(states[2]==10))||(states[2]==7))||(states[2]==4))))&& !((states[2]==12))))))", II, tt, t);
		/* merge: .(goto)(0, 13, 12) */
		reached[4][13] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 635: // STATE 6 - _spin_nvr.tmp:199 - [((!(!((states[1]==STARTING)))&&!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported6 = 0;
			if (verbose && !reported6)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported6 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][6] = 1;
		if (!(( !( !((now.states[1]==12)))&& !(((((now.states[1]==11)||(now.states[1]==10))||(now.states[1]==7))||(now.states[1]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 636: // STATE 8 - _spin_nvr.tmp:200 - [((!(!((states[0]==STARTING)))&&!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING)))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported8 = 0;
			if (verbose && !reported8)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported8 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][8] = 1;
		if (!(( !( !((now.states[0]==12)))&& !(((((now.states[0]==11)||(now.states[0]==10))||(now.states[0]==7))||(now.states[0]==4))))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 637: // STATE 15 - _spin_nvr.tmp:205 - [(!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported15 = 0;
			if (verbose && !reported15)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported15 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][15] = 1;
		if (!( !(((((now.states[2]==11)||(now.states[2]==10))||(now.states[2]==7))||(now.states[2]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 638: // STATE 17 - _spin_nvr.tmp:206 - [((!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==STARTING))))] (20:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported17 = 0;
			if (verbose && !reported17)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported17 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][17] = 1;
		if (!(( !(((((now.states[2]==11)||(now.states[2]==10))||(now.states[2]==7))||(now.states[2]==4)))&& !((now.states[2]==12)))))
			continue;
		/* merge: assert(!((!(((((states[2]==RUNNING)||(states[2]==PAUSED))||(states[2]==STOPPING))||(states[2]==ABORTING)))&&!((states[2]==STARTING)))))(0, 18, 20) */
		reached[4][18] = 1;
		spin_assert( !(( !(((((now.states[2]==11)||(now.states[2]==10))||(now.states[2]==7))||(now.states[2]==4)))&& !((now.states[2]==12)))), " !(( !(((((states[2]==11)||(states[2]==10))||(states[2]==7))||(states[2]==4)))&& !((states[2]==12))))", II, tt, t);
		/* merge: .(goto)(0, 21, 20) */
		reached[4][21] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 639: // STATE 23 - _spin_nvr.tmp:210 - [(!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported23 = 0;
			if (verbose && !reported23)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported23 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported23 = 0;
			if (verbose && !reported23)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported23 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][23] = 1;
		if (!( !(((((now.states[1]==11)||(now.states[1]==10))||(now.states[1]==7))||(now.states[1]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 640: // STATE 25 - _spin_nvr.tmp:211 - [((!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==STARTING))))] (28:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported25 = 0;
			if (verbose && !reported25)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported25 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported25 = 0;
			if (verbose && !reported25)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported25 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][25] = 1;
		if (!(( !(((((now.states[1]==11)||(now.states[1]==10))||(now.states[1]==7))||(now.states[1]==4)))&& !((now.states[1]==12)))))
			continue;
		/* merge: assert(!((!(((((states[1]==RUNNING)||(states[1]==PAUSED))||(states[1]==STOPPING))||(states[1]==ABORTING)))&&!((states[1]==STARTING)))))(0, 26, 28) */
		reached[4][26] = 1;
		spin_assert( !(( !(((((now.states[1]==11)||(now.states[1]==10))||(now.states[1]==7))||(now.states[1]==4)))&& !((now.states[1]==12)))), " !(( !(((((states[1]==11)||(states[1]==10))||(states[1]==7))||(states[1]==4)))&& !((states[1]==12))))", II, tt, t);
		/* merge: .(goto)(0, 29, 28) */
		reached[4][29] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 641: // STATE 31 - _spin_nvr.tmp:215 - [(!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported31 = 0;
			if (verbose && !reported31)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported31 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported31 = 0;
			if (verbose && !reported31)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported31 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][31] = 1;
		if (!( !(((((now.states[0]==11)||(now.states[0]==10))||(now.states[0]==7))||(now.states[0]==4)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 642: // STATE 33 - _spin_nvr.tmp:216 - [((!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==STARTING))))] (36:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported33 = 0;
			if (verbose && !reported33)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported33 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported33 = 0;
			if (verbose && !reported33)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported33 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][33] = 1;
		if (!(( !(((((now.states[0]==11)||(now.states[0]==10))||(now.states[0]==7))||(now.states[0]==4)))&& !((now.states[0]==12)))))
			continue;
		/* merge: assert(!((!(((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==ABORTING)))&&!((states[0]==STARTING)))))(0, 34, 36) */
		reached[4][34] = 1;
		spin_assert( !(( !(((((now.states[0]==11)||(now.states[0]==10))||(now.states[0]==7))||(now.states[0]==4)))&& !((now.states[0]==12)))), " !(( !(((((states[0]==11)||(states[0]==10))||(states[0]==7))||(states[0]==4)))&& !((states[0]==12))))", II, tt, t);
		/* merge: .(goto)(0, 37, 36) */
		reached[4][37] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 643: // STATE 40 - _spin_nvr.tmp:220 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported40 = 0;
			if (verbose && !reported40)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported40 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[4][40] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* CLAIM fsm_ready */
	case 644: // STATE 1 - _spin_nvr.tmp:3 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported1 = 0;
			if (verbose && !reported1)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported1 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][1] = 1;
		if (!(( !((now.states[2]==13))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 645: // STATE 3 - _spin_nvr.tmp:4 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported3 = 0;
			if (verbose && !reported3)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported3 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][3] = 1;
		if (!( !((now.states[2]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 646: // STATE 5 - _spin_nvr.tmp:5 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported5 = 0;
			if (verbose && !reported5)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported5 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][5] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 647: // STATE 7 - _spin_nvr.tmp:6 - [((((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING)))||(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING)))||((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))))] (34:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported7 = 0;
			if (verbose && !reported7)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported7 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported7 = 0;
			if (verbose && !reported7)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported7 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][7] = 1;
		if (!(((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))||((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))||(( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))))
			continue;
		/* merge: assert(!((((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING)))||(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING)))||((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING)))))))(0, 8, 34) */
		reached[3][8] = 1;
		spin_assert( !(((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))||((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))||(( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))), " !(((( !((states[0]==0))&& !((states[0]==13)))&& !((states[0]==12)))||((( !((states[1]==0))&& !((states[1]==13)))&& !((states[1]==12)))||(( !((states[2]==0))&& !((states[2]==13)))&& !((states[2]==12))))))", II, tt, t);
		/* merge: .(goto)(0, 35, 34) */
		reached[3][35] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 648: // STATE 10 - _spin_nvr.tmp:7 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported10 = 0;
			if (verbose && !reported10)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported10 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][10] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 649: // STATE 12 - _spin_nvr.tmp:8 - [((!((states[2]==0))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported12 = 0;
			if (verbose && !reported12)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported12 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][12] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 650: // STATE 14 - _spin_nvr.tmp:9 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported14 = 0;
			if (verbose && !reported14)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported14 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][14] = 1;
		if (!(( !((now.states[1]==13))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 651: // STATE 16 - _spin_nvr.tmp:10 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported16 = 0;
			if (verbose && !reported16)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported16 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][16] = 1;
		if (!( !((now.states[1]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 652: // STATE 18 - _spin_nvr.tmp:11 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported18 = 0;
			if (verbose && !reported18)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported18 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][18] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 653: // STATE 20 - _spin_nvr.tmp:12 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported20 = 0;
			if (verbose && !reported20)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported20 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][20] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 654: // STATE 22 - _spin_nvr.tmp:13 - [((!((states[1]==0))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported22 = 0;
			if (verbose && !reported22)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported22 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][22] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 655: // STATE 24 - _spin_nvr.tmp:14 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported24 = 0;
			if (verbose && !reported24)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported24 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][24] = 1;
		if (!(( !((now.states[0]==13))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 656: // STATE 26 - _spin_nvr.tmp:15 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported26 = 0;
			if (verbose && !reported26)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported26 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][26] = 1;
		if (!( !((now.states[0]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 657: // STATE 28 - _spin_nvr.tmp:16 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported28 = 0;
			if (verbose && !reported28)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported28 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][28] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 658: // STATE 30 - _spin_nvr.tmp:17 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported30 = 0;
			if (verbose && !reported30)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported30 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][30] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 659: // STATE 32 - _spin_nvr.tmp:18 - [((!((states[0]==0))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported32 = 0;
			if (verbose && !reported32)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported32 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][32] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 660: // STATE 37 - _spin_nvr.tmp:22 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported37 = 0;
			if (verbose && !reported37)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported37 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported37 = 0;
			if (verbose && !reported37)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported37 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][37] = 1;
		if (!( !((now.states[2]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 661: // STATE 39 - _spin_nvr.tmp:23 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (42:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported39 = 0;
			if (verbose && !reported39)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported39 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported39 = 0;
			if (verbose && !reported39)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported39 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][39] = 1;
		if (!(( !((now.states[2]==13))&& !((now.states[2]==12)))))
			continue;
		/* merge: assert(!((!((states[2]==READY))&&!((states[2]==STARTING)))))(0, 40, 42) */
		reached[3][40] = 1;
		spin_assert( !(( !((now.states[2]==13))&& !((now.states[2]==12)))), " !(( !((states[2]==13))&& !((states[2]==12))))", II, tt, t);
		/* merge: .(goto)(0, 43, 42) */
		reached[3][43] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 662: // STATE 45 - _spin_nvr.tmp:27 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported45 = 0;
			if (verbose && !reported45)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported45 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported45 = 0;
			if (verbose && !reported45)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported45 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][45] = 1;
		if (!( !((now.states[2]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 663: // STATE 47 - _spin_nvr.tmp:28 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported47 = 0;
			if (verbose && !reported47)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported47 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported47 = 0;
			if (verbose && !reported47)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported47 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][47] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 664: // STATE 49 - _spin_nvr.tmp:29 - [((!((states[2]==0))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported49 = 0;
			if (verbose && !reported49)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported49 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported49 = 0;
			if (verbose && !reported49)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported49 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][49] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 665: // STATE 51 - _spin_nvr.tmp:30 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported51 = 0;
			if (verbose && !reported51)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported51 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][51] = 1;
		if (!(( !((now.states[2]==13))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 666: // STATE 53 - _spin_nvr.tmp:31 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (58:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported53 = 0;
			if (verbose && !reported53)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported53 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported53 = 0;
			if (verbose && !reported53)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported53 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][53] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))
			continue;
		/* merge: assert(!(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING)))))(0, 54, 58) */
		reached[3][54] = 1;
		spin_assert( !((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))), " !((( !((states[2]==0))&& !((states[2]==13)))&& !((states[2]==12))))", II, tt, t);
		/* merge: .(goto)(0, 59, 58) */
		reached[3][59] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 667: // STATE 56 - _spin_nvr.tmp:32 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported56 = 0;
			if (verbose && !reported56)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported56 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported56 = 0;
			if (verbose && !reported56)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported56 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][56] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 668: // STATE 61 - _spin_nvr.tmp:36 - [(!((states[2]==READY)))] (66:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported61 = 0;
			if (verbose && !reported61)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported61 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][61] = 1;
		if (!( !((now.states[2]==13))))
			continue;
		/* merge: assert(!(!((states[2]==READY))))(0, 62, 66) */
		reached[3][62] = 1;
		spin_assert( !( !((now.states[2]==13))), " !( !((states[2]==13)))", II, tt, t);
		/* merge: .(goto)(0, 67, 66) */
		reached[3][67] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 669: // STATE 69 - _spin_nvr.tmp:41 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported69 = 0;
			if (verbose && !reported69)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported69 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported69 = 0;
			if (verbose && !reported69)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported69 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][69] = 1;
		if (!(( !((now.states[2]==13))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 670: // STATE 71 - _spin_nvr.tmp:42 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (78:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported71 = 0;
			if (verbose && !reported71)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported71 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][71] = 1;
		if (!(( !((now.states[2]==13))&& !((now.states[2]==12)))))
			continue;
		/* merge: assert(!((!((states[2]==READY))&&!((states[2]==STARTING)))))(0, 72, 78) */
		reached[3][72] = 1;
		spin_assert( !(( !((now.states[2]==13))&& !((now.states[2]==12)))), " !(( !((states[2]==13))&& !((states[2]==12))))", II, tt, t);
		/* merge: .(goto)(0, 79, 78) */
		reached[3][79] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 671: // STATE 74 - _spin_nvr.tmp:43 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported74 = 0;
			if (verbose && !reported74)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported74 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported74 = 0;
			if (verbose && !reported74)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported74 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][74] = 1;
		if (!( !((now.states[2]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 672: // STATE 76 - _spin_nvr.tmp:44 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported76 = 0;
			if (verbose && !reported76)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported76 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported76 = 0;
			if (verbose && !reported76)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported76 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][76] = 1;
		if (!(( !((now.states[2]==13))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 673: // STATE 81 - _spin_nvr.tmp:48 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported81 = 0;
			if (verbose && !reported81)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported81 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported81 = 0;
			if (verbose && !reported81)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported81 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][81] = 1;
		if (!( !((now.states[1]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 674: // STATE 83 - _spin_nvr.tmp:49 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (86:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported83 = 0;
			if (verbose && !reported83)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported83 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported83 = 0;
			if (verbose && !reported83)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported83 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][83] = 1;
		if (!(( !((now.states[1]==13))&& !((now.states[1]==12)))))
			continue;
		/* merge: assert(!((!((states[1]==READY))&&!((states[1]==STARTING)))))(0, 84, 86) */
		reached[3][84] = 1;
		spin_assert( !(( !((now.states[1]==13))&& !((now.states[1]==12)))), " !(( !((states[1]==13))&& !((states[1]==12))))", II, tt, t);
		/* merge: .(goto)(0, 87, 86) */
		reached[3][87] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 675: // STATE 89 - _spin_nvr.tmp:53 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported89 = 0;
			if (verbose && !reported89)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported89 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported89 = 0;
			if (verbose && !reported89)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported89 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][89] = 1;
		if (!( !((now.states[1]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 676: // STATE 91 - _spin_nvr.tmp:54 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported91 = 0;
			if (verbose && !reported91)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported91 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][91] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 677: // STATE 93 - _spin_nvr.tmp:55 - [((!((states[1]==0))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported93 = 0;
			if (verbose && !reported93)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported93 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported93 = 0;
			if (verbose && !reported93)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported93 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][93] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 678: // STATE 95 - _spin_nvr.tmp:56 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported95 = 0;
			if (verbose && !reported95)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported95 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][95] = 1;
		if (!(( !((now.states[1]==13))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 679: // STATE 97 - _spin_nvr.tmp:57 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (102:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported97 = 0;
			if (verbose && !reported97)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported97 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][97] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))))
			continue;
		/* merge: assert(!(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING)))))(0, 98, 102) */
		reached[3][98] = 1;
		spin_assert( !((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))), " !((( !((states[1]==0))&& !((states[1]==13)))&& !((states[1]==12))))", II, tt, t);
		/* merge: .(goto)(0, 103, 102) */
		reached[3][103] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 680: // STATE 100 - _spin_nvr.tmp:58 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported100 = 0;
			if (verbose && !reported100)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported100 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported100 = 0;
			if (verbose && !reported100)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported100 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][100] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 681: // STATE 105 - _spin_nvr.tmp:62 - [(!((states[1]==READY)))] (110:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported105 = 0;
			if (verbose && !reported105)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported105 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported105 = 0;
			if (verbose && !reported105)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported105 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][105] = 1;
		if (!( !((now.states[1]==13))))
			continue;
		/* merge: assert(!(!((states[1]==READY))))(0, 106, 110) */
		reached[3][106] = 1;
		spin_assert( !( !((now.states[1]==13))), " !( !((states[1]==13)))", II, tt, t);
		/* merge: .(goto)(0, 111, 110) */
		reached[3][111] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 682: // STATE 113 - _spin_nvr.tmp:67 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported113 = 0;
			if (verbose && !reported113)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported113 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported113 = 0;
			if (verbose && !reported113)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported113 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][113] = 1;
		if (!(( !((now.states[1]==13))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 683: // STATE 115 - _spin_nvr.tmp:68 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (122:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported115 = 0;
			if (verbose && !reported115)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported115 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported115 = 0;
			if (verbose && !reported115)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported115 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][115] = 1;
		if (!(( !((now.states[1]==13))&& !((now.states[1]==12)))))
			continue;
		/* merge: assert(!((!((states[1]==READY))&&!((states[1]==STARTING)))))(0, 116, 122) */
		reached[3][116] = 1;
		spin_assert( !(( !((now.states[1]==13))&& !((now.states[1]==12)))), " !(( !((states[1]==13))&& !((states[1]==12))))", II, tt, t);
		/* merge: .(goto)(0, 123, 122) */
		reached[3][123] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 684: // STATE 118 - _spin_nvr.tmp:69 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported118 = 0;
			if (verbose && !reported118)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported118 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported118 = 0;
			if (verbose && !reported118)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported118 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][118] = 1;
		if (!( !((now.states[1]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 685: // STATE 120 - _spin_nvr.tmp:70 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported120 = 0;
			if (verbose && !reported120)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported120 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][120] = 1;
		if (!(( !((now.states[1]==13))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 686: // STATE 125 - _spin_nvr.tmp:74 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported125 = 0;
			if (verbose && !reported125)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported125 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported125 = 0;
			if (verbose && !reported125)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported125 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][125] = 1;
		if (!( !((now.states[0]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 687: // STATE 127 - _spin_nvr.tmp:75 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (130:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported127 = 0;
			if (verbose && !reported127)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported127 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][127] = 1;
		if (!(( !((now.states[0]==13))&& !((now.states[0]==12)))))
			continue;
		/* merge: assert(!((!((states[0]==READY))&&!((states[0]==STARTING)))))(0, 128, 130) */
		reached[3][128] = 1;
		spin_assert( !(( !((now.states[0]==13))&& !((now.states[0]==12)))), " !(( !((states[0]==13))&& !((states[0]==12))))", II, tt, t);
		/* merge: .(goto)(0, 131, 130) */
		reached[3][131] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 688: // STATE 133 - _spin_nvr.tmp:79 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported133 = 0;
			if (verbose && !reported133)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported133 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported133 = 0;
			if (verbose && !reported133)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported133 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][133] = 1;
		if (!( !((now.states[0]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 689: // STATE 135 - _spin_nvr.tmp:80 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported135 = 0;
			if (verbose && !reported135)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported135 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][135] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 690: // STATE 137 - _spin_nvr.tmp:81 - [((!((states[0]==0))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported137 = 0;
			if (verbose && !reported137)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported137 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported137 = 0;
			if (verbose && !reported137)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported137 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][137] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 691: // STATE 139 - _spin_nvr.tmp:82 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported139 = 0;
			if (verbose && !reported139)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported139 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported139 = 0;
			if (verbose && !reported139)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported139 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][139] = 1;
		if (!(( !((now.states[0]==13))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 692: // STATE 141 - _spin_nvr.tmp:83 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (146:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported141 = 0;
			if (verbose && !reported141)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported141 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported141 = 0;
			if (verbose && !reported141)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported141 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][141] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))))
			continue;
		/* merge: assert(!(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING)))))(0, 142, 146) */
		reached[3][142] = 1;
		spin_assert( !((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))), " !((( !((states[0]==0))&& !((states[0]==13)))&& !((states[0]==12))))", II, tt, t);
		/* merge: .(goto)(0, 147, 146) */
		reached[3][147] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 693: // STATE 144 - _spin_nvr.tmp:84 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported144 = 0;
			if (verbose && !reported144)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported144 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported144 = 0;
			if (verbose && !reported144)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported144 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][144] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 694: // STATE 149 - _spin_nvr.tmp:88 - [(!((states[0]==READY)))] (154:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported149 = 0;
			if (verbose && !reported149)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported149 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported149 = 0;
			if (verbose && !reported149)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported149 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][149] = 1;
		if (!( !((now.states[0]==13))))
			continue;
		/* merge: assert(!(!((states[0]==READY))))(0, 150, 154) */
		reached[3][150] = 1;
		spin_assert( !( !((now.states[0]==13))), " !( !((states[0]==13)))", II, tt, t);
		/* merge: .(goto)(0, 155, 154) */
		reached[3][155] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 695: // STATE 157 - _spin_nvr.tmp:93 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported157 = 0;
			if (verbose && !reported157)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported157 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported157 = 0;
			if (verbose && !reported157)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported157 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][157] = 1;
		if (!(( !((now.states[0]==13))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 696: // STATE 159 - _spin_nvr.tmp:94 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (166:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported159 = 0;
			if (verbose && !reported159)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported159 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][159] = 1;
		if (!(( !((now.states[0]==13))&& !((now.states[0]==12)))))
			continue;
		/* merge: assert(!((!((states[0]==READY))&&!((states[0]==STARTING)))))(0, 160, 166) */
		reached[3][160] = 1;
		spin_assert( !(( !((now.states[0]==13))&& !((now.states[0]==12)))), " !(( !((states[0]==13))&& !((states[0]==12))))", II, tt, t);
		/* merge: .(goto)(0, 167, 166) */
		reached[3][167] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 697: // STATE 162 - _spin_nvr.tmp:95 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported162 = 0;
			if (verbose && !reported162)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported162 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][162] = 1;
		if (!( !((now.states[0]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 698: // STATE 164 - _spin_nvr.tmp:96 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported164 = 0;
			if (verbose && !reported164)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported164 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][164] = 1;
		if (!(( !((now.states[0]==13))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 699: // STATE 169 - _spin_nvr.tmp:100 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported169 = 0;
			if (verbose && !reported169)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported169 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported169 = 0;
			if (verbose && !reported169)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported169 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][169] = 1;
		if (!(( !((now.states[2]==13))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 700: // STATE 171 - _spin_nvr.tmp:101 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported171 = 0;
			if (verbose && !reported171)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported171 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][171] = 1;
		if (!( !((now.states[2]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 701: // STATE 173 - _spin_nvr.tmp:102 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported173 = 0;
			if (verbose && !reported173)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported173 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported173 = 0;
			if (verbose && !reported173)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported173 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][173] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 702: // STATE 175 - _spin_nvr.tmp:103 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (182:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported175 = 0;
			if (verbose && !reported175)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported175 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported175 = 0;
			if (verbose && !reported175)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported175 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][175] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))
			continue;
		/* merge: assert(!(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING)))))(0, 176, 182) */
		reached[3][176] = 1;
		spin_assert( !((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))), " !((( !((states[2]==0))&& !((states[2]==13)))&& !((states[2]==12))))", II, tt, t);
		/* merge: .(goto)(0, 183, 182) */
		reached[3][183] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 703: // STATE 178 - _spin_nvr.tmp:104 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported178 = 0;
			if (verbose && !reported178)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported178 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported178 = 0;
			if (verbose && !reported178)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported178 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][178] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 704: // STATE 180 - _spin_nvr.tmp:105 - [((!((states[2]==0))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported180 = 0;
			if (verbose && !reported180)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported180 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported180 = 0;
			if (verbose && !reported180)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported180 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][180] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 705: // STATE 185 - _spin_nvr.tmp:109 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported185 = 0;
			if (verbose && !reported185)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported185 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported185 = 0;
			if (verbose && !reported185)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported185 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][185] = 1;
		if (!(( !((now.states[2]==13))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 706: // STATE 187 - _spin_nvr.tmp:110 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported187 = 0;
			if (verbose && !reported187)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported187 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported187 = 0;
			if (verbose && !reported187)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported187 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][187] = 1;
		if (!( !((now.states[2]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 707: // STATE 189 - _spin_nvr.tmp:111 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported189 = 0;
			if (verbose && !reported189)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported189 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported189 = 0;
			if (verbose && !reported189)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported189 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][189] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 708: // STATE 191 - _spin_nvr.tmp:112 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported191 = 0;
			if (verbose && !reported191)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported191 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported191 = 0;
			if (verbose && !reported191)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported191 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][191] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 709: // STATE 193 - _spin_nvr.tmp:113 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (200:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported193 = 0;
			if (verbose && !reported193)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported193 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported193 = 0;
			if (verbose && !reported193)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported193 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][193] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))
			continue;
		/* merge: assert(!(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING)))))(0, 194, 200) */
		reached[3][194] = 1;
		spin_assert( !((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))), " !((( !((states[2]==0))&& !((states[2]==13)))&& !((states[2]==12))))", II, tt, t);
		/* merge: .(goto)(0, 201, 200) */
		reached[3][201] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 710: // STATE 196 - _spin_nvr.tmp:114 - [(((!((states[2]==0))&&!((states[2]==READY)))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported196 = 0;
			if (verbose && !reported196)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported196 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported196 = 0;
			if (verbose && !reported196)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported196 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][196] = 1;
		if (!((( !((now.states[2]==0))&& !((now.states[2]==13)))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 711: // STATE 198 - _spin_nvr.tmp:115 - [((!((states[2]==0))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported198 = 0;
			if (verbose && !reported198)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported198 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][198] = 1;
		if (!(( !((now.states[2]==0))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 712: // STATE 203 - _spin_nvr.tmp:119 - [(!((states[2]==READY)))] (208:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported203 = 0;
			if (verbose && !reported203)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported203 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported203 = 0;
			if (verbose && !reported203)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported203 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][203] = 1;
		if (!( !((now.states[2]==13))))
			continue;
		/* merge: assert(!(!((states[2]==READY))))(0, 204, 208) */
		reached[3][204] = 1;
		spin_assert( !( !((now.states[2]==13))), " !( !((states[2]==13)))", II, tt, t);
		/* merge: .(goto)(0, 209, 208) */
		reached[3][209] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 713: // STATE 211 - _spin_nvr.tmp:124 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported211 = 0;
			if (verbose && !reported211)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported211 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][211] = 1;
		if (!(( !((now.states[2]==13))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 714: // STATE 213 - _spin_nvr.tmp:125 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (220:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported213 = 0;
			if (verbose && !reported213)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported213 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported213 = 0;
			if (verbose && !reported213)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported213 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][213] = 1;
		if (!(( !((now.states[2]==13))&& !((now.states[2]==12)))))
			continue;
		/* merge: assert(!((!((states[2]==READY))&&!((states[2]==STARTING)))))(0, 214, 220) */
		reached[3][214] = 1;
		spin_assert( !(( !((now.states[2]==13))&& !((now.states[2]==12)))), " !(( !((states[2]==13))&& !((states[2]==12))))", II, tt, t);
		/* merge: .(goto)(0, 221, 220) */
		reached[3][221] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 715: // STATE 216 - _spin_nvr.tmp:126 - [(!((states[2]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported216 = 0;
			if (verbose && !reported216)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported216 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported216 = 0;
			if (verbose && !reported216)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported216 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][216] = 1;
		if (!( !((now.states[2]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 716: // STATE 218 - _spin_nvr.tmp:127 - [((!((states[2]==READY))&&!((states[2]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported218 = 0;
			if (verbose && !reported218)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported218 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported218 = 0;
			if (verbose && !reported218)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported218 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][218] = 1;
		if (!(( !((now.states[2]==13))&& !((now.states[2]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 717: // STATE 223 - _spin_nvr.tmp:131 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported223 = 0;
			if (verbose && !reported223)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported223 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][223] = 1;
		if (!(( !((now.states[1]==13))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 718: // STATE 225 - _spin_nvr.tmp:132 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported225 = 0;
			if (verbose && !reported225)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported225 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported225 = 0;
			if (verbose && !reported225)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported225 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][225] = 1;
		if (!( !((now.states[1]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 719: // STATE 227 - _spin_nvr.tmp:133 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported227 = 0;
			if (verbose && !reported227)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported227 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported227 = 0;
			if (verbose && !reported227)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported227 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][227] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 720: // STATE 229 - _spin_nvr.tmp:134 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (236:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported229 = 0;
			if (verbose && !reported229)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported229 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported229 = 0;
			if (verbose && !reported229)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported229 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][229] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))))
			continue;
		/* merge: assert(!(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING)))))(0, 230, 236) */
		reached[3][230] = 1;
		spin_assert( !((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))), " !((( !((states[1]==0))&& !((states[1]==13)))&& !((states[1]==12))))", II, tt, t);
		/* merge: .(goto)(0, 237, 236) */
		reached[3][237] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 721: // STATE 232 - _spin_nvr.tmp:135 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported232 = 0;
			if (verbose && !reported232)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported232 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][232] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 722: // STATE 234 - _spin_nvr.tmp:136 - [((!((states[1]==0))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported234 = 0;
			if (verbose && !reported234)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported234 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][234] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 723: // STATE 239 - _spin_nvr.tmp:140 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported239 = 0;
			if (verbose && !reported239)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported239 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][239] = 1;
		if (!(( !((now.states[1]==13))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 724: // STATE 241 - _spin_nvr.tmp:141 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported241 = 0;
			if (verbose && !reported241)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported241 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported241 = 0;
			if (verbose && !reported241)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported241 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][241] = 1;
		if (!( !((now.states[1]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 725: // STATE 243 - _spin_nvr.tmp:142 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported243 = 0;
			if (verbose && !reported243)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported243 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][243] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 726: // STATE 245 - _spin_nvr.tmp:143 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported245 = 0;
			if (verbose && !reported245)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported245 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported245 = 0;
			if (verbose && !reported245)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported245 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][245] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 727: // STATE 247 - _spin_nvr.tmp:144 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (254:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported247 = 0;
			if (verbose && !reported247)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported247 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported247 = 0;
			if (verbose && !reported247)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported247 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][247] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))))
			continue;
		/* merge: assert(!(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING)))))(0, 248, 254) */
		reached[3][248] = 1;
		spin_assert( !((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))), " !((( !((states[1]==0))&& !((states[1]==13)))&& !((states[1]==12))))", II, tt, t);
		/* merge: .(goto)(0, 255, 254) */
		reached[3][255] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 728: // STATE 250 - _spin_nvr.tmp:145 - [(((!((states[1]==0))&&!((states[1]==READY)))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported250 = 0;
			if (verbose && !reported250)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported250 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported250 = 0;
			if (verbose && !reported250)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported250 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][250] = 1;
		if (!((( !((now.states[1]==0))&& !((now.states[1]==13)))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 729: // STATE 252 - _spin_nvr.tmp:146 - [((!((states[1]==0))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported252 = 0;
			if (verbose && !reported252)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported252 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported252 = 0;
			if (verbose && !reported252)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported252 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][252] = 1;
		if (!(( !((now.states[1]==0))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 730: // STATE 257 - _spin_nvr.tmp:150 - [(!((states[1]==READY)))] (262:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported257 = 0;
			if (verbose && !reported257)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported257 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported257 = 0;
			if (verbose && !reported257)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported257 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][257] = 1;
		if (!( !((now.states[1]==13))))
			continue;
		/* merge: assert(!(!((states[1]==READY))))(0, 258, 262) */
		reached[3][258] = 1;
		spin_assert( !( !((now.states[1]==13))), " !( !((states[1]==13)))", II, tt, t);
		/* merge: .(goto)(0, 263, 262) */
		reached[3][263] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 731: // STATE 265 - _spin_nvr.tmp:155 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported265 = 0;
			if (verbose && !reported265)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported265 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][265] = 1;
		if (!(( !((now.states[1]==13))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 732: // STATE 267 - _spin_nvr.tmp:156 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (274:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported267 = 0;
			if (verbose && !reported267)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported267 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported267 = 0;
			if (verbose && !reported267)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported267 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][267] = 1;
		if (!(( !((now.states[1]==13))&& !((now.states[1]==12)))))
			continue;
		/* merge: assert(!((!((states[1]==READY))&&!((states[1]==STARTING)))))(0, 268, 274) */
		reached[3][268] = 1;
		spin_assert( !(( !((now.states[1]==13))&& !((now.states[1]==12)))), " !(( !((states[1]==13))&& !((states[1]==12))))", II, tt, t);
		/* merge: .(goto)(0, 275, 274) */
		reached[3][275] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 733: // STATE 270 - _spin_nvr.tmp:157 - [(!((states[1]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported270 = 0;
			if (verbose && !reported270)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported270 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][270] = 1;
		if (!( !((now.states[1]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 734: // STATE 272 - _spin_nvr.tmp:158 - [((!((states[1]==READY))&&!((states[1]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported272 = 0;
			if (verbose && !reported272)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported272 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported272 = 0;
			if (verbose && !reported272)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported272 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][272] = 1;
		if (!(( !((now.states[1]==13))&& !((now.states[1]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 735: // STATE 277 - _spin_nvr.tmp:162 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported277 = 0;
			if (verbose && !reported277)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported277 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported277 = 0;
			if (verbose && !reported277)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported277 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][277] = 1;
		if (!(( !((now.states[0]==13))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 736: // STATE 279 - _spin_nvr.tmp:163 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported279 = 0;
			if (verbose && !reported279)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported279 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported279 = 0;
			if (verbose && !reported279)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported279 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][279] = 1;
		if (!( !((now.states[0]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 737: // STATE 281 - _spin_nvr.tmp:164 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported281 = 0;
			if (verbose && !reported281)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported281 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported281 = 0;
			if (verbose && !reported281)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported281 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][281] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 738: // STATE 283 - _spin_nvr.tmp:165 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (290:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported283 = 0;
			if (verbose && !reported283)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported283 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported283 = 0;
			if (verbose && !reported283)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported283 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][283] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))))
			continue;
		/* merge: assert(!(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING)))))(0, 284, 290) */
		reached[3][284] = 1;
		spin_assert( !((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))), " !((( !((states[0]==0))&& !((states[0]==13)))&& !((states[0]==12))))", II, tt, t);
		/* merge: .(goto)(0, 291, 290) */
		reached[3][291] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 739: // STATE 286 - _spin_nvr.tmp:166 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported286 = 0;
			if (verbose && !reported286)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported286 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported286 = 0;
			if (verbose && !reported286)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported286 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][286] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 740: // STATE 288 - _spin_nvr.tmp:167 - [((!((states[0]==0))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported288 = 0;
			if (verbose && !reported288)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported288 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported288 = 0;
			if (verbose && !reported288)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported288 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][288] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 741: // STATE 293 - _spin_nvr.tmp:171 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported293 = 0;
			if (verbose && !reported293)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported293 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][293] = 1;
		if (!(( !((now.states[0]==13))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 742: // STATE 295 - _spin_nvr.tmp:172 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported295 = 0;
			if (verbose && !reported295)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported295 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported295 = 0;
			if (verbose && !reported295)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported295 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][295] = 1;
		if (!( !((now.states[0]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 743: // STATE 297 - _spin_nvr.tmp:173 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported297 = 0;
			if (verbose && !reported297)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported297 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported297 = 0;
			if (verbose && !reported297)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported297 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][297] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 744: // STATE 299 - _spin_nvr.tmp:174 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported299 = 0;
			if (verbose && !reported299)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported299 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported299 = 0;
			if (verbose && !reported299)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported299 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][299] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 745: // STATE 301 - _spin_nvr.tmp:175 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (308:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported301 = 0;
			if (verbose && !reported301)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported301 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported301 = 0;
			if (verbose && !reported301)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported301 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][301] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))))
			continue;
		/* merge: assert(!(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING)))))(0, 302, 308) */
		reached[3][302] = 1;
		spin_assert( !((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))), " !((( !((states[0]==0))&& !((states[0]==13)))&& !((states[0]==12))))", II, tt, t);
		/* merge: .(goto)(0, 309, 308) */
		reached[3][309] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 746: // STATE 304 - _spin_nvr.tmp:176 - [(((!((states[0]==0))&&!((states[0]==READY)))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported304 = 0;
			if (verbose && !reported304)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported304 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported304 = 0;
			if (verbose && !reported304)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported304 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][304] = 1;
		if (!((( !((now.states[0]==0))&& !((now.states[0]==13)))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 747: // STATE 306 - _spin_nvr.tmp:177 - [((!((states[0]==0))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported306 = 0;
			if (verbose && !reported306)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported306 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported306 = 0;
			if (verbose && !reported306)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported306 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][306] = 1;
		if (!(( !((now.states[0]==0))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 748: // STATE 311 - _spin_nvr.tmp:181 - [(!((states[0]==READY)))] (316:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported311 = 0;
			if (verbose && !reported311)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported311 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported311 = 0;
			if (verbose && !reported311)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported311 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][311] = 1;
		if (!( !((now.states[0]==13))))
			continue;
		/* merge: assert(!(!((states[0]==READY))))(0, 312, 316) */
		reached[3][312] = 1;
		spin_assert( !( !((now.states[0]==13))), " !( !((states[0]==13)))", II, tt, t);
		/* merge: .(goto)(0, 317, 316) */
		reached[3][317] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 749: // STATE 319 - _spin_nvr.tmp:186 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported319 = 0;
			if (verbose && !reported319)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported319 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][319] = 1;
		if (!(( !((now.states[0]==13))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 750: // STATE 321 - _spin_nvr.tmp:187 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (328:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported321 = 0;
			if (verbose && !reported321)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported321 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][321] = 1;
		if (!(( !((now.states[0]==13))&& !((now.states[0]==12)))))
			continue;
		/* merge: assert(!((!((states[0]==READY))&&!((states[0]==STARTING)))))(0, 322, 328) */
		reached[3][322] = 1;
		spin_assert( !(( !((now.states[0]==13))&& !((now.states[0]==12)))), " !(( !((states[0]==13))&& !((states[0]==12))))", II, tt, t);
		/* merge: .(goto)(0, 329, 328) */
		reached[3][329] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 751: // STATE 324 - _spin_nvr.tmp:188 - [(!((states[0]==STARTING)))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported324 = 0;
			if (verbose && !reported324)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported324 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][324] = 1;
		if (!( !((now.states[0]==12))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 752: // STATE 326 - _spin_nvr.tmp:189 - [((!((states[0]==READY))&&!((states[0]==STARTING))))] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported326 = 0;
			if (verbose && !reported326)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported326 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][326] = 1;
		if (!(( !((now.states[0]==13))&& !((now.states[0]==12)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 753: // STATE 332 - _spin_nvr.tmp:193 - [-end-] (0:0:0 - 1)
		
#if defined(VERI) && !defined(NP)
#if NCLAIMS>1
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	int nn = (int) ((Pclaim *)pptr(0))->_n;
				printf("depth %ld: Claim %s (%d), state %d (line %d)\n",
					depth, procname[spin_c_typ[nn]], nn, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#else
		{	static int reported332 = 0;
			if (verbose && !reported332)
			{	printf("depth %d: Claim, state %d (line %d)\n",
					(int) depth, (int) ((Pclaim *)pptr(0))->_p, src_claim[ (int) ((Pclaim *)pptr(0))->_p ]);
				reported332 = 1;
				fflush(stdout);
		}	}
#endif
#endif
		reached[3][332] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* PROC :init: */
	case 754: // STATE 11 - mutant_1.pml:347 - [D_STEP347]
		if (!(((boq == -1 && (((int)((P2 *)_this)->i)<3))) || (boq == -1 /* else */)))
			continue;

		reached[2][11] = 1;
		reached[2][t->st] = 1;
		reached[2][tt] = 1;

		if (TstOnly) return 1;

		sv_save();
		S_11087_0: /* 2 */
S_11086_0: /* 2 */
S_11080_0: /* 2 */
		if (!((((int)((P2 *)_this)->i)<3)))
			goto S_11086_1;
S_11081_0: /* 2 */
		spin_assert((now.states[ Index(((int)((P2 *)_this)->i), 3) ]==0), "(states[i]==0)", II, tt, t);
S_11082_0: /* 2 */
		spin_assert((now.commands[ Index(((int)((P2 *)_this)->i), 3) ]==0), "(commands[i]==0)", II, tt, t);
S_11083_0: /* 2 */
		((P2 *)_this)->i = (((int)((P2 *)_this)->i)+1);
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_11087_0; /* ';' */
S_11086_1: /* 3 */
S_11084_0: /* 2 */
		/* else */;
S_11085_0: /* 2 */
		goto S_11088_0;	/* 'goto' */
S_11086_2: /* 3 */
		Uerror("blocking sel in d_step (nr.0, near line 348)");
S_11088_0: /* 2 */
		goto S_11089_0;	/* 'break' */
S_11089_0: /* 2 */
		((P2 *)_this)->i = 0;
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_11113_0;
S_11113_0: /* 1 */

#if defined(C_States) && (HAS_TRACK==1)
		c_update((uchar *) &(now.c_state[0]));
#endif
		_m = 3; goto P999;

	case 755: // STATE 33 - mutant_1.pml:574 - [D_STEP574]
		if (!(((boq == -1 && 1)) || ((boq == -1 && 1))))
			continue;

		reached[2][33] = 1;
		reached[2][t->st] = 1;
		reached[2][tt] = 1;

		if (TstOnly) return 1;

		sv_save();
		S_11096_0: /* 2 */
S_11092_0: /* 2 */
		if (!(1))
			goto S_11096_1;
S_11093_0: /* 2 */
		now.serialize_commands = 1;
#ifdef VAR_RANGES
		logval("serialize_commands", ((int)now.serialize_commands));
#endif
		;
		goto S_11097_0;
S_11096_1: /* 3 */
S_11094_0: /* 2 */
		if (!(1))
			goto S_11096_2;
S_11095_0: /* 2 */
		now.serialize_commands = 0;
#ifdef VAR_RANGES
		logval("serialize_commands", ((int)now.serialize_commands));
#endif
		;
		goto S_11097_0;
S_11096_2: /* 3 */
		Uerror("blocking sel in d_step (nr.1, near line 575)");
S_11097_0: /* 2 */
S_11098_0: /* 2 */
		now.all_workers_stopped = 0;
#ifdef VAR_RANGES
		logval("all_workers_stopped", ((int)now.all_workers_stopped));
#endif
		;
S_11099_0: /* 2 */
		now.exists_aborted_worker = 0;
#ifdef VAR_RANGES
		logval("exists_aborted_worker", ((int)now.exists_aborted_worker));
#endif
		;
S_11100_0: /* 2 */
		now.supervisor_started = 0;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
S_11110_0: /* 2 */
S_11109_0: /* 2 */
S_11101_0: /* 2 */
		if (!((((int)((P2 *)_this)->i)<3)))
			goto S_11109_1;
S_11105_0: /* 2 */
S_11104_0: /* 2 */
S_11102_0: /* 2 */
		now.states[ Index(((P2 *)_this)->i, 3) ] = 13;
#ifdef VAR_RANGES
		logval("states[:init::i]", now.states[ Index(((int)((P2 *)_this)->i), 3) ]);
#endif
		;
S_11103_0: /* 2 */
		now.commands[ Index(((P2 *)_this)->i, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[:init::i]", now.commands[ Index(((int)((P2 *)_this)->i), 3) ]);
#endif
		;
		goto S_11106_0;
S_11106_0: /* 2 */
		((P2 *)_this)->i = (((int)((P2 *)_this)->i)+1);
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_11110_0; /* ';' */
S_11109_1: /* 3 */
S_11107_0: /* 2 */
		/* else */;
S_11108_0: /* 2 */
		goto S_11111_0;	/* 'goto' */
S_11109_2: /* 3 */
		Uerror("blocking sel in d_step (nr.2, near line 584)");
S_11111_0: /* 2 */
		goto S_11114_0;	/* 'break' */
S_11114_0: /* 1 */

#if defined(C_States) && (HAS_TRACK==1)
		c_update((uchar *) &(now.c_state[0]));
#endif
		_m = 3; goto P999;

	case 756: // STATE 35 - mutant_1.pml:609 - [i = 0] (0:0:1 - 1)
		IfNotBlocked
		reached[2][35] = 1;
		(trpt+1)->bup.oval = ((int)((P2 *)_this)->i);
		((P2 *)_this)->i = 0;
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 757: // STATE 46 - mutant_1.pml:347 - [D_STEP347]
		if (!(((boq == -1 && (((int)((P2 *)_this)->i)<3))) || (boq == -1 /* else */)))
			continue;

		reached[2][46] = 1;
		reached[2][t->st] = 1;
		reached[2][tt] = 1;

		if (TstOnly) return 1;

		sv_save();
		S_11122_0: /* 2 */
S_11121_0: /* 2 */
S_11115_0: /* 2 */
		if (!((((int)((P2 *)_this)->i)<3)))
			goto S_11121_1;
S_11116_0: /* 2 */
		spin_assert((now.states[ Index(((int)((P2 *)_this)->i), 3) ]==13), "(states[i]==13)", II, tt, t);
S_11117_0: /* 2 */
		spin_assert((now.commands[ Index(((int)((P2 *)_this)->i), 3) ]==8), "(commands[i]==8)", II, tt, t);
S_11118_0: /* 2 */
		((P2 *)_this)->i = (((int)((P2 *)_this)->i)+1);
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_11122_0; /* ';' */
S_11121_1: /* 3 */
S_11119_0: /* 2 */
		/* else */;
S_11120_0: /* 2 */
		goto S_11123_0;	/* 'goto' */
S_11121_2: /* 3 */
		Uerror("blocking sel in d_step (nr.3, near line 348)");
S_11123_0: /* 2 */
		goto S_11124_0;	/* 'break' */
S_11124_0: /* 2 */
		((P2 *)_this)->i = 0;
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_11150_0;
S_11150_0: /* 1 */

#if defined(C_States) && (HAS_TRACK==1)
		c_update((uchar *) &(now.c_state[0]));
#endif
		_m = 3; goto P999;

	case 758: // STATE 48 - mutant_1.pml:551 - [(((START==START)&&(commands[0]==CONTINUE)))] (68:0:1 - 1)
		IfNotBlocked
		reached[2][48] = 1;
		if (!(((9==9)&&(now.commands[0]==8))))
			continue;
		/* merge: assert((states[0]==READY))(68, 49, 68) */
		reached[2][49] = 1;
		spin_assert((now.states[0]==13), "(states[0]==13)", II, tt, t);
		/* merge: commands[0] = START(68, 50, 68) */
		reached[2][50] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 9;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(68, 66, 68) */
		reached[2][66] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 759: // STATE 66 - mutant_1.pml:569 - [.(goto)] (0:68:0 - 6)
		IfNotBlocked
		reached[2][66] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 760: // STATE 51 - mutant_1.pml:554 - [(((START==PAUSE)&&(commands[0]==CONTINUE)))] (68:0:1 - 1)
		IfNotBlocked
		reached[2][51] = 1;
		if (!(((9==6)&&(now.commands[0]==8))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(68, 52, 68) */
		reached[2][52] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==11)), "((states[0]==12)||(states[0]==11))", II, tt, t);
		/* merge: commands[0] = PAUSE(68, 53, 68) */
		reached[2][53] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(68, 66, 68) */
		reached[2][66] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 761: // STATE 54 - mutant_1.pml:557 - [(((START==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (68:0:1 - 1)
		IfNotBlocked
		reached[2][54] = 1;
		if (!(((9==8)&&((now.commands[0]==9)||(now.commands[0]==6)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(68, 55, 68) */
		reached[2][55] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==10)), "((states[0]==12)||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = CONTINUE(68, 56, 68) */
		reached[2][56] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(68, 66, 68) */
		reached[2][66] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 762: // STATE 57 - mutant_1.pml:560 - [(((START==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (68:0:1 - 1)
		IfNotBlocked
		reached[2][57] = 1;
		if (!(((9==2)&&((now.commands[0]==8)||(now.commands[0]==6)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(68, 58, 68) */
		reached[2][58] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==10)), "(((states[0]==12)||(states[0]==11))||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = STOP(68, 59, 68) */
		reached[2][59] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 2;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(68, 66, 68) */
		reached[2][66] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 763: // STATE 60 - mutant_1.pml:563 - [((START==ABORT))] (68:0:1 - 1)
		IfNotBlocked
		reached[2][60] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[0]!=READY))(68, 61, 68) */
		reached[2][61] = 1;
		spin_assert((now.states[0]!=13), "(states[0]!=13)", II, tt, t);
		/* merge: commands[0] = ABORT(68, 62, 68) */
		reached[2][62] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 1;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(68, 66, 68) */
		reached[2][66] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 764: // STATE 64 - mutant_1.pml:567 - [(1)] (68:0:0 - 1)
		IfNotBlocked
		reached[2][64] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(68, 66, 68) */
		reached[2][66] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 765: // STATE 68 - mutant_1.pml:570 - [(run Supervisor())] (0:0:0 - 1)
		IfNotBlocked
		reached[2][68] = 1;
		if (!(addproc(II, 1, 1, 0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 766: // STATE 69 - mutant_1.pml:211 - [(((((((states[0]==RUNNING)||(states[0]==PAUSED))||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[2][69] = 1;
		if (!(((((((now.states[0]==11)||(now.states[0]==10))||(now.states[0]==7))||(now.states[0]==5))||(now.states[0]==4))||(now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 767: // STATE 72 - mutant_1.pml:614 - [((states[0]==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[2][72] = 1;
		if (!((now.states[0]==11)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 768: // STATE 74 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[0]==CONTINUE)))] (99:0:1 - 1)
		IfNotBlocked
		reached[2][74] = 1;
		if (!(((6==9)&&(now.commands[0]==8))))
			continue;
		/* merge: assert((states[0]==READY))(99, 75, 99) */
		reached[2][75] = 1;
		spin_assert((now.states[0]==13), "(states[0]==13)", II, tt, t);
		/* merge: commands[0] = START(99, 76, 99) */
		reached[2][76] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 9;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(99, 92, 99) */
		reached[2][92] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 769: // STATE 92 - mutant_1.pml:276 - [.(goto)] (0:99:0 - 6)
		IfNotBlocked
		reached[2][92] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 770: // STATE 77 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[0]==CONTINUE)))] (99:0:1 - 1)
		IfNotBlocked
		reached[2][77] = 1;
		if (!(((6==6)&&(now.commands[0]==8))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(99, 78, 99) */
		reached[2][78] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==11)), "((states[0]==12)||(states[0]==11))", II, tt, t);
		/* merge: commands[0] = PAUSE(99, 79, 99) */
		reached[2][79] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(99, 92, 99) */
		reached[2][92] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 771: // STATE 80 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (99:0:1 - 1)
		IfNotBlocked
		reached[2][80] = 1;
		if (!(((6==8)&&((now.commands[0]==9)||(now.commands[0]==6)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(99, 81, 99) */
		reached[2][81] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==10)), "((states[0]==12)||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = CONTINUE(99, 82, 99) */
		reached[2][82] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(99, 92, 99) */
		reached[2][92] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 772: // STATE 83 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (99:0:1 - 1)
		IfNotBlocked
		reached[2][83] = 1;
		if (!(((6==2)&&((now.commands[0]==8)||(now.commands[0]==6)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(99, 84, 99) */
		reached[2][84] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==10)), "(((states[0]==12)||(states[0]==11))||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = STOP(99, 85, 99) */
		reached[2][85] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 2;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(99, 92, 99) */
		reached[2][92] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 773: // STATE 86 - mutant_1.pml:270 - [((PAUSE==ABORT))] (99:0:1 - 1)
		IfNotBlocked
		reached[2][86] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[0]!=READY))(99, 87, 99) */
		reached[2][87] = 1;
		spin_assert((now.states[0]!=13), "(states[0]!=13)", II, tt, t);
		/* merge: commands[0] = ABORT(99, 88, 99) */
		reached[2][88] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 1;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(99, 92, 99) */
		reached[2][92] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 774: // STATE 90 - mutant_1.pml:274 - [(1)] (99:0:0 - 1)
		IfNotBlocked
		reached[2][90] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(99, 92, 99) */
		reached[2][92] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 775: // STATE 95 - mutant_1.pml:214 - [((((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[2][95] = 1;
		if (!((((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==5))||(now.states[0]==4))||(now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 776: // STATE 103 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[0]==CONTINUE)))] (128:0:1 - 1)
		IfNotBlocked
		reached[2][103] = 1;
		if (!(((6==9)&&(now.commands[0]==8))))
			continue;
		/* merge: assert((states[0]==READY))(128, 104, 128) */
		reached[2][104] = 1;
		spin_assert((now.states[0]==13), "(states[0]==13)", II, tt, t);
		/* merge: commands[0] = START(128, 105, 128) */
		reached[2][105] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 9;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(128, 121, 128) */
		reached[2][121] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 777: // STATE 121 - mutant_1.pml:276 - [.(goto)] (0:128:0 - 6)
		IfNotBlocked
		reached[2][121] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 778: // STATE 106 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[0]==CONTINUE)))] (128:0:1 - 1)
		IfNotBlocked
		reached[2][106] = 1;
		if (!(((6==6)&&(now.commands[0]==8))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(128, 107, 128) */
		reached[2][107] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==11)), "((states[0]==12)||(states[0]==11))", II, tt, t);
		/* merge: commands[0] = PAUSE(128, 108, 128) */
		reached[2][108] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(128, 121, 128) */
		reached[2][121] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 779: // STATE 109 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (128:0:1 - 1)
		IfNotBlocked
		reached[2][109] = 1;
		if (!(((6==8)&&((now.commands[0]==9)||(now.commands[0]==6)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(128, 110, 128) */
		reached[2][110] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==10)), "((states[0]==12)||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = CONTINUE(128, 111, 128) */
		reached[2][111] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(128, 121, 128) */
		reached[2][121] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 780: // STATE 112 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (128:0:1 - 1)
		IfNotBlocked
		reached[2][112] = 1;
		if (!(((6==2)&&((now.commands[0]==8)||(now.commands[0]==6)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(128, 113, 128) */
		reached[2][113] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==10)), "(((states[0]==12)||(states[0]==11))||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = STOP(128, 114, 128) */
		reached[2][114] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 2;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(128, 121, 128) */
		reached[2][121] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 781: // STATE 115 - mutant_1.pml:270 - [((PAUSE==ABORT))] (128:0:1 - 1)
		IfNotBlocked
		reached[2][115] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[0]!=READY))(128, 116, 128) */
		reached[2][116] = 1;
		spin_assert((now.states[0]!=13), "(states[0]!=13)", II, tt, t);
		/* merge: commands[0] = ABORT(128, 117, 128) */
		reached[2][117] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 1;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(128, 121, 128) */
		reached[2][121] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 782: // STATE 119 - mutant_1.pml:274 - [(1)] (128:0:0 - 1)
		IfNotBlocked
		reached[2][119] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(128, 121, 128) */
		reached[2][121] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 783: // STATE 124 - mutant_1.pml:214 - [((((((states[0]==PAUSED)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[2][124] = 1;
		if (!((((((now.states[0]==10)||(now.states[0]==7))||(now.states[0]==5))||(now.states[0]==4))||(now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 784: // STATE 133 - mutant_1.pml:621 - [((states[0]==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[2][133] = 1;
		if (!((now.states[0]==10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 785: // STATE 135 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[0]==CONTINUE)))] (160:0:1 - 1)
		IfNotBlocked
		reached[2][135] = 1;
		if (!(((8==9)&&(now.commands[0]==8))))
			continue;
		/* merge: assert((states[0]==READY))(160, 136, 160) */
		reached[2][136] = 1;
		spin_assert((now.states[0]==13), "(states[0]==13)", II, tt, t);
		/* merge: commands[0] = START(160, 137, 160) */
		reached[2][137] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 9;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(160, 153, 160) */
		reached[2][153] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 786: // STATE 153 - mutant_1.pml:305 - [.(goto)] (0:160:0 - 6)
		IfNotBlocked
		reached[2][153] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 787: // STATE 138 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[0]==CONTINUE)))] (160:0:1 - 1)
		IfNotBlocked
		reached[2][138] = 1;
		if (!(((8==6)&&(now.commands[0]==8))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(160, 139, 160) */
		reached[2][139] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==11)), "((states[0]==12)||(states[0]==11))", II, tt, t);
		/* merge: commands[0] = PAUSE(160, 140, 160) */
		reached[2][140] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(160, 153, 160) */
		reached[2][153] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 788: // STATE 141 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (160:0:1 - 1)
		IfNotBlocked
		reached[2][141] = 1;
		if (!(((8==8)&&((now.commands[0]==9)||(now.commands[0]==6)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(160, 142, 160) */
		reached[2][142] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==10)), "((states[0]==12)||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = CONTINUE(160, 143, 160) */
		reached[2][143] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(160, 153, 160) */
		reached[2][153] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 789: // STATE 144 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (160:0:1 - 1)
		IfNotBlocked
		reached[2][144] = 1;
		if (!(((8==2)&&((now.commands[0]==8)||(now.commands[0]==6)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(160, 145, 160) */
		reached[2][145] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==10)), "(((states[0]==12)||(states[0]==11))||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = STOP(160, 146, 160) */
		reached[2][146] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 2;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(160, 153, 160) */
		reached[2][153] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 790: // STATE 147 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (160:0:1 - 1)
		IfNotBlocked
		reached[2][147] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[0]!=READY))(160, 148, 160) */
		reached[2][148] = 1;
		spin_assert((now.states[0]!=13), "(states[0]!=13)", II, tt, t);
		/* merge: commands[0] = ABORT(160, 149, 160) */
		reached[2][149] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 1;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(160, 153, 160) */
		reached[2][153] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 791: // STATE 151 - mutant_1.pml:303 - [(1)] (160:0:0 - 1)
		IfNotBlocked
		reached[2][151] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(160, 153, 160) */
		reached[2][153] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 792: // STATE 156 - mutant_1.pml:217 - [((((((states[0]==RUNNING)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[2][156] = 1;
		if (!((((((now.states[0]==11)||(now.states[0]==7))||(now.states[0]==5))||(now.states[0]==4))||(now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 793: // STATE 164 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[0]==CONTINUE)))] (189:0:1 - 1)
		IfNotBlocked
		reached[2][164] = 1;
		if (!(((8==9)&&(now.commands[0]==8))))
			continue;
		/* merge: assert((states[0]==READY))(189, 165, 189) */
		reached[2][165] = 1;
		spin_assert((now.states[0]==13), "(states[0]==13)", II, tt, t);
		/* merge: commands[0] = START(189, 166, 189) */
		reached[2][166] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 9;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(189, 182, 189) */
		reached[2][182] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 794: // STATE 182 - mutant_1.pml:305 - [.(goto)] (0:189:0 - 6)
		IfNotBlocked
		reached[2][182] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 795: // STATE 167 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[0]==CONTINUE)))] (189:0:1 - 1)
		IfNotBlocked
		reached[2][167] = 1;
		if (!(((8==6)&&(now.commands[0]==8))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(189, 168, 189) */
		reached[2][168] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==11)), "((states[0]==12)||(states[0]==11))", II, tt, t);
		/* merge: commands[0] = PAUSE(189, 169, 189) */
		reached[2][169] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(189, 182, 189) */
		reached[2][182] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 796: // STATE 170 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (189:0:1 - 1)
		IfNotBlocked
		reached[2][170] = 1;
		if (!(((8==8)&&((now.commands[0]==9)||(now.commands[0]==6)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(189, 171, 189) */
		reached[2][171] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==10)), "((states[0]==12)||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = CONTINUE(189, 172, 189) */
		reached[2][172] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(189, 182, 189) */
		reached[2][182] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 797: // STATE 173 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (189:0:1 - 1)
		IfNotBlocked
		reached[2][173] = 1;
		if (!(((8==2)&&((now.commands[0]==8)||(now.commands[0]==6)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(189, 174, 189) */
		reached[2][174] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==10)), "(((states[0]==12)||(states[0]==11))||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = STOP(189, 175, 189) */
		reached[2][175] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 2;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(189, 182, 189) */
		reached[2][182] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 798: // STATE 176 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (189:0:1 - 1)
		IfNotBlocked
		reached[2][176] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[0]!=READY))(189, 177, 189) */
		reached[2][177] = 1;
		spin_assert((now.states[0]!=13), "(states[0]!=13)", II, tt, t);
		/* merge: commands[0] = ABORT(189, 178, 189) */
		reached[2][178] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 1;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(189, 182, 189) */
		reached[2][182] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 799: // STATE 180 - mutant_1.pml:303 - [(1)] (189:0:0 - 1)
		IfNotBlocked
		reached[2][180] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(189, 182, 189) */
		reached[2][182] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 800: // STATE 185 - mutant_1.pml:217 - [((((((states[0]==RUNNING)||(states[0]==STOPPING))||(states[0]==STOPPED))||(states[0]==ABORTING))||(states[0]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[2][185] = 1;
		if (!((((((now.states[0]==11)||(now.states[0]==7))||(now.states[0]==5))||(now.states[0]==4))||(now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 801: // STATE 204 - mutant_1.pml:316 - [(((STOP==START)&&(commands[0]==CONTINUE)))] (229:0:1 - 1)
		IfNotBlocked
		reached[2][204] = 1;
		if (!(((2==9)&&(now.commands[0]==8))))
			continue;
		/* merge: assert((states[0]==READY))(229, 205, 229) */
		reached[2][205] = 1;
		spin_assert((now.states[0]==13), "(states[0]==13)", II, tt, t);
		/* merge: commands[0] = START(229, 206, 229) */
		reached[2][206] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 9;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(229, 222, 229) */
		reached[2][222] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 802: // STATE 222 - mutant_1.pml:334 - [.(goto)] (0:229:0 - 6)
		IfNotBlocked
		reached[2][222] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 803: // STATE 207 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[0]==CONTINUE)))] (229:0:1 - 1)
		IfNotBlocked
		reached[2][207] = 1;
		if (!(((2==6)&&(now.commands[0]==8))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(229, 208, 229) */
		reached[2][208] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==11)), "((states[0]==12)||(states[0]==11))", II, tt, t);
		/* merge: commands[0] = PAUSE(229, 209, 229) */
		reached[2][209] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(229, 222, 229) */
		reached[2][222] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 804: // STATE 210 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (229:0:1 - 1)
		IfNotBlocked
		reached[2][210] = 1;
		if (!(((2==8)&&((now.commands[0]==9)||(now.commands[0]==6)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(229, 211, 229) */
		reached[2][211] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==10)), "((states[0]==12)||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = CONTINUE(229, 212, 229) */
		reached[2][212] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(229, 222, 229) */
		reached[2][222] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 805: // STATE 213 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (229:0:1 - 1)
		IfNotBlocked
		reached[2][213] = 1;
		if (!(((2==2)&&((now.commands[0]==8)||(now.commands[0]==6)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(229, 214, 229) */
		reached[2][214] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==10)), "(((states[0]==12)||(states[0]==11))||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = STOP(229, 215, 229) */
		reached[2][215] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 2;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(229, 222, 229) */
		reached[2][222] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 806: // STATE 216 - mutant_1.pml:328 - [((STOP==ABORT))] (229:0:1 - 1)
		IfNotBlocked
		reached[2][216] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[0]!=READY))(229, 217, 229) */
		reached[2][217] = 1;
		spin_assert((now.states[0]!=13), "(states[0]!=13)", II, tt, t);
		/* merge: commands[0] = ABORT(229, 218, 229) */
		reached[2][218] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 1;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(229, 222, 229) */
		reached[2][222] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 807: // STATE 220 - mutant_1.pml:332 - [(1)] (229:0:0 - 1)
		IfNotBlocked
		reached[2][220] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(229, 222, 229) */
		reached[2][222] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 808: // STATE 225 - mutant_1.pml:220 - [(((states[0]==STOPPED)||(states[0]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[2][225] = 1;
		if (!(((now.states[0]==5)||(now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 809: // STATE 233 - mutant_1.pml:316 - [(((STOP==START)&&(commands[0]==CONTINUE)))] (258:0:1 - 1)
		IfNotBlocked
		reached[2][233] = 1;
		if (!(((2==9)&&(now.commands[0]==8))))
			continue;
		/* merge: assert((states[0]==READY))(258, 234, 258) */
		reached[2][234] = 1;
		spin_assert((now.states[0]==13), "(states[0]==13)", II, tt, t);
		/* merge: commands[0] = START(258, 235, 258) */
		reached[2][235] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 9;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(258, 251, 258) */
		reached[2][251] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 810: // STATE 251 - mutant_1.pml:334 - [.(goto)] (0:258:0 - 6)
		IfNotBlocked
		reached[2][251] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 811: // STATE 236 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[0]==CONTINUE)))] (258:0:1 - 1)
		IfNotBlocked
		reached[2][236] = 1;
		if (!(((2==6)&&(now.commands[0]==8))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(258, 237, 258) */
		reached[2][237] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==11)), "((states[0]==12)||(states[0]==11))", II, tt, t);
		/* merge: commands[0] = PAUSE(258, 238, 258) */
		reached[2][238] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(258, 251, 258) */
		reached[2][251] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 812: // STATE 239 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (258:0:1 - 1)
		IfNotBlocked
		reached[2][239] = 1;
		if (!(((2==8)&&((now.commands[0]==9)||(now.commands[0]==6)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(258, 240, 258) */
		reached[2][240] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==10)), "((states[0]==12)||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = CONTINUE(258, 241, 258) */
		reached[2][241] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(258, 251, 258) */
		reached[2][251] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 813: // STATE 242 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (258:0:1 - 1)
		IfNotBlocked
		reached[2][242] = 1;
		if (!(((2==2)&&((now.commands[0]==8)||(now.commands[0]==6)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(258, 243, 258) */
		reached[2][243] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==10)), "(((states[0]==12)||(states[0]==11))||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = STOP(258, 244, 258) */
		reached[2][244] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 2;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(258, 251, 258) */
		reached[2][251] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 814: // STATE 245 - mutant_1.pml:328 - [((STOP==ABORT))] (258:0:1 - 1)
		IfNotBlocked
		reached[2][245] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[0]!=READY))(258, 246, 258) */
		reached[2][246] = 1;
		spin_assert((now.states[0]!=13), "(states[0]!=13)", II, tt, t);
		/* merge: commands[0] = ABORT(258, 247, 258) */
		reached[2][247] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 1;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(258, 251, 258) */
		reached[2][251] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 815: // STATE 249 - mutant_1.pml:332 - [(1)] (258:0:0 - 1)
		IfNotBlocked
		reached[2][249] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(258, 251, 258) */
		reached[2][251] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 816: // STATE 254 - mutant_1.pml:220 - [(((states[0]==STOPPED)||(states[0]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[2][254] = 1;
		if (!(((now.states[0]==5)||(now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 817: // STATE 267 - mutant_1.pml:220 - [(((states[0]==STOPPED)||(states[0]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[2][267] = 1;
		if (!(((now.states[0]==5)||(now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 818: // STATE 269 - mutant_1.pml:645 - [i = 0] (0:0:1 - 1)
		IfNotBlocked
		reached[2][269] = 1;
		(trpt+1)->bup.oval = ((int)((P2 *)_this)->i);
		((P2 *)_this)->i = 0;
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 819: // STATE 282 - mutant_1.pml:594 - [D_STEP594]
		if (!(((boq == -1 && (((int)((P2 *)_this)->i)<3))) || (boq == -1 /* else */)))
			continue;

		reached[2][282] = 1;
		reached[2][t->st] = 1;
		reached[2][tt] = 1;

		if (TstOnly) return 1;

		sv_save();
		S_11359_0: /* 2 */
S_11358_0: /* 2 */
S_11349_0: /* 2 */
		if (!((((int)((P2 *)_this)->i)<3)))
			goto S_11358_1;
S_11354_0: /* 2 */
S_11353_0: /* 2 */
S_11350_0: /* 2 */
		now.states[ Index(((P2 *)_this)->i, 3) ] = 0;
#ifdef VAR_RANGES
		logval("states[:init::i]", now.states[ Index(((int)((P2 *)_this)->i), 3) ]);
#endif
		;
S_11351_0: /* 2 */
		now.commands[ Index(((P2 *)_this)->i, 3) ] = 0;
#ifdef VAR_RANGES
		logval("commands[:init::i]", now.commands[ Index(((int)((P2 *)_this)->i), 3) ]);
#endif
		;
S_11352_0: /* 2 */
		now.executing[ Index(((P2 *)_this)->i, 3) ] = 0;
#ifdef VAR_RANGES
		logval("executing[:init::i]", ((int)now.executing[ Index(((int)((P2 *)_this)->i), 3) ]));
#endif
		;
		goto S_11355_0;
S_11355_0: /* 2 */
		((P2 *)_this)->i = (((int)((P2 *)_this)->i)+1);
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_11359_0; /* ';' */
S_11358_1: /* 3 */
S_11356_0: /* 2 */
		/* else */;
S_11357_0: /* 2 */
		goto S_11360_0;	/* 'goto' */
S_11358_2: /* 3 */
		Uerror("blocking sel in d_step (nr.4, near line 595)");
S_11360_0: /* 2 */
		goto S_11363_0;	/* 'break' */
S_11363_0: /* 1 */

#if defined(C_States) && (HAS_TRACK==1)
		c_update((uchar *) &(now.c_state[0]));
#endif
		_m = 3; goto P999;

	case 820: // STATE 284 - mutant_1.pml:647 - [i = 0] (0:0:1 - 1)
		IfNotBlocked
		reached[2][284] = 1;
		(trpt+1)->bup.oval = ((int)((P2 *)_this)->i);
		((P2 *)_this)->i = 0;
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 821: // STATE 295 - mutant_1.pml:347 - [D_STEP347]
		if (!(((boq == -1 && (((int)((P2 *)_this)->i)<3))) || (boq == -1 /* else */)))
			continue;

		reached[2][295] = 1;
		reached[2][t->st] = 1;
		reached[2][tt] = 1;

		if (TstOnly) return 1;

		sv_save();
		S_11371_0: /* 2 */
S_11370_0: /* 2 */
S_11364_0: /* 2 */
		if (!((((int)((P2 *)_this)->i)<3)))
			goto S_11370_1;
S_11365_0: /* 2 */
		spin_assert((now.states[ Index(((int)((P2 *)_this)->i), 3) ]==0), "(states[i]==0)", II, tt, t);
S_11366_0: /* 2 */
		spin_assert((now.commands[ Index(((int)((P2 *)_this)->i), 3) ]==0), "(commands[i]==0)", II, tt, t);
S_11367_0: /* 2 */
		((P2 *)_this)->i = (((int)((P2 *)_this)->i)+1);
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_11371_0; /* ';' */
S_11370_1: /* 3 */
S_11368_0: /* 2 */
		/* else */;
S_11369_0: /* 2 */
		goto S_11372_0;	/* 'goto' */
S_11370_2: /* 3 */
		Uerror("blocking sel in d_step (nr.5, near line 348)");
S_11372_0: /* 2 */
		goto S_11373_0;	/* 'break' */
S_11373_0: /* 2 */
		((P2 *)_this)->i = 0;
#ifdef VAR_RANGES
		logval(":init::i", ((int)((P2 *)_this)->i));
#endif
		;
		goto S_11376_0;
S_11376_0: /* 1 */

#if defined(C_States) && (HAS_TRACK==1)
		c_update((uchar *) &(now.c_state[0]));
#endif
		_m = 3; goto P999;

	case 822: // STATE 297 - mutant_1.pml:649 - [-end-] (0:0:0 - 1)
		IfNotBlocked
		reached[2][297] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* PROC Supervisor */
	case 823: // STATE 1 - mutant_1.pml:483 - [((commands[0]==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1] = 1;
		if (!((now.commands[0]==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 824: // STATE 2 - mutant_1.pml:458 - [states[0] = 12] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 12;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 825: // STATE 3 - mutant_1.pml:447 - [((12==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3] = 1;
		if (!((12==11)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 826: // STATE 4 - mutant_1.pml:422 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4] = 1;
		if (!(((8==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 827: // STATE 5 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 828: // STATE 7 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 829: // STATE 8 - mutant_1.pml:394 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8] = 1;
		if (!(((8==9)||(8==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 830: // STATE 9 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 831: // STATE 10 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 832: // STATE 11 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (31:0:1 - 1)
		IfNotBlocked
		reached[1][11] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(31, 12, 31) */
		reached[1][12] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(31, 13, 31) */
		reached[1][13] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(31, 29, 31) */
		reached[1][29] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 833: // STATE 29 - mutant_1.pml:246 - [.(goto)] (0:31:0 - 6)
		IfNotBlocked
		reached[1][29] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 834: // STATE 14 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (31:0:1 - 1)
		IfNotBlocked
		reached[1][14] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(31, 15, 31) */
		reached[1][15] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(31, 16, 31) */
		reached[1][16] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(31, 29, 31) */
		reached[1][29] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 835: // STATE 17 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (31:0:1 - 1)
		IfNotBlocked
		reached[1][17] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(31, 18, 31) */
		reached[1][18] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(31, 19, 31) */
		reached[1][19] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(31, 29, 31) */
		reached[1][29] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 836: // STATE 20 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (31:0:1 - 1)
		IfNotBlocked
		reached[1][20] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(31, 21, 31) */
		reached[1][21] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(31, 22, 31) */
		reached[1][22] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(31, 29, 31) */
		reached[1][29] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 837: // STATE 23 - mutant_1.pml:240 - [((START==ABORT))] (31:0:1 - 1)
		IfNotBlocked
		reached[1][23] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(31, 24, 31) */
		reached[1][24] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(31, 25, 31) */
		reached[1][25] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(31, 29, 31) */
		reached[1][29] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 838: // STATE 27 - mutant_1.pml:244 - [(1)] (31:0:0 - 1)
		IfNotBlocked
		reached[1][27] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(31, 29, 31) */
		reached[1][29] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 839: // STATE 31 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][31] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 840: // STATE 33 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][33] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 841: // STATE 36 - mutant_1.pml:252 - [(1)] (134:0:1 - 1)
		IfNotBlocked
		reached[1][36] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(134, 38, 134) */
		reached[1][38] = 1;
		;
		/* merge: .(goto)(134, 128, 134) */
		reached[1][128] = 1;
		;
		/* merge: j = (j+1)(134, 130, 134) */
		reached[1][130] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 135, 134) */
		reached[1][135] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 842: // STATE 40 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][40] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 843: // STATE 41 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (66:0:1 - 1)
		IfNotBlocked
		reached[1][41] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(66, 42, 66) */
		reached[1][42] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(66, 43, 66) */
		reached[1][43] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(66, 59, 66) */
		reached[1][59] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 844: // STATE 59 - mutant_1.pml:276 - [.(goto)] (0:66:0 - 6)
		IfNotBlocked
		reached[1][59] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 845: // STATE 44 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (66:0:1 - 1)
		IfNotBlocked
		reached[1][44] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(66, 45, 66) */
		reached[1][45] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(66, 46, 66) */
		reached[1][46] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(66, 59, 66) */
		reached[1][59] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 846: // STATE 47 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (66:0:1 - 1)
		IfNotBlocked
		reached[1][47] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(66, 48, 66) */
		reached[1][48] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(66, 49, 66) */
		reached[1][49] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(66, 59, 66) */
		reached[1][59] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 847: // STATE 50 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (66:0:1 - 1)
		IfNotBlocked
		reached[1][50] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(66, 51, 66) */
		reached[1][51] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(66, 52, 66) */
		reached[1][52] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(66, 59, 66) */
		reached[1][59] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 848: // STATE 53 - mutant_1.pml:270 - [((PAUSE==ABORT))] (66:0:1 - 1)
		IfNotBlocked
		reached[1][53] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(66, 54, 66) */
		reached[1][54] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(66, 55, 66) */
		reached[1][55] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(66, 59, 66) */
		reached[1][59] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 849: // STATE 57 - mutant_1.pml:274 - [(1)] (66:0:0 - 1)
		IfNotBlocked
		reached[1][57] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(66, 59, 66) */
		reached[1][59] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 850: // STATE 62 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][62] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 851: // STATE 65 - mutant_1.pml:281 - [(1)] (134:0:1 - 1)
		IfNotBlocked
		reached[1][65] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(134, 67, 134) */
		reached[1][67] = 1;
		;
		/* merge: .(goto)(134, 128, 134) */
		reached[1][128] = 1;
		;
		/* merge: j = (j+1)(134, 130, 134) */
		reached[1][130] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 135, 134) */
		reached[1][135] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 852: // STATE 69 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][69] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 853: // STATE 70 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (95:0:1 - 1)
		IfNotBlocked
		reached[1][70] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(95, 71, 95) */
		reached[1][71] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(95, 72, 95) */
		reached[1][72] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(95, 88, 95) */
		reached[1][88] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 854: // STATE 88 - mutant_1.pml:305 - [.(goto)] (0:95:0 - 6)
		IfNotBlocked
		reached[1][88] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 855: // STATE 73 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (95:0:1 - 1)
		IfNotBlocked
		reached[1][73] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(95, 74, 95) */
		reached[1][74] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(95, 75, 95) */
		reached[1][75] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(95, 88, 95) */
		reached[1][88] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 856: // STATE 76 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (95:0:1 - 1)
		IfNotBlocked
		reached[1][76] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(95, 77, 95) */
		reached[1][77] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(95, 78, 95) */
		reached[1][78] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(95, 88, 95) */
		reached[1][88] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 857: // STATE 79 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (95:0:1 - 1)
		IfNotBlocked
		reached[1][79] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(95, 80, 95) */
		reached[1][80] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(95, 81, 95) */
		reached[1][81] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(95, 88, 95) */
		reached[1][88] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 858: // STATE 82 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (95:0:1 - 1)
		IfNotBlocked
		reached[1][82] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(95, 83, 95) */
		reached[1][83] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(95, 84, 95) */
		reached[1][84] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(95, 88, 95) */
		reached[1][88] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 859: // STATE 86 - mutant_1.pml:303 - [(1)] (95:0:0 - 1)
		IfNotBlocked
		reached[1][86] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(95, 88, 95) */
		reached[1][88] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 860: // STATE 91 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][91] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 861: // STATE 94 - mutant_1.pml:310 - [(1)] (134:0:1 - 1)
		IfNotBlocked
		reached[1][94] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(134, 96, 134) */
		reached[1][96] = 1;
		;
		/* merge: .(goto)(134, 128, 134) */
		reached[1][128] = 1;
		;
		/* merge: j = (j+1)(134, 130, 134) */
		reached[1][130] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 135, 134) */
		reached[1][135] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 862: // STATE 98 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][98] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 863: // STATE 99 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (124:0:1 - 1)
		IfNotBlocked
		reached[1][99] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(124, 100, 124) */
		reached[1][100] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(124, 101, 124) */
		reached[1][101] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(124, 117, 124) */
		reached[1][117] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 864: // STATE 117 - mutant_1.pml:334 - [.(goto)] (0:124:0 - 6)
		IfNotBlocked
		reached[1][117] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 865: // STATE 102 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (124:0:1 - 1)
		IfNotBlocked
		reached[1][102] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(124, 103, 124) */
		reached[1][103] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(124, 104, 124) */
		reached[1][104] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(124, 117, 124) */
		reached[1][117] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 866: // STATE 105 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (124:0:1 - 1)
		IfNotBlocked
		reached[1][105] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(124, 106, 124) */
		reached[1][106] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(124, 107, 124) */
		reached[1][107] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(124, 117, 124) */
		reached[1][117] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 867: // STATE 108 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (124:0:1 - 1)
		IfNotBlocked
		reached[1][108] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(124, 109, 124) */
		reached[1][109] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(124, 110, 124) */
		reached[1][110] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(124, 117, 124) */
		reached[1][117] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 868: // STATE 111 - mutant_1.pml:328 - [((STOP==ABORT))] (124:0:1 - 1)
		IfNotBlocked
		reached[1][111] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(124, 112, 124) */
		reached[1][112] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(124, 113, 124) */
		reached[1][113] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(124, 117, 124) */
		reached[1][117] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 869: // STATE 115 - mutant_1.pml:332 - [(1)] (124:0:0 - 1)
		IfNotBlocked
		reached[1][115] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(124, 117, 124) */
		reached[1][117] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 870: // STATE 120 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][120] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 871: // STATE 123 - mutant_1.pml:339 - [(1)] (134:0:1 - 1)
		IfNotBlocked
		reached[1][123] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(134, 125, 134) */
		reached[1][125] = 1;
		;
		/* merge: .(goto)(134, 128, 134) */
		reached[1][128] = 1;
		;
		/* merge: j = (j+1)(134, 130, 134) */
		reached[1][130] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 135, 134) */
		reached[1][135] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 872: // STATE 130 - mutant_1.pml:375 - [j = (j+1)] (0:134:1 - 13)
		IfNotBlocked
		reached[1][130] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 135, 134) */
		reached[1][135] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 873: // STATE 132 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][132] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 874: // STATE 139 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][139] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 875: // STATE 140 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][140] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 876: // STATE 141 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][141] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 877: // STATE 142 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (162:0:1 - 1)
		IfNotBlocked
		reached[1][142] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(162, 143, 162) */
		reached[1][143] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(162, 144, 162) */
		reached[1][144] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(162, 160, 162) */
		reached[1][160] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 878: // STATE 160 - mutant_1.pml:246 - [.(goto)] (0:162:0 - 6)
		IfNotBlocked
		reached[1][160] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 879: // STATE 145 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (162:0:1 - 1)
		IfNotBlocked
		reached[1][145] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(162, 146, 162) */
		reached[1][146] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(162, 147, 162) */
		reached[1][147] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(162, 160, 162) */
		reached[1][160] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 880: // STATE 148 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (162:0:1 - 1)
		IfNotBlocked
		reached[1][148] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(162, 149, 162) */
		reached[1][149] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(162, 150, 162) */
		reached[1][150] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(162, 160, 162) */
		reached[1][160] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 881: // STATE 151 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (162:0:1 - 1)
		IfNotBlocked
		reached[1][151] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(162, 152, 162) */
		reached[1][152] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(162, 153, 162) */
		reached[1][153] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(162, 160, 162) */
		reached[1][160] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 882: // STATE 154 - mutant_1.pml:240 - [((START==ABORT))] (162:0:1 - 1)
		IfNotBlocked
		reached[1][154] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(162, 155, 162) */
		reached[1][155] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(162, 156, 162) */
		reached[1][156] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(162, 160, 162) */
		reached[1][160] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 883: // STATE 158 - mutant_1.pml:244 - [(1)] (162:0:0 - 1)
		IfNotBlocked
		reached[1][158] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(162, 160, 162) */
		reached[1][160] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 884: // STATE 162 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][162] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 885: // STATE 164 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][164] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 886: // STATE 167 - mutant_1.pml:252 - [(1)] (265:0:1 - 1)
		IfNotBlocked
		reached[1][167] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(265, 169, 265) */
		reached[1][169] = 1;
		;
		/* merge: .(goto)(265, 259, 265) */
		reached[1][259] = 1;
		;
		/* merge: j = (j-1)(265, 261, 265) */
		reached[1][261] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 266, 265) */
		reached[1][266] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 887: // STATE 171 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][171] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 888: // STATE 172 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (197:0:1 - 1)
		IfNotBlocked
		reached[1][172] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(197, 173, 197) */
		reached[1][173] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(197, 174, 197) */
		reached[1][174] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(197, 190, 197) */
		reached[1][190] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 889: // STATE 190 - mutant_1.pml:276 - [.(goto)] (0:197:0 - 6)
		IfNotBlocked
		reached[1][190] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 890: // STATE 175 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (197:0:1 - 1)
		IfNotBlocked
		reached[1][175] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(197, 176, 197) */
		reached[1][176] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(197, 177, 197) */
		reached[1][177] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(197, 190, 197) */
		reached[1][190] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 891: // STATE 178 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (197:0:1 - 1)
		IfNotBlocked
		reached[1][178] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(197, 179, 197) */
		reached[1][179] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(197, 180, 197) */
		reached[1][180] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(197, 190, 197) */
		reached[1][190] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 892: // STATE 181 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (197:0:1 - 1)
		IfNotBlocked
		reached[1][181] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(197, 182, 197) */
		reached[1][182] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(197, 183, 197) */
		reached[1][183] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(197, 190, 197) */
		reached[1][190] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 893: // STATE 184 - mutant_1.pml:270 - [((PAUSE==ABORT))] (197:0:1 - 1)
		IfNotBlocked
		reached[1][184] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(197, 185, 197) */
		reached[1][185] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(197, 186, 197) */
		reached[1][186] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(197, 190, 197) */
		reached[1][190] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 894: // STATE 188 - mutant_1.pml:274 - [(1)] (197:0:0 - 1)
		IfNotBlocked
		reached[1][188] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(197, 190, 197) */
		reached[1][190] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 895: // STATE 193 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][193] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 896: // STATE 196 - mutant_1.pml:281 - [(1)] (265:0:1 - 1)
		IfNotBlocked
		reached[1][196] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(265, 198, 265) */
		reached[1][198] = 1;
		;
		/* merge: .(goto)(265, 259, 265) */
		reached[1][259] = 1;
		;
		/* merge: j = (j-1)(265, 261, 265) */
		reached[1][261] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 266, 265) */
		reached[1][266] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 897: // STATE 200 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][200] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 898: // STATE 201 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (226:0:1 - 1)
		IfNotBlocked
		reached[1][201] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(226, 202, 226) */
		reached[1][202] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(226, 203, 226) */
		reached[1][203] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(226, 219, 226) */
		reached[1][219] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 899: // STATE 219 - mutant_1.pml:305 - [.(goto)] (0:226:0 - 6)
		IfNotBlocked
		reached[1][219] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 900: // STATE 204 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (226:0:1 - 1)
		IfNotBlocked
		reached[1][204] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(226, 205, 226) */
		reached[1][205] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(226, 206, 226) */
		reached[1][206] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(226, 219, 226) */
		reached[1][219] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 901: // STATE 207 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (226:0:1 - 1)
		IfNotBlocked
		reached[1][207] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(226, 208, 226) */
		reached[1][208] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(226, 209, 226) */
		reached[1][209] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(226, 219, 226) */
		reached[1][219] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 902: // STATE 210 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (226:0:1 - 1)
		IfNotBlocked
		reached[1][210] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(226, 211, 226) */
		reached[1][211] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(226, 212, 226) */
		reached[1][212] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(226, 219, 226) */
		reached[1][219] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 903: // STATE 213 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (226:0:1 - 1)
		IfNotBlocked
		reached[1][213] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(226, 214, 226) */
		reached[1][214] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(226, 215, 226) */
		reached[1][215] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(226, 219, 226) */
		reached[1][219] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 904: // STATE 217 - mutant_1.pml:303 - [(1)] (226:0:0 - 1)
		IfNotBlocked
		reached[1][217] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(226, 219, 226) */
		reached[1][219] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 905: // STATE 222 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][222] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 906: // STATE 225 - mutant_1.pml:310 - [(1)] (265:0:1 - 1)
		IfNotBlocked
		reached[1][225] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(265, 227, 265) */
		reached[1][227] = 1;
		;
		/* merge: .(goto)(265, 259, 265) */
		reached[1][259] = 1;
		;
		/* merge: j = (j-1)(265, 261, 265) */
		reached[1][261] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 266, 265) */
		reached[1][266] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 907: // STATE 229 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][229] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 908: // STATE 230 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (255:0:1 - 1)
		IfNotBlocked
		reached[1][230] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(255, 231, 255) */
		reached[1][231] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(255, 232, 255) */
		reached[1][232] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(255, 248, 255) */
		reached[1][248] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 909: // STATE 248 - mutant_1.pml:334 - [.(goto)] (0:255:0 - 6)
		IfNotBlocked
		reached[1][248] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 910: // STATE 233 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (255:0:1 - 1)
		IfNotBlocked
		reached[1][233] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(255, 234, 255) */
		reached[1][234] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(255, 235, 255) */
		reached[1][235] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(255, 248, 255) */
		reached[1][248] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 911: // STATE 236 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (255:0:1 - 1)
		IfNotBlocked
		reached[1][236] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(255, 237, 255) */
		reached[1][237] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(255, 238, 255) */
		reached[1][238] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(255, 248, 255) */
		reached[1][248] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 912: // STATE 239 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (255:0:1 - 1)
		IfNotBlocked
		reached[1][239] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(255, 240, 255) */
		reached[1][240] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(255, 241, 255) */
		reached[1][241] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(255, 248, 255) */
		reached[1][248] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 913: // STATE 242 - mutant_1.pml:328 - [((STOP==ABORT))] (255:0:1 - 1)
		IfNotBlocked
		reached[1][242] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(255, 243, 255) */
		reached[1][243] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(255, 244, 255) */
		reached[1][244] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(255, 248, 255) */
		reached[1][248] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 914: // STATE 246 - mutant_1.pml:332 - [(1)] (255:0:0 - 1)
		IfNotBlocked
		reached[1][246] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(255, 248, 255) */
		reached[1][248] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 915: // STATE 251 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][251] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 916: // STATE 254 - mutant_1.pml:339 - [(1)] (265:0:1 - 1)
		IfNotBlocked
		reached[1][254] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(265, 256, 265) */
		reached[1][256] = 1;
		;
		/* merge: .(goto)(265, 259, 265) */
		reached[1][259] = 1;
		;
		/* merge: j = (j-1)(265, 261, 265) */
		reached[1][261] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 266, 265) */
		reached[1][266] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 917: // STATE 261 - mutant_1.pml:386 - [j = (j-1)] (0:265:1 - 13)
		IfNotBlocked
		reached[1][261] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 266, 265) */
		reached[1][266] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 918: // STATE 263 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][263] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 919: // STATE 273 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][273] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 920: // STATE 274 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][274] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 921: // STATE 275 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (295:0:1 - 1)
		IfNotBlocked
		reached[1][275] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(295, 276, 295) */
		reached[1][276] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(295, 277, 295) */
		reached[1][277] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(295, 293, 295) */
		reached[1][293] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 922: // STATE 293 - mutant_1.pml:246 - [.(goto)] (0:295:0 - 6)
		IfNotBlocked
		reached[1][293] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 923: // STATE 278 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (295:0:1 - 1)
		IfNotBlocked
		reached[1][278] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(295, 279, 295) */
		reached[1][279] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(295, 280, 295) */
		reached[1][280] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(295, 293, 295) */
		reached[1][293] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 924: // STATE 281 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (295:0:1 - 1)
		IfNotBlocked
		reached[1][281] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(295, 282, 295) */
		reached[1][282] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(295, 283, 295) */
		reached[1][283] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(295, 293, 295) */
		reached[1][293] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 925: // STATE 284 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (295:0:1 - 1)
		IfNotBlocked
		reached[1][284] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(295, 285, 295) */
		reached[1][285] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(295, 286, 295) */
		reached[1][286] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(295, 293, 295) */
		reached[1][293] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 926: // STATE 287 - mutant_1.pml:240 - [((START==ABORT))] (295:0:1 - 1)
		IfNotBlocked
		reached[1][287] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(295, 288, 295) */
		reached[1][288] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(295, 289, 295) */
		reached[1][289] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(295, 293, 295) */
		reached[1][293] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 927: // STATE 291 - mutant_1.pml:244 - [(1)] (295:0:0 - 1)
		IfNotBlocked
		reached[1][291] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(295, 293, 295) */
		reached[1][293] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 928: // STATE 295 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][295] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 929: // STATE 297 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][297] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 930: // STATE 300 - mutant_1.pml:252 - [(1)] (398:0:1 - 1)
		IfNotBlocked
		reached[1][300] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(398, 302, 398) */
		reached[1][302] = 1;
		;
		/* merge: .(goto)(398, 392, 398) */
		reached[1][392] = 1;
		;
		/* merge: j = (j+1)(398, 394, 398) */
		reached[1][394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 399, 398) */
		reached[1][399] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 931: // STATE 304 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][304] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 932: // STATE 305 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (330:0:1 - 1)
		IfNotBlocked
		reached[1][305] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(330, 306, 330) */
		reached[1][306] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(330, 307, 330) */
		reached[1][307] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(330, 323, 330) */
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 933: // STATE 323 - mutant_1.pml:276 - [.(goto)] (0:330:0 - 6)
		IfNotBlocked
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 934: // STATE 308 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (330:0:1 - 1)
		IfNotBlocked
		reached[1][308] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(330, 309, 330) */
		reached[1][309] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(330, 310, 330) */
		reached[1][310] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(330, 323, 330) */
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 935: // STATE 311 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (330:0:1 - 1)
		IfNotBlocked
		reached[1][311] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(330, 312, 330) */
		reached[1][312] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(330, 313, 330) */
		reached[1][313] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(330, 323, 330) */
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 936: // STATE 314 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (330:0:1 - 1)
		IfNotBlocked
		reached[1][314] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(330, 315, 330) */
		reached[1][315] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(330, 316, 330) */
		reached[1][316] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(330, 323, 330) */
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 937: // STATE 317 - mutant_1.pml:270 - [((PAUSE==ABORT))] (330:0:1 - 1)
		IfNotBlocked
		reached[1][317] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(330, 318, 330) */
		reached[1][318] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(330, 319, 330) */
		reached[1][319] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(330, 323, 330) */
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 938: // STATE 321 - mutant_1.pml:274 - [(1)] (330:0:0 - 1)
		IfNotBlocked
		reached[1][321] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(330, 323, 330) */
		reached[1][323] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 939: // STATE 326 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][326] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 940: // STATE 329 - mutant_1.pml:281 - [(1)] (398:0:1 - 1)
		IfNotBlocked
		reached[1][329] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(398, 331, 398) */
		reached[1][331] = 1;
		;
		/* merge: .(goto)(398, 392, 398) */
		reached[1][392] = 1;
		;
		/* merge: j = (j+1)(398, 394, 398) */
		reached[1][394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 399, 398) */
		reached[1][399] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 941: // STATE 333 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][333] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 942: // STATE 334 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (359:0:1 - 1)
		IfNotBlocked
		reached[1][334] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(359, 335, 359) */
		reached[1][335] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(359, 336, 359) */
		reached[1][336] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(359, 352, 359) */
		reached[1][352] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 943: // STATE 352 - mutant_1.pml:305 - [.(goto)] (0:359:0 - 6)
		IfNotBlocked
		reached[1][352] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 944: // STATE 337 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (359:0:1 - 1)
		IfNotBlocked
		reached[1][337] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(359, 338, 359) */
		reached[1][338] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(359, 339, 359) */
		reached[1][339] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(359, 352, 359) */
		reached[1][352] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 945: // STATE 340 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (359:0:1 - 1)
		IfNotBlocked
		reached[1][340] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(359, 341, 359) */
		reached[1][341] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(359, 342, 359) */
		reached[1][342] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(359, 352, 359) */
		reached[1][352] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 946: // STATE 343 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (359:0:1 - 1)
		IfNotBlocked
		reached[1][343] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(359, 344, 359) */
		reached[1][344] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(359, 345, 359) */
		reached[1][345] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(359, 352, 359) */
		reached[1][352] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 947: // STATE 346 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (359:0:1 - 1)
		IfNotBlocked
		reached[1][346] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(359, 347, 359) */
		reached[1][347] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(359, 348, 359) */
		reached[1][348] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(359, 352, 359) */
		reached[1][352] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 948: // STATE 350 - mutant_1.pml:303 - [(1)] (359:0:0 - 1)
		IfNotBlocked
		reached[1][350] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(359, 352, 359) */
		reached[1][352] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 949: // STATE 355 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][355] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 950: // STATE 358 - mutant_1.pml:310 - [(1)] (398:0:1 - 1)
		IfNotBlocked
		reached[1][358] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(398, 360, 398) */
		reached[1][360] = 1;
		;
		/* merge: .(goto)(398, 392, 398) */
		reached[1][392] = 1;
		;
		/* merge: j = (j+1)(398, 394, 398) */
		reached[1][394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 399, 398) */
		reached[1][399] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 951: // STATE 362 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][362] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 952: // STATE 363 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (388:0:1 - 1)
		IfNotBlocked
		reached[1][363] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(388, 364, 388) */
		reached[1][364] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(388, 365, 388) */
		reached[1][365] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(388, 381, 388) */
		reached[1][381] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 953: // STATE 381 - mutant_1.pml:334 - [.(goto)] (0:388:0 - 6)
		IfNotBlocked
		reached[1][381] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 954: // STATE 366 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (388:0:1 - 1)
		IfNotBlocked
		reached[1][366] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(388, 367, 388) */
		reached[1][367] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(388, 368, 388) */
		reached[1][368] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(388, 381, 388) */
		reached[1][381] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 955: // STATE 369 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (388:0:1 - 1)
		IfNotBlocked
		reached[1][369] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(388, 370, 388) */
		reached[1][370] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(388, 371, 388) */
		reached[1][371] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(388, 381, 388) */
		reached[1][381] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 956: // STATE 372 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (388:0:1 - 1)
		IfNotBlocked
		reached[1][372] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(388, 373, 388) */
		reached[1][373] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(388, 374, 388) */
		reached[1][374] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(388, 381, 388) */
		reached[1][381] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 957: // STATE 375 - mutant_1.pml:328 - [((STOP==ABORT))] (388:0:1 - 1)
		IfNotBlocked
		reached[1][375] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(388, 376, 388) */
		reached[1][376] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(388, 377, 388) */
		reached[1][377] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(388, 381, 388) */
		reached[1][381] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 958: // STATE 379 - mutant_1.pml:332 - [(1)] (388:0:0 - 1)
		IfNotBlocked
		reached[1][379] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(388, 381, 388) */
		reached[1][381] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 959: // STATE 384 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][384] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 960: // STATE 387 - mutant_1.pml:339 - [(1)] (398:0:1 - 1)
		IfNotBlocked
		reached[1][387] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(398, 389, 398) */
		reached[1][389] = 1;
		;
		/* merge: .(goto)(398, 392, 398) */
		reached[1][392] = 1;
		;
		/* merge: j = (j+1)(398, 394, 398) */
		reached[1][394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 399, 398) */
		reached[1][399] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 961: // STATE 394 - mutant_1.pml:375 - [j = (j+1)] (0:398:1 - 13)
		IfNotBlocked
		reached[1][394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 399, 398) */
		reached[1][399] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 962: // STATE 396 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][396] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 963: // STATE 402 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][402] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 964: // STATE 403 - mutant_1.pml:405 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][403] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 965: // STATE 404 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][404] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 966: // STATE 406 - mutant_1.pml:407 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][406] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 967: // STATE 407 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][407] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 968: // STATE 409 - mutant_1.pml:409 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][409] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 969: // STATE 410 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][410] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 970: // STATE 412 - mutant_1.pml:411 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][412] = 1;
		if (!((8==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 971: // STATE 413 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][413] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 972: // STATE 417 - mutant_1.pml:414 - [j = (j+1)] (0:421:1 - 5)
		IfNotBlocked
		reached[1][417] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 422, 421) */
		reached[1][422] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 973: // STATE 419 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][419] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 974: // STATE 430 - mutant_1.pml:449 - [((12==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][430] = 1;
		if (!((12==10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 975: // STATE 431 - mutant_1.pml:422 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][431] = 1;
		if (!(((6==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 976: // STATE 432 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][432] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 977: // STATE 434 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][434] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 978: // STATE 435 - mutant_1.pml:394 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][435] = 1;
		if (!(((6==9)||(6==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 979: // STATE 436 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][436] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 980: // STATE 437 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][437] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 981: // STATE 438 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (458:0:1 - 1)
		IfNotBlocked
		reached[1][438] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(458, 439, 458) */
		reached[1][439] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(458, 440, 458) */
		reached[1][440] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(458, 456, 458) */
		reached[1][456] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 982: // STATE 456 - mutant_1.pml:246 - [.(goto)] (0:458:0 - 6)
		IfNotBlocked
		reached[1][456] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 983: // STATE 441 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (458:0:1 - 1)
		IfNotBlocked
		reached[1][441] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(458, 442, 458) */
		reached[1][442] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(458, 443, 458) */
		reached[1][443] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(458, 456, 458) */
		reached[1][456] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 984: // STATE 444 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (458:0:1 - 1)
		IfNotBlocked
		reached[1][444] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(458, 445, 458) */
		reached[1][445] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(458, 446, 458) */
		reached[1][446] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(458, 456, 458) */
		reached[1][456] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 985: // STATE 447 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (458:0:1 - 1)
		IfNotBlocked
		reached[1][447] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(458, 448, 458) */
		reached[1][448] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(458, 449, 458) */
		reached[1][449] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(458, 456, 458) */
		reached[1][456] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 986: // STATE 450 - mutant_1.pml:240 - [((START==ABORT))] (458:0:1 - 1)
		IfNotBlocked
		reached[1][450] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(458, 451, 458) */
		reached[1][451] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(458, 452, 458) */
		reached[1][452] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(458, 456, 458) */
		reached[1][456] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 987: // STATE 454 - mutant_1.pml:244 - [(1)] (458:0:0 - 1)
		IfNotBlocked
		reached[1][454] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(458, 456, 458) */
		reached[1][456] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 988: // STATE 458 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][458] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 989: // STATE 460 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][460] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 990: // STATE 463 - mutant_1.pml:252 - [(1)] (561:0:1 - 1)
		IfNotBlocked
		reached[1][463] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(561, 465, 561) */
		reached[1][465] = 1;
		;
		/* merge: .(goto)(561, 555, 561) */
		reached[1][555] = 1;
		;
		/* merge: j = (j+1)(561, 557, 561) */
		reached[1][557] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 562, 561) */
		reached[1][562] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 991: // STATE 467 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][467] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 992: // STATE 468 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (493:0:1 - 1)
		IfNotBlocked
		reached[1][468] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(493, 469, 493) */
		reached[1][469] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(493, 470, 493) */
		reached[1][470] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(493, 486, 493) */
		reached[1][486] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 993: // STATE 486 - mutant_1.pml:276 - [.(goto)] (0:493:0 - 6)
		IfNotBlocked
		reached[1][486] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 994: // STATE 471 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (493:0:1 - 1)
		IfNotBlocked
		reached[1][471] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(493, 472, 493) */
		reached[1][472] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(493, 473, 493) */
		reached[1][473] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(493, 486, 493) */
		reached[1][486] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 995: // STATE 474 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (493:0:1 - 1)
		IfNotBlocked
		reached[1][474] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(493, 475, 493) */
		reached[1][475] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(493, 476, 493) */
		reached[1][476] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(493, 486, 493) */
		reached[1][486] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 996: // STATE 477 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (493:0:1 - 1)
		IfNotBlocked
		reached[1][477] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(493, 478, 493) */
		reached[1][478] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(493, 479, 493) */
		reached[1][479] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(493, 486, 493) */
		reached[1][486] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 997: // STATE 480 - mutant_1.pml:270 - [((PAUSE==ABORT))] (493:0:1 - 1)
		IfNotBlocked
		reached[1][480] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(493, 481, 493) */
		reached[1][481] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(493, 482, 493) */
		reached[1][482] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(493, 486, 493) */
		reached[1][486] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 998: // STATE 484 - mutant_1.pml:274 - [(1)] (493:0:0 - 1)
		IfNotBlocked
		reached[1][484] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(493, 486, 493) */
		reached[1][486] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 999: // STATE 489 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][489] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1000: // STATE 492 - mutant_1.pml:281 - [(1)] (561:0:1 - 1)
		IfNotBlocked
		reached[1][492] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(561, 494, 561) */
		reached[1][494] = 1;
		;
		/* merge: .(goto)(561, 555, 561) */
		reached[1][555] = 1;
		;
		/* merge: j = (j+1)(561, 557, 561) */
		reached[1][557] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 562, 561) */
		reached[1][562] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1001: // STATE 496 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][496] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1002: // STATE 497 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (522:0:1 - 1)
		IfNotBlocked
		reached[1][497] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(522, 498, 522) */
		reached[1][498] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(522, 499, 522) */
		reached[1][499] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(522, 515, 522) */
		reached[1][515] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1003: // STATE 515 - mutant_1.pml:305 - [.(goto)] (0:522:0 - 6)
		IfNotBlocked
		reached[1][515] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1004: // STATE 500 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (522:0:1 - 1)
		IfNotBlocked
		reached[1][500] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(522, 501, 522) */
		reached[1][501] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(522, 502, 522) */
		reached[1][502] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(522, 515, 522) */
		reached[1][515] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1005: // STATE 503 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (522:0:1 - 1)
		IfNotBlocked
		reached[1][503] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(522, 504, 522) */
		reached[1][504] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(522, 505, 522) */
		reached[1][505] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(522, 515, 522) */
		reached[1][515] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1006: // STATE 506 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (522:0:1 - 1)
		IfNotBlocked
		reached[1][506] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(522, 507, 522) */
		reached[1][507] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(522, 508, 522) */
		reached[1][508] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(522, 515, 522) */
		reached[1][515] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1007: // STATE 509 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (522:0:1 - 1)
		IfNotBlocked
		reached[1][509] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(522, 510, 522) */
		reached[1][510] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(522, 511, 522) */
		reached[1][511] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(522, 515, 522) */
		reached[1][515] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1008: // STATE 513 - mutant_1.pml:303 - [(1)] (522:0:0 - 1)
		IfNotBlocked
		reached[1][513] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(522, 515, 522) */
		reached[1][515] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1009: // STATE 518 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][518] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1010: // STATE 521 - mutant_1.pml:310 - [(1)] (561:0:1 - 1)
		IfNotBlocked
		reached[1][521] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(561, 523, 561) */
		reached[1][523] = 1;
		;
		/* merge: .(goto)(561, 555, 561) */
		reached[1][555] = 1;
		;
		/* merge: j = (j+1)(561, 557, 561) */
		reached[1][557] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 562, 561) */
		reached[1][562] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1011: // STATE 525 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][525] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1012: // STATE 526 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (551:0:1 - 1)
		IfNotBlocked
		reached[1][526] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(551, 527, 551) */
		reached[1][527] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(551, 528, 551) */
		reached[1][528] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(551, 544, 551) */
		reached[1][544] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1013: // STATE 544 - mutant_1.pml:334 - [.(goto)] (0:551:0 - 6)
		IfNotBlocked
		reached[1][544] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1014: // STATE 529 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (551:0:1 - 1)
		IfNotBlocked
		reached[1][529] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(551, 530, 551) */
		reached[1][530] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(551, 531, 551) */
		reached[1][531] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(551, 544, 551) */
		reached[1][544] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1015: // STATE 532 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (551:0:1 - 1)
		IfNotBlocked
		reached[1][532] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(551, 533, 551) */
		reached[1][533] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(551, 534, 551) */
		reached[1][534] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(551, 544, 551) */
		reached[1][544] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1016: // STATE 535 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (551:0:1 - 1)
		IfNotBlocked
		reached[1][535] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(551, 536, 551) */
		reached[1][536] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(551, 537, 551) */
		reached[1][537] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(551, 544, 551) */
		reached[1][544] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1017: // STATE 538 - mutant_1.pml:328 - [((STOP==ABORT))] (551:0:1 - 1)
		IfNotBlocked
		reached[1][538] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(551, 539, 551) */
		reached[1][539] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(551, 540, 551) */
		reached[1][540] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(551, 544, 551) */
		reached[1][544] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1018: // STATE 542 - mutant_1.pml:332 - [(1)] (551:0:0 - 1)
		IfNotBlocked
		reached[1][542] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(551, 544, 551) */
		reached[1][544] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1019: // STATE 547 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][547] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1020: // STATE 550 - mutant_1.pml:339 - [(1)] (561:0:1 - 1)
		IfNotBlocked
		reached[1][550] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(561, 552, 561) */
		reached[1][552] = 1;
		;
		/* merge: .(goto)(561, 555, 561) */
		reached[1][555] = 1;
		;
		/* merge: j = (j+1)(561, 557, 561) */
		reached[1][557] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 562, 561) */
		reached[1][562] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1021: // STATE 557 - mutant_1.pml:375 - [j = (j+1)] (0:561:1 - 13)
		IfNotBlocked
		reached[1][557] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 562, 561) */
		reached[1][562] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1022: // STATE 559 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][559] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1023: // STATE 566 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][566] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1024: // STATE 567 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][567] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1025: // STATE 568 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][568] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1026: // STATE 569 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (589:0:1 - 1)
		IfNotBlocked
		reached[1][569] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(589, 570, 589) */
		reached[1][570] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(589, 571, 589) */
		reached[1][571] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(589, 587, 589) */
		reached[1][587] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1027: // STATE 587 - mutant_1.pml:246 - [.(goto)] (0:589:0 - 6)
		IfNotBlocked
		reached[1][587] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1028: // STATE 572 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (589:0:1 - 1)
		IfNotBlocked
		reached[1][572] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(589, 573, 589) */
		reached[1][573] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(589, 574, 589) */
		reached[1][574] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(589, 587, 589) */
		reached[1][587] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1029: // STATE 575 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (589:0:1 - 1)
		IfNotBlocked
		reached[1][575] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(589, 576, 589) */
		reached[1][576] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(589, 577, 589) */
		reached[1][577] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(589, 587, 589) */
		reached[1][587] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1030: // STATE 578 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (589:0:1 - 1)
		IfNotBlocked
		reached[1][578] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(589, 579, 589) */
		reached[1][579] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(589, 580, 589) */
		reached[1][580] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(589, 587, 589) */
		reached[1][587] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1031: // STATE 581 - mutant_1.pml:240 - [((START==ABORT))] (589:0:1 - 1)
		IfNotBlocked
		reached[1][581] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(589, 582, 589) */
		reached[1][582] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(589, 583, 589) */
		reached[1][583] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(589, 587, 589) */
		reached[1][587] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1032: // STATE 585 - mutant_1.pml:244 - [(1)] (589:0:0 - 1)
		IfNotBlocked
		reached[1][585] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(589, 587, 589) */
		reached[1][587] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1033: // STATE 589 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][589] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1034: // STATE 591 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][591] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1035: // STATE 594 - mutant_1.pml:252 - [(1)] (692:0:1 - 1)
		IfNotBlocked
		reached[1][594] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(692, 596, 692) */
		reached[1][596] = 1;
		;
		/* merge: .(goto)(692, 686, 692) */
		reached[1][686] = 1;
		;
		/* merge: j = (j-1)(692, 688, 692) */
		reached[1][688] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 693, 692) */
		reached[1][693] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1036: // STATE 598 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][598] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1037: // STATE 599 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (624:0:1 - 1)
		IfNotBlocked
		reached[1][599] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(624, 600, 624) */
		reached[1][600] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(624, 601, 624) */
		reached[1][601] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(624, 617, 624) */
		reached[1][617] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1038: // STATE 617 - mutant_1.pml:276 - [.(goto)] (0:624:0 - 6)
		IfNotBlocked
		reached[1][617] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1039: // STATE 602 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (624:0:1 - 1)
		IfNotBlocked
		reached[1][602] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(624, 603, 624) */
		reached[1][603] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(624, 604, 624) */
		reached[1][604] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(624, 617, 624) */
		reached[1][617] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1040: // STATE 605 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (624:0:1 - 1)
		IfNotBlocked
		reached[1][605] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(624, 606, 624) */
		reached[1][606] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(624, 607, 624) */
		reached[1][607] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(624, 617, 624) */
		reached[1][617] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1041: // STATE 608 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (624:0:1 - 1)
		IfNotBlocked
		reached[1][608] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(624, 609, 624) */
		reached[1][609] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(624, 610, 624) */
		reached[1][610] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(624, 617, 624) */
		reached[1][617] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1042: // STATE 611 - mutant_1.pml:270 - [((PAUSE==ABORT))] (624:0:1 - 1)
		IfNotBlocked
		reached[1][611] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(624, 612, 624) */
		reached[1][612] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(624, 613, 624) */
		reached[1][613] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(624, 617, 624) */
		reached[1][617] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1043: // STATE 615 - mutant_1.pml:274 - [(1)] (624:0:0 - 1)
		IfNotBlocked
		reached[1][615] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(624, 617, 624) */
		reached[1][617] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1044: // STATE 620 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][620] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1045: // STATE 623 - mutant_1.pml:281 - [(1)] (692:0:1 - 1)
		IfNotBlocked
		reached[1][623] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(692, 625, 692) */
		reached[1][625] = 1;
		;
		/* merge: .(goto)(692, 686, 692) */
		reached[1][686] = 1;
		;
		/* merge: j = (j-1)(692, 688, 692) */
		reached[1][688] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 693, 692) */
		reached[1][693] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1046: // STATE 627 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][627] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1047: // STATE 628 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (653:0:1 - 1)
		IfNotBlocked
		reached[1][628] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(653, 629, 653) */
		reached[1][629] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(653, 630, 653) */
		reached[1][630] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(653, 646, 653) */
		reached[1][646] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1048: // STATE 646 - mutant_1.pml:305 - [.(goto)] (0:653:0 - 6)
		IfNotBlocked
		reached[1][646] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1049: // STATE 631 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (653:0:1 - 1)
		IfNotBlocked
		reached[1][631] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(653, 632, 653) */
		reached[1][632] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(653, 633, 653) */
		reached[1][633] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(653, 646, 653) */
		reached[1][646] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1050: // STATE 634 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (653:0:1 - 1)
		IfNotBlocked
		reached[1][634] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(653, 635, 653) */
		reached[1][635] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(653, 636, 653) */
		reached[1][636] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(653, 646, 653) */
		reached[1][646] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1051: // STATE 637 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (653:0:1 - 1)
		IfNotBlocked
		reached[1][637] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(653, 638, 653) */
		reached[1][638] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(653, 639, 653) */
		reached[1][639] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(653, 646, 653) */
		reached[1][646] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1052: // STATE 640 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (653:0:1 - 1)
		IfNotBlocked
		reached[1][640] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(653, 641, 653) */
		reached[1][641] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(653, 642, 653) */
		reached[1][642] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(653, 646, 653) */
		reached[1][646] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1053: // STATE 644 - mutant_1.pml:303 - [(1)] (653:0:0 - 1)
		IfNotBlocked
		reached[1][644] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(653, 646, 653) */
		reached[1][646] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1054: // STATE 649 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][649] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1055: // STATE 652 - mutant_1.pml:310 - [(1)] (692:0:1 - 1)
		IfNotBlocked
		reached[1][652] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(692, 654, 692) */
		reached[1][654] = 1;
		;
		/* merge: .(goto)(692, 686, 692) */
		reached[1][686] = 1;
		;
		/* merge: j = (j-1)(692, 688, 692) */
		reached[1][688] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 693, 692) */
		reached[1][693] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1056: // STATE 656 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][656] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1057: // STATE 657 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (682:0:1 - 1)
		IfNotBlocked
		reached[1][657] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(682, 658, 682) */
		reached[1][658] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(682, 659, 682) */
		reached[1][659] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(682, 675, 682) */
		reached[1][675] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1058: // STATE 675 - mutant_1.pml:334 - [.(goto)] (0:682:0 - 6)
		IfNotBlocked
		reached[1][675] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1059: // STATE 660 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (682:0:1 - 1)
		IfNotBlocked
		reached[1][660] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(682, 661, 682) */
		reached[1][661] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(682, 662, 682) */
		reached[1][662] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(682, 675, 682) */
		reached[1][675] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1060: // STATE 663 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (682:0:1 - 1)
		IfNotBlocked
		reached[1][663] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(682, 664, 682) */
		reached[1][664] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(682, 665, 682) */
		reached[1][665] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(682, 675, 682) */
		reached[1][675] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1061: // STATE 666 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (682:0:1 - 1)
		IfNotBlocked
		reached[1][666] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(682, 667, 682) */
		reached[1][667] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(682, 668, 682) */
		reached[1][668] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(682, 675, 682) */
		reached[1][675] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1062: // STATE 669 - mutant_1.pml:328 - [((STOP==ABORT))] (682:0:1 - 1)
		IfNotBlocked
		reached[1][669] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(682, 670, 682) */
		reached[1][670] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(682, 671, 682) */
		reached[1][671] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(682, 675, 682) */
		reached[1][675] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1063: // STATE 673 - mutant_1.pml:332 - [(1)] (682:0:0 - 1)
		IfNotBlocked
		reached[1][673] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(682, 675, 682) */
		reached[1][675] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1064: // STATE 678 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][678] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1065: // STATE 681 - mutant_1.pml:339 - [(1)] (692:0:1 - 1)
		IfNotBlocked
		reached[1][681] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(692, 683, 692) */
		reached[1][683] = 1;
		;
		/* merge: .(goto)(692, 686, 692) */
		reached[1][686] = 1;
		;
		/* merge: j = (j-1)(692, 688, 692) */
		reached[1][688] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 693, 692) */
		reached[1][693] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1066: // STATE 688 - mutant_1.pml:386 - [j = (j-1)] (0:692:1 - 13)
		IfNotBlocked
		reached[1][688] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 693, 692) */
		reached[1][693] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1067: // STATE 690 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][690] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1068: // STATE 700 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][700] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1069: // STATE 701 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][701] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1070: // STATE 702 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (722:0:1 - 1)
		IfNotBlocked
		reached[1][702] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(722, 703, 722) */
		reached[1][703] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(722, 704, 722) */
		reached[1][704] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(722, 720, 722) */
		reached[1][720] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1071: // STATE 720 - mutant_1.pml:246 - [.(goto)] (0:722:0 - 6)
		IfNotBlocked
		reached[1][720] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1072: // STATE 705 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (722:0:1 - 1)
		IfNotBlocked
		reached[1][705] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(722, 706, 722) */
		reached[1][706] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(722, 707, 722) */
		reached[1][707] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(722, 720, 722) */
		reached[1][720] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1073: // STATE 708 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (722:0:1 - 1)
		IfNotBlocked
		reached[1][708] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(722, 709, 722) */
		reached[1][709] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(722, 710, 722) */
		reached[1][710] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(722, 720, 722) */
		reached[1][720] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1074: // STATE 711 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (722:0:1 - 1)
		IfNotBlocked
		reached[1][711] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(722, 712, 722) */
		reached[1][712] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(722, 713, 722) */
		reached[1][713] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(722, 720, 722) */
		reached[1][720] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1075: // STATE 714 - mutant_1.pml:240 - [((START==ABORT))] (722:0:1 - 1)
		IfNotBlocked
		reached[1][714] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(722, 715, 722) */
		reached[1][715] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(722, 716, 722) */
		reached[1][716] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(722, 720, 722) */
		reached[1][720] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1076: // STATE 718 - mutant_1.pml:244 - [(1)] (722:0:0 - 1)
		IfNotBlocked
		reached[1][718] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(722, 720, 722) */
		reached[1][720] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1077: // STATE 722 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][722] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1078: // STATE 724 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][724] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1079: // STATE 727 - mutant_1.pml:252 - [(1)] (825:0:1 - 1)
		IfNotBlocked
		reached[1][727] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(825, 729, 825) */
		reached[1][729] = 1;
		;
		/* merge: .(goto)(825, 819, 825) */
		reached[1][819] = 1;
		;
		/* merge: j = (j+1)(825, 821, 825) */
		reached[1][821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 826, 825) */
		reached[1][826] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1080: // STATE 731 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][731] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1081: // STATE 732 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (757:0:1 - 1)
		IfNotBlocked
		reached[1][732] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(757, 733, 757) */
		reached[1][733] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(757, 734, 757) */
		reached[1][734] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(757, 750, 757) */
		reached[1][750] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1082: // STATE 750 - mutant_1.pml:276 - [.(goto)] (0:757:0 - 6)
		IfNotBlocked
		reached[1][750] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1083: // STATE 735 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (757:0:1 - 1)
		IfNotBlocked
		reached[1][735] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(757, 736, 757) */
		reached[1][736] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(757, 737, 757) */
		reached[1][737] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(757, 750, 757) */
		reached[1][750] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1084: // STATE 738 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (757:0:1 - 1)
		IfNotBlocked
		reached[1][738] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(757, 739, 757) */
		reached[1][739] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(757, 740, 757) */
		reached[1][740] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(757, 750, 757) */
		reached[1][750] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1085: // STATE 741 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (757:0:1 - 1)
		IfNotBlocked
		reached[1][741] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(757, 742, 757) */
		reached[1][742] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(757, 743, 757) */
		reached[1][743] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(757, 750, 757) */
		reached[1][750] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1086: // STATE 744 - mutant_1.pml:270 - [((PAUSE==ABORT))] (757:0:1 - 1)
		IfNotBlocked
		reached[1][744] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(757, 745, 757) */
		reached[1][745] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(757, 746, 757) */
		reached[1][746] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(757, 750, 757) */
		reached[1][750] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1087: // STATE 748 - mutant_1.pml:274 - [(1)] (757:0:0 - 1)
		IfNotBlocked
		reached[1][748] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(757, 750, 757) */
		reached[1][750] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1088: // STATE 753 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][753] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1089: // STATE 756 - mutant_1.pml:281 - [(1)] (825:0:1 - 1)
		IfNotBlocked
		reached[1][756] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(825, 758, 825) */
		reached[1][758] = 1;
		;
		/* merge: .(goto)(825, 819, 825) */
		reached[1][819] = 1;
		;
		/* merge: j = (j+1)(825, 821, 825) */
		reached[1][821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 826, 825) */
		reached[1][826] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1090: // STATE 760 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][760] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1091: // STATE 761 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (786:0:1 - 1)
		IfNotBlocked
		reached[1][761] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(786, 762, 786) */
		reached[1][762] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(786, 763, 786) */
		reached[1][763] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(786, 779, 786) */
		reached[1][779] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1092: // STATE 779 - mutant_1.pml:305 - [.(goto)] (0:786:0 - 6)
		IfNotBlocked
		reached[1][779] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1093: // STATE 764 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (786:0:1 - 1)
		IfNotBlocked
		reached[1][764] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(786, 765, 786) */
		reached[1][765] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(786, 766, 786) */
		reached[1][766] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(786, 779, 786) */
		reached[1][779] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1094: // STATE 767 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (786:0:1 - 1)
		IfNotBlocked
		reached[1][767] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(786, 768, 786) */
		reached[1][768] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(786, 769, 786) */
		reached[1][769] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(786, 779, 786) */
		reached[1][779] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1095: // STATE 770 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (786:0:1 - 1)
		IfNotBlocked
		reached[1][770] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(786, 771, 786) */
		reached[1][771] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(786, 772, 786) */
		reached[1][772] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(786, 779, 786) */
		reached[1][779] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1096: // STATE 773 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (786:0:1 - 1)
		IfNotBlocked
		reached[1][773] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(786, 774, 786) */
		reached[1][774] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(786, 775, 786) */
		reached[1][775] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(786, 779, 786) */
		reached[1][779] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1097: // STATE 777 - mutant_1.pml:303 - [(1)] (786:0:0 - 1)
		IfNotBlocked
		reached[1][777] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(786, 779, 786) */
		reached[1][779] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1098: // STATE 782 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][782] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1099: // STATE 785 - mutant_1.pml:310 - [(1)] (825:0:1 - 1)
		IfNotBlocked
		reached[1][785] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(825, 787, 825) */
		reached[1][787] = 1;
		;
		/* merge: .(goto)(825, 819, 825) */
		reached[1][819] = 1;
		;
		/* merge: j = (j+1)(825, 821, 825) */
		reached[1][821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 826, 825) */
		reached[1][826] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1100: // STATE 789 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][789] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1101: // STATE 790 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (815:0:1 - 1)
		IfNotBlocked
		reached[1][790] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(815, 791, 815) */
		reached[1][791] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(815, 792, 815) */
		reached[1][792] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(815, 808, 815) */
		reached[1][808] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1102: // STATE 808 - mutant_1.pml:334 - [.(goto)] (0:815:0 - 6)
		IfNotBlocked
		reached[1][808] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1103: // STATE 793 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (815:0:1 - 1)
		IfNotBlocked
		reached[1][793] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(815, 794, 815) */
		reached[1][794] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(815, 795, 815) */
		reached[1][795] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(815, 808, 815) */
		reached[1][808] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1104: // STATE 796 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (815:0:1 - 1)
		IfNotBlocked
		reached[1][796] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(815, 797, 815) */
		reached[1][797] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(815, 798, 815) */
		reached[1][798] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(815, 808, 815) */
		reached[1][808] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1105: // STATE 799 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (815:0:1 - 1)
		IfNotBlocked
		reached[1][799] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(815, 800, 815) */
		reached[1][800] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(815, 801, 815) */
		reached[1][801] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(815, 808, 815) */
		reached[1][808] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1106: // STATE 802 - mutant_1.pml:328 - [((STOP==ABORT))] (815:0:1 - 1)
		IfNotBlocked
		reached[1][802] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(815, 803, 815) */
		reached[1][803] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(815, 804, 815) */
		reached[1][804] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(815, 808, 815) */
		reached[1][808] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1107: // STATE 806 - mutant_1.pml:332 - [(1)] (815:0:0 - 1)
		IfNotBlocked
		reached[1][806] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(815, 808, 815) */
		reached[1][808] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1108: // STATE 811 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][811] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1109: // STATE 814 - mutant_1.pml:339 - [(1)] (825:0:1 - 1)
		IfNotBlocked
		reached[1][814] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(825, 816, 825) */
		reached[1][816] = 1;
		;
		/* merge: .(goto)(825, 819, 825) */
		reached[1][819] = 1;
		;
		/* merge: j = (j+1)(825, 821, 825) */
		reached[1][821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 826, 825) */
		reached[1][826] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1110: // STATE 821 - mutant_1.pml:375 - [j = (j+1)] (0:825:1 - 13)
		IfNotBlocked
		reached[1][821] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 826, 825) */
		reached[1][826] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1111: // STATE 823 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][823] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1112: // STATE 829 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][829] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1113: // STATE 830 - mutant_1.pml:405 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][830] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1114: // STATE 831 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][831] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1115: // STATE 833 - mutant_1.pml:407 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][833] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1116: // STATE 834 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][834] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1117: // STATE 836 - mutant_1.pml:409 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][836] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1118: // STATE 837 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][837] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1119: // STATE 839 - mutant_1.pml:411 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][839] = 1;
		if (!((6==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1120: // STATE 840 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][840] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1121: // STATE 844 - mutant_1.pml:414 - [j = (j+1)] (0:848:1 - 5)
		IfNotBlocked
		reached[1][844] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 849, 848) */
		reached[1][849] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1122: // STATE 846 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][846] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1123: // STATE 857 - mutant_1.pml:451 - [(((12==ABORTING)||(12==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][857] = 1;
		if (!(((12==4)||(12==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1124: // STATE 858 - mutant_1.pml:422 - [(((2==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][858] = 1;
		if (!(((2==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1125: // STATE 859 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][859] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1126: // STATE 861 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][861] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1127: // STATE 862 - mutant_1.pml:394 - [(((2==START)||(2==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][862] = 1;
		if (!(((2==9)||(2==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1128: // STATE 863 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][863] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1129: // STATE 864 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][864] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1130: // STATE 865 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (885:0:1 - 1)
		IfNotBlocked
		reached[1][865] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(885, 866, 885) */
		reached[1][866] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(885, 867, 885) */
		reached[1][867] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(885, 883, 885) */
		reached[1][883] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1131: // STATE 883 - mutant_1.pml:246 - [.(goto)] (0:885:0 - 6)
		IfNotBlocked
		reached[1][883] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1132: // STATE 868 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (885:0:1 - 1)
		IfNotBlocked
		reached[1][868] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(885, 869, 885) */
		reached[1][869] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(885, 870, 885) */
		reached[1][870] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(885, 883, 885) */
		reached[1][883] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1133: // STATE 871 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (885:0:1 - 1)
		IfNotBlocked
		reached[1][871] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(885, 872, 885) */
		reached[1][872] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(885, 873, 885) */
		reached[1][873] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(885, 883, 885) */
		reached[1][883] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1134: // STATE 874 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (885:0:1 - 1)
		IfNotBlocked
		reached[1][874] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(885, 875, 885) */
		reached[1][875] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(885, 876, 885) */
		reached[1][876] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(885, 883, 885) */
		reached[1][883] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1135: // STATE 877 - mutant_1.pml:240 - [((START==ABORT))] (885:0:1 - 1)
		IfNotBlocked
		reached[1][877] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(885, 878, 885) */
		reached[1][878] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(885, 879, 885) */
		reached[1][879] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(885, 883, 885) */
		reached[1][883] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1136: // STATE 881 - mutant_1.pml:244 - [(1)] (885:0:0 - 1)
		IfNotBlocked
		reached[1][881] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(885, 883, 885) */
		reached[1][883] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1137: // STATE 885 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][885] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1138: // STATE 887 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][887] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1139: // STATE 890 - mutant_1.pml:252 - [(1)] (988:0:1 - 1)
		IfNotBlocked
		reached[1][890] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(988, 892, 988) */
		reached[1][892] = 1;
		;
		/* merge: .(goto)(988, 982, 988) */
		reached[1][982] = 1;
		;
		/* merge: j = (j+1)(988, 984, 988) */
		reached[1][984] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 989, 988) */
		reached[1][989] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1140: // STATE 894 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][894] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1141: // STATE 895 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (920:0:1 - 1)
		IfNotBlocked
		reached[1][895] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(920, 896, 920) */
		reached[1][896] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(920, 897, 920) */
		reached[1][897] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(920, 913, 920) */
		reached[1][913] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1142: // STATE 913 - mutant_1.pml:276 - [.(goto)] (0:920:0 - 6)
		IfNotBlocked
		reached[1][913] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1143: // STATE 898 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (920:0:1 - 1)
		IfNotBlocked
		reached[1][898] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(920, 899, 920) */
		reached[1][899] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(920, 900, 920) */
		reached[1][900] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(920, 913, 920) */
		reached[1][913] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1144: // STATE 901 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (920:0:1 - 1)
		IfNotBlocked
		reached[1][901] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(920, 902, 920) */
		reached[1][902] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(920, 903, 920) */
		reached[1][903] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(920, 913, 920) */
		reached[1][913] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1145: // STATE 904 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (920:0:1 - 1)
		IfNotBlocked
		reached[1][904] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(920, 905, 920) */
		reached[1][905] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(920, 906, 920) */
		reached[1][906] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(920, 913, 920) */
		reached[1][913] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1146: // STATE 907 - mutant_1.pml:270 - [((PAUSE==ABORT))] (920:0:1 - 1)
		IfNotBlocked
		reached[1][907] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(920, 908, 920) */
		reached[1][908] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(920, 909, 920) */
		reached[1][909] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(920, 913, 920) */
		reached[1][913] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1147: // STATE 911 - mutant_1.pml:274 - [(1)] (920:0:0 - 1)
		IfNotBlocked
		reached[1][911] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(920, 913, 920) */
		reached[1][913] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1148: // STATE 916 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][916] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1149: // STATE 919 - mutant_1.pml:281 - [(1)] (988:0:1 - 1)
		IfNotBlocked
		reached[1][919] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(988, 921, 988) */
		reached[1][921] = 1;
		;
		/* merge: .(goto)(988, 982, 988) */
		reached[1][982] = 1;
		;
		/* merge: j = (j+1)(988, 984, 988) */
		reached[1][984] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 989, 988) */
		reached[1][989] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1150: // STATE 923 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][923] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1151: // STATE 924 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (949:0:1 - 1)
		IfNotBlocked
		reached[1][924] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(949, 925, 949) */
		reached[1][925] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(949, 926, 949) */
		reached[1][926] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(949, 942, 949) */
		reached[1][942] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1152: // STATE 942 - mutant_1.pml:305 - [.(goto)] (0:949:0 - 6)
		IfNotBlocked
		reached[1][942] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1153: // STATE 927 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (949:0:1 - 1)
		IfNotBlocked
		reached[1][927] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(949, 928, 949) */
		reached[1][928] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(949, 929, 949) */
		reached[1][929] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(949, 942, 949) */
		reached[1][942] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1154: // STATE 930 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (949:0:1 - 1)
		IfNotBlocked
		reached[1][930] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(949, 931, 949) */
		reached[1][931] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(949, 932, 949) */
		reached[1][932] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(949, 942, 949) */
		reached[1][942] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1155: // STATE 933 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (949:0:1 - 1)
		IfNotBlocked
		reached[1][933] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(949, 934, 949) */
		reached[1][934] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(949, 935, 949) */
		reached[1][935] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(949, 942, 949) */
		reached[1][942] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1156: // STATE 936 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (949:0:1 - 1)
		IfNotBlocked
		reached[1][936] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(949, 937, 949) */
		reached[1][937] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(949, 938, 949) */
		reached[1][938] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(949, 942, 949) */
		reached[1][942] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1157: // STATE 940 - mutant_1.pml:303 - [(1)] (949:0:0 - 1)
		IfNotBlocked
		reached[1][940] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(949, 942, 949) */
		reached[1][942] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1158: // STATE 945 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][945] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1159: // STATE 948 - mutant_1.pml:310 - [(1)] (988:0:1 - 1)
		IfNotBlocked
		reached[1][948] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(988, 950, 988) */
		reached[1][950] = 1;
		;
		/* merge: .(goto)(988, 982, 988) */
		reached[1][982] = 1;
		;
		/* merge: j = (j+1)(988, 984, 988) */
		reached[1][984] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 989, 988) */
		reached[1][989] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1160: // STATE 952 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][952] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1161: // STATE 953 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (978:0:1 - 1)
		IfNotBlocked
		reached[1][953] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(978, 954, 978) */
		reached[1][954] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(978, 955, 978) */
		reached[1][955] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(978, 971, 978) */
		reached[1][971] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1162: // STATE 971 - mutant_1.pml:334 - [.(goto)] (0:978:0 - 6)
		IfNotBlocked
		reached[1][971] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1163: // STATE 956 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (978:0:1 - 1)
		IfNotBlocked
		reached[1][956] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(978, 957, 978) */
		reached[1][957] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(978, 958, 978) */
		reached[1][958] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(978, 971, 978) */
		reached[1][971] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1164: // STATE 959 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (978:0:1 - 1)
		IfNotBlocked
		reached[1][959] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(978, 960, 978) */
		reached[1][960] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(978, 961, 978) */
		reached[1][961] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(978, 971, 978) */
		reached[1][971] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1165: // STATE 962 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (978:0:1 - 1)
		IfNotBlocked
		reached[1][962] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(978, 963, 978) */
		reached[1][963] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(978, 964, 978) */
		reached[1][964] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(978, 971, 978) */
		reached[1][971] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1166: // STATE 965 - mutant_1.pml:328 - [((STOP==ABORT))] (978:0:1 - 1)
		IfNotBlocked
		reached[1][965] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(978, 966, 978) */
		reached[1][966] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(978, 967, 978) */
		reached[1][967] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(978, 971, 978) */
		reached[1][971] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1167: // STATE 969 - mutant_1.pml:332 - [(1)] (978:0:0 - 1)
		IfNotBlocked
		reached[1][969] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(978, 971, 978) */
		reached[1][971] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1168: // STATE 974 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][974] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1169: // STATE 977 - mutant_1.pml:339 - [(1)] (988:0:1 - 1)
		IfNotBlocked
		reached[1][977] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(988, 979, 988) */
		reached[1][979] = 1;
		;
		/* merge: .(goto)(988, 982, 988) */
		reached[1][982] = 1;
		;
		/* merge: j = (j+1)(988, 984, 988) */
		reached[1][984] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 989, 988) */
		reached[1][989] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1170: // STATE 984 - mutant_1.pml:375 - [j = (j+1)] (0:988:1 - 13)
		IfNotBlocked
		reached[1][984] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 989, 988) */
		reached[1][989] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1171: // STATE 986 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][986] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1172: // STATE 993 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][993] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1173: // STATE 994 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][994] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1174: // STATE 995 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][995] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1175: // STATE 996 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (1016:0:1 - 1)
		IfNotBlocked
		reached[1][996] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1016, 997, 1016) */
		reached[1][997] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1016, 998, 1016) */
		reached[1][998] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1016, 1014, 1016) */
		reached[1][1014] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1176: // STATE 1014 - mutant_1.pml:246 - [.(goto)] (0:1016:0 - 6)
		IfNotBlocked
		reached[1][1014] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1177: // STATE 999 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (1016:0:1 - 1)
		IfNotBlocked
		reached[1][999] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1016, 1000, 1016) */
		reached[1][1000] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1016, 1001, 1016) */
		reached[1][1001] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1016, 1014, 1016) */
		reached[1][1014] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1178: // STATE 1002 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1016:0:1 - 1)
		IfNotBlocked
		reached[1][1002] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1016, 1003, 1016) */
		reached[1][1003] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1016, 1004, 1016) */
		reached[1][1004] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1016, 1014, 1016) */
		reached[1][1014] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1179: // STATE 1005 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1016:0:1 - 1)
		IfNotBlocked
		reached[1][1005] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1016, 1006, 1016) */
		reached[1][1006] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1016, 1007, 1016) */
		reached[1][1007] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1016, 1014, 1016) */
		reached[1][1014] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1180: // STATE 1008 - mutant_1.pml:240 - [((START==ABORT))] (1016:0:1 - 1)
		IfNotBlocked
		reached[1][1008] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1016, 1009, 1016) */
		reached[1][1009] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1016, 1010, 1016) */
		reached[1][1010] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1016, 1014, 1016) */
		reached[1][1014] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1181: // STATE 1012 - mutant_1.pml:244 - [(1)] (1016:0:0 - 1)
		IfNotBlocked
		reached[1][1012] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1016, 1014, 1016) */
		reached[1][1014] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1182: // STATE 1016 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1016] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1183: // STATE 1018 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1018] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1184: // STATE 1021 - mutant_1.pml:252 - [(1)] (1119:0:1 - 1)
		IfNotBlocked
		reached[1][1021] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1119, 1023, 1119) */
		reached[1][1023] = 1;
		;
		/* merge: .(goto)(1119, 1113, 1119) */
		reached[1][1113] = 1;
		;
		/* merge: j = (j-1)(1119, 1115, 1119) */
		reached[1][1115] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1120, 1119) */
		reached[1][1120] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1185: // STATE 1025 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1025] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1186: // STATE 1026 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (1051:0:1 - 1)
		IfNotBlocked
		reached[1][1026] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1051, 1027, 1051) */
		reached[1][1027] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1051, 1028, 1051) */
		reached[1][1028] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1051, 1044, 1051) */
		reached[1][1044] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1187: // STATE 1044 - mutant_1.pml:276 - [.(goto)] (0:1051:0 - 6)
		IfNotBlocked
		reached[1][1044] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1188: // STATE 1029 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (1051:0:1 - 1)
		IfNotBlocked
		reached[1][1029] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1051, 1030, 1051) */
		reached[1][1030] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1051, 1031, 1051) */
		reached[1][1031] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1051, 1044, 1051) */
		reached[1][1044] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1189: // STATE 1032 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1051:0:1 - 1)
		IfNotBlocked
		reached[1][1032] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1051, 1033, 1051) */
		reached[1][1033] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1051, 1034, 1051) */
		reached[1][1034] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1051, 1044, 1051) */
		reached[1][1044] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1190: // STATE 1035 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1051:0:1 - 1)
		IfNotBlocked
		reached[1][1035] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1051, 1036, 1051) */
		reached[1][1036] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1051, 1037, 1051) */
		reached[1][1037] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1051, 1044, 1051) */
		reached[1][1044] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1191: // STATE 1038 - mutant_1.pml:270 - [((PAUSE==ABORT))] (1051:0:1 - 1)
		IfNotBlocked
		reached[1][1038] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1051, 1039, 1051) */
		reached[1][1039] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1051, 1040, 1051) */
		reached[1][1040] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1051, 1044, 1051) */
		reached[1][1044] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1192: // STATE 1042 - mutant_1.pml:274 - [(1)] (1051:0:0 - 1)
		IfNotBlocked
		reached[1][1042] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1051, 1044, 1051) */
		reached[1][1044] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1193: // STATE 1047 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1047] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1194: // STATE 1050 - mutant_1.pml:281 - [(1)] (1119:0:1 - 1)
		IfNotBlocked
		reached[1][1050] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1119, 1052, 1119) */
		reached[1][1052] = 1;
		;
		/* merge: .(goto)(1119, 1113, 1119) */
		reached[1][1113] = 1;
		;
		/* merge: j = (j-1)(1119, 1115, 1119) */
		reached[1][1115] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1120, 1119) */
		reached[1][1120] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1195: // STATE 1054 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1054] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1196: // STATE 1055 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (1080:0:1 - 1)
		IfNotBlocked
		reached[1][1055] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1080, 1056, 1080) */
		reached[1][1056] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1080, 1057, 1080) */
		reached[1][1057] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1080, 1073, 1080) */
		reached[1][1073] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1197: // STATE 1073 - mutant_1.pml:305 - [.(goto)] (0:1080:0 - 6)
		IfNotBlocked
		reached[1][1073] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1198: // STATE 1058 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (1080:0:1 - 1)
		IfNotBlocked
		reached[1][1058] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1080, 1059, 1080) */
		reached[1][1059] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1080, 1060, 1080) */
		reached[1][1060] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1080, 1073, 1080) */
		reached[1][1073] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1199: // STATE 1061 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1080:0:1 - 1)
		IfNotBlocked
		reached[1][1061] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1080, 1062, 1080) */
		reached[1][1062] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1080, 1063, 1080) */
		reached[1][1063] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1080, 1073, 1080) */
		reached[1][1073] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1200: // STATE 1064 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1080:0:1 - 1)
		IfNotBlocked
		reached[1][1064] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1080, 1065, 1080) */
		reached[1][1065] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1080, 1066, 1080) */
		reached[1][1066] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1080, 1073, 1080) */
		reached[1][1073] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1201: // STATE 1067 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (1080:0:1 - 1)
		IfNotBlocked
		reached[1][1067] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1080, 1068, 1080) */
		reached[1][1068] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1080, 1069, 1080) */
		reached[1][1069] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1080, 1073, 1080) */
		reached[1][1073] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1202: // STATE 1071 - mutant_1.pml:303 - [(1)] (1080:0:0 - 1)
		IfNotBlocked
		reached[1][1071] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1080, 1073, 1080) */
		reached[1][1073] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1203: // STATE 1076 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1076] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1204: // STATE 1079 - mutant_1.pml:310 - [(1)] (1119:0:1 - 1)
		IfNotBlocked
		reached[1][1079] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1119, 1081, 1119) */
		reached[1][1081] = 1;
		;
		/* merge: .(goto)(1119, 1113, 1119) */
		reached[1][1113] = 1;
		;
		/* merge: j = (j-1)(1119, 1115, 1119) */
		reached[1][1115] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1120, 1119) */
		reached[1][1120] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1205: // STATE 1083 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1083] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1206: // STATE 1084 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (1109:0:1 - 1)
		IfNotBlocked
		reached[1][1084] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1109, 1085, 1109) */
		reached[1][1085] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1109, 1086, 1109) */
		reached[1][1086] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1109, 1102, 1109) */
		reached[1][1102] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1207: // STATE 1102 - mutant_1.pml:334 - [.(goto)] (0:1109:0 - 6)
		IfNotBlocked
		reached[1][1102] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1208: // STATE 1087 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (1109:0:1 - 1)
		IfNotBlocked
		reached[1][1087] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1109, 1088, 1109) */
		reached[1][1088] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1109, 1089, 1109) */
		reached[1][1089] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1109, 1102, 1109) */
		reached[1][1102] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1209: // STATE 1090 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1109:0:1 - 1)
		IfNotBlocked
		reached[1][1090] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1109, 1091, 1109) */
		reached[1][1091] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1109, 1092, 1109) */
		reached[1][1092] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1109, 1102, 1109) */
		reached[1][1102] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1210: // STATE 1093 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1109:0:1 - 1)
		IfNotBlocked
		reached[1][1093] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1109, 1094, 1109) */
		reached[1][1094] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1109, 1095, 1109) */
		reached[1][1095] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1109, 1102, 1109) */
		reached[1][1102] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1211: // STATE 1096 - mutant_1.pml:328 - [((STOP==ABORT))] (1109:0:1 - 1)
		IfNotBlocked
		reached[1][1096] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1109, 1097, 1109) */
		reached[1][1097] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1109, 1098, 1109) */
		reached[1][1098] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1109, 1102, 1109) */
		reached[1][1102] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1212: // STATE 1100 - mutant_1.pml:332 - [(1)] (1109:0:0 - 1)
		IfNotBlocked
		reached[1][1100] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1109, 1102, 1109) */
		reached[1][1102] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1213: // STATE 1105 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1105] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1214: // STATE 1108 - mutant_1.pml:339 - [(1)] (1119:0:1 - 1)
		IfNotBlocked
		reached[1][1108] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1119, 1110, 1119) */
		reached[1][1110] = 1;
		;
		/* merge: .(goto)(1119, 1113, 1119) */
		reached[1][1113] = 1;
		;
		/* merge: j = (j-1)(1119, 1115, 1119) */
		reached[1][1115] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1120, 1119) */
		reached[1][1120] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1215: // STATE 1115 - mutant_1.pml:386 - [j = (j-1)] (0:1119:1 - 13)
		IfNotBlocked
		reached[1][1115] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1120, 1119) */
		reached[1][1120] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1216: // STATE 1117 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1117] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1217: // STATE 1127 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1127] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1218: // STATE 1128 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1128] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1219: // STATE 1129 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (1149:0:1 - 1)
		IfNotBlocked
		reached[1][1129] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1149, 1130, 1149) */
		reached[1][1130] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1149, 1131, 1149) */
		reached[1][1131] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1149, 1147, 1149) */
		reached[1][1147] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1220: // STATE 1147 - mutant_1.pml:246 - [.(goto)] (0:1149:0 - 6)
		IfNotBlocked
		reached[1][1147] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1221: // STATE 1132 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (1149:0:1 - 1)
		IfNotBlocked
		reached[1][1132] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1149, 1133, 1149) */
		reached[1][1133] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1149, 1134, 1149) */
		reached[1][1134] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1149, 1147, 1149) */
		reached[1][1147] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1222: // STATE 1135 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1149:0:1 - 1)
		IfNotBlocked
		reached[1][1135] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1149, 1136, 1149) */
		reached[1][1136] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1149, 1137, 1149) */
		reached[1][1137] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1149, 1147, 1149) */
		reached[1][1147] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1223: // STATE 1138 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1149:0:1 - 1)
		IfNotBlocked
		reached[1][1138] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1149, 1139, 1149) */
		reached[1][1139] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1149, 1140, 1149) */
		reached[1][1140] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1149, 1147, 1149) */
		reached[1][1147] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1224: // STATE 1141 - mutant_1.pml:240 - [((START==ABORT))] (1149:0:1 - 1)
		IfNotBlocked
		reached[1][1141] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1149, 1142, 1149) */
		reached[1][1142] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1149, 1143, 1149) */
		reached[1][1143] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1149, 1147, 1149) */
		reached[1][1147] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1225: // STATE 1145 - mutant_1.pml:244 - [(1)] (1149:0:0 - 1)
		IfNotBlocked
		reached[1][1145] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1149, 1147, 1149) */
		reached[1][1147] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1226: // STATE 1149 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1149] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1227: // STATE 1151 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1151] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1228: // STATE 1154 - mutant_1.pml:252 - [(1)] (1252:0:1 - 1)
		IfNotBlocked
		reached[1][1154] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1252, 1156, 1252) */
		reached[1][1156] = 1;
		;
		/* merge: .(goto)(1252, 1246, 1252) */
		reached[1][1246] = 1;
		;
		/* merge: j = (j+1)(1252, 1248, 1252) */
		reached[1][1248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1253, 1252) */
		reached[1][1253] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1229: // STATE 1158 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1158] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1230: // STATE 1159 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (1184:0:1 - 1)
		IfNotBlocked
		reached[1][1159] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1184, 1160, 1184) */
		reached[1][1160] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1184, 1161, 1184) */
		reached[1][1161] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1184, 1177, 1184) */
		reached[1][1177] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1231: // STATE 1177 - mutant_1.pml:276 - [.(goto)] (0:1184:0 - 6)
		IfNotBlocked
		reached[1][1177] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1232: // STATE 1162 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (1184:0:1 - 1)
		IfNotBlocked
		reached[1][1162] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1184, 1163, 1184) */
		reached[1][1163] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1184, 1164, 1184) */
		reached[1][1164] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1184, 1177, 1184) */
		reached[1][1177] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1233: // STATE 1165 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1184:0:1 - 1)
		IfNotBlocked
		reached[1][1165] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1184, 1166, 1184) */
		reached[1][1166] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1184, 1167, 1184) */
		reached[1][1167] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1184, 1177, 1184) */
		reached[1][1177] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1234: // STATE 1168 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1184:0:1 - 1)
		IfNotBlocked
		reached[1][1168] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1184, 1169, 1184) */
		reached[1][1169] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1184, 1170, 1184) */
		reached[1][1170] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1184, 1177, 1184) */
		reached[1][1177] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1235: // STATE 1171 - mutant_1.pml:270 - [((PAUSE==ABORT))] (1184:0:1 - 1)
		IfNotBlocked
		reached[1][1171] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1184, 1172, 1184) */
		reached[1][1172] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1184, 1173, 1184) */
		reached[1][1173] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1184, 1177, 1184) */
		reached[1][1177] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1236: // STATE 1175 - mutant_1.pml:274 - [(1)] (1184:0:0 - 1)
		IfNotBlocked
		reached[1][1175] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1184, 1177, 1184) */
		reached[1][1177] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1237: // STATE 1180 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1180] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1238: // STATE 1183 - mutant_1.pml:281 - [(1)] (1252:0:1 - 1)
		IfNotBlocked
		reached[1][1183] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1252, 1185, 1252) */
		reached[1][1185] = 1;
		;
		/* merge: .(goto)(1252, 1246, 1252) */
		reached[1][1246] = 1;
		;
		/* merge: j = (j+1)(1252, 1248, 1252) */
		reached[1][1248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1253, 1252) */
		reached[1][1253] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1239: // STATE 1187 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1187] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1240: // STATE 1188 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (1213:0:1 - 1)
		IfNotBlocked
		reached[1][1188] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1213, 1189, 1213) */
		reached[1][1189] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1213, 1190, 1213) */
		reached[1][1190] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1213, 1206, 1213) */
		reached[1][1206] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1241: // STATE 1206 - mutant_1.pml:305 - [.(goto)] (0:1213:0 - 6)
		IfNotBlocked
		reached[1][1206] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1242: // STATE 1191 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (1213:0:1 - 1)
		IfNotBlocked
		reached[1][1191] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1213, 1192, 1213) */
		reached[1][1192] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1213, 1193, 1213) */
		reached[1][1193] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1213, 1206, 1213) */
		reached[1][1206] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1243: // STATE 1194 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1213:0:1 - 1)
		IfNotBlocked
		reached[1][1194] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1213, 1195, 1213) */
		reached[1][1195] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1213, 1196, 1213) */
		reached[1][1196] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1213, 1206, 1213) */
		reached[1][1206] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1244: // STATE 1197 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1213:0:1 - 1)
		IfNotBlocked
		reached[1][1197] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1213, 1198, 1213) */
		reached[1][1198] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1213, 1199, 1213) */
		reached[1][1199] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1213, 1206, 1213) */
		reached[1][1206] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1245: // STATE 1200 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (1213:0:1 - 1)
		IfNotBlocked
		reached[1][1200] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1213, 1201, 1213) */
		reached[1][1201] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1213, 1202, 1213) */
		reached[1][1202] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1213, 1206, 1213) */
		reached[1][1206] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1246: // STATE 1204 - mutant_1.pml:303 - [(1)] (1213:0:0 - 1)
		IfNotBlocked
		reached[1][1204] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1213, 1206, 1213) */
		reached[1][1206] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1247: // STATE 1209 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1209] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1248: // STATE 1212 - mutant_1.pml:310 - [(1)] (1252:0:1 - 1)
		IfNotBlocked
		reached[1][1212] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1252, 1214, 1252) */
		reached[1][1214] = 1;
		;
		/* merge: .(goto)(1252, 1246, 1252) */
		reached[1][1246] = 1;
		;
		/* merge: j = (j+1)(1252, 1248, 1252) */
		reached[1][1248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1253, 1252) */
		reached[1][1253] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1249: // STATE 1216 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1216] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1250: // STATE 1217 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (1242:0:1 - 1)
		IfNotBlocked
		reached[1][1217] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1242, 1218, 1242) */
		reached[1][1218] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1242, 1219, 1242) */
		reached[1][1219] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1242, 1235, 1242) */
		reached[1][1235] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1251: // STATE 1235 - mutant_1.pml:334 - [.(goto)] (0:1242:0 - 6)
		IfNotBlocked
		reached[1][1235] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1252: // STATE 1220 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (1242:0:1 - 1)
		IfNotBlocked
		reached[1][1220] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1242, 1221, 1242) */
		reached[1][1221] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1242, 1222, 1242) */
		reached[1][1222] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1242, 1235, 1242) */
		reached[1][1235] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1253: // STATE 1223 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1242:0:1 - 1)
		IfNotBlocked
		reached[1][1223] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1242, 1224, 1242) */
		reached[1][1224] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1242, 1225, 1242) */
		reached[1][1225] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1242, 1235, 1242) */
		reached[1][1235] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1254: // STATE 1226 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1242:0:1 - 1)
		IfNotBlocked
		reached[1][1226] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1242, 1227, 1242) */
		reached[1][1227] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1242, 1228, 1242) */
		reached[1][1228] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1242, 1235, 1242) */
		reached[1][1235] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1255: // STATE 1229 - mutant_1.pml:328 - [((STOP==ABORT))] (1242:0:1 - 1)
		IfNotBlocked
		reached[1][1229] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1242, 1230, 1242) */
		reached[1][1230] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1242, 1231, 1242) */
		reached[1][1231] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1242, 1235, 1242) */
		reached[1][1235] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1256: // STATE 1233 - mutant_1.pml:332 - [(1)] (1242:0:0 - 1)
		IfNotBlocked
		reached[1][1233] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1242, 1235, 1242) */
		reached[1][1235] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1257: // STATE 1238 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1238] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1258: // STATE 1241 - mutant_1.pml:339 - [(1)] (1252:0:1 - 1)
		IfNotBlocked
		reached[1][1241] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1252, 1243, 1252) */
		reached[1][1243] = 1;
		;
		/* merge: .(goto)(1252, 1246, 1252) */
		reached[1][1246] = 1;
		;
		/* merge: j = (j+1)(1252, 1248, 1252) */
		reached[1][1248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1253, 1252) */
		reached[1][1253] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1259: // STATE 1248 - mutant_1.pml:375 - [j = (j+1)] (0:1252:1 - 13)
		IfNotBlocked
		reached[1][1248] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1253, 1252) */
		reached[1][1253] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1260: // STATE 1250 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1250] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1261: // STATE 1256 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1256] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1262: // STATE 1257 - mutant_1.pml:405 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1257] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1263: // STATE 1258 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1258] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1264: // STATE 1260 - mutant_1.pml:407 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1260] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1265: // STATE 1261 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1261] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1266: // STATE 1263 - mutant_1.pml:409 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1263] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1267: // STATE 1264 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1264] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1268: // STATE 1266 - mutant_1.pml:411 - [((2==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1266] = 1;
		if (!((2==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1269: // STATE 1267 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1267] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1270: // STATE 1271 - mutant_1.pml:414 - [j = (j+1)] (0:1275:1 - 5)
		IfNotBlocked
		reached[1][1271] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1276, 1275) */
		reached[1][1276] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1271: // STATE 1273 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1273] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1272: // STATE 1290 - mutant_1.pml:487 - [(((CONTINUE==START)&&(commands[0]==CONTINUE)))] (1736:0:1 - 1)
		IfNotBlocked
		reached[1][1290] = 1;
		if (!(((8==9)&&(now.commands[0]==8))))
			continue;
		/* merge: assert((states[0]==READY))(1736, 1291, 1736) */
		reached[1][1291] = 1;
		spin_assert((now.states[0]==13), "(states[0]==13)", II, tt, t);
		/* merge: commands[0] = START(1736, 1292, 1736) */
		reached[1][1292] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 9;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(1736, 1308, 1736) */
		reached[1][1308] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1273: // STATE 1308 - mutant_1.pml:505 - [.(goto)] (0:1736:0 - 6)
		IfNotBlocked
		reached[1][1308] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1274: // STATE 1293 - mutant_1.pml:490 - [(((CONTINUE==PAUSE)&&(commands[0]==CONTINUE)))] (1736:0:1 - 1)
		IfNotBlocked
		reached[1][1293] = 1;
		if (!(((8==6)&&(now.commands[0]==8))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(1736, 1294, 1736) */
		reached[1][1294] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==11)), "((states[0]==12)||(states[0]==11))", II, tt, t);
		/* merge: commands[0] = PAUSE(1736, 1295, 1736) */
		reached[1][1295] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(1736, 1308, 1736) */
		reached[1][1308] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1275: // STATE 1296 - mutant_1.pml:493 - [(((CONTINUE==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (1736:0:1 - 1)
		IfNotBlocked
		reached[1][1296] = 1;
		if (!(((8==8)&&((now.commands[0]==9)||(now.commands[0]==6)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(1736, 1297, 1736) */
		reached[1][1297] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==10)), "((states[0]==12)||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = CONTINUE(1736, 1298, 1736) */
		reached[1][1298] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(1736, 1308, 1736) */
		reached[1][1308] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1276: // STATE 1299 - mutant_1.pml:496 - [(((CONTINUE==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (1736:0:1 - 1)
		IfNotBlocked
		reached[1][1299] = 1;
		if (!(((8==2)&&((now.commands[0]==8)||(now.commands[0]==6)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(1736, 1300, 1736) */
		reached[1][1300] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==10)), "(((states[0]==12)||(states[0]==11))||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = STOP(1736, 1301, 1736) */
		reached[1][1301] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 2;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(1736, 1308, 1736) */
		reached[1][1308] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1277: // STATE 1302 - mutant_1.pml:499 - [((CONTINUE==ABORT))] (1736:0:1 - 1)
		IfNotBlocked
		reached[1][1302] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[0]!=READY))(1736, 1303, 1736) */
		reached[1][1303] = 1;
		spin_assert((now.states[0]!=13), "(states[0]!=13)", II, tt, t);
		/* merge: commands[0] = ABORT(1736, 1304, 1736) */
		reached[1][1304] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 1;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(1736, 1308, 1736) */
		reached[1][1308] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1278: // STATE 1306 - mutant_1.pml:503 - [(1)] (1736:0:0 - 1)
		IfNotBlocked
		reached[1][1306] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1736, 1308, 1736) */
		reached[1][1308] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1279: // STATE 1310 - mutant_1.pml:422 - [(((9==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1310] = 1;
		if (!(((9==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1280: // STATE 1311 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1311] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1281: // STATE 1313 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1313] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1282: // STATE 1314 - mutant_1.pml:394 - [(((9==START)||(9==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1314] = 1;
		if (!(((9==9)||(9==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1283: // STATE 1315 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1315] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1284: // STATE 1316 - mutant_1.pml:361 - [((9==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1316] = 1;
		if (!((9==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1285: // STATE 1317 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (1337:0:1 - 1)
		IfNotBlocked
		reached[1][1317] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1337, 1318, 1337) */
		reached[1][1318] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1337, 1319, 1337) */
		reached[1][1319] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1337, 1335, 1337) */
		reached[1][1335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1286: // STATE 1335 - mutant_1.pml:246 - [.(goto)] (0:1337:0 - 6)
		IfNotBlocked
		reached[1][1335] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1287: // STATE 1320 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (1337:0:1 - 1)
		IfNotBlocked
		reached[1][1320] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1337, 1321, 1337) */
		reached[1][1321] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1337, 1322, 1337) */
		reached[1][1322] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1337, 1335, 1337) */
		reached[1][1335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1288: // STATE 1323 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1337:0:1 - 1)
		IfNotBlocked
		reached[1][1323] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1337, 1324, 1337) */
		reached[1][1324] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1337, 1325, 1337) */
		reached[1][1325] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1337, 1335, 1337) */
		reached[1][1335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1289: // STATE 1326 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1337:0:1 - 1)
		IfNotBlocked
		reached[1][1326] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1337, 1327, 1337) */
		reached[1][1327] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1337, 1328, 1337) */
		reached[1][1328] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1337, 1335, 1337) */
		reached[1][1335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1290: // STATE 1329 - mutant_1.pml:240 - [((START==ABORT))] (1337:0:1 - 1)
		IfNotBlocked
		reached[1][1329] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1337, 1330, 1337) */
		reached[1][1330] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1337, 1331, 1337) */
		reached[1][1331] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1337, 1335, 1337) */
		reached[1][1335] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1291: // STATE 1333 - mutant_1.pml:244 - [(1)] (1337:0:0 - 1)
		IfNotBlocked
		reached[1][1333] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1337, 1335, 1337) */
		reached[1][1335] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1292: // STATE 1337 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1337] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1293: // STATE 1339 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1339] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1294: // STATE 1342 - mutant_1.pml:252 - [(1)] (1440:0:1 - 1)
		IfNotBlocked
		reached[1][1342] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1440, 1344, 1440) */
		reached[1][1344] = 1;
		;
		/* merge: .(goto)(1440, 1434, 1440) */
		reached[1][1434] = 1;
		;
		/* merge: j = (j+1)(1440, 1436, 1440) */
		reached[1][1436] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1441, 1440) */
		reached[1][1441] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1295: // STATE 1346 - mutant_1.pml:363 - [((9==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1346] = 1;
		if (!((9==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1296: // STATE 1347 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (1372:0:1 - 1)
		IfNotBlocked
		reached[1][1347] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1372, 1348, 1372) */
		reached[1][1348] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1372, 1349, 1372) */
		reached[1][1349] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1372, 1365, 1372) */
		reached[1][1365] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1297: // STATE 1365 - mutant_1.pml:276 - [.(goto)] (0:1372:0 - 6)
		IfNotBlocked
		reached[1][1365] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1298: // STATE 1350 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (1372:0:1 - 1)
		IfNotBlocked
		reached[1][1350] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1372, 1351, 1372) */
		reached[1][1351] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1372, 1352, 1372) */
		reached[1][1352] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1372, 1365, 1372) */
		reached[1][1365] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1299: // STATE 1353 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1372:0:1 - 1)
		IfNotBlocked
		reached[1][1353] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1372, 1354, 1372) */
		reached[1][1354] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1372, 1355, 1372) */
		reached[1][1355] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1372, 1365, 1372) */
		reached[1][1365] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1300: // STATE 1356 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1372:0:1 - 1)
		IfNotBlocked
		reached[1][1356] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1372, 1357, 1372) */
		reached[1][1357] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1372, 1358, 1372) */
		reached[1][1358] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1372, 1365, 1372) */
		reached[1][1365] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1301: // STATE 1359 - mutant_1.pml:270 - [((PAUSE==ABORT))] (1372:0:1 - 1)
		IfNotBlocked
		reached[1][1359] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1372, 1360, 1372) */
		reached[1][1360] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1372, 1361, 1372) */
		reached[1][1361] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1372, 1365, 1372) */
		reached[1][1365] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1302: // STATE 1363 - mutant_1.pml:274 - [(1)] (1372:0:0 - 1)
		IfNotBlocked
		reached[1][1363] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1372, 1365, 1372) */
		reached[1][1365] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1303: // STATE 1368 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1368] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1304: // STATE 1371 - mutant_1.pml:281 - [(1)] (1440:0:1 - 1)
		IfNotBlocked
		reached[1][1371] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1440, 1373, 1440) */
		reached[1][1373] = 1;
		;
		/* merge: .(goto)(1440, 1434, 1440) */
		reached[1][1434] = 1;
		;
		/* merge: j = (j+1)(1440, 1436, 1440) */
		reached[1][1436] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1441, 1440) */
		reached[1][1441] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1305: // STATE 1375 - mutant_1.pml:365 - [((9==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1375] = 1;
		if (!((9==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1306: // STATE 1376 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (1401:0:1 - 1)
		IfNotBlocked
		reached[1][1376] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1401, 1377, 1401) */
		reached[1][1377] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1401, 1378, 1401) */
		reached[1][1378] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1401, 1394, 1401) */
		reached[1][1394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1307: // STATE 1394 - mutant_1.pml:305 - [.(goto)] (0:1401:0 - 6)
		IfNotBlocked
		reached[1][1394] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1308: // STATE 1379 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (1401:0:1 - 1)
		IfNotBlocked
		reached[1][1379] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1401, 1380, 1401) */
		reached[1][1380] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1401, 1381, 1401) */
		reached[1][1381] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1401, 1394, 1401) */
		reached[1][1394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1309: // STATE 1382 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1401:0:1 - 1)
		IfNotBlocked
		reached[1][1382] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1401, 1383, 1401) */
		reached[1][1383] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1401, 1384, 1401) */
		reached[1][1384] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1401, 1394, 1401) */
		reached[1][1394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1310: // STATE 1385 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1401:0:1 - 1)
		IfNotBlocked
		reached[1][1385] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1401, 1386, 1401) */
		reached[1][1386] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1401, 1387, 1401) */
		reached[1][1387] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1401, 1394, 1401) */
		reached[1][1394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1311: // STATE 1388 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (1401:0:1 - 1)
		IfNotBlocked
		reached[1][1388] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1401, 1389, 1401) */
		reached[1][1389] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1401, 1390, 1401) */
		reached[1][1390] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1401, 1394, 1401) */
		reached[1][1394] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1312: // STATE 1392 - mutant_1.pml:303 - [(1)] (1401:0:0 - 1)
		IfNotBlocked
		reached[1][1392] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1401, 1394, 1401) */
		reached[1][1394] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1313: // STATE 1397 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1397] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1314: // STATE 1400 - mutant_1.pml:310 - [(1)] (1440:0:1 - 1)
		IfNotBlocked
		reached[1][1400] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1440, 1402, 1440) */
		reached[1][1402] = 1;
		;
		/* merge: .(goto)(1440, 1434, 1440) */
		reached[1][1434] = 1;
		;
		/* merge: j = (j+1)(1440, 1436, 1440) */
		reached[1][1436] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1441, 1440) */
		reached[1][1441] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1315: // STATE 1404 - mutant_1.pml:367 - [(((9==STOP)||(9==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1404] = 1;
		if (!(((9==2)||(9==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1316: // STATE 1405 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (1430:0:1 - 1)
		IfNotBlocked
		reached[1][1405] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1430, 1406, 1430) */
		reached[1][1406] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1430, 1407, 1430) */
		reached[1][1407] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1430, 1423, 1430) */
		reached[1][1423] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1317: // STATE 1423 - mutant_1.pml:334 - [.(goto)] (0:1430:0 - 6)
		IfNotBlocked
		reached[1][1423] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1318: // STATE 1408 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (1430:0:1 - 1)
		IfNotBlocked
		reached[1][1408] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1430, 1409, 1430) */
		reached[1][1409] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1430, 1410, 1430) */
		reached[1][1410] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1430, 1423, 1430) */
		reached[1][1423] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1319: // STATE 1411 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1430:0:1 - 1)
		IfNotBlocked
		reached[1][1411] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1430, 1412, 1430) */
		reached[1][1412] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1430, 1413, 1430) */
		reached[1][1413] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1430, 1423, 1430) */
		reached[1][1423] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1320: // STATE 1414 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1430:0:1 - 1)
		IfNotBlocked
		reached[1][1414] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1430, 1415, 1430) */
		reached[1][1415] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1430, 1416, 1430) */
		reached[1][1416] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1430, 1423, 1430) */
		reached[1][1423] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1321: // STATE 1417 - mutant_1.pml:328 - [((STOP==ABORT))] (1430:0:1 - 1)
		IfNotBlocked
		reached[1][1417] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1430, 1418, 1430) */
		reached[1][1418] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1430, 1419, 1430) */
		reached[1][1419] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1430, 1423, 1430) */
		reached[1][1423] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1322: // STATE 1421 - mutant_1.pml:332 - [(1)] (1430:0:0 - 1)
		IfNotBlocked
		reached[1][1421] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1430, 1423, 1430) */
		reached[1][1423] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1323: // STATE 1426 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1426] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1324: // STATE 1429 - mutant_1.pml:339 - [(1)] (1440:0:1 - 1)
		IfNotBlocked
		reached[1][1429] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1440, 1431, 1440) */
		reached[1][1431] = 1;
		;
		/* merge: .(goto)(1440, 1434, 1440) */
		reached[1][1434] = 1;
		;
		/* merge: j = (j+1)(1440, 1436, 1440) */
		reached[1][1436] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1441, 1440) */
		reached[1][1441] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1325: // STATE 1436 - mutant_1.pml:375 - [j = (j+1)] (0:1440:1 - 13)
		IfNotBlocked
		reached[1][1436] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1441, 1440) */
		reached[1][1441] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1326: // STATE 1438 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1438] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1327: // STATE 1445 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1445] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1328: // STATE 1446 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1446] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1329: // STATE 1447 - mutant_1.pml:361 - [((9==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1447] = 1;
		if (!((9==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1330: // STATE 1448 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (1468:0:1 - 1)
		IfNotBlocked
		reached[1][1448] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1468, 1449, 1468) */
		reached[1][1449] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1468, 1450, 1468) */
		reached[1][1450] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1468, 1466, 1468) */
		reached[1][1466] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1331: // STATE 1466 - mutant_1.pml:246 - [.(goto)] (0:1468:0 - 6)
		IfNotBlocked
		reached[1][1466] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1332: // STATE 1451 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (1468:0:1 - 1)
		IfNotBlocked
		reached[1][1451] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1468, 1452, 1468) */
		reached[1][1452] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1468, 1453, 1468) */
		reached[1][1453] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1468, 1466, 1468) */
		reached[1][1466] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1333: // STATE 1454 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1468:0:1 - 1)
		IfNotBlocked
		reached[1][1454] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1468, 1455, 1468) */
		reached[1][1455] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1468, 1456, 1468) */
		reached[1][1456] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1468, 1466, 1468) */
		reached[1][1466] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1334: // STATE 1457 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1468:0:1 - 1)
		IfNotBlocked
		reached[1][1457] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1468, 1458, 1468) */
		reached[1][1458] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1468, 1459, 1468) */
		reached[1][1459] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1468, 1466, 1468) */
		reached[1][1466] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1335: // STATE 1460 - mutant_1.pml:240 - [((START==ABORT))] (1468:0:1 - 1)
		IfNotBlocked
		reached[1][1460] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1468, 1461, 1468) */
		reached[1][1461] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1468, 1462, 1468) */
		reached[1][1462] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1468, 1466, 1468) */
		reached[1][1466] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1336: // STATE 1464 - mutant_1.pml:244 - [(1)] (1468:0:0 - 1)
		IfNotBlocked
		reached[1][1464] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1468, 1466, 1468) */
		reached[1][1466] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1337: // STATE 1468 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1468] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1338: // STATE 1470 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1470] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1339: // STATE 1473 - mutant_1.pml:252 - [(1)] (1571:0:1 - 1)
		IfNotBlocked
		reached[1][1473] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1571, 1475, 1571) */
		reached[1][1475] = 1;
		;
		/* merge: .(goto)(1571, 1565, 1571) */
		reached[1][1565] = 1;
		;
		/* merge: j = (j-1)(1571, 1567, 1571) */
		reached[1][1567] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1572, 1571) */
		reached[1][1572] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1340: // STATE 1477 - mutant_1.pml:363 - [((9==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1477] = 1;
		if (!((9==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1341: // STATE 1478 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (1503:0:1 - 1)
		IfNotBlocked
		reached[1][1478] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1503, 1479, 1503) */
		reached[1][1479] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1503, 1480, 1503) */
		reached[1][1480] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1503, 1496, 1503) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1342: // STATE 1496 - mutant_1.pml:276 - [.(goto)] (0:1503:0 - 6)
		IfNotBlocked
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1343: // STATE 1481 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (1503:0:1 - 1)
		IfNotBlocked
		reached[1][1481] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1503, 1482, 1503) */
		reached[1][1482] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1503, 1483, 1503) */
		reached[1][1483] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1503, 1496, 1503) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1344: // STATE 1484 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1503:0:1 - 1)
		IfNotBlocked
		reached[1][1484] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1503, 1485, 1503) */
		reached[1][1485] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1503, 1486, 1503) */
		reached[1][1486] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1503, 1496, 1503) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1345: // STATE 1487 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1503:0:1 - 1)
		IfNotBlocked
		reached[1][1487] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1503, 1488, 1503) */
		reached[1][1488] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1503, 1489, 1503) */
		reached[1][1489] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1503, 1496, 1503) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1346: // STATE 1490 - mutant_1.pml:270 - [((PAUSE==ABORT))] (1503:0:1 - 1)
		IfNotBlocked
		reached[1][1490] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1503, 1491, 1503) */
		reached[1][1491] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1503, 1492, 1503) */
		reached[1][1492] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1503, 1496, 1503) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1347: // STATE 1494 - mutant_1.pml:274 - [(1)] (1503:0:0 - 1)
		IfNotBlocked
		reached[1][1494] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1503, 1496, 1503) */
		reached[1][1496] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1348: // STATE 1499 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1499] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1349: // STATE 1502 - mutant_1.pml:281 - [(1)] (1571:0:1 - 1)
		IfNotBlocked
		reached[1][1502] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1571, 1504, 1571) */
		reached[1][1504] = 1;
		;
		/* merge: .(goto)(1571, 1565, 1571) */
		reached[1][1565] = 1;
		;
		/* merge: j = (j-1)(1571, 1567, 1571) */
		reached[1][1567] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1572, 1571) */
		reached[1][1572] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1350: // STATE 1506 - mutant_1.pml:365 - [((9==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1506] = 1;
		if (!((9==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1351: // STATE 1507 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (1532:0:1 - 1)
		IfNotBlocked
		reached[1][1507] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1532, 1508, 1532) */
		reached[1][1508] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1532, 1509, 1532) */
		reached[1][1509] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1532, 1525, 1532) */
		reached[1][1525] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1352: // STATE 1525 - mutant_1.pml:305 - [.(goto)] (0:1532:0 - 6)
		IfNotBlocked
		reached[1][1525] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1353: // STATE 1510 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (1532:0:1 - 1)
		IfNotBlocked
		reached[1][1510] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1532, 1511, 1532) */
		reached[1][1511] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1532, 1512, 1532) */
		reached[1][1512] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1532, 1525, 1532) */
		reached[1][1525] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1354: // STATE 1513 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1532:0:1 - 1)
		IfNotBlocked
		reached[1][1513] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1532, 1514, 1532) */
		reached[1][1514] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1532, 1515, 1532) */
		reached[1][1515] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1532, 1525, 1532) */
		reached[1][1525] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1355: // STATE 1516 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1532:0:1 - 1)
		IfNotBlocked
		reached[1][1516] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1532, 1517, 1532) */
		reached[1][1517] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1532, 1518, 1532) */
		reached[1][1518] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1532, 1525, 1532) */
		reached[1][1525] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1356: // STATE 1519 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (1532:0:1 - 1)
		IfNotBlocked
		reached[1][1519] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1532, 1520, 1532) */
		reached[1][1520] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1532, 1521, 1532) */
		reached[1][1521] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1532, 1525, 1532) */
		reached[1][1525] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1357: // STATE 1523 - mutant_1.pml:303 - [(1)] (1532:0:0 - 1)
		IfNotBlocked
		reached[1][1523] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1532, 1525, 1532) */
		reached[1][1525] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1358: // STATE 1528 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1528] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1359: // STATE 1531 - mutant_1.pml:310 - [(1)] (1571:0:1 - 1)
		IfNotBlocked
		reached[1][1531] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1571, 1533, 1571) */
		reached[1][1533] = 1;
		;
		/* merge: .(goto)(1571, 1565, 1571) */
		reached[1][1565] = 1;
		;
		/* merge: j = (j-1)(1571, 1567, 1571) */
		reached[1][1567] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1572, 1571) */
		reached[1][1572] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1360: // STATE 1535 - mutant_1.pml:367 - [(((9==STOP)||(9==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1535] = 1;
		if (!(((9==2)||(9==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1361: // STATE 1536 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (1561:0:1 - 1)
		IfNotBlocked
		reached[1][1536] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1561, 1537, 1561) */
		reached[1][1537] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1561, 1538, 1561) */
		reached[1][1538] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1561, 1554, 1561) */
		reached[1][1554] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1362: // STATE 1554 - mutant_1.pml:334 - [.(goto)] (0:1561:0 - 6)
		IfNotBlocked
		reached[1][1554] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1363: // STATE 1539 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (1561:0:1 - 1)
		IfNotBlocked
		reached[1][1539] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1561, 1540, 1561) */
		reached[1][1540] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1561, 1541, 1561) */
		reached[1][1541] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1561, 1554, 1561) */
		reached[1][1554] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1364: // STATE 1542 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1561:0:1 - 1)
		IfNotBlocked
		reached[1][1542] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1561, 1543, 1561) */
		reached[1][1543] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1561, 1544, 1561) */
		reached[1][1544] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1561, 1554, 1561) */
		reached[1][1554] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1365: // STATE 1545 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1561:0:1 - 1)
		IfNotBlocked
		reached[1][1545] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1561, 1546, 1561) */
		reached[1][1546] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1561, 1547, 1561) */
		reached[1][1547] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1561, 1554, 1561) */
		reached[1][1554] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1366: // STATE 1548 - mutant_1.pml:328 - [((STOP==ABORT))] (1561:0:1 - 1)
		IfNotBlocked
		reached[1][1548] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1561, 1549, 1561) */
		reached[1][1549] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1561, 1550, 1561) */
		reached[1][1550] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1561, 1554, 1561) */
		reached[1][1554] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1367: // STATE 1552 - mutant_1.pml:332 - [(1)] (1561:0:0 - 1)
		IfNotBlocked
		reached[1][1552] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1561, 1554, 1561) */
		reached[1][1554] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1368: // STATE 1557 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1557] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1369: // STATE 1560 - mutant_1.pml:339 - [(1)] (1571:0:1 - 1)
		IfNotBlocked
		reached[1][1560] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1571, 1562, 1571) */
		reached[1][1562] = 1;
		;
		/* merge: .(goto)(1571, 1565, 1571) */
		reached[1][1565] = 1;
		;
		/* merge: j = (j-1)(1571, 1567, 1571) */
		reached[1][1567] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1572, 1571) */
		reached[1][1572] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1370: // STATE 1567 - mutant_1.pml:386 - [j = (j-1)] (0:1571:1 - 13)
		IfNotBlocked
		reached[1][1567] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1572, 1571) */
		reached[1][1572] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1371: // STATE 1569 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1569] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1372: // STATE 1579 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1579] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1373: // STATE 1580 - mutant_1.pml:361 - [((9==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1580] = 1;
		if (!((9==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1374: // STATE 1581 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (1601:0:1 - 1)
		IfNotBlocked
		reached[1][1581] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1601, 1582, 1601) */
		reached[1][1582] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1601, 1583, 1601) */
		reached[1][1583] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1601, 1599, 1601) */
		reached[1][1599] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1375: // STATE 1599 - mutant_1.pml:246 - [.(goto)] (0:1601:0 - 6)
		IfNotBlocked
		reached[1][1599] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1376: // STATE 1584 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (1601:0:1 - 1)
		IfNotBlocked
		reached[1][1584] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1601, 1585, 1601) */
		reached[1][1585] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1601, 1586, 1601) */
		reached[1][1586] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1601, 1599, 1601) */
		reached[1][1599] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1377: // STATE 1587 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1601:0:1 - 1)
		IfNotBlocked
		reached[1][1587] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1601, 1588, 1601) */
		reached[1][1588] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1601, 1589, 1601) */
		reached[1][1589] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1601, 1599, 1601) */
		reached[1][1599] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1378: // STATE 1590 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1601:0:1 - 1)
		IfNotBlocked
		reached[1][1590] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1601, 1591, 1601) */
		reached[1][1591] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1601, 1592, 1601) */
		reached[1][1592] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1601, 1599, 1601) */
		reached[1][1599] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1379: // STATE 1593 - mutant_1.pml:240 - [((START==ABORT))] (1601:0:1 - 1)
		IfNotBlocked
		reached[1][1593] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1601, 1594, 1601) */
		reached[1][1594] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1601, 1595, 1601) */
		reached[1][1595] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1601, 1599, 1601) */
		reached[1][1599] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1380: // STATE 1597 - mutant_1.pml:244 - [(1)] (1601:0:0 - 1)
		IfNotBlocked
		reached[1][1597] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1601, 1599, 1601) */
		reached[1][1599] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1381: // STATE 1601 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1601] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1382: // STATE 1603 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1603] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1383: // STATE 1606 - mutant_1.pml:252 - [(1)] (1704:0:1 - 1)
		IfNotBlocked
		reached[1][1606] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1704, 1608, 1704) */
		reached[1][1608] = 1;
		;
		/* merge: .(goto)(1704, 1698, 1704) */
		reached[1][1698] = 1;
		;
		/* merge: j = (j+1)(1704, 1700, 1704) */
		reached[1][1700] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1705, 1704) */
		reached[1][1705] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1384: // STATE 1610 - mutant_1.pml:363 - [((9==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1610] = 1;
		if (!((9==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1385: // STATE 1611 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (1636:0:1 - 1)
		IfNotBlocked
		reached[1][1611] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1636, 1612, 1636) */
		reached[1][1612] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1636, 1613, 1636) */
		reached[1][1613] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1636, 1629, 1636) */
		reached[1][1629] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1386: // STATE 1629 - mutant_1.pml:276 - [.(goto)] (0:1636:0 - 6)
		IfNotBlocked
		reached[1][1629] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1387: // STATE 1614 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (1636:0:1 - 1)
		IfNotBlocked
		reached[1][1614] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1636, 1615, 1636) */
		reached[1][1615] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1636, 1616, 1636) */
		reached[1][1616] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1636, 1629, 1636) */
		reached[1][1629] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1388: // STATE 1617 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1636:0:1 - 1)
		IfNotBlocked
		reached[1][1617] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1636, 1618, 1636) */
		reached[1][1618] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1636, 1619, 1636) */
		reached[1][1619] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1636, 1629, 1636) */
		reached[1][1629] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1389: // STATE 1620 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1636:0:1 - 1)
		IfNotBlocked
		reached[1][1620] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1636, 1621, 1636) */
		reached[1][1621] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1636, 1622, 1636) */
		reached[1][1622] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1636, 1629, 1636) */
		reached[1][1629] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1390: // STATE 1623 - mutant_1.pml:270 - [((PAUSE==ABORT))] (1636:0:1 - 1)
		IfNotBlocked
		reached[1][1623] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1636, 1624, 1636) */
		reached[1][1624] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1636, 1625, 1636) */
		reached[1][1625] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1636, 1629, 1636) */
		reached[1][1629] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1391: // STATE 1627 - mutant_1.pml:274 - [(1)] (1636:0:0 - 1)
		IfNotBlocked
		reached[1][1627] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1636, 1629, 1636) */
		reached[1][1629] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1392: // STATE 1632 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1632] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1393: // STATE 1635 - mutant_1.pml:281 - [(1)] (1704:0:1 - 1)
		IfNotBlocked
		reached[1][1635] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1704, 1637, 1704) */
		reached[1][1637] = 1;
		;
		/* merge: .(goto)(1704, 1698, 1704) */
		reached[1][1698] = 1;
		;
		/* merge: j = (j+1)(1704, 1700, 1704) */
		reached[1][1700] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1705, 1704) */
		reached[1][1705] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1394: // STATE 1639 - mutant_1.pml:365 - [((9==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1639] = 1;
		if (!((9==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1395: // STATE 1640 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (1665:0:1 - 1)
		IfNotBlocked
		reached[1][1640] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1665, 1641, 1665) */
		reached[1][1641] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1665, 1642, 1665) */
		reached[1][1642] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1665, 1658, 1665) */
		reached[1][1658] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1396: // STATE 1658 - mutant_1.pml:305 - [.(goto)] (0:1665:0 - 6)
		IfNotBlocked
		reached[1][1658] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1397: // STATE 1643 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (1665:0:1 - 1)
		IfNotBlocked
		reached[1][1643] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1665, 1644, 1665) */
		reached[1][1644] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1665, 1645, 1665) */
		reached[1][1645] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1665, 1658, 1665) */
		reached[1][1658] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1398: // STATE 1646 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1665:0:1 - 1)
		IfNotBlocked
		reached[1][1646] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1665, 1647, 1665) */
		reached[1][1647] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1665, 1648, 1665) */
		reached[1][1648] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1665, 1658, 1665) */
		reached[1][1658] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1399: // STATE 1649 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1665:0:1 - 1)
		IfNotBlocked
		reached[1][1649] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1665, 1650, 1665) */
		reached[1][1650] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1665, 1651, 1665) */
		reached[1][1651] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1665, 1658, 1665) */
		reached[1][1658] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1400: // STATE 1652 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (1665:0:1 - 1)
		IfNotBlocked
		reached[1][1652] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1665, 1653, 1665) */
		reached[1][1653] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1665, 1654, 1665) */
		reached[1][1654] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1665, 1658, 1665) */
		reached[1][1658] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1401: // STATE 1656 - mutant_1.pml:303 - [(1)] (1665:0:0 - 1)
		IfNotBlocked
		reached[1][1656] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1665, 1658, 1665) */
		reached[1][1658] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1402: // STATE 1661 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1661] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1403: // STATE 1664 - mutant_1.pml:310 - [(1)] (1704:0:1 - 1)
		IfNotBlocked
		reached[1][1664] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1704, 1666, 1704) */
		reached[1][1666] = 1;
		;
		/* merge: .(goto)(1704, 1698, 1704) */
		reached[1][1698] = 1;
		;
		/* merge: j = (j+1)(1704, 1700, 1704) */
		reached[1][1700] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1705, 1704) */
		reached[1][1705] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1404: // STATE 1668 - mutant_1.pml:367 - [(((9==STOP)||(9==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1668] = 1;
		if (!(((9==2)||(9==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1405: // STATE 1669 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (1694:0:1 - 1)
		IfNotBlocked
		reached[1][1669] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1694, 1670, 1694) */
		reached[1][1670] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1694, 1671, 1694) */
		reached[1][1671] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1694, 1687, 1694) */
		reached[1][1687] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1406: // STATE 1687 - mutant_1.pml:334 - [.(goto)] (0:1694:0 - 6)
		IfNotBlocked
		reached[1][1687] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1407: // STATE 1672 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (1694:0:1 - 1)
		IfNotBlocked
		reached[1][1672] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1694, 1673, 1694) */
		reached[1][1673] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1694, 1674, 1694) */
		reached[1][1674] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1694, 1687, 1694) */
		reached[1][1687] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1408: // STATE 1675 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1694:0:1 - 1)
		IfNotBlocked
		reached[1][1675] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1694, 1676, 1694) */
		reached[1][1676] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1694, 1677, 1694) */
		reached[1][1677] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1694, 1687, 1694) */
		reached[1][1687] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1409: // STATE 1678 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1694:0:1 - 1)
		IfNotBlocked
		reached[1][1678] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1694, 1679, 1694) */
		reached[1][1679] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1694, 1680, 1694) */
		reached[1][1680] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1694, 1687, 1694) */
		reached[1][1687] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1410: // STATE 1681 - mutant_1.pml:328 - [((STOP==ABORT))] (1694:0:1 - 1)
		IfNotBlocked
		reached[1][1681] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1694, 1682, 1694) */
		reached[1][1682] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1694, 1683, 1694) */
		reached[1][1683] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1694, 1687, 1694) */
		reached[1][1687] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1411: // STATE 1685 - mutant_1.pml:332 - [(1)] (1694:0:0 - 1)
		IfNotBlocked
		reached[1][1685] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1694, 1687, 1694) */
		reached[1][1687] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1412: // STATE 1690 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1690] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1413: // STATE 1693 - mutant_1.pml:339 - [(1)] (1704:0:1 - 1)
		IfNotBlocked
		reached[1][1693] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1704, 1695, 1704) */
		reached[1][1695] = 1;
		;
		/* merge: .(goto)(1704, 1698, 1704) */
		reached[1][1698] = 1;
		;
		/* merge: j = (j+1)(1704, 1700, 1704) */
		reached[1][1700] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1705, 1704) */
		reached[1][1705] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1414: // STATE 1700 - mutant_1.pml:375 - [j = (j+1)] (0:1704:1 - 13)
		IfNotBlocked
		reached[1][1700] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1705, 1704) */
		reached[1][1705] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1415: // STATE 1702 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1702] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1416: // STATE 1708 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1708] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1417: // STATE 1709 - mutant_1.pml:405 - [((9==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1709] = 1;
		if (!((9==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1418: // STATE 1710 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1710] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1419: // STATE 1712 - mutant_1.pml:407 - [((9==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1712] = 1;
		if (!((9==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1420: // STATE 1713 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1713] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1421: // STATE 1715 - mutant_1.pml:409 - [((9==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1715] = 1;
		if (!((9==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1422: // STATE 1716 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1716] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1423: // STATE 1718 - mutant_1.pml:411 - [((9==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1718] = 1;
		if (!((9==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1424: // STATE 1719 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1719] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1425: // STATE 1723 - mutant_1.pml:414 - [j = (j+1)] (0:1727:1 - 5)
		IfNotBlocked
		reached[1][1723] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1728, 1727) */
		reached[1][1728] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1426: // STATE 1725 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1725] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1427: // STATE 1737 - mutant_1.pml:508 - [((commands[0]==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1737] = 1;
		if (!((now.commands[0]==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1428: // STATE 1738 - mutant_1.pml:509 - [assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1738] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==10)), "(((states[0]==12)||(states[0]==11))||(states[0]==10))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 1429: // STATE 1739 - mutant_1.pml:511 - [((states[0]==STARTING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1739] = 1;
		if (!((now.states[0]==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1430: // STATE 1740 - mutant_1.pml:458 - [states[0] = 11] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1740] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 11;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1431: // STATE 1741 - mutant_1.pml:447 - [((11==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1741] = 1;
		if (!((11==11)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1432: // STATE 1742 - mutant_1.pml:422 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1742] = 1;
		if (!(((8==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1433: // STATE 1743 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1743] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1434: // STATE 1745 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1745] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1435: // STATE 1746 - mutant_1.pml:394 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1746] = 1;
		if (!(((8==9)||(8==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1436: // STATE 1747 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1747] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1437: // STATE 1748 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1748] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1438: // STATE 1749 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (1769:0:1 - 1)
		IfNotBlocked
		reached[1][1749] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1769, 1750, 1769) */
		reached[1][1750] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1769, 1751, 1769) */
		reached[1][1751] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1769, 1767, 1769) */
		reached[1][1767] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1439: // STATE 1767 - mutant_1.pml:246 - [.(goto)] (0:1769:0 - 6)
		IfNotBlocked
		reached[1][1767] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1440: // STATE 1752 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (1769:0:1 - 1)
		IfNotBlocked
		reached[1][1752] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1769, 1753, 1769) */
		reached[1][1753] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1769, 1754, 1769) */
		reached[1][1754] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1769, 1767, 1769) */
		reached[1][1767] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1441: // STATE 1755 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1769:0:1 - 1)
		IfNotBlocked
		reached[1][1755] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1769, 1756, 1769) */
		reached[1][1756] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1769, 1757, 1769) */
		reached[1][1757] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1769, 1767, 1769) */
		reached[1][1767] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1442: // STATE 1758 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1769:0:1 - 1)
		IfNotBlocked
		reached[1][1758] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1769, 1759, 1769) */
		reached[1][1759] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1769, 1760, 1769) */
		reached[1][1760] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1769, 1767, 1769) */
		reached[1][1767] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1443: // STATE 1761 - mutant_1.pml:240 - [((START==ABORT))] (1769:0:1 - 1)
		IfNotBlocked
		reached[1][1761] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1769, 1762, 1769) */
		reached[1][1762] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1769, 1763, 1769) */
		reached[1][1763] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1769, 1767, 1769) */
		reached[1][1767] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1444: // STATE 1765 - mutant_1.pml:244 - [(1)] (1769:0:0 - 1)
		IfNotBlocked
		reached[1][1765] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1769, 1767, 1769) */
		reached[1][1767] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1445: // STATE 1769 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1769] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1446: // STATE 1771 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1771] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1447: // STATE 1774 - mutant_1.pml:252 - [(1)] (1872:0:1 - 1)
		IfNotBlocked
		reached[1][1774] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1872, 1776, 1872) */
		reached[1][1776] = 1;
		;
		/* merge: .(goto)(1872, 1866, 1872) */
		reached[1][1866] = 1;
		;
		/* merge: j = (j+1)(1872, 1868, 1872) */
		reached[1][1868] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1873, 1872) */
		reached[1][1873] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1448: // STATE 1778 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1778] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1449: // STATE 1779 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (1804:0:1 - 1)
		IfNotBlocked
		reached[1][1779] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1804, 1780, 1804) */
		reached[1][1780] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1804, 1781, 1804) */
		reached[1][1781] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1804, 1797, 1804) */
		reached[1][1797] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1450: // STATE 1797 - mutant_1.pml:276 - [.(goto)] (0:1804:0 - 6)
		IfNotBlocked
		reached[1][1797] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1451: // STATE 1782 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (1804:0:1 - 1)
		IfNotBlocked
		reached[1][1782] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1804, 1783, 1804) */
		reached[1][1783] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1804, 1784, 1804) */
		reached[1][1784] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1804, 1797, 1804) */
		reached[1][1797] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1452: // STATE 1785 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1804:0:1 - 1)
		IfNotBlocked
		reached[1][1785] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1804, 1786, 1804) */
		reached[1][1786] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1804, 1787, 1804) */
		reached[1][1787] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1804, 1797, 1804) */
		reached[1][1797] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1453: // STATE 1788 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1804:0:1 - 1)
		IfNotBlocked
		reached[1][1788] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1804, 1789, 1804) */
		reached[1][1789] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1804, 1790, 1804) */
		reached[1][1790] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1804, 1797, 1804) */
		reached[1][1797] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1454: // STATE 1791 - mutant_1.pml:270 - [((PAUSE==ABORT))] (1804:0:1 - 1)
		IfNotBlocked
		reached[1][1791] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1804, 1792, 1804) */
		reached[1][1792] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1804, 1793, 1804) */
		reached[1][1793] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1804, 1797, 1804) */
		reached[1][1797] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1455: // STATE 1795 - mutant_1.pml:274 - [(1)] (1804:0:0 - 1)
		IfNotBlocked
		reached[1][1795] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1804, 1797, 1804) */
		reached[1][1797] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1456: // STATE 1800 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1800] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1457: // STATE 1803 - mutant_1.pml:281 - [(1)] (1872:0:1 - 1)
		IfNotBlocked
		reached[1][1803] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1872, 1805, 1872) */
		reached[1][1805] = 1;
		;
		/* merge: .(goto)(1872, 1866, 1872) */
		reached[1][1866] = 1;
		;
		/* merge: j = (j+1)(1872, 1868, 1872) */
		reached[1][1868] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1873, 1872) */
		reached[1][1873] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1458: // STATE 1807 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1807] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1459: // STATE 1808 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (1833:0:1 - 1)
		IfNotBlocked
		reached[1][1808] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1833, 1809, 1833) */
		reached[1][1809] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1833, 1810, 1833) */
		reached[1][1810] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1833, 1826, 1833) */
		reached[1][1826] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1460: // STATE 1826 - mutant_1.pml:305 - [.(goto)] (0:1833:0 - 6)
		IfNotBlocked
		reached[1][1826] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1461: // STATE 1811 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (1833:0:1 - 1)
		IfNotBlocked
		reached[1][1811] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1833, 1812, 1833) */
		reached[1][1812] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1833, 1813, 1833) */
		reached[1][1813] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1833, 1826, 1833) */
		reached[1][1826] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1462: // STATE 1814 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1833:0:1 - 1)
		IfNotBlocked
		reached[1][1814] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1833, 1815, 1833) */
		reached[1][1815] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1833, 1816, 1833) */
		reached[1][1816] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1833, 1826, 1833) */
		reached[1][1826] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1463: // STATE 1817 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1833:0:1 - 1)
		IfNotBlocked
		reached[1][1817] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1833, 1818, 1833) */
		reached[1][1818] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1833, 1819, 1833) */
		reached[1][1819] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1833, 1826, 1833) */
		reached[1][1826] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1464: // STATE 1820 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (1833:0:1 - 1)
		IfNotBlocked
		reached[1][1820] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1833, 1821, 1833) */
		reached[1][1821] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1833, 1822, 1833) */
		reached[1][1822] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1833, 1826, 1833) */
		reached[1][1826] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1465: // STATE 1824 - mutant_1.pml:303 - [(1)] (1833:0:0 - 1)
		IfNotBlocked
		reached[1][1824] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1833, 1826, 1833) */
		reached[1][1826] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1466: // STATE 1829 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1829] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1467: // STATE 1832 - mutant_1.pml:310 - [(1)] (1872:0:1 - 1)
		IfNotBlocked
		reached[1][1832] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1872, 1834, 1872) */
		reached[1][1834] = 1;
		;
		/* merge: .(goto)(1872, 1866, 1872) */
		reached[1][1866] = 1;
		;
		/* merge: j = (j+1)(1872, 1868, 1872) */
		reached[1][1868] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1873, 1872) */
		reached[1][1873] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1468: // STATE 1836 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1836] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1469: // STATE 1837 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (1862:0:1 - 1)
		IfNotBlocked
		reached[1][1837] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1862, 1838, 1862) */
		reached[1][1838] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1862, 1839, 1862) */
		reached[1][1839] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1862, 1855, 1862) */
		reached[1][1855] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1470: // STATE 1855 - mutant_1.pml:334 - [.(goto)] (0:1862:0 - 6)
		IfNotBlocked
		reached[1][1855] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1471: // STATE 1840 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (1862:0:1 - 1)
		IfNotBlocked
		reached[1][1840] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1862, 1841, 1862) */
		reached[1][1841] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1862, 1842, 1862) */
		reached[1][1842] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1862, 1855, 1862) */
		reached[1][1855] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1472: // STATE 1843 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1862:0:1 - 1)
		IfNotBlocked
		reached[1][1843] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1862, 1844, 1862) */
		reached[1][1844] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1862, 1845, 1862) */
		reached[1][1845] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1862, 1855, 1862) */
		reached[1][1855] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1473: // STATE 1846 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1862:0:1 - 1)
		IfNotBlocked
		reached[1][1846] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1862, 1847, 1862) */
		reached[1][1847] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1862, 1848, 1862) */
		reached[1][1848] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1862, 1855, 1862) */
		reached[1][1855] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1474: // STATE 1849 - mutant_1.pml:328 - [((STOP==ABORT))] (1862:0:1 - 1)
		IfNotBlocked
		reached[1][1849] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1862, 1850, 1862) */
		reached[1][1850] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1862, 1851, 1862) */
		reached[1][1851] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1862, 1855, 1862) */
		reached[1][1855] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1475: // STATE 1853 - mutant_1.pml:332 - [(1)] (1862:0:0 - 1)
		IfNotBlocked
		reached[1][1853] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1862, 1855, 1862) */
		reached[1][1855] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1476: // STATE 1858 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1858] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1477: // STATE 1861 - mutant_1.pml:339 - [(1)] (1872:0:1 - 1)
		IfNotBlocked
		reached[1][1861] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1872, 1863, 1872) */
		reached[1][1863] = 1;
		;
		/* merge: .(goto)(1872, 1866, 1872) */
		reached[1][1866] = 1;
		;
		/* merge: j = (j+1)(1872, 1868, 1872) */
		reached[1][1868] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1873, 1872) */
		reached[1][1873] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1478: // STATE 1868 - mutant_1.pml:375 - [j = (j+1)] (0:1872:1 - 13)
		IfNotBlocked
		reached[1][1868] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 1873, 1872) */
		reached[1][1873] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1479: // STATE 1870 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1870] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1480: // STATE 1877 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][1877] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1481: // STATE 1878 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1878] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1482: // STATE 1879 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1879] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1483: // STATE 1880 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (1900:0:1 - 1)
		IfNotBlocked
		reached[1][1880] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1900, 1881, 1900) */
		reached[1][1881] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1900, 1882, 1900) */
		reached[1][1882] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1900, 1898, 1900) */
		reached[1][1898] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1484: // STATE 1898 - mutant_1.pml:246 - [.(goto)] (0:1900:0 - 6)
		IfNotBlocked
		reached[1][1898] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1485: // STATE 1883 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (1900:0:1 - 1)
		IfNotBlocked
		reached[1][1883] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1900, 1884, 1900) */
		reached[1][1884] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1900, 1885, 1900) */
		reached[1][1885] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1900, 1898, 1900) */
		reached[1][1898] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1486: // STATE 1886 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1900:0:1 - 1)
		IfNotBlocked
		reached[1][1886] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1900, 1887, 1900) */
		reached[1][1887] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1900, 1888, 1900) */
		reached[1][1888] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1900, 1898, 1900) */
		reached[1][1898] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1487: // STATE 1889 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1900:0:1 - 1)
		IfNotBlocked
		reached[1][1889] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1900, 1890, 1900) */
		reached[1][1890] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1900, 1891, 1900) */
		reached[1][1891] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1900, 1898, 1900) */
		reached[1][1898] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1488: // STATE 1892 - mutant_1.pml:240 - [((START==ABORT))] (1900:0:1 - 1)
		IfNotBlocked
		reached[1][1892] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1900, 1893, 1900) */
		reached[1][1893] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1900, 1894, 1900) */
		reached[1][1894] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1900, 1898, 1900) */
		reached[1][1898] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1489: // STATE 1896 - mutant_1.pml:244 - [(1)] (1900:0:0 - 1)
		IfNotBlocked
		reached[1][1896] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1900, 1898, 1900) */
		reached[1][1898] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1490: // STATE 1900 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1900] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1491: // STATE 1902 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1902] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1492: // STATE 1905 - mutant_1.pml:252 - [(1)] (2003:0:1 - 1)
		IfNotBlocked
		reached[1][1905] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2003, 1907, 2003) */
		reached[1][1907] = 1;
		;
		/* merge: .(goto)(2003, 1997, 2003) */
		reached[1][1997] = 1;
		;
		/* merge: j = (j-1)(2003, 1999, 2003) */
		reached[1][1999] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2004, 2003) */
		reached[1][2004] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1493: // STATE 1909 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1909] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1494: // STATE 1910 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (1935:0:1 - 1)
		IfNotBlocked
		reached[1][1910] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1935, 1911, 1935) */
		reached[1][1911] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1935, 1912, 1935) */
		reached[1][1912] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1935, 1928, 1935) */
		reached[1][1928] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1495: // STATE 1928 - mutant_1.pml:276 - [.(goto)] (0:1935:0 - 6)
		IfNotBlocked
		reached[1][1928] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1496: // STATE 1913 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (1935:0:1 - 1)
		IfNotBlocked
		reached[1][1913] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1935, 1914, 1935) */
		reached[1][1914] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1935, 1915, 1935) */
		reached[1][1915] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1935, 1928, 1935) */
		reached[1][1928] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1497: // STATE 1916 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1935:0:1 - 1)
		IfNotBlocked
		reached[1][1916] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1935, 1917, 1935) */
		reached[1][1917] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1935, 1918, 1935) */
		reached[1][1918] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1935, 1928, 1935) */
		reached[1][1928] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1498: // STATE 1919 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1935:0:1 - 1)
		IfNotBlocked
		reached[1][1919] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1935, 1920, 1935) */
		reached[1][1920] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1935, 1921, 1935) */
		reached[1][1921] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1935, 1928, 1935) */
		reached[1][1928] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1499: // STATE 1922 - mutant_1.pml:270 - [((PAUSE==ABORT))] (1935:0:1 - 1)
		IfNotBlocked
		reached[1][1922] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1935, 1923, 1935) */
		reached[1][1923] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1935, 1924, 1935) */
		reached[1][1924] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1935, 1928, 1935) */
		reached[1][1928] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1500: // STATE 1926 - mutant_1.pml:274 - [(1)] (1935:0:0 - 1)
		IfNotBlocked
		reached[1][1926] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1935, 1928, 1935) */
		reached[1][1928] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1501: // STATE 1931 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1931] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1502: // STATE 1934 - mutant_1.pml:281 - [(1)] (2003:0:1 - 1)
		IfNotBlocked
		reached[1][1934] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2003, 1936, 2003) */
		reached[1][1936] = 1;
		;
		/* merge: .(goto)(2003, 1997, 2003) */
		reached[1][1997] = 1;
		;
		/* merge: j = (j-1)(2003, 1999, 2003) */
		reached[1][1999] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2004, 2003) */
		reached[1][2004] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1503: // STATE 1938 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1938] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1504: // STATE 1939 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (1964:0:1 - 1)
		IfNotBlocked
		reached[1][1939] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1964, 1940, 1964) */
		reached[1][1940] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1964, 1941, 1964) */
		reached[1][1941] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1964, 1957, 1964) */
		reached[1][1957] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1505: // STATE 1957 - mutant_1.pml:305 - [.(goto)] (0:1964:0 - 6)
		IfNotBlocked
		reached[1][1957] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1506: // STATE 1942 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (1964:0:1 - 1)
		IfNotBlocked
		reached[1][1942] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1964, 1943, 1964) */
		reached[1][1943] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1964, 1944, 1964) */
		reached[1][1944] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1964, 1957, 1964) */
		reached[1][1957] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1507: // STATE 1945 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1964:0:1 - 1)
		IfNotBlocked
		reached[1][1945] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1964, 1946, 1964) */
		reached[1][1946] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1964, 1947, 1964) */
		reached[1][1947] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1964, 1957, 1964) */
		reached[1][1957] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1508: // STATE 1948 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1964:0:1 - 1)
		IfNotBlocked
		reached[1][1948] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1964, 1949, 1964) */
		reached[1][1949] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1964, 1950, 1964) */
		reached[1][1950] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1964, 1957, 1964) */
		reached[1][1957] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1509: // STATE 1951 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (1964:0:1 - 1)
		IfNotBlocked
		reached[1][1951] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1964, 1952, 1964) */
		reached[1][1952] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1964, 1953, 1964) */
		reached[1][1953] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1964, 1957, 1964) */
		reached[1][1957] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1510: // STATE 1955 - mutant_1.pml:303 - [(1)] (1964:0:0 - 1)
		IfNotBlocked
		reached[1][1955] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1964, 1957, 1964) */
		reached[1][1957] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1511: // STATE 1960 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1960] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1512: // STATE 1963 - mutant_1.pml:310 - [(1)] (2003:0:1 - 1)
		IfNotBlocked
		reached[1][1963] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2003, 1965, 2003) */
		reached[1][1965] = 1;
		;
		/* merge: .(goto)(2003, 1997, 2003) */
		reached[1][1997] = 1;
		;
		/* merge: j = (j-1)(2003, 1999, 2003) */
		reached[1][1999] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2004, 2003) */
		reached[1][2004] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1513: // STATE 1967 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1967] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1514: // STATE 1968 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (1993:0:1 - 1)
		IfNotBlocked
		reached[1][1968] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(1993, 1969, 1993) */
		reached[1][1969] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(1993, 1970, 1993) */
		reached[1][1970] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1993, 1986, 1993) */
		reached[1][1986] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1515: // STATE 1986 - mutant_1.pml:334 - [.(goto)] (0:1993:0 - 6)
		IfNotBlocked
		reached[1][1986] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1516: // STATE 1971 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (1993:0:1 - 1)
		IfNotBlocked
		reached[1][1971] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(1993, 1972, 1993) */
		reached[1][1972] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(1993, 1973, 1993) */
		reached[1][1973] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1993, 1986, 1993) */
		reached[1][1986] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1517: // STATE 1974 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (1993:0:1 - 1)
		IfNotBlocked
		reached[1][1974] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(1993, 1975, 1993) */
		reached[1][1975] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(1993, 1976, 1993) */
		reached[1][1976] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1993, 1986, 1993) */
		reached[1][1986] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1518: // STATE 1977 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (1993:0:1 - 1)
		IfNotBlocked
		reached[1][1977] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(1993, 1978, 1993) */
		reached[1][1978] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(1993, 1979, 1993) */
		reached[1][1979] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1993, 1986, 1993) */
		reached[1][1986] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1519: // STATE 1980 - mutant_1.pml:328 - [((STOP==ABORT))] (1993:0:1 - 1)
		IfNotBlocked
		reached[1][1980] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(1993, 1981, 1993) */
		reached[1][1981] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(1993, 1982, 1993) */
		reached[1][1982] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(1993, 1986, 1993) */
		reached[1][1986] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1520: // STATE 1984 - mutant_1.pml:332 - [(1)] (1993:0:0 - 1)
		IfNotBlocked
		reached[1][1984] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(1993, 1986, 1993) */
		reached[1][1986] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1521: // STATE 1989 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][1989] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1522: // STATE 1992 - mutant_1.pml:339 - [(1)] (2003:0:1 - 1)
		IfNotBlocked
		reached[1][1992] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2003, 1994, 2003) */
		reached[1][1994] = 1;
		;
		/* merge: .(goto)(2003, 1997, 2003) */
		reached[1][1997] = 1;
		;
		/* merge: j = (j-1)(2003, 1999, 2003) */
		reached[1][1999] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2004, 2003) */
		reached[1][2004] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1523: // STATE 1999 - mutant_1.pml:386 - [j = (j-1)] (0:2003:1 - 13)
		IfNotBlocked
		reached[1][1999] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2004, 2003) */
		reached[1][2004] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1524: // STATE 2001 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2001] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1525: // STATE 2011 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2011] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1526: // STATE 2012 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2012] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1527: // STATE 2013 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (2033:0:1 - 1)
		IfNotBlocked
		reached[1][2013] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2033, 2014, 2033) */
		reached[1][2014] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2033, 2015, 2033) */
		reached[1][2015] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2033, 2031, 2033) */
		reached[1][2031] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1528: // STATE 2031 - mutant_1.pml:246 - [.(goto)] (0:2033:0 - 6)
		IfNotBlocked
		reached[1][2031] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1529: // STATE 2016 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (2033:0:1 - 1)
		IfNotBlocked
		reached[1][2016] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2033, 2017, 2033) */
		reached[1][2017] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2033, 2018, 2033) */
		reached[1][2018] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2033, 2031, 2033) */
		reached[1][2031] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1530: // STATE 2019 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2033:0:1 - 1)
		IfNotBlocked
		reached[1][2019] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2033, 2020, 2033) */
		reached[1][2020] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2033, 2021, 2033) */
		reached[1][2021] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2033, 2031, 2033) */
		reached[1][2031] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1531: // STATE 2022 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2033:0:1 - 1)
		IfNotBlocked
		reached[1][2022] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2033, 2023, 2033) */
		reached[1][2023] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2033, 2024, 2033) */
		reached[1][2024] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2033, 2031, 2033) */
		reached[1][2031] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1532: // STATE 2025 - mutant_1.pml:240 - [((START==ABORT))] (2033:0:1 - 1)
		IfNotBlocked
		reached[1][2025] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2033, 2026, 2033) */
		reached[1][2026] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2033, 2027, 2033) */
		reached[1][2027] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2033, 2031, 2033) */
		reached[1][2031] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1533: // STATE 2029 - mutant_1.pml:244 - [(1)] (2033:0:0 - 1)
		IfNotBlocked
		reached[1][2029] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2033, 2031, 2033) */
		reached[1][2031] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1534: // STATE 2033 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2033] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1535: // STATE 2035 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2035] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1536: // STATE 2038 - mutant_1.pml:252 - [(1)] (2136:0:1 - 1)
		IfNotBlocked
		reached[1][2038] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2136, 2040, 2136) */
		reached[1][2040] = 1;
		;
		/* merge: .(goto)(2136, 2130, 2136) */
		reached[1][2130] = 1;
		;
		/* merge: j = (j+1)(2136, 2132, 2136) */
		reached[1][2132] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2137, 2136) */
		reached[1][2137] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1537: // STATE 2042 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2042] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1538: // STATE 2043 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (2068:0:1 - 1)
		IfNotBlocked
		reached[1][2043] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2068, 2044, 2068) */
		reached[1][2044] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2068, 2045, 2068) */
		reached[1][2045] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2068, 2061, 2068) */
		reached[1][2061] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1539: // STATE 2061 - mutant_1.pml:276 - [.(goto)] (0:2068:0 - 6)
		IfNotBlocked
		reached[1][2061] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1540: // STATE 2046 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (2068:0:1 - 1)
		IfNotBlocked
		reached[1][2046] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2068, 2047, 2068) */
		reached[1][2047] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2068, 2048, 2068) */
		reached[1][2048] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2068, 2061, 2068) */
		reached[1][2061] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1541: // STATE 2049 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2068:0:1 - 1)
		IfNotBlocked
		reached[1][2049] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2068, 2050, 2068) */
		reached[1][2050] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2068, 2051, 2068) */
		reached[1][2051] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2068, 2061, 2068) */
		reached[1][2061] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1542: // STATE 2052 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2068:0:1 - 1)
		IfNotBlocked
		reached[1][2052] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2068, 2053, 2068) */
		reached[1][2053] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2068, 2054, 2068) */
		reached[1][2054] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2068, 2061, 2068) */
		reached[1][2061] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1543: // STATE 2055 - mutant_1.pml:270 - [((PAUSE==ABORT))] (2068:0:1 - 1)
		IfNotBlocked
		reached[1][2055] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2068, 2056, 2068) */
		reached[1][2056] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2068, 2057, 2068) */
		reached[1][2057] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2068, 2061, 2068) */
		reached[1][2061] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1544: // STATE 2059 - mutant_1.pml:274 - [(1)] (2068:0:0 - 1)
		IfNotBlocked
		reached[1][2059] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2068, 2061, 2068) */
		reached[1][2061] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1545: // STATE 2064 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2064] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1546: // STATE 2067 - mutant_1.pml:281 - [(1)] (2136:0:1 - 1)
		IfNotBlocked
		reached[1][2067] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2136, 2069, 2136) */
		reached[1][2069] = 1;
		;
		/* merge: .(goto)(2136, 2130, 2136) */
		reached[1][2130] = 1;
		;
		/* merge: j = (j+1)(2136, 2132, 2136) */
		reached[1][2132] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2137, 2136) */
		reached[1][2137] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1547: // STATE 2071 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2071] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1548: // STATE 2072 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (2097:0:1 - 1)
		IfNotBlocked
		reached[1][2072] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2097, 2073, 2097) */
		reached[1][2073] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2097, 2074, 2097) */
		reached[1][2074] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2097, 2090, 2097) */
		reached[1][2090] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1549: // STATE 2090 - mutant_1.pml:305 - [.(goto)] (0:2097:0 - 6)
		IfNotBlocked
		reached[1][2090] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1550: // STATE 2075 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (2097:0:1 - 1)
		IfNotBlocked
		reached[1][2075] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2097, 2076, 2097) */
		reached[1][2076] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2097, 2077, 2097) */
		reached[1][2077] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2097, 2090, 2097) */
		reached[1][2090] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1551: // STATE 2078 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2097:0:1 - 1)
		IfNotBlocked
		reached[1][2078] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2097, 2079, 2097) */
		reached[1][2079] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2097, 2080, 2097) */
		reached[1][2080] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2097, 2090, 2097) */
		reached[1][2090] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1552: // STATE 2081 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2097:0:1 - 1)
		IfNotBlocked
		reached[1][2081] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2097, 2082, 2097) */
		reached[1][2082] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2097, 2083, 2097) */
		reached[1][2083] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2097, 2090, 2097) */
		reached[1][2090] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1553: // STATE 2084 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (2097:0:1 - 1)
		IfNotBlocked
		reached[1][2084] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2097, 2085, 2097) */
		reached[1][2085] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2097, 2086, 2097) */
		reached[1][2086] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2097, 2090, 2097) */
		reached[1][2090] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1554: // STATE 2088 - mutant_1.pml:303 - [(1)] (2097:0:0 - 1)
		IfNotBlocked
		reached[1][2088] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2097, 2090, 2097) */
		reached[1][2090] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1555: // STATE 2093 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2093] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1556: // STATE 2096 - mutant_1.pml:310 - [(1)] (2136:0:1 - 1)
		IfNotBlocked
		reached[1][2096] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2136, 2098, 2136) */
		reached[1][2098] = 1;
		;
		/* merge: .(goto)(2136, 2130, 2136) */
		reached[1][2130] = 1;
		;
		/* merge: j = (j+1)(2136, 2132, 2136) */
		reached[1][2132] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2137, 2136) */
		reached[1][2137] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1557: // STATE 2100 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2100] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1558: // STATE 2101 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (2126:0:1 - 1)
		IfNotBlocked
		reached[1][2101] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2126, 2102, 2126) */
		reached[1][2102] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2126, 2103, 2126) */
		reached[1][2103] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2126, 2119, 2126) */
		reached[1][2119] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1559: // STATE 2119 - mutant_1.pml:334 - [.(goto)] (0:2126:0 - 6)
		IfNotBlocked
		reached[1][2119] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1560: // STATE 2104 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (2126:0:1 - 1)
		IfNotBlocked
		reached[1][2104] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2126, 2105, 2126) */
		reached[1][2105] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2126, 2106, 2126) */
		reached[1][2106] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2126, 2119, 2126) */
		reached[1][2119] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1561: // STATE 2107 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2126:0:1 - 1)
		IfNotBlocked
		reached[1][2107] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2126, 2108, 2126) */
		reached[1][2108] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2126, 2109, 2126) */
		reached[1][2109] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2126, 2119, 2126) */
		reached[1][2119] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1562: // STATE 2110 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2126:0:1 - 1)
		IfNotBlocked
		reached[1][2110] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2126, 2111, 2126) */
		reached[1][2111] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2126, 2112, 2126) */
		reached[1][2112] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2126, 2119, 2126) */
		reached[1][2119] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1563: // STATE 2113 - mutant_1.pml:328 - [((STOP==ABORT))] (2126:0:1 - 1)
		IfNotBlocked
		reached[1][2113] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2126, 2114, 2126) */
		reached[1][2114] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2126, 2115, 2126) */
		reached[1][2115] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2126, 2119, 2126) */
		reached[1][2119] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1564: // STATE 2117 - mutant_1.pml:332 - [(1)] (2126:0:0 - 1)
		IfNotBlocked
		reached[1][2117] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2126, 2119, 2126) */
		reached[1][2119] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1565: // STATE 2122 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2122] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1566: // STATE 2125 - mutant_1.pml:339 - [(1)] (2136:0:1 - 1)
		IfNotBlocked
		reached[1][2125] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2136, 2127, 2136) */
		reached[1][2127] = 1;
		;
		/* merge: .(goto)(2136, 2130, 2136) */
		reached[1][2130] = 1;
		;
		/* merge: j = (j+1)(2136, 2132, 2136) */
		reached[1][2132] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2137, 2136) */
		reached[1][2137] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1567: // STATE 2132 - mutant_1.pml:375 - [j = (j+1)] (0:2136:1 - 13)
		IfNotBlocked
		reached[1][2132] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2137, 2136) */
		reached[1][2137] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1568: // STATE 2134 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2134] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1569: // STATE 2140 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2140] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1570: // STATE 2141 - mutant_1.pml:405 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2141] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1571: // STATE 2142 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2142] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1572: // STATE 2144 - mutant_1.pml:407 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2144] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1573: // STATE 2145 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2145] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1574: // STATE 2147 - mutant_1.pml:409 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2147] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1575: // STATE 2148 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2148] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1576: // STATE 2150 - mutant_1.pml:411 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2150] = 1;
		if (!((8==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1577: // STATE 2151 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2151] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1578: // STATE 2155 - mutant_1.pml:414 - [j = (j+1)] (0:2159:1 - 5)
		IfNotBlocked
		reached[1][2155] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2160, 2159) */
		reached[1][2160] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1579: // STATE 2157 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2157] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1580: // STATE 2168 - mutant_1.pml:449 - [((11==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2168] = 1;
		if (!((11==10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1581: // STATE 2169 - mutant_1.pml:422 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2169] = 1;
		if (!(((6==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1582: // STATE 2170 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2170] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1583: // STATE 2172 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2172] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1584: // STATE 2173 - mutant_1.pml:394 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2173] = 1;
		if (!(((6==9)||(6==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1585: // STATE 2174 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2174] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1586: // STATE 2175 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2175] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1587: // STATE 2176 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (2196:0:1 - 1)
		IfNotBlocked
		reached[1][2176] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2196, 2177, 2196) */
		reached[1][2177] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2196, 2178, 2196) */
		reached[1][2178] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2196, 2194, 2196) */
		reached[1][2194] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1588: // STATE 2194 - mutant_1.pml:246 - [.(goto)] (0:2196:0 - 6)
		IfNotBlocked
		reached[1][2194] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1589: // STATE 2179 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (2196:0:1 - 1)
		IfNotBlocked
		reached[1][2179] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2196, 2180, 2196) */
		reached[1][2180] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2196, 2181, 2196) */
		reached[1][2181] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2196, 2194, 2196) */
		reached[1][2194] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1590: // STATE 2182 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2196:0:1 - 1)
		IfNotBlocked
		reached[1][2182] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2196, 2183, 2196) */
		reached[1][2183] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2196, 2184, 2196) */
		reached[1][2184] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2196, 2194, 2196) */
		reached[1][2194] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1591: // STATE 2185 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2196:0:1 - 1)
		IfNotBlocked
		reached[1][2185] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2196, 2186, 2196) */
		reached[1][2186] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2196, 2187, 2196) */
		reached[1][2187] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2196, 2194, 2196) */
		reached[1][2194] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1592: // STATE 2188 - mutant_1.pml:240 - [((START==ABORT))] (2196:0:1 - 1)
		IfNotBlocked
		reached[1][2188] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2196, 2189, 2196) */
		reached[1][2189] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2196, 2190, 2196) */
		reached[1][2190] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2196, 2194, 2196) */
		reached[1][2194] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1593: // STATE 2192 - mutant_1.pml:244 - [(1)] (2196:0:0 - 1)
		IfNotBlocked
		reached[1][2192] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2196, 2194, 2196) */
		reached[1][2194] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1594: // STATE 2196 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2196] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1595: // STATE 2198 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2198] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1596: // STATE 2201 - mutant_1.pml:252 - [(1)] (2299:0:1 - 1)
		IfNotBlocked
		reached[1][2201] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2299, 2203, 2299) */
		reached[1][2203] = 1;
		;
		/* merge: .(goto)(2299, 2293, 2299) */
		reached[1][2293] = 1;
		;
		/* merge: j = (j+1)(2299, 2295, 2299) */
		reached[1][2295] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2300, 2299) */
		reached[1][2300] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1597: // STATE 2205 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2205] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1598: // STATE 2206 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (2231:0:1 - 1)
		IfNotBlocked
		reached[1][2206] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2231, 2207, 2231) */
		reached[1][2207] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2231, 2208, 2231) */
		reached[1][2208] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2231, 2224, 2231) */
		reached[1][2224] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1599: // STATE 2224 - mutant_1.pml:276 - [.(goto)] (0:2231:0 - 6)
		IfNotBlocked
		reached[1][2224] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1600: // STATE 2209 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (2231:0:1 - 1)
		IfNotBlocked
		reached[1][2209] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2231, 2210, 2231) */
		reached[1][2210] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2231, 2211, 2231) */
		reached[1][2211] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2231, 2224, 2231) */
		reached[1][2224] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1601: // STATE 2212 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2231:0:1 - 1)
		IfNotBlocked
		reached[1][2212] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2231, 2213, 2231) */
		reached[1][2213] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2231, 2214, 2231) */
		reached[1][2214] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2231, 2224, 2231) */
		reached[1][2224] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1602: // STATE 2215 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2231:0:1 - 1)
		IfNotBlocked
		reached[1][2215] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2231, 2216, 2231) */
		reached[1][2216] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2231, 2217, 2231) */
		reached[1][2217] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2231, 2224, 2231) */
		reached[1][2224] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1603: // STATE 2218 - mutant_1.pml:270 - [((PAUSE==ABORT))] (2231:0:1 - 1)
		IfNotBlocked
		reached[1][2218] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2231, 2219, 2231) */
		reached[1][2219] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2231, 2220, 2231) */
		reached[1][2220] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2231, 2224, 2231) */
		reached[1][2224] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1604: // STATE 2222 - mutant_1.pml:274 - [(1)] (2231:0:0 - 1)
		IfNotBlocked
		reached[1][2222] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2231, 2224, 2231) */
		reached[1][2224] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1605: // STATE 2227 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2227] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1606: // STATE 2230 - mutant_1.pml:281 - [(1)] (2299:0:1 - 1)
		IfNotBlocked
		reached[1][2230] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2299, 2232, 2299) */
		reached[1][2232] = 1;
		;
		/* merge: .(goto)(2299, 2293, 2299) */
		reached[1][2293] = 1;
		;
		/* merge: j = (j+1)(2299, 2295, 2299) */
		reached[1][2295] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2300, 2299) */
		reached[1][2300] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1607: // STATE 2234 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2234] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1608: // STATE 2235 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (2260:0:1 - 1)
		IfNotBlocked
		reached[1][2235] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2260, 2236, 2260) */
		reached[1][2236] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2260, 2237, 2260) */
		reached[1][2237] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2260, 2253, 2260) */
		reached[1][2253] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1609: // STATE 2253 - mutant_1.pml:305 - [.(goto)] (0:2260:0 - 6)
		IfNotBlocked
		reached[1][2253] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1610: // STATE 2238 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (2260:0:1 - 1)
		IfNotBlocked
		reached[1][2238] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2260, 2239, 2260) */
		reached[1][2239] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2260, 2240, 2260) */
		reached[1][2240] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2260, 2253, 2260) */
		reached[1][2253] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1611: // STATE 2241 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2260:0:1 - 1)
		IfNotBlocked
		reached[1][2241] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2260, 2242, 2260) */
		reached[1][2242] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2260, 2243, 2260) */
		reached[1][2243] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2260, 2253, 2260) */
		reached[1][2253] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1612: // STATE 2244 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2260:0:1 - 1)
		IfNotBlocked
		reached[1][2244] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2260, 2245, 2260) */
		reached[1][2245] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2260, 2246, 2260) */
		reached[1][2246] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2260, 2253, 2260) */
		reached[1][2253] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1613: // STATE 2247 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (2260:0:1 - 1)
		IfNotBlocked
		reached[1][2247] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2260, 2248, 2260) */
		reached[1][2248] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2260, 2249, 2260) */
		reached[1][2249] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2260, 2253, 2260) */
		reached[1][2253] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1614: // STATE 2251 - mutant_1.pml:303 - [(1)] (2260:0:0 - 1)
		IfNotBlocked
		reached[1][2251] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2260, 2253, 2260) */
		reached[1][2253] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1615: // STATE 2256 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2256] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1616: // STATE 2259 - mutant_1.pml:310 - [(1)] (2299:0:1 - 1)
		IfNotBlocked
		reached[1][2259] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2299, 2261, 2299) */
		reached[1][2261] = 1;
		;
		/* merge: .(goto)(2299, 2293, 2299) */
		reached[1][2293] = 1;
		;
		/* merge: j = (j+1)(2299, 2295, 2299) */
		reached[1][2295] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2300, 2299) */
		reached[1][2300] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1617: // STATE 2263 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2263] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1618: // STATE 2264 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (2289:0:1 - 1)
		IfNotBlocked
		reached[1][2264] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2289, 2265, 2289) */
		reached[1][2265] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2289, 2266, 2289) */
		reached[1][2266] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2289, 2282, 2289) */
		reached[1][2282] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1619: // STATE 2282 - mutant_1.pml:334 - [.(goto)] (0:2289:0 - 6)
		IfNotBlocked
		reached[1][2282] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1620: // STATE 2267 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (2289:0:1 - 1)
		IfNotBlocked
		reached[1][2267] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2289, 2268, 2289) */
		reached[1][2268] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2289, 2269, 2289) */
		reached[1][2269] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2289, 2282, 2289) */
		reached[1][2282] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1621: // STATE 2270 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2289:0:1 - 1)
		IfNotBlocked
		reached[1][2270] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2289, 2271, 2289) */
		reached[1][2271] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2289, 2272, 2289) */
		reached[1][2272] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2289, 2282, 2289) */
		reached[1][2282] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1622: // STATE 2273 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2289:0:1 - 1)
		IfNotBlocked
		reached[1][2273] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2289, 2274, 2289) */
		reached[1][2274] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2289, 2275, 2289) */
		reached[1][2275] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2289, 2282, 2289) */
		reached[1][2282] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1623: // STATE 2276 - mutant_1.pml:328 - [((STOP==ABORT))] (2289:0:1 - 1)
		IfNotBlocked
		reached[1][2276] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2289, 2277, 2289) */
		reached[1][2277] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2289, 2278, 2289) */
		reached[1][2278] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2289, 2282, 2289) */
		reached[1][2282] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1624: // STATE 2280 - mutant_1.pml:332 - [(1)] (2289:0:0 - 1)
		IfNotBlocked
		reached[1][2280] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2289, 2282, 2289) */
		reached[1][2282] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1625: // STATE 2285 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2285] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1626: // STATE 2288 - mutant_1.pml:339 - [(1)] (2299:0:1 - 1)
		IfNotBlocked
		reached[1][2288] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2299, 2290, 2299) */
		reached[1][2290] = 1;
		;
		/* merge: .(goto)(2299, 2293, 2299) */
		reached[1][2293] = 1;
		;
		/* merge: j = (j+1)(2299, 2295, 2299) */
		reached[1][2295] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2300, 2299) */
		reached[1][2300] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1627: // STATE 2295 - mutant_1.pml:375 - [j = (j+1)] (0:2299:1 - 13)
		IfNotBlocked
		reached[1][2295] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2300, 2299) */
		reached[1][2300] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1628: // STATE 2297 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2297] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1629: // STATE 2304 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2304] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1630: // STATE 2305 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2305] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1631: // STATE 2306 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2306] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1632: // STATE 2307 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (2327:0:1 - 1)
		IfNotBlocked
		reached[1][2307] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2327, 2308, 2327) */
		reached[1][2308] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2327, 2309, 2327) */
		reached[1][2309] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2327, 2325, 2327) */
		reached[1][2325] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1633: // STATE 2325 - mutant_1.pml:246 - [.(goto)] (0:2327:0 - 6)
		IfNotBlocked
		reached[1][2325] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1634: // STATE 2310 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (2327:0:1 - 1)
		IfNotBlocked
		reached[1][2310] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2327, 2311, 2327) */
		reached[1][2311] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2327, 2312, 2327) */
		reached[1][2312] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2327, 2325, 2327) */
		reached[1][2325] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1635: // STATE 2313 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2327:0:1 - 1)
		IfNotBlocked
		reached[1][2313] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2327, 2314, 2327) */
		reached[1][2314] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2327, 2315, 2327) */
		reached[1][2315] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2327, 2325, 2327) */
		reached[1][2325] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1636: // STATE 2316 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2327:0:1 - 1)
		IfNotBlocked
		reached[1][2316] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2327, 2317, 2327) */
		reached[1][2317] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2327, 2318, 2327) */
		reached[1][2318] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2327, 2325, 2327) */
		reached[1][2325] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1637: // STATE 2319 - mutant_1.pml:240 - [((START==ABORT))] (2327:0:1 - 1)
		IfNotBlocked
		reached[1][2319] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2327, 2320, 2327) */
		reached[1][2320] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2327, 2321, 2327) */
		reached[1][2321] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2327, 2325, 2327) */
		reached[1][2325] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1638: // STATE 2323 - mutant_1.pml:244 - [(1)] (2327:0:0 - 1)
		IfNotBlocked
		reached[1][2323] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2327, 2325, 2327) */
		reached[1][2325] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1639: // STATE 2327 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2327] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1640: // STATE 2329 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2329] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1641: // STATE 2332 - mutant_1.pml:252 - [(1)] (2430:0:1 - 1)
		IfNotBlocked
		reached[1][2332] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2430, 2334, 2430) */
		reached[1][2334] = 1;
		;
		/* merge: .(goto)(2430, 2424, 2430) */
		reached[1][2424] = 1;
		;
		/* merge: j = (j-1)(2430, 2426, 2430) */
		reached[1][2426] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2431, 2430) */
		reached[1][2431] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1642: // STATE 2336 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2336] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1643: // STATE 2337 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (2362:0:1 - 1)
		IfNotBlocked
		reached[1][2337] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2362, 2338, 2362) */
		reached[1][2338] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2362, 2339, 2362) */
		reached[1][2339] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2362, 2355, 2362) */
		reached[1][2355] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1644: // STATE 2355 - mutant_1.pml:276 - [.(goto)] (0:2362:0 - 6)
		IfNotBlocked
		reached[1][2355] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1645: // STATE 2340 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (2362:0:1 - 1)
		IfNotBlocked
		reached[1][2340] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2362, 2341, 2362) */
		reached[1][2341] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2362, 2342, 2362) */
		reached[1][2342] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2362, 2355, 2362) */
		reached[1][2355] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1646: // STATE 2343 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2362:0:1 - 1)
		IfNotBlocked
		reached[1][2343] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2362, 2344, 2362) */
		reached[1][2344] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2362, 2345, 2362) */
		reached[1][2345] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2362, 2355, 2362) */
		reached[1][2355] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1647: // STATE 2346 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2362:0:1 - 1)
		IfNotBlocked
		reached[1][2346] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2362, 2347, 2362) */
		reached[1][2347] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2362, 2348, 2362) */
		reached[1][2348] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2362, 2355, 2362) */
		reached[1][2355] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1648: // STATE 2349 - mutant_1.pml:270 - [((PAUSE==ABORT))] (2362:0:1 - 1)
		IfNotBlocked
		reached[1][2349] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2362, 2350, 2362) */
		reached[1][2350] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2362, 2351, 2362) */
		reached[1][2351] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2362, 2355, 2362) */
		reached[1][2355] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1649: // STATE 2353 - mutant_1.pml:274 - [(1)] (2362:0:0 - 1)
		IfNotBlocked
		reached[1][2353] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2362, 2355, 2362) */
		reached[1][2355] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1650: // STATE 2358 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2358] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1651: // STATE 2361 - mutant_1.pml:281 - [(1)] (2430:0:1 - 1)
		IfNotBlocked
		reached[1][2361] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2430, 2363, 2430) */
		reached[1][2363] = 1;
		;
		/* merge: .(goto)(2430, 2424, 2430) */
		reached[1][2424] = 1;
		;
		/* merge: j = (j-1)(2430, 2426, 2430) */
		reached[1][2426] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2431, 2430) */
		reached[1][2431] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1652: // STATE 2365 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2365] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1653: // STATE 2366 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (2391:0:1 - 1)
		IfNotBlocked
		reached[1][2366] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2391, 2367, 2391) */
		reached[1][2367] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2391, 2368, 2391) */
		reached[1][2368] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2391, 2384, 2391) */
		reached[1][2384] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1654: // STATE 2384 - mutant_1.pml:305 - [.(goto)] (0:2391:0 - 6)
		IfNotBlocked
		reached[1][2384] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1655: // STATE 2369 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (2391:0:1 - 1)
		IfNotBlocked
		reached[1][2369] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2391, 2370, 2391) */
		reached[1][2370] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2391, 2371, 2391) */
		reached[1][2371] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2391, 2384, 2391) */
		reached[1][2384] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1656: // STATE 2372 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2391:0:1 - 1)
		IfNotBlocked
		reached[1][2372] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2391, 2373, 2391) */
		reached[1][2373] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2391, 2374, 2391) */
		reached[1][2374] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2391, 2384, 2391) */
		reached[1][2384] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1657: // STATE 2375 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2391:0:1 - 1)
		IfNotBlocked
		reached[1][2375] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2391, 2376, 2391) */
		reached[1][2376] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2391, 2377, 2391) */
		reached[1][2377] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2391, 2384, 2391) */
		reached[1][2384] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1658: // STATE 2378 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (2391:0:1 - 1)
		IfNotBlocked
		reached[1][2378] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2391, 2379, 2391) */
		reached[1][2379] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2391, 2380, 2391) */
		reached[1][2380] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2391, 2384, 2391) */
		reached[1][2384] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1659: // STATE 2382 - mutant_1.pml:303 - [(1)] (2391:0:0 - 1)
		IfNotBlocked
		reached[1][2382] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2391, 2384, 2391) */
		reached[1][2384] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1660: // STATE 2387 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2387] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1661: // STATE 2390 - mutant_1.pml:310 - [(1)] (2430:0:1 - 1)
		IfNotBlocked
		reached[1][2390] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2430, 2392, 2430) */
		reached[1][2392] = 1;
		;
		/* merge: .(goto)(2430, 2424, 2430) */
		reached[1][2424] = 1;
		;
		/* merge: j = (j-1)(2430, 2426, 2430) */
		reached[1][2426] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2431, 2430) */
		reached[1][2431] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1662: // STATE 2394 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2394] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1663: // STATE 2395 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (2420:0:1 - 1)
		IfNotBlocked
		reached[1][2395] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2420, 2396, 2420) */
		reached[1][2396] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2420, 2397, 2420) */
		reached[1][2397] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2420, 2413, 2420) */
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1664: // STATE 2413 - mutant_1.pml:334 - [.(goto)] (0:2420:0 - 6)
		IfNotBlocked
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1665: // STATE 2398 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (2420:0:1 - 1)
		IfNotBlocked
		reached[1][2398] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2420, 2399, 2420) */
		reached[1][2399] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2420, 2400, 2420) */
		reached[1][2400] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2420, 2413, 2420) */
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1666: // STATE 2401 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2420:0:1 - 1)
		IfNotBlocked
		reached[1][2401] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2420, 2402, 2420) */
		reached[1][2402] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2420, 2403, 2420) */
		reached[1][2403] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2420, 2413, 2420) */
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1667: // STATE 2404 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2420:0:1 - 1)
		IfNotBlocked
		reached[1][2404] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2420, 2405, 2420) */
		reached[1][2405] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2420, 2406, 2420) */
		reached[1][2406] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2420, 2413, 2420) */
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1668: // STATE 2407 - mutant_1.pml:328 - [((STOP==ABORT))] (2420:0:1 - 1)
		IfNotBlocked
		reached[1][2407] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2420, 2408, 2420) */
		reached[1][2408] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2420, 2409, 2420) */
		reached[1][2409] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2420, 2413, 2420) */
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1669: // STATE 2411 - mutant_1.pml:332 - [(1)] (2420:0:0 - 1)
		IfNotBlocked
		reached[1][2411] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2420, 2413, 2420) */
		reached[1][2413] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1670: // STATE 2416 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2416] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1671: // STATE 2419 - mutant_1.pml:339 - [(1)] (2430:0:1 - 1)
		IfNotBlocked
		reached[1][2419] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2430, 2421, 2430) */
		reached[1][2421] = 1;
		;
		/* merge: .(goto)(2430, 2424, 2430) */
		reached[1][2424] = 1;
		;
		/* merge: j = (j-1)(2430, 2426, 2430) */
		reached[1][2426] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2431, 2430) */
		reached[1][2431] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1672: // STATE 2426 - mutant_1.pml:386 - [j = (j-1)] (0:2430:1 - 13)
		IfNotBlocked
		reached[1][2426] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2431, 2430) */
		reached[1][2431] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1673: // STATE 2428 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2428] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1674: // STATE 2438 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2438] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1675: // STATE 2439 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2439] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1676: // STATE 2440 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (2460:0:1 - 1)
		IfNotBlocked
		reached[1][2440] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2460, 2441, 2460) */
		reached[1][2441] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2460, 2442, 2460) */
		reached[1][2442] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2460, 2458, 2460) */
		reached[1][2458] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1677: // STATE 2458 - mutant_1.pml:246 - [.(goto)] (0:2460:0 - 6)
		IfNotBlocked
		reached[1][2458] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1678: // STATE 2443 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (2460:0:1 - 1)
		IfNotBlocked
		reached[1][2443] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2460, 2444, 2460) */
		reached[1][2444] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2460, 2445, 2460) */
		reached[1][2445] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2460, 2458, 2460) */
		reached[1][2458] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1679: // STATE 2446 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2460:0:1 - 1)
		IfNotBlocked
		reached[1][2446] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2460, 2447, 2460) */
		reached[1][2447] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2460, 2448, 2460) */
		reached[1][2448] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2460, 2458, 2460) */
		reached[1][2458] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1680: // STATE 2449 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2460:0:1 - 1)
		IfNotBlocked
		reached[1][2449] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2460, 2450, 2460) */
		reached[1][2450] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2460, 2451, 2460) */
		reached[1][2451] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2460, 2458, 2460) */
		reached[1][2458] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1681: // STATE 2452 - mutant_1.pml:240 - [((START==ABORT))] (2460:0:1 - 1)
		IfNotBlocked
		reached[1][2452] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2460, 2453, 2460) */
		reached[1][2453] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2460, 2454, 2460) */
		reached[1][2454] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2460, 2458, 2460) */
		reached[1][2458] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1682: // STATE 2456 - mutant_1.pml:244 - [(1)] (2460:0:0 - 1)
		IfNotBlocked
		reached[1][2456] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2460, 2458, 2460) */
		reached[1][2458] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1683: // STATE 2460 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2460] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1684: // STATE 2462 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2462] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1685: // STATE 2465 - mutant_1.pml:252 - [(1)] (2563:0:1 - 1)
		IfNotBlocked
		reached[1][2465] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2563, 2467, 2563) */
		reached[1][2467] = 1;
		;
		/* merge: .(goto)(2563, 2557, 2563) */
		reached[1][2557] = 1;
		;
		/* merge: j = (j+1)(2563, 2559, 2563) */
		reached[1][2559] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2564, 2563) */
		reached[1][2564] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1686: // STATE 2469 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2469] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1687: // STATE 2470 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (2495:0:1 - 1)
		IfNotBlocked
		reached[1][2470] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2495, 2471, 2495) */
		reached[1][2471] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2495, 2472, 2495) */
		reached[1][2472] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2495, 2488, 2495) */
		reached[1][2488] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1688: // STATE 2488 - mutant_1.pml:276 - [.(goto)] (0:2495:0 - 6)
		IfNotBlocked
		reached[1][2488] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1689: // STATE 2473 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (2495:0:1 - 1)
		IfNotBlocked
		reached[1][2473] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2495, 2474, 2495) */
		reached[1][2474] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2495, 2475, 2495) */
		reached[1][2475] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2495, 2488, 2495) */
		reached[1][2488] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1690: // STATE 2476 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2495:0:1 - 1)
		IfNotBlocked
		reached[1][2476] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2495, 2477, 2495) */
		reached[1][2477] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2495, 2478, 2495) */
		reached[1][2478] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2495, 2488, 2495) */
		reached[1][2488] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1691: // STATE 2479 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2495:0:1 - 1)
		IfNotBlocked
		reached[1][2479] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2495, 2480, 2495) */
		reached[1][2480] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2495, 2481, 2495) */
		reached[1][2481] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2495, 2488, 2495) */
		reached[1][2488] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1692: // STATE 2482 - mutant_1.pml:270 - [((PAUSE==ABORT))] (2495:0:1 - 1)
		IfNotBlocked
		reached[1][2482] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2495, 2483, 2495) */
		reached[1][2483] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2495, 2484, 2495) */
		reached[1][2484] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2495, 2488, 2495) */
		reached[1][2488] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1693: // STATE 2486 - mutant_1.pml:274 - [(1)] (2495:0:0 - 1)
		IfNotBlocked
		reached[1][2486] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2495, 2488, 2495) */
		reached[1][2488] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1694: // STATE 2491 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2491] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1695: // STATE 2494 - mutant_1.pml:281 - [(1)] (2563:0:1 - 1)
		IfNotBlocked
		reached[1][2494] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2563, 2496, 2563) */
		reached[1][2496] = 1;
		;
		/* merge: .(goto)(2563, 2557, 2563) */
		reached[1][2557] = 1;
		;
		/* merge: j = (j+1)(2563, 2559, 2563) */
		reached[1][2559] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2564, 2563) */
		reached[1][2564] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1696: // STATE 2498 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2498] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1697: // STATE 2499 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (2524:0:1 - 1)
		IfNotBlocked
		reached[1][2499] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2524, 2500, 2524) */
		reached[1][2500] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2524, 2501, 2524) */
		reached[1][2501] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2524, 2517, 2524) */
		reached[1][2517] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1698: // STATE 2517 - mutant_1.pml:305 - [.(goto)] (0:2524:0 - 6)
		IfNotBlocked
		reached[1][2517] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1699: // STATE 2502 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (2524:0:1 - 1)
		IfNotBlocked
		reached[1][2502] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2524, 2503, 2524) */
		reached[1][2503] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2524, 2504, 2524) */
		reached[1][2504] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2524, 2517, 2524) */
		reached[1][2517] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1700: // STATE 2505 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2524:0:1 - 1)
		IfNotBlocked
		reached[1][2505] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2524, 2506, 2524) */
		reached[1][2506] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2524, 2507, 2524) */
		reached[1][2507] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2524, 2517, 2524) */
		reached[1][2517] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1701: // STATE 2508 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2524:0:1 - 1)
		IfNotBlocked
		reached[1][2508] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2524, 2509, 2524) */
		reached[1][2509] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2524, 2510, 2524) */
		reached[1][2510] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2524, 2517, 2524) */
		reached[1][2517] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1702: // STATE 2511 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (2524:0:1 - 1)
		IfNotBlocked
		reached[1][2511] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2524, 2512, 2524) */
		reached[1][2512] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2524, 2513, 2524) */
		reached[1][2513] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2524, 2517, 2524) */
		reached[1][2517] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1703: // STATE 2515 - mutant_1.pml:303 - [(1)] (2524:0:0 - 1)
		IfNotBlocked
		reached[1][2515] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2524, 2517, 2524) */
		reached[1][2517] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1704: // STATE 2520 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2520] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1705: // STATE 2523 - mutant_1.pml:310 - [(1)] (2563:0:1 - 1)
		IfNotBlocked
		reached[1][2523] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2563, 2525, 2563) */
		reached[1][2525] = 1;
		;
		/* merge: .(goto)(2563, 2557, 2563) */
		reached[1][2557] = 1;
		;
		/* merge: j = (j+1)(2563, 2559, 2563) */
		reached[1][2559] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2564, 2563) */
		reached[1][2564] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1706: // STATE 2527 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2527] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1707: // STATE 2528 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (2553:0:1 - 1)
		IfNotBlocked
		reached[1][2528] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2553, 2529, 2553) */
		reached[1][2529] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2553, 2530, 2553) */
		reached[1][2530] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2553, 2546, 2553) */
		reached[1][2546] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1708: // STATE 2546 - mutant_1.pml:334 - [.(goto)] (0:2553:0 - 6)
		IfNotBlocked
		reached[1][2546] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1709: // STATE 2531 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (2553:0:1 - 1)
		IfNotBlocked
		reached[1][2531] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2553, 2532, 2553) */
		reached[1][2532] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2553, 2533, 2553) */
		reached[1][2533] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2553, 2546, 2553) */
		reached[1][2546] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1710: // STATE 2534 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2553:0:1 - 1)
		IfNotBlocked
		reached[1][2534] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2553, 2535, 2553) */
		reached[1][2535] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2553, 2536, 2553) */
		reached[1][2536] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2553, 2546, 2553) */
		reached[1][2546] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1711: // STATE 2537 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2553:0:1 - 1)
		IfNotBlocked
		reached[1][2537] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2553, 2538, 2553) */
		reached[1][2538] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2553, 2539, 2553) */
		reached[1][2539] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2553, 2546, 2553) */
		reached[1][2546] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1712: // STATE 2540 - mutant_1.pml:328 - [((STOP==ABORT))] (2553:0:1 - 1)
		IfNotBlocked
		reached[1][2540] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2553, 2541, 2553) */
		reached[1][2541] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2553, 2542, 2553) */
		reached[1][2542] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2553, 2546, 2553) */
		reached[1][2546] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1713: // STATE 2544 - mutant_1.pml:332 - [(1)] (2553:0:0 - 1)
		IfNotBlocked
		reached[1][2544] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2553, 2546, 2553) */
		reached[1][2546] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1714: // STATE 2549 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2549] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1715: // STATE 2552 - mutant_1.pml:339 - [(1)] (2563:0:1 - 1)
		IfNotBlocked
		reached[1][2552] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2563, 2554, 2563) */
		reached[1][2554] = 1;
		;
		/* merge: .(goto)(2563, 2557, 2563) */
		reached[1][2557] = 1;
		;
		/* merge: j = (j+1)(2563, 2559, 2563) */
		reached[1][2559] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2564, 2563) */
		reached[1][2564] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1716: // STATE 2559 - mutant_1.pml:375 - [j = (j+1)] (0:2563:1 - 13)
		IfNotBlocked
		reached[1][2559] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2564, 2563) */
		reached[1][2564] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1717: // STATE 2561 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2561] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1718: // STATE 2567 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2567] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1719: // STATE 2568 - mutant_1.pml:405 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2568] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1720: // STATE 2569 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2569] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1721: // STATE 2571 - mutant_1.pml:407 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2571] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1722: // STATE 2572 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2572] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1723: // STATE 2574 - mutant_1.pml:409 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2574] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1724: // STATE 2575 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2575] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1725: // STATE 2577 - mutant_1.pml:411 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2577] = 1;
		if (!((6==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1726: // STATE 2578 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2578] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1727: // STATE 2582 - mutant_1.pml:414 - [j = (j+1)] (0:2586:1 - 5)
		IfNotBlocked
		reached[1][2582] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2587, 2586) */
		reached[1][2587] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1728: // STATE 2584 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2584] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1729: // STATE 2595 - mutant_1.pml:451 - [(((11==ABORTING)||(11==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2595] = 1;
		if (!(((11==4)||(11==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1730: // STATE 2596 - mutant_1.pml:422 - [(((2==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2596] = 1;
		if (!(((2==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1731: // STATE 2597 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2597] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1732: // STATE 2599 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2599] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1733: // STATE 2600 - mutant_1.pml:394 - [(((2==START)||(2==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2600] = 1;
		if (!(((2==9)||(2==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1734: // STATE 2601 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2601] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1735: // STATE 2602 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2602] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1736: // STATE 2603 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (2623:0:1 - 1)
		IfNotBlocked
		reached[1][2603] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2623, 2604, 2623) */
		reached[1][2604] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2623, 2605, 2623) */
		reached[1][2605] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2623, 2621, 2623) */
		reached[1][2621] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1737: // STATE 2621 - mutant_1.pml:246 - [.(goto)] (0:2623:0 - 6)
		IfNotBlocked
		reached[1][2621] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1738: // STATE 2606 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (2623:0:1 - 1)
		IfNotBlocked
		reached[1][2606] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2623, 2607, 2623) */
		reached[1][2607] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2623, 2608, 2623) */
		reached[1][2608] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2623, 2621, 2623) */
		reached[1][2621] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1739: // STATE 2609 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2623:0:1 - 1)
		IfNotBlocked
		reached[1][2609] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2623, 2610, 2623) */
		reached[1][2610] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2623, 2611, 2623) */
		reached[1][2611] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2623, 2621, 2623) */
		reached[1][2621] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1740: // STATE 2612 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2623:0:1 - 1)
		IfNotBlocked
		reached[1][2612] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2623, 2613, 2623) */
		reached[1][2613] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2623, 2614, 2623) */
		reached[1][2614] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2623, 2621, 2623) */
		reached[1][2621] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1741: // STATE 2615 - mutant_1.pml:240 - [((START==ABORT))] (2623:0:1 - 1)
		IfNotBlocked
		reached[1][2615] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2623, 2616, 2623) */
		reached[1][2616] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2623, 2617, 2623) */
		reached[1][2617] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2623, 2621, 2623) */
		reached[1][2621] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1742: // STATE 2619 - mutant_1.pml:244 - [(1)] (2623:0:0 - 1)
		IfNotBlocked
		reached[1][2619] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2623, 2621, 2623) */
		reached[1][2621] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1743: // STATE 2623 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2623] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1744: // STATE 2625 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2625] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1745: // STATE 2628 - mutant_1.pml:252 - [(1)] (2726:0:1 - 1)
		IfNotBlocked
		reached[1][2628] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2726, 2630, 2726) */
		reached[1][2630] = 1;
		;
		/* merge: .(goto)(2726, 2720, 2726) */
		reached[1][2720] = 1;
		;
		/* merge: j = (j+1)(2726, 2722, 2726) */
		reached[1][2722] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2727, 2726) */
		reached[1][2727] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1746: // STATE 2632 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2632] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1747: // STATE 2633 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (2658:0:1 - 1)
		IfNotBlocked
		reached[1][2633] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2658, 2634, 2658) */
		reached[1][2634] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2658, 2635, 2658) */
		reached[1][2635] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2658, 2651, 2658) */
		reached[1][2651] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1748: // STATE 2651 - mutant_1.pml:276 - [.(goto)] (0:2658:0 - 6)
		IfNotBlocked
		reached[1][2651] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1749: // STATE 2636 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (2658:0:1 - 1)
		IfNotBlocked
		reached[1][2636] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2658, 2637, 2658) */
		reached[1][2637] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2658, 2638, 2658) */
		reached[1][2638] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2658, 2651, 2658) */
		reached[1][2651] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1750: // STATE 2639 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2658:0:1 - 1)
		IfNotBlocked
		reached[1][2639] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2658, 2640, 2658) */
		reached[1][2640] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2658, 2641, 2658) */
		reached[1][2641] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2658, 2651, 2658) */
		reached[1][2651] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1751: // STATE 2642 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2658:0:1 - 1)
		IfNotBlocked
		reached[1][2642] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2658, 2643, 2658) */
		reached[1][2643] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2658, 2644, 2658) */
		reached[1][2644] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2658, 2651, 2658) */
		reached[1][2651] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1752: // STATE 2645 - mutant_1.pml:270 - [((PAUSE==ABORT))] (2658:0:1 - 1)
		IfNotBlocked
		reached[1][2645] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2658, 2646, 2658) */
		reached[1][2646] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2658, 2647, 2658) */
		reached[1][2647] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2658, 2651, 2658) */
		reached[1][2651] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1753: // STATE 2649 - mutant_1.pml:274 - [(1)] (2658:0:0 - 1)
		IfNotBlocked
		reached[1][2649] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2658, 2651, 2658) */
		reached[1][2651] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1754: // STATE 2654 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2654] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1755: // STATE 2657 - mutant_1.pml:281 - [(1)] (2726:0:1 - 1)
		IfNotBlocked
		reached[1][2657] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2726, 2659, 2726) */
		reached[1][2659] = 1;
		;
		/* merge: .(goto)(2726, 2720, 2726) */
		reached[1][2720] = 1;
		;
		/* merge: j = (j+1)(2726, 2722, 2726) */
		reached[1][2722] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2727, 2726) */
		reached[1][2727] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1756: // STATE 2661 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2661] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1757: // STATE 2662 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (2687:0:1 - 1)
		IfNotBlocked
		reached[1][2662] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2687, 2663, 2687) */
		reached[1][2663] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2687, 2664, 2687) */
		reached[1][2664] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2687, 2680, 2687) */
		reached[1][2680] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1758: // STATE 2680 - mutant_1.pml:305 - [.(goto)] (0:2687:0 - 6)
		IfNotBlocked
		reached[1][2680] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1759: // STATE 2665 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (2687:0:1 - 1)
		IfNotBlocked
		reached[1][2665] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2687, 2666, 2687) */
		reached[1][2666] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2687, 2667, 2687) */
		reached[1][2667] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2687, 2680, 2687) */
		reached[1][2680] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1760: // STATE 2668 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2687:0:1 - 1)
		IfNotBlocked
		reached[1][2668] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2687, 2669, 2687) */
		reached[1][2669] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2687, 2670, 2687) */
		reached[1][2670] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2687, 2680, 2687) */
		reached[1][2680] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1761: // STATE 2671 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2687:0:1 - 1)
		IfNotBlocked
		reached[1][2671] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2687, 2672, 2687) */
		reached[1][2672] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2687, 2673, 2687) */
		reached[1][2673] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2687, 2680, 2687) */
		reached[1][2680] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1762: // STATE 2674 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (2687:0:1 - 1)
		IfNotBlocked
		reached[1][2674] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2687, 2675, 2687) */
		reached[1][2675] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2687, 2676, 2687) */
		reached[1][2676] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2687, 2680, 2687) */
		reached[1][2680] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1763: // STATE 2678 - mutant_1.pml:303 - [(1)] (2687:0:0 - 1)
		IfNotBlocked
		reached[1][2678] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2687, 2680, 2687) */
		reached[1][2680] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1764: // STATE 2683 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2683] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1765: // STATE 2686 - mutant_1.pml:310 - [(1)] (2726:0:1 - 1)
		IfNotBlocked
		reached[1][2686] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2726, 2688, 2726) */
		reached[1][2688] = 1;
		;
		/* merge: .(goto)(2726, 2720, 2726) */
		reached[1][2720] = 1;
		;
		/* merge: j = (j+1)(2726, 2722, 2726) */
		reached[1][2722] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2727, 2726) */
		reached[1][2727] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1766: // STATE 2690 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2690] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1767: // STATE 2691 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (2716:0:1 - 1)
		IfNotBlocked
		reached[1][2691] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2716, 2692, 2716) */
		reached[1][2692] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2716, 2693, 2716) */
		reached[1][2693] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2716, 2709, 2716) */
		reached[1][2709] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1768: // STATE 2709 - mutant_1.pml:334 - [.(goto)] (0:2716:0 - 6)
		IfNotBlocked
		reached[1][2709] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1769: // STATE 2694 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (2716:0:1 - 1)
		IfNotBlocked
		reached[1][2694] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2716, 2695, 2716) */
		reached[1][2695] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2716, 2696, 2716) */
		reached[1][2696] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2716, 2709, 2716) */
		reached[1][2709] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1770: // STATE 2697 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2716:0:1 - 1)
		IfNotBlocked
		reached[1][2697] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2716, 2698, 2716) */
		reached[1][2698] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2716, 2699, 2716) */
		reached[1][2699] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2716, 2709, 2716) */
		reached[1][2709] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1771: // STATE 2700 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2716:0:1 - 1)
		IfNotBlocked
		reached[1][2700] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2716, 2701, 2716) */
		reached[1][2701] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2716, 2702, 2716) */
		reached[1][2702] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2716, 2709, 2716) */
		reached[1][2709] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1772: // STATE 2703 - mutant_1.pml:328 - [((STOP==ABORT))] (2716:0:1 - 1)
		IfNotBlocked
		reached[1][2703] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2716, 2704, 2716) */
		reached[1][2704] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2716, 2705, 2716) */
		reached[1][2705] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2716, 2709, 2716) */
		reached[1][2709] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1773: // STATE 2707 - mutant_1.pml:332 - [(1)] (2716:0:0 - 1)
		IfNotBlocked
		reached[1][2707] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2716, 2709, 2716) */
		reached[1][2709] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1774: // STATE 2712 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2712] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1775: // STATE 2715 - mutant_1.pml:339 - [(1)] (2726:0:1 - 1)
		IfNotBlocked
		reached[1][2715] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2726, 2717, 2726) */
		reached[1][2717] = 1;
		;
		/* merge: .(goto)(2726, 2720, 2726) */
		reached[1][2720] = 1;
		;
		/* merge: j = (j+1)(2726, 2722, 2726) */
		reached[1][2722] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2727, 2726) */
		reached[1][2727] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1776: // STATE 2722 - mutant_1.pml:375 - [j = (j+1)] (0:2726:1 - 13)
		IfNotBlocked
		reached[1][2722] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2727, 2726) */
		reached[1][2727] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1777: // STATE 2724 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2724] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1778: // STATE 2731 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2731] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1779: // STATE 2732 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2732] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1780: // STATE 2733 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2733] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1781: // STATE 2734 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (2754:0:1 - 1)
		IfNotBlocked
		reached[1][2734] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2754, 2735, 2754) */
		reached[1][2735] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2754, 2736, 2754) */
		reached[1][2736] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2754, 2752, 2754) */
		reached[1][2752] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1782: // STATE 2752 - mutant_1.pml:246 - [.(goto)] (0:2754:0 - 6)
		IfNotBlocked
		reached[1][2752] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1783: // STATE 2737 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (2754:0:1 - 1)
		IfNotBlocked
		reached[1][2737] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2754, 2738, 2754) */
		reached[1][2738] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2754, 2739, 2754) */
		reached[1][2739] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2754, 2752, 2754) */
		reached[1][2752] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1784: // STATE 2740 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2754:0:1 - 1)
		IfNotBlocked
		reached[1][2740] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2754, 2741, 2754) */
		reached[1][2741] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2754, 2742, 2754) */
		reached[1][2742] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2754, 2752, 2754) */
		reached[1][2752] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1785: // STATE 2743 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2754:0:1 - 1)
		IfNotBlocked
		reached[1][2743] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2754, 2744, 2754) */
		reached[1][2744] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2754, 2745, 2754) */
		reached[1][2745] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2754, 2752, 2754) */
		reached[1][2752] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1786: // STATE 2746 - mutant_1.pml:240 - [((START==ABORT))] (2754:0:1 - 1)
		IfNotBlocked
		reached[1][2746] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2754, 2747, 2754) */
		reached[1][2747] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2754, 2748, 2754) */
		reached[1][2748] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2754, 2752, 2754) */
		reached[1][2752] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1787: // STATE 2750 - mutant_1.pml:244 - [(1)] (2754:0:0 - 1)
		IfNotBlocked
		reached[1][2750] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2754, 2752, 2754) */
		reached[1][2752] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1788: // STATE 2754 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2754] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1789: // STATE 2756 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2756] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1790: // STATE 2759 - mutant_1.pml:252 - [(1)] (2857:0:1 - 1)
		IfNotBlocked
		reached[1][2759] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2857, 2761, 2857) */
		reached[1][2761] = 1;
		;
		/* merge: .(goto)(2857, 2851, 2857) */
		reached[1][2851] = 1;
		;
		/* merge: j = (j-1)(2857, 2853, 2857) */
		reached[1][2853] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2858, 2857) */
		reached[1][2858] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1791: // STATE 2763 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2763] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1792: // STATE 2764 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (2789:0:1 - 1)
		IfNotBlocked
		reached[1][2764] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2789, 2765, 2789) */
		reached[1][2765] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2789, 2766, 2789) */
		reached[1][2766] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2789, 2782, 2789) */
		reached[1][2782] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1793: // STATE 2782 - mutant_1.pml:276 - [.(goto)] (0:2789:0 - 6)
		IfNotBlocked
		reached[1][2782] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1794: // STATE 2767 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (2789:0:1 - 1)
		IfNotBlocked
		reached[1][2767] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2789, 2768, 2789) */
		reached[1][2768] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2789, 2769, 2789) */
		reached[1][2769] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2789, 2782, 2789) */
		reached[1][2782] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1795: // STATE 2770 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2789:0:1 - 1)
		IfNotBlocked
		reached[1][2770] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2789, 2771, 2789) */
		reached[1][2771] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2789, 2772, 2789) */
		reached[1][2772] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2789, 2782, 2789) */
		reached[1][2782] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1796: // STATE 2773 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2789:0:1 - 1)
		IfNotBlocked
		reached[1][2773] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2789, 2774, 2789) */
		reached[1][2774] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2789, 2775, 2789) */
		reached[1][2775] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2789, 2782, 2789) */
		reached[1][2782] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1797: // STATE 2776 - mutant_1.pml:270 - [((PAUSE==ABORT))] (2789:0:1 - 1)
		IfNotBlocked
		reached[1][2776] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2789, 2777, 2789) */
		reached[1][2777] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2789, 2778, 2789) */
		reached[1][2778] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2789, 2782, 2789) */
		reached[1][2782] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1798: // STATE 2780 - mutant_1.pml:274 - [(1)] (2789:0:0 - 1)
		IfNotBlocked
		reached[1][2780] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2789, 2782, 2789) */
		reached[1][2782] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1799: // STATE 2785 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2785] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1800: // STATE 2788 - mutant_1.pml:281 - [(1)] (2857:0:1 - 1)
		IfNotBlocked
		reached[1][2788] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2857, 2790, 2857) */
		reached[1][2790] = 1;
		;
		/* merge: .(goto)(2857, 2851, 2857) */
		reached[1][2851] = 1;
		;
		/* merge: j = (j-1)(2857, 2853, 2857) */
		reached[1][2853] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2858, 2857) */
		reached[1][2858] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1801: // STATE 2792 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2792] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1802: // STATE 2793 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (2818:0:1 - 1)
		IfNotBlocked
		reached[1][2793] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2818, 2794, 2818) */
		reached[1][2794] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2818, 2795, 2818) */
		reached[1][2795] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2818, 2811, 2818) */
		reached[1][2811] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1803: // STATE 2811 - mutant_1.pml:305 - [.(goto)] (0:2818:0 - 6)
		IfNotBlocked
		reached[1][2811] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1804: // STATE 2796 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (2818:0:1 - 1)
		IfNotBlocked
		reached[1][2796] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2818, 2797, 2818) */
		reached[1][2797] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2818, 2798, 2818) */
		reached[1][2798] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2818, 2811, 2818) */
		reached[1][2811] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1805: // STATE 2799 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2818:0:1 - 1)
		IfNotBlocked
		reached[1][2799] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2818, 2800, 2818) */
		reached[1][2800] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2818, 2801, 2818) */
		reached[1][2801] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2818, 2811, 2818) */
		reached[1][2811] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1806: // STATE 2802 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2818:0:1 - 1)
		IfNotBlocked
		reached[1][2802] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2818, 2803, 2818) */
		reached[1][2803] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2818, 2804, 2818) */
		reached[1][2804] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2818, 2811, 2818) */
		reached[1][2811] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1807: // STATE 2805 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (2818:0:1 - 1)
		IfNotBlocked
		reached[1][2805] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2818, 2806, 2818) */
		reached[1][2806] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2818, 2807, 2818) */
		reached[1][2807] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2818, 2811, 2818) */
		reached[1][2811] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1808: // STATE 2809 - mutant_1.pml:303 - [(1)] (2818:0:0 - 1)
		IfNotBlocked
		reached[1][2809] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2818, 2811, 2818) */
		reached[1][2811] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1809: // STATE 2814 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2814] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1810: // STATE 2817 - mutant_1.pml:310 - [(1)] (2857:0:1 - 1)
		IfNotBlocked
		reached[1][2817] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2857, 2819, 2857) */
		reached[1][2819] = 1;
		;
		/* merge: .(goto)(2857, 2851, 2857) */
		reached[1][2851] = 1;
		;
		/* merge: j = (j-1)(2857, 2853, 2857) */
		reached[1][2853] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2858, 2857) */
		reached[1][2858] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1811: // STATE 2821 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2821] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1812: // STATE 2822 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (2847:0:1 - 1)
		IfNotBlocked
		reached[1][2822] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2847, 2823, 2847) */
		reached[1][2823] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2847, 2824, 2847) */
		reached[1][2824] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2847, 2840, 2847) */
		reached[1][2840] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1813: // STATE 2840 - mutant_1.pml:334 - [.(goto)] (0:2847:0 - 6)
		IfNotBlocked
		reached[1][2840] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1814: // STATE 2825 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (2847:0:1 - 1)
		IfNotBlocked
		reached[1][2825] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2847, 2826, 2847) */
		reached[1][2826] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2847, 2827, 2847) */
		reached[1][2827] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2847, 2840, 2847) */
		reached[1][2840] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1815: // STATE 2828 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2847:0:1 - 1)
		IfNotBlocked
		reached[1][2828] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2847, 2829, 2847) */
		reached[1][2829] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2847, 2830, 2847) */
		reached[1][2830] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2847, 2840, 2847) */
		reached[1][2840] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1816: // STATE 2831 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2847:0:1 - 1)
		IfNotBlocked
		reached[1][2831] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2847, 2832, 2847) */
		reached[1][2832] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2847, 2833, 2847) */
		reached[1][2833] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2847, 2840, 2847) */
		reached[1][2840] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1817: // STATE 2834 - mutant_1.pml:328 - [((STOP==ABORT))] (2847:0:1 - 1)
		IfNotBlocked
		reached[1][2834] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2847, 2835, 2847) */
		reached[1][2835] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2847, 2836, 2847) */
		reached[1][2836] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2847, 2840, 2847) */
		reached[1][2840] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1818: // STATE 2838 - mutant_1.pml:332 - [(1)] (2847:0:0 - 1)
		IfNotBlocked
		reached[1][2838] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2847, 2840, 2847) */
		reached[1][2840] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1819: // STATE 2843 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2843] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1820: // STATE 2846 - mutant_1.pml:339 - [(1)] (2857:0:1 - 1)
		IfNotBlocked
		reached[1][2846] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2857, 2848, 2857) */
		reached[1][2848] = 1;
		;
		/* merge: .(goto)(2857, 2851, 2857) */
		reached[1][2851] = 1;
		;
		/* merge: j = (j-1)(2857, 2853, 2857) */
		reached[1][2853] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2858, 2857) */
		reached[1][2858] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1821: // STATE 2853 - mutant_1.pml:386 - [j = (j-1)] (0:2857:1 - 13)
		IfNotBlocked
		reached[1][2853] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2858, 2857) */
		reached[1][2858] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1822: // STATE 2855 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2855] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1823: // STATE 2865 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2865] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1824: // STATE 2866 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2866] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1825: // STATE 2867 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (2887:0:1 - 1)
		IfNotBlocked
		reached[1][2867] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2887, 2868, 2887) */
		reached[1][2868] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2887, 2869, 2887) */
		reached[1][2869] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2887, 2885, 2887) */
		reached[1][2885] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1826: // STATE 2885 - mutant_1.pml:246 - [.(goto)] (0:2887:0 - 6)
		IfNotBlocked
		reached[1][2885] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1827: // STATE 2870 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (2887:0:1 - 1)
		IfNotBlocked
		reached[1][2870] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2887, 2871, 2887) */
		reached[1][2871] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2887, 2872, 2887) */
		reached[1][2872] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2887, 2885, 2887) */
		reached[1][2885] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1828: // STATE 2873 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2887:0:1 - 1)
		IfNotBlocked
		reached[1][2873] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2887, 2874, 2887) */
		reached[1][2874] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2887, 2875, 2887) */
		reached[1][2875] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2887, 2885, 2887) */
		reached[1][2885] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1829: // STATE 2876 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2887:0:1 - 1)
		IfNotBlocked
		reached[1][2876] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2887, 2877, 2887) */
		reached[1][2877] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2887, 2878, 2887) */
		reached[1][2878] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2887, 2885, 2887) */
		reached[1][2885] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1830: // STATE 2879 - mutant_1.pml:240 - [((START==ABORT))] (2887:0:1 - 1)
		IfNotBlocked
		reached[1][2879] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2887, 2880, 2887) */
		reached[1][2880] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2887, 2881, 2887) */
		reached[1][2881] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2887, 2885, 2887) */
		reached[1][2885] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1831: // STATE 2883 - mutant_1.pml:244 - [(1)] (2887:0:0 - 1)
		IfNotBlocked
		reached[1][2883] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2887, 2885, 2887) */
		reached[1][2885] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1832: // STATE 2887 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2887] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1833: // STATE 2889 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2889] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1834: // STATE 2892 - mutant_1.pml:252 - [(1)] (2990:0:1 - 1)
		IfNotBlocked
		reached[1][2892] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2990, 2894, 2990) */
		reached[1][2894] = 1;
		;
		/* merge: .(goto)(2990, 2984, 2990) */
		reached[1][2984] = 1;
		;
		/* merge: j = (j+1)(2990, 2986, 2990) */
		reached[1][2986] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2991, 2990) */
		reached[1][2991] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1835: // STATE 2896 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2896] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1836: // STATE 2897 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (2922:0:1 - 1)
		IfNotBlocked
		reached[1][2897] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2922, 2898, 2922) */
		reached[1][2898] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2922, 2899, 2922) */
		reached[1][2899] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2922, 2915, 2922) */
		reached[1][2915] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1837: // STATE 2915 - mutant_1.pml:276 - [.(goto)] (0:2922:0 - 6)
		IfNotBlocked
		reached[1][2915] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1838: // STATE 2900 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (2922:0:1 - 1)
		IfNotBlocked
		reached[1][2900] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2922, 2901, 2922) */
		reached[1][2901] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2922, 2902, 2922) */
		reached[1][2902] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2922, 2915, 2922) */
		reached[1][2915] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1839: // STATE 2903 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2922:0:1 - 1)
		IfNotBlocked
		reached[1][2903] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2922, 2904, 2922) */
		reached[1][2904] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2922, 2905, 2922) */
		reached[1][2905] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2922, 2915, 2922) */
		reached[1][2915] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1840: // STATE 2906 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2922:0:1 - 1)
		IfNotBlocked
		reached[1][2906] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2922, 2907, 2922) */
		reached[1][2907] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2922, 2908, 2922) */
		reached[1][2908] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2922, 2915, 2922) */
		reached[1][2915] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1841: // STATE 2909 - mutant_1.pml:270 - [((PAUSE==ABORT))] (2922:0:1 - 1)
		IfNotBlocked
		reached[1][2909] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2922, 2910, 2922) */
		reached[1][2910] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2922, 2911, 2922) */
		reached[1][2911] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2922, 2915, 2922) */
		reached[1][2915] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1842: // STATE 2913 - mutant_1.pml:274 - [(1)] (2922:0:0 - 1)
		IfNotBlocked
		reached[1][2913] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2922, 2915, 2922) */
		reached[1][2915] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1843: // STATE 2918 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2918] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1844: // STATE 2921 - mutant_1.pml:281 - [(1)] (2990:0:1 - 1)
		IfNotBlocked
		reached[1][2921] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2990, 2923, 2990) */
		reached[1][2923] = 1;
		;
		/* merge: .(goto)(2990, 2984, 2990) */
		reached[1][2984] = 1;
		;
		/* merge: j = (j+1)(2990, 2986, 2990) */
		reached[1][2986] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2991, 2990) */
		reached[1][2991] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1845: // STATE 2925 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2925] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1846: // STATE 2926 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (2951:0:1 - 1)
		IfNotBlocked
		reached[1][2926] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2951, 2927, 2951) */
		reached[1][2927] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2951, 2928, 2951) */
		reached[1][2928] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2951, 2944, 2951) */
		reached[1][2944] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1847: // STATE 2944 - mutant_1.pml:305 - [.(goto)] (0:2951:0 - 6)
		IfNotBlocked
		reached[1][2944] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1848: // STATE 2929 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (2951:0:1 - 1)
		IfNotBlocked
		reached[1][2929] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2951, 2930, 2951) */
		reached[1][2930] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2951, 2931, 2951) */
		reached[1][2931] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2951, 2944, 2951) */
		reached[1][2944] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1849: // STATE 2932 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2951:0:1 - 1)
		IfNotBlocked
		reached[1][2932] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2951, 2933, 2951) */
		reached[1][2933] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2951, 2934, 2951) */
		reached[1][2934] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2951, 2944, 2951) */
		reached[1][2944] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1850: // STATE 2935 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2951:0:1 - 1)
		IfNotBlocked
		reached[1][2935] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2951, 2936, 2951) */
		reached[1][2936] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2951, 2937, 2951) */
		reached[1][2937] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2951, 2944, 2951) */
		reached[1][2944] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1851: // STATE 2938 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (2951:0:1 - 1)
		IfNotBlocked
		reached[1][2938] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2951, 2939, 2951) */
		reached[1][2939] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2951, 2940, 2951) */
		reached[1][2940] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2951, 2944, 2951) */
		reached[1][2944] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1852: // STATE 2942 - mutant_1.pml:303 - [(1)] (2951:0:0 - 1)
		IfNotBlocked
		reached[1][2942] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2951, 2944, 2951) */
		reached[1][2944] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1853: // STATE 2947 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2947] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1854: // STATE 2950 - mutant_1.pml:310 - [(1)] (2990:0:1 - 1)
		IfNotBlocked
		reached[1][2950] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2990, 2952, 2990) */
		reached[1][2952] = 1;
		;
		/* merge: .(goto)(2990, 2984, 2990) */
		reached[1][2984] = 1;
		;
		/* merge: j = (j+1)(2990, 2986, 2990) */
		reached[1][2986] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2991, 2990) */
		reached[1][2991] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1855: // STATE 2954 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2954] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1856: // STATE 2955 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (2980:0:1 - 1)
		IfNotBlocked
		reached[1][2955] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(2980, 2956, 2980) */
		reached[1][2956] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(2980, 2957, 2980) */
		reached[1][2957] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2980, 2973, 2980) */
		reached[1][2973] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1857: // STATE 2973 - mutant_1.pml:334 - [.(goto)] (0:2980:0 - 6)
		IfNotBlocked
		reached[1][2973] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1858: // STATE 2958 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (2980:0:1 - 1)
		IfNotBlocked
		reached[1][2958] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(2980, 2959, 2980) */
		reached[1][2959] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(2980, 2960, 2980) */
		reached[1][2960] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2980, 2973, 2980) */
		reached[1][2973] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1859: // STATE 2961 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (2980:0:1 - 1)
		IfNotBlocked
		reached[1][2961] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(2980, 2962, 2980) */
		reached[1][2962] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(2980, 2963, 2980) */
		reached[1][2963] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2980, 2973, 2980) */
		reached[1][2973] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1860: // STATE 2964 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (2980:0:1 - 1)
		IfNotBlocked
		reached[1][2964] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(2980, 2965, 2980) */
		reached[1][2965] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(2980, 2966, 2980) */
		reached[1][2966] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2980, 2973, 2980) */
		reached[1][2973] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1861: // STATE 2967 - mutant_1.pml:328 - [((STOP==ABORT))] (2980:0:1 - 1)
		IfNotBlocked
		reached[1][2967] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(2980, 2968, 2980) */
		reached[1][2968] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(2980, 2969, 2980) */
		reached[1][2969] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(2980, 2973, 2980) */
		reached[1][2973] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1862: // STATE 2971 - mutant_1.pml:332 - [(1)] (2980:0:0 - 1)
		IfNotBlocked
		reached[1][2971] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2980, 2973, 2980) */
		reached[1][2973] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1863: // STATE 2976 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2976] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1864: // STATE 2979 - mutant_1.pml:339 - [(1)] (2990:0:1 - 1)
		IfNotBlocked
		reached[1][2979] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(2990, 2981, 2990) */
		reached[1][2981] = 1;
		;
		/* merge: .(goto)(2990, 2984, 2990) */
		reached[1][2984] = 1;
		;
		/* merge: j = (j+1)(2990, 2986, 2990) */
		reached[1][2986] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2991, 2990) */
		reached[1][2991] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1865: // STATE 2986 - mutant_1.pml:375 - [j = (j+1)] (0:2990:1 - 13)
		IfNotBlocked
		reached[1][2986] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 2991, 2990) */
		reached[1][2991] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1866: // STATE 2988 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][2988] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1867: // STATE 2994 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2994] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1868: // STATE 2995 - mutant_1.pml:405 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2995] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1869: // STATE 2996 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2996] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1870: // STATE 2998 - mutant_1.pml:407 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2998] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1871: // STATE 2999 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][2999] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1872: // STATE 3001 - mutant_1.pml:409 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3001] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1873: // STATE 3002 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3002] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1874: // STATE 3004 - mutant_1.pml:411 - [((2==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3004] = 1;
		if (!((2==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1875: // STATE 3005 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3005] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1876: // STATE 3009 - mutant_1.pml:414 - [j = (j+1)] (0:3013:1 - 5)
		IfNotBlocked
		reached[1][3009] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3014, 3013) */
		reached[1][3014] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1877: // STATE 3011 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3011] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1878: // STATE 3028 - mutant_1.pml:513 - [((states[0]==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3028] = 1;
		if (!((now.states[0]==10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1879: // STATE 3029 - mutant_1.pml:458 - [states[0] = 11] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3029] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 11;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1880: // STATE 3030 - mutant_1.pml:447 - [((11==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3030] = 1;
		if (!((11==11)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1881: // STATE 3031 - mutant_1.pml:422 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3031] = 1;
		if (!(((8==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1882: // STATE 3032 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3032] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1883: // STATE 3034 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3034] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1884: // STATE 3035 - mutant_1.pml:394 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3035] = 1;
		if (!(((8==9)||(8==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1885: // STATE 3036 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3036] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1886: // STATE 3037 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3037] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1887: // STATE 3038 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (3058:0:1 - 1)
		IfNotBlocked
		reached[1][3038] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3058, 3039, 3058) */
		reached[1][3039] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3058, 3040, 3058) */
		reached[1][3040] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3058, 3056, 3058) */
		reached[1][3056] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1888: // STATE 3056 - mutant_1.pml:246 - [.(goto)] (0:3058:0 - 6)
		IfNotBlocked
		reached[1][3056] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1889: // STATE 3041 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (3058:0:1 - 1)
		IfNotBlocked
		reached[1][3041] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3058, 3042, 3058) */
		reached[1][3042] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3058, 3043, 3058) */
		reached[1][3043] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3058, 3056, 3058) */
		reached[1][3056] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1890: // STATE 3044 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3058:0:1 - 1)
		IfNotBlocked
		reached[1][3044] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3058, 3045, 3058) */
		reached[1][3045] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3058, 3046, 3058) */
		reached[1][3046] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3058, 3056, 3058) */
		reached[1][3056] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1891: // STATE 3047 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3058:0:1 - 1)
		IfNotBlocked
		reached[1][3047] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3058, 3048, 3058) */
		reached[1][3048] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3058, 3049, 3058) */
		reached[1][3049] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3058, 3056, 3058) */
		reached[1][3056] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1892: // STATE 3050 - mutant_1.pml:240 - [((START==ABORT))] (3058:0:1 - 1)
		IfNotBlocked
		reached[1][3050] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3058, 3051, 3058) */
		reached[1][3051] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3058, 3052, 3058) */
		reached[1][3052] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3058, 3056, 3058) */
		reached[1][3056] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1893: // STATE 3054 - mutant_1.pml:244 - [(1)] (3058:0:0 - 1)
		IfNotBlocked
		reached[1][3054] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3058, 3056, 3058) */
		reached[1][3056] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1894: // STATE 3058 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3058] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1895: // STATE 3060 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3060] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1896: // STATE 3063 - mutant_1.pml:252 - [(1)] (3161:0:1 - 1)
		IfNotBlocked
		reached[1][3063] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3161, 3065, 3161) */
		reached[1][3065] = 1;
		;
		/* merge: .(goto)(3161, 3155, 3161) */
		reached[1][3155] = 1;
		;
		/* merge: j = (j+1)(3161, 3157, 3161) */
		reached[1][3157] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3162, 3161) */
		reached[1][3162] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1897: // STATE 3067 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3067] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1898: // STATE 3068 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (3093:0:1 - 1)
		IfNotBlocked
		reached[1][3068] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3093, 3069, 3093) */
		reached[1][3069] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3093, 3070, 3093) */
		reached[1][3070] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3093, 3086, 3093) */
		reached[1][3086] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1899: // STATE 3086 - mutant_1.pml:276 - [.(goto)] (0:3093:0 - 6)
		IfNotBlocked
		reached[1][3086] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1900: // STATE 3071 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (3093:0:1 - 1)
		IfNotBlocked
		reached[1][3071] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3093, 3072, 3093) */
		reached[1][3072] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3093, 3073, 3093) */
		reached[1][3073] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3093, 3086, 3093) */
		reached[1][3086] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1901: // STATE 3074 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3093:0:1 - 1)
		IfNotBlocked
		reached[1][3074] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3093, 3075, 3093) */
		reached[1][3075] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3093, 3076, 3093) */
		reached[1][3076] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3093, 3086, 3093) */
		reached[1][3086] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1902: // STATE 3077 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3093:0:1 - 1)
		IfNotBlocked
		reached[1][3077] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3093, 3078, 3093) */
		reached[1][3078] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3093, 3079, 3093) */
		reached[1][3079] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3093, 3086, 3093) */
		reached[1][3086] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1903: // STATE 3080 - mutant_1.pml:270 - [((PAUSE==ABORT))] (3093:0:1 - 1)
		IfNotBlocked
		reached[1][3080] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3093, 3081, 3093) */
		reached[1][3081] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3093, 3082, 3093) */
		reached[1][3082] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3093, 3086, 3093) */
		reached[1][3086] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1904: // STATE 3084 - mutant_1.pml:274 - [(1)] (3093:0:0 - 1)
		IfNotBlocked
		reached[1][3084] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3093, 3086, 3093) */
		reached[1][3086] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1905: // STATE 3089 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3089] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1906: // STATE 3092 - mutant_1.pml:281 - [(1)] (3161:0:1 - 1)
		IfNotBlocked
		reached[1][3092] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3161, 3094, 3161) */
		reached[1][3094] = 1;
		;
		/* merge: .(goto)(3161, 3155, 3161) */
		reached[1][3155] = 1;
		;
		/* merge: j = (j+1)(3161, 3157, 3161) */
		reached[1][3157] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3162, 3161) */
		reached[1][3162] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1907: // STATE 3096 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3096] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1908: // STATE 3097 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (3122:0:1 - 1)
		IfNotBlocked
		reached[1][3097] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3122, 3098, 3122) */
		reached[1][3098] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3122, 3099, 3122) */
		reached[1][3099] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3122, 3115, 3122) */
		reached[1][3115] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1909: // STATE 3115 - mutant_1.pml:305 - [.(goto)] (0:3122:0 - 6)
		IfNotBlocked
		reached[1][3115] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1910: // STATE 3100 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (3122:0:1 - 1)
		IfNotBlocked
		reached[1][3100] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3122, 3101, 3122) */
		reached[1][3101] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3122, 3102, 3122) */
		reached[1][3102] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3122, 3115, 3122) */
		reached[1][3115] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1911: // STATE 3103 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3122:0:1 - 1)
		IfNotBlocked
		reached[1][3103] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3122, 3104, 3122) */
		reached[1][3104] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3122, 3105, 3122) */
		reached[1][3105] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3122, 3115, 3122) */
		reached[1][3115] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1912: // STATE 3106 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3122:0:1 - 1)
		IfNotBlocked
		reached[1][3106] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3122, 3107, 3122) */
		reached[1][3107] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3122, 3108, 3122) */
		reached[1][3108] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3122, 3115, 3122) */
		reached[1][3115] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1913: // STATE 3109 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (3122:0:1 - 1)
		IfNotBlocked
		reached[1][3109] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3122, 3110, 3122) */
		reached[1][3110] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3122, 3111, 3122) */
		reached[1][3111] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3122, 3115, 3122) */
		reached[1][3115] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1914: // STATE 3113 - mutant_1.pml:303 - [(1)] (3122:0:0 - 1)
		IfNotBlocked
		reached[1][3113] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3122, 3115, 3122) */
		reached[1][3115] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1915: // STATE 3118 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3118] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1916: // STATE 3121 - mutant_1.pml:310 - [(1)] (3161:0:1 - 1)
		IfNotBlocked
		reached[1][3121] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3161, 3123, 3161) */
		reached[1][3123] = 1;
		;
		/* merge: .(goto)(3161, 3155, 3161) */
		reached[1][3155] = 1;
		;
		/* merge: j = (j+1)(3161, 3157, 3161) */
		reached[1][3157] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3162, 3161) */
		reached[1][3162] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1917: // STATE 3125 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3125] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1918: // STATE 3126 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (3151:0:1 - 1)
		IfNotBlocked
		reached[1][3126] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3151, 3127, 3151) */
		reached[1][3127] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3151, 3128, 3151) */
		reached[1][3128] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3151, 3144, 3151) */
		reached[1][3144] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1919: // STATE 3144 - mutant_1.pml:334 - [.(goto)] (0:3151:0 - 6)
		IfNotBlocked
		reached[1][3144] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1920: // STATE 3129 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (3151:0:1 - 1)
		IfNotBlocked
		reached[1][3129] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3151, 3130, 3151) */
		reached[1][3130] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3151, 3131, 3151) */
		reached[1][3131] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3151, 3144, 3151) */
		reached[1][3144] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1921: // STATE 3132 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3151:0:1 - 1)
		IfNotBlocked
		reached[1][3132] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3151, 3133, 3151) */
		reached[1][3133] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3151, 3134, 3151) */
		reached[1][3134] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3151, 3144, 3151) */
		reached[1][3144] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1922: // STATE 3135 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3151:0:1 - 1)
		IfNotBlocked
		reached[1][3135] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3151, 3136, 3151) */
		reached[1][3136] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3151, 3137, 3151) */
		reached[1][3137] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3151, 3144, 3151) */
		reached[1][3144] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1923: // STATE 3138 - mutant_1.pml:328 - [((STOP==ABORT))] (3151:0:1 - 1)
		IfNotBlocked
		reached[1][3138] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3151, 3139, 3151) */
		reached[1][3139] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3151, 3140, 3151) */
		reached[1][3140] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3151, 3144, 3151) */
		reached[1][3144] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1924: // STATE 3142 - mutant_1.pml:332 - [(1)] (3151:0:0 - 1)
		IfNotBlocked
		reached[1][3142] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3151, 3144, 3151) */
		reached[1][3144] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1925: // STATE 3147 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3147] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1926: // STATE 3150 - mutant_1.pml:339 - [(1)] (3161:0:1 - 1)
		IfNotBlocked
		reached[1][3150] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3161, 3152, 3161) */
		reached[1][3152] = 1;
		;
		/* merge: .(goto)(3161, 3155, 3161) */
		reached[1][3155] = 1;
		;
		/* merge: j = (j+1)(3161, 3157, 3161) */
		reached[1][3157] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3162, 3161) */
		reached[1][3162] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1927: // STATE 3157 - mutant_1.pml:375 - [j = (j+1)] (0:3161:1 - 13)
		IfNotBlocked
		reached[1][3157] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3162, 3161) */
		reached[1][3162] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1928: // STATE 3159 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3159] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1929: // STATE 3166 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3166] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1930: // STATE 3167 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3167] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1931: // STATE 3168 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3168] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1932: // STATE 3169 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (3189:0:1 - 1)
		IfNotBlocked
		reached[1][3169] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3189, 3170, 3189) */
		reached[1][3170] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3189, 3171, 3189) */
		reached[1][3171] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3189, 3187, 3189) */
		reached[1][3187] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1933: // STATE 3187 - mutant_1.pml:246 - [.(goto)] (0:3189:0 - 6)
		IfNotBlocked
		reached[1][3187] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1934: // STATE 3172 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (3189:0:1 - 1)
		IfNotBlocked
		reached[1][3172] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3189, 3173, 3189) */
		reached[1][3173] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3189, 3174, 3189) */
		reached[1][3174] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3189, 3187, 3189) */
		reached[1][3187] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1935: // STATE 3175 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3189:0:1 - 1)
		IfNotBlocked
		reached[1][3175] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3189, 3176, 3189) */
		reached[1][3176] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3189, 3177, 3189) */
		reached[1][3177] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3189, 3187, 3189) */
		reached[1][3187] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1936: // STATE 3178 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3189:0:1 - 1)
		IfNotBlocked
		reached[1][3178] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3189, 3179, 3189) */
		reached[1][3179] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3189, 3180, 3189) */
		reached[1][3180] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3189, 3187, 3189) */
		reached[1][3187] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1937: // STATE 3181 - mutant_1.pml:240 - [((START==ABORT))] (3189:0:1 - 1)
		IfNotBlocked
		reached[1][3181] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3189, 3182, 3189) */
		reached[1][3182] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3189, 3183, 3189) */
		reached[1][3183] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3189, 3187, 3189) */
		reached[1][3187] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1938: // STATE 3185 - mutant_1.pml:244 - [(1)] (3189:0:0 - 1)
		IfNotBlocked
		reached[1][3185] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3189, 3187, 3189) */
		reached[1][3187] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1939: // STATE 3189 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3189] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1940: // STATE 3191 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3191] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1941: // STATE 3194 - mutant_1.pml:252 - [(1)] (3292:0:1 - 1)
		IfNotBlocked
		reached[1][3194] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3292, 3196, 3292) */
		reached[1][3196] = 1;
		;
		/* merge: .(goto)(3292, 3286, 3292) */
		reached[1][3286] = 1;
		;
		/* merge: j = (j-1)(3292, 3288, 3292) */
		reached[1][3288] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3293, 3292) */
		reached[1][3293] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1942: // STATE 3198 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3198] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1943: // STATE 3199 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (3224:0:1 - 1)
		IfNotBlocked
		reached[1][3199] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3224, 3200, 3224) */
		reached[1][3200] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3224, 3201, 3224) */
		reached[1][3201] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3224, 3217, 3224) */
		reached[1][3217] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1944: // STATE 3217 - mutant_1.pml:276 - [.(goto)] (0:3224:0 - 6)
		IfNotBlocked
		reached[1][3217] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1945: // STATE 3202 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (3224:0:1 - 1)
		IfNotBlocked
		reached[1][3202] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3224, 3203, 3224) */
		reached[1][3203] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3224, 3204, 3224) */
		reached[1][3204] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3224, 3217, 3224) */
		reached[1][3217] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1946: // STATE 3205 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3224:0:1 - 1)
		IfNotBlocked
		reached[1][3205] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3224, 3206, 3224) */
		reached[1][3206] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3224, 3207, 3224) */
		reached[1][3207] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3224, 3217, 3224) */
		reached[1][3217] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1947: // STATE 3208 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3224:0:1 - 1)
		IfNotBlocked
		reached[1][3208] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3224, 3209, 3224) */
		reached[1][3209] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3224, 3210, 3224) */
		reached[1][3210] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3224, 3217, 3224) */
		reached[1][3217] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1948: // STATE 3211 - mutant_1.pml:270 - [((PAUSE==ABORT))] (3224:0:1 - 1)
		IfNotBlocked
		reached[1][3211] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3224, 3212, 3224) */
		reached[1][3212] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3224, 3213, 3224) */
		reached[1][3213] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3224, 3217, 3224) */
		reached[1][3217] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1949: // STATE 3215 - mutant_1.pml:274 - [(1)] (3224:0:0 - 1)
		IfNotBlocked
		reached[1][3215] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3224, 3217, 3224) */
		reached[1][3217] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1950: // STATE 3220 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3220] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1951: // STATE 3223 - mutant_1.pml:281 - [(1)] (3292:0:1 - 1)
		IfNotBlocked
		reached[1][3223] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3292, 3225, 3292) */
		reached[1][3225] = 1;
		;
		/* merge: .(goto)(3292, 3286, 3292) */
		reached[1][3286] = 1;
		;
		/* merge: j = (j-1)(3292, 3288, 3292) */
		reached[1][3288] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3293, 3292) */
		reached[1][3293] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1952: // STATE 3227 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3227] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1953: // STATE 3228 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (3253:0:1 - 1)
		IfNotBlocked
		reached[1][3228] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3253, 3229, 3253) */
		reached[1][3229] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3253, 3230, 3253) */
		reached[1][3230] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3253, 3246, 3253) */
		reached[1][3246] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1954: // STATE 3246 - mutant_1.pml:305 - [.(goto)] (0:3253:0 - 6)
		IfNotBlocked
		reached[1][3246] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1955: // STATE 3231 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (3253:0:1 - 1)
		IfNotBlocked
		reached[1][3231] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3253, 3232, 3253) */
		reached[1][3232] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3253, 3233, 3253) */
		reached[1][3233] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3253, 3246, 3253) */
		reached[1][3246] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1956: // STATE 3234 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3253:0:1 - 1)
		IfNotBlocked
		reached[1][3234] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3253, 3235, 3253) */
		reached[1][3235] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3253, 3236, 3253) */
		reached[1][3236] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3253, 3246, 3253) */
		reached[1][3246] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1957: // STATE 3237 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3253:0:1 - 1)
		IfNotBlocked
		reached[1][3237] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3253, 3238, 3253) */
		reached[1][3238] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3253, 3239, 3253) */
		reached[1][3239] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3253, 3246, 3253) */
		reached[1][3246] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1958: // STATE 3240 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (3253:0:1 - 1)
		IfNotBlocked
		reached[1][3240] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3253, 3241, 3253) */
		reached[1][3241] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3253, 3242, 3253) */
		reached[1][3242] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3253, 3246, 3253) */
		reached[1][3246] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1959: // STATE 3244 - mutant_1.pml:303 - [(1)] (3253:0:0 - 1)
		IfNotBlocked
		reached[1][3244] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3253, 3246, 3253) */
		reached[1][3246] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1960: // STATE 3249 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3249] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1961: // STATE 3252 - mutant_1.pml:310 - [(1)] (3292:0:1 - 1)
		IfNotBlocked
		reached[1][3252] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3292, 3254, 3292) */
		reached[1][3254] = 1;
		;
		/* merge: .(goto)(3292, 3286, 3292) */
		reached[1][3286] = 1;
		;
		/* merge: j = (j-1)(3292, 3288, 3292) */
		reached[1][3288] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3293, 3292) */
		reached[1][3293] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1962: // STATE 3256 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3256] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1963: // STATE 3257 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (3282:0:1 - 1)
		IfNotBlocked
		reached[1][3257] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3282, 3258, 3282) */
		reached[1][3258] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3282, 3259, 3282) */
		reached[1][3259] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3282, 3275, 3282) */
		reached[1][3275] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1964: // STATE 3275 - mutant_1.pml:334 - [.(goto)] (0:3282:0 - 6)
		IfNotBlocked
		reached[1][3275] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1965: // STATE 3260 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (3282:0:1 - 1)
		IfNotBlocked
		reached[1][3260] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3282, 3261, 3282) */
		reached[1][3261] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3282, 3262, 3282) */
		reached[1][3262] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3282, 3275, 3282) */
		reached[1][3275] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1966: // STATE 3263 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3282:0:1 - 1)
		IfNotBlocked
		reached[1][3263] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3282, 3264, 3282) */
		reached[1][3264] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3282, 3265, 3282) */
		reached[1][3265] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3282, 3275, 3282) */
		reached[1][3275] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1967: // STATE 3266 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3282:0:1 - 1)
		IfNotBlocked
		reached[1][3266] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3282, 3267, 3282) */
		reached[1][3267] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3282, 3268, 3282) */
		reached[1][3268] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3282, 3275, 3282) */
		reached[1][3275] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1968: // STATE 3269 - mutant_1.pml:328 - [((STOP==ABORT))] (3282:0:1 - 1)
		IfNotBlocked
		reached[1][3269] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3282, 3270, 3282) */
		reached[1][3270] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3282, 3271, 3282) */
		reached[1][3271] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3282, 3275, 3282) */
		reached[1][3275] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1969: // STATE 3273 - mutant_1.pml:332 - [(1)] (3282:0:0 - 1)
		IfNotBlocked
		reached[1][3273] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3282, 3275, 3282) */
		reached[1][3275] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1970: // STATE 3278 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3278] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1971: // STATE 3281 - mutant_1.pml:339 - [(1)] (3292:0:1 - 1)
		IfNotBlocked
		reached[1][3281] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3292, 3283, 3292) */
		reached[1][3283] = 1;
		;
		/* merge: .(goto)(3292, 3286, 3292) */
		reached[1][3286] = 1;
		;
		/* merge: j = (j-1)(3292, 3288, 3292) */
		reached[1][3288] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3293, 3292) */
		reached[1][3293] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1972: // STATE 3288 - mutant_1.pml:386 - [j = (j-1)] (0:3292:1 - 13)
		IfNotBlocked
		reached[1][3288] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3293, 3292) */
		reached[1][3293] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1973: // STATE 3290 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3290] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 1974: // STATE 3300 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3300] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1975: // STATE 3301 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3301] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1976: // STATE 3302 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (3322:0:1 - 1)
		IfNotBlocked
		reached[1][3302] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3322, 3303, 3322) */
		reached[1][3303] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3322, 3304, 3322) */
		reached[1][3304] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3322, 3320, 3322) */
		reached[1][3320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1977: // STATE 3320 - mutant_1.pml:246 - [.(goto)] (0:3322:0 - 6)
		IfNotBlocked
		reached[1][3320] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1978: // STATE 3305 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (3322:0:1 - 1)
		IfNotBlocked
		reached[1][3305] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3322, 3306, 3322) */
		reached[1][3306] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3322, 3307, 3322) */
		reached[1][3307] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3322, 3320, 3322) */
		reached[1][3320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1979: // STATE 3308 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3322:0:1 - 1)
		IfNotBlocked
		reached[1][3308] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3322, 3309, 3322) */
		reached[1][3309] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3322, 3310, 3322) */
		reached[1][3310] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3322, 3320, 3322) */
		reached[1][3320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1980: // STATE 3311 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3322:0:1 - 1)
		IfNotBlocked
		reached[1][3311] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3322, 3312, 3322) */
		reached[1][3312] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3322, 3313, 3322) */
		reached[1][3313] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3322, 3320, 3322) */
		reached[1][3320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1981: // STATE 3314 - mutant_1.pml:240 - [((START==ABORT))] (3322:0:1 - 1)
		IfNotBlocked
		reached[1][3314] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3322, 3315, 3322) */
		reached[1][3315] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3322, 3316, 3322) */
		reached[1][3316] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3322, 3320, 3322) */
		reached[1][3320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1982: // STATE 3318 - mutant_1.pml:244 - [(1)] (3322:0:0 - 1)
		IfNotBlocked
		reached[1][3318] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3322, 3320, 3322) */
		reached[1][3320] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1983: // STATE 3322 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3322] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1984: // STATE 3324 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3324] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1985: // STATE 3327 - mutant_1.pml:252 - [(1)] (3425:0:1 - 1)
		IfNotBlocked
		reached[1][3327] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3425, 3329, 3425) */
		reached[1][3329] = 1;
		;
		/* merge: .(goto)(3425, 3419, 3425) */
		reached[1][3419] = 1;
		;
		/* merge: j = (j+1)(3425, 3421, 3425) */
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1986: // STATE 3331 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3331] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1987: // STATE 3332 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (3357:0:1 - 1)
		IfNotBlocked
		reached[1][3332] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3357, 3333, 3357) */
		reached[1][3333] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3357, 3334, 3357) */
		reached[1][3334] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3357, 3350, 3357) */
		reached[1][3350] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1988: // STATE 3350 - mutant_1.pml:276 - [.(goto)] (0:3357:0 - 6)
		IfNotBlocked
		reached[1][3350] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1989: // STATE 3335 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (3357:0:1 - 1)
		IfNotBlocked
		reached[1][3335] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3357, 3336, 3357) */
		reached[1][3336] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3357, 3337, 3357) */
		reached[1][3337] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3357, 3350, 3357) */
		reached[1][3350] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1990: // STATE 3338 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3357:0:1 - 1)
		IfNotBlocked
		reached[1][3338] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3357, 3339, 3357) */
		reached[1][3339] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3357, 3340, 3357) */
		reached[1][3340] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3357, 3350, 3357) */
		reached[1][3350] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1991: // STATE 3341 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3357:0:1 - 1)
		IfNotBlocked
		reached[1][3341] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3357, 3342, 3357) */
		reached[1][3342] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3357, 3343, 3357) */
		reached[1][3343] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3357, 3350, 3357) */
		reached[1][3350] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1992: // STATE 3344 - mutant_1.pml:270 - [((PAUSE==ABORT))] (3357:0:1 - 1)
		IfNotBlocked
		reached[1][3344] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3357, 3345, 3357) */
		reached[1][3345] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3357, 3346, 3357) */
		reached[1][3346] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3357, 3350, 3357) */
		reached[1][3350] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1993: // STATE 3348 - mutant_1.pml:274 - [(1)] (3357:0:0 - 1)
		IfNotBlocked
		reached[1][3348] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3357, 3350, 3357) */
		reached[1][3350] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 1994: // STATE 3353 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3353] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1995: // STATE 3356 - mutant_1.pml:281 - [(1)] (3425:0:1 - 1)
		IfNotBlocked
		reached[1][3356] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3425, 3358, 3425) */
		reached[1][3358] = 1;
		;
		/* merge: .(goto)(3425, 3419, 3425) */
		reached[1][3419] = 1;
		;
		/* merge: j = (j+1)(3425, 3421, 3425) */
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 1996: // STATE 3360 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3360] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 1997: // STATE 3361 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (3386:0:1 - 1)
		IfNotBlocked
		reached[1][3361] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3386, 3362, 3386) */
		reached[1][3362] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3386, 3363, 3386) */
		reached[1][3363] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3386, 3379, 3386) */
		reached[1][3379] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 1998: // STATE 3379 - mutant_1.pml:305 - [.(goto)] (0:3386:0 - 6)
		IfNotBlocked
		reached[1][3379] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 1999: // STATE 3364 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (3386:0:1 - 1)
		IfNotBlocked
		reached[1][3364] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3386, 3365, 3386) */
		reached[1][3365] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3386, 3366, 3386) */
		reached[1][3366] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3386, 3379, 3386) */
		reached[1][3379] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2000: // STATE 3367 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3386:0:1 - 1)
		IfNotBlocked
		reached[1][3367] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3386, 3368, 3386) */
		reached[1][3368] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3386, 3369, 3386) */
		reached[1][3369] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3386, 3379, 3386) */
		reached[1][3379] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2001: // STATE 3370 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3386:0:1 - 1)
		IfNotBlocked
		reached[1][3370] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3386, 3371, 3386) */
		reached[1][3371] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3386, 3372, 3386) */
		reached[1][3372] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3386, 3379, 3386) */
		reached[1][3379] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2002: // STATE 3373 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (3386:0:1 - 1)
		IfNotBlocked
		reached[1][3373] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3386, 3374, 3386) */
		reached[1][3374] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3386, 3375, 3386) */
		reached[1][3375] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3386, 3379, 3386) */
		reached[1][3379] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2003: // STATE 3377 - mutant_1.pml:303 - [(1)] (3386:0:0 - 1)
		IfNotBlocked
		reached[1][3377] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3386, 3379, 3386) */
		reached[1][3379] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2004: // STATE 3382 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3382] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2005: // STATE 3385 - mutant_1.pml:310 - [(1)] (3425:0:1 - 1)
		IfNotBlocked
		reached[1][3385] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3425, 3387, 3425) */
		reached[1][3387] = 1;
		;
		/* merge: .(goto)(3425, 3419, 3425) */
		reached[1][3419] = 1;
		;
		/* merge: j = (j+1)(3425, 3421, 3425) */
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2006: // STATE 3389 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3389] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2007: // STATE 3390 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (3415:0:1 - 1)
		IfNotBlocked
		reached[1][3390] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3415, 3391, 3415) */
		reached[1][3391] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3415, 3392, 3415) */
		reached[1][3392] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3415, 3408, 3415) */
		reached[1][3408] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2008: // STATE 3408 - mutant_1.pml:334 - [.(goto)] (0:3415:0 - 6)
		IfNotBlocked
		reached[1][3408] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2009: // STATE 3393 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (3415:0:1 - 1)
		IfNotBlocked
		reached[1][3393] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3415, 3394, 3415) */
		reached[1][3394] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3415, 3395, 3415) */
		reached[1][3395] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3415, 3408, 3415) */
		reached[1][3408] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2010: // STATE 3396 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3415:0:1 - 1)
		IfNotBlocked
		reached[1][3396] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3415, 3397, 3415) */
		reached[1][3397] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3415, 3398, 3415) */
		reached[1][3398] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3415, 3408, 3415) */
		reached[1][3408] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2011: // STATE 3399 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3415:0:1 - 1)
		IfNotBlocked
		reached[1][3399] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3415, 3400, 3415) */
		reached[1][3400] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3415, 3401, 3415) */
		reached[1][3401] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3415, 3408, 3415) */
		reached[1][3408] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2012: // STATE 3402 - mutant_1.pml:328 - [((STOP==ABORT))] (3415:0:1 - 1)
		IfNotBlocked
		reached[1][3402] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3415, 3403, 3415) */
		reached[1][3403] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3415, 3404, 3415) */
		reached[1][3404] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3415, 3408, 3415) */
		reached[1][3408] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2013: // STATE 3406 - mutant_1.pml:332 - [(1)] (3415:0:0 - 1)
		IfNotBlocked
		reached[1][3406] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3415, 3408, 3415) */
		reached[1][3408] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2014: // STATE 3411 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3411] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2015: // STATE 3414 - mutant_1.pml:339 - [(1)] (3425:0:1 - 1)
		IfNotBlocked
		reached[1][3414] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3425, 3416, 3425) */
		reached[1][3416] = 1;
		;
		/* merge: .(goto)(3425, 3419, 3425) */
		reached[1][3419] = 1;
		;
		/* merge: j = (j+1)(3425, 3421, 3425) */
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2016: // STATE 3421 - mutant_1.pml:375 - [j = (j+1)] (0:3425:1 - 13)
		IfNotBlocked
		reached[1][3421] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3426, 3425) */
		reached[1][3426] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2017: // STATE 3423 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3423] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2018: // STATE 3429 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3429] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2019: // STATE 3430 - mutant_1.pml:405 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3430] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2020: // STATE 3431 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3431] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2021: // STATE 3433 - mutant_1.pml:407 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3433] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2022: // STATE 3434 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3434] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2023: // STATE 3436 - mutant_1.pml:409 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3436] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2024: // STATE 3437 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3437] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2025: // STATE 3439 - mutant_1.pml:411 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3439] = 1;
		if (!((8==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2026: // STATE 3440 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3440] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2027: // STATE 3444 - mutant_1.pml:414 - [j = (j+1)] (0:3448:1 - 5)
		IfNotBlocked
		reached[1][3444] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3449, 3448) */
		reached[1][3449] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2028: // STATE 3446 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3446] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2029: // STATE 3457 - mutant_1.pml:449 - [((11==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3457] = 1;
		if (!((11==10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2030: // STATE 3458 - mutant_1.pml:422 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3458] = 1;
		if (!(((6==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2031: // STATE 3459 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3459] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2032: // STATE 3461 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3461] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2033: // STATE 3462 - mutant_1.pml:394 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3462] = 1;
		if (!(((6==9)||(6==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2034: // STATE 3463 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3463] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2035: // STATE 3464 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3464] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2036: // STATE 3465 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (3485:0:1 - 1)
		IfNotBlocked
		reached[1][3465] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3485, 3466, 3485) */
		reached[1][3466] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3485, 3467, 3485) */
		reached[1][3467] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3485, 3483, 3485) */
		reached[1][3483] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2037: // STATE 3483 - mutant_1.pml:246 - [.(goto)] (0:3485:0 - 6)
		IfNotBlocked
		reached[1][3483] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2038: // STATE 3468 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (3485:0:1 - 1)
		IfNotBlocked
		reached[1][3468] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3485, 3469, 3485) */
		reached[1][3469] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3485, 3470, 3485) */
		reached[1][3470] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3485, 3483, 3485) */
		reached[1][3483] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2039: // STATE 3471 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3485:0:1 - 1)
		IfNotBlocked
		reached[1][3471] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3485, 3472, 3485) */
		reached[1][3472] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3485, 3473, 3485) */
		reached[1][3473] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3485, 3483, 3485) */
		reached[1][3483] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2040: // STATE 3474 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3485:0:1 - 1)
		IfNotBlocked
		reached[1][3474] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3485, 3475, 3485) */
		reached[1][3475] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3485, 3476, 3485) */
		reached[1][3476] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3485, 3483, 3485) */
		reached[1][3483] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2041: // STATE 3477 - mutant_1.pml:240 - [((START==ABORT))] (3485:0:1 - 1)
		IfNotBlocked
		reached[1][3477] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3485, 3478, 3485) */
		reached[1][3478] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3485, 3479, 3485) */
		reached[1][3479] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3485, 3483, 3485) */
		reached[1][3483] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2042: // STATE 3481 - mutant_1.pml:244 - [(1)] (3485:0:0 - 1)
		IfNotBlocked
		reached[1][3481] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3485, 3483, 3485) */
		reached[1][3483] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2043: // STATE 3485 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3485] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2044: // STATE 3487 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3487] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2045: // STATE 3490 - mutant_1.pml:252 - [(1)] (3588:0:1 - 1)
		IfNotBlocked
		reached[1][3490] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3588, 3492, 3588) */
		reached[1][3492] = 1;
		;
		/* merge: .(goto)(3588, 3582, 3588) */
		reached[1][3582] = 1;
		;
		/* merge: j = (j+1)(3588, 3584, 3588) */
		reached[1][3584] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3589, 3588) */
		reached[1][3589] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2046: // STATE 3494 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3494] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2047: // STATE 3495 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (3520:0:1 - 1)
		IfNotBlocked
		reached[1][3495] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3520, 3496, 3520) */
		reached[1][3496] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3520, 3497, 3520) */
		reached[1][3497] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3520, 3513, 3520) */
		reached[1][3513] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2048: // STATE 3513 - mutant_1.pml:276 - [.(goto)] (0:3520:0 - 6)
		IfNotBlocked
		reached[1][3513] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2049: // STATE 3498 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (3520:0:1 - 1)
		IfNotBlocked
		reached[1][3498] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3520, 3499, 3520) */
		reached[1][3499] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3520, 3500, 3520) */
		reached[1][3500] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3520, 3513, 3520) */
		reached[1][3513] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2050: // STATE 3501 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3520:0:1 - 1)
		IfNotBlocked
		reached[1][3501] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3520, 3502, 3520) */
		reached[1][3502] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3520, 3503, 3520) */
		reached[1][3503] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3520, 3513, 3520) */
		reached[1][3513] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2051: // STATE 3504 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3520:0:1 - 1)
		IfNotBlocked
		reached[1][3504] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3520, 3505, 3520) */
		reached[1][3505] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3520, 3506, 3520) */
		reached[1][3506] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3520, 3513, 3520) */
		reached[1][3513] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2052: // STATE 3507 - mutant_1.pml:270 - [((PAUSE==ABORT))] (3520:0:1 - 1)
		IfNotBlocked
		reached[1][3507] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3520, 3508, 3520) */
		reached[1][3508] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3520, 3509, 3520) */
		reached[1][3509] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3520, 3513, 3520) */
		reached[1][3513] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2053: // STATE 3511 - mutant_1.pml:274 - [(1)] (3520:0:0 - 1)
		IfNotBlocked
		reached[1][3511] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3520, 3513, 3520) */
		reached[1][3513] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2054: // STATE 3516 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3516] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2055: // STATE 3519 - mutant_1.pml:281 - [(1)] (3588:0:1 - 1)
		IfNotBlocked
		reached[1][3519] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3588, 3521, 3588) */
		reached[1][3521] = 1;
		;
		/* merge: .(goto)(3588, 3582, 3588) */
		reached[1][3582] = 1;
		;
		/* merge: j = (j+1)(3588, 3584, 3588) */
		reached[1][3584] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3589, 3588) */
		reached[1][3589] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2056: // STATE 3523 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3523] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2057: // STATE 3524 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (3549:0:1 - 1)
		IfNotBlocked
		reached[1][3524] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3549, 3525, 3549) */
		reached[1][3525] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3549, 3526, 3549) */
		reached[1][3526] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3549, 3542, 3549) */
		reached[1][3542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2058: // STATE 3542 - mutant_1.pml:305 - [.(goto)] (0:3549:0 - 6)
		IfNotBlocked
		reached[1][3542] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2059: // STATE 3527 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (3549:0:1 - 1)
		IfNotBlocked
		reached[1][3527] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3549, 3528, 3549) */
		reached[1][3528] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3549, 3529, 3549) */
		reached[1][3529] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3549, 3542, 3549) */
		reached[1][3542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2060: // STATE 3530 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3549:0:1 - 1)
		IfNotBlocked
		reached[1][3530] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3549, 3531, 3549) */
		reached[1][3531] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3549, 3532, 3549) */
		reached[1][3532] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3549, 3542, 3549) */
		reached[1][3542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2061: // STATE 3533 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3549:0:1 - 1)
		IfNotBlocked
		reached[1][3533] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3549, 3534, 3549) */
		reached[1][3534] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3549, 3535, 3549) */
		reached[1][3535] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3549, 3542, 3549) */
		reached[1][3542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2062: // STATE 3536 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (3549:0:1 - 1)
		IfNotBlocked
		reached[1][3536] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3549, 3537, 3549) */
		reached[1][3537] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3549, 3538, 3549) */
		reached[1][3538] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3549, 3542, 3549) */
		reached[1][3542] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2063: // STATE 3540 - mutant_1.pml:303 - [(1)] (3549:0:0 - 1)
		IfNotBlocked
		reached[1][3540] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3549, 3542, 3549) */
		reached[1][3542] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2064: // STATE 3545 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3545] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2065: // STATE 3548 - mutant_1.pml:310 - [(1)] (3588:0:1 - 1)
		IfNotBlocked
		reached[1][3548] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3588, 3550, 3588) */
		reached[1][3550] = 1;
		;
		/* merge: .(goto)(3588, 3582, 3588) */
		reached[1][3582] = 1;
		;
		/* merge: j = (j+1)(3588, 3584, 3588) */
		reached[1][3584] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3589, 3588) */
		reached[1][3589] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2066: // STATE 3552 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3552] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2067: // STATE 3553 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (3578:0:1 - 1)
		IfNotBlocked
		reached[1][3553] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3578, 3554, 3578) */
		reached[1][3554] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3578, 3555, 3578) */
		reached[1][3555] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3578, 3571, 3578) */
		reached[1][3571] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2068: // STATE 3571 - mutant_1.pml:334 - [.(goto)] (0:3578:0 - 6)
		IfNotBlocked
		reached[1][3571] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2069: // STATE 3556 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (3578:0:1 - 1)
		IfNotBlocked
		reached[1][3556] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3578, 3557, 3578) */
		reached[1][3557] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3578, 3558, 3578) */
		reached[1][3558] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3578, 3571, 3578) */
		reached[1][3571] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2070: // STATE 3559 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3578:0:1 - 1)
		IfNotBlocked
		reached[1][3559] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3578, 3560, 3578) */
		reached[1][3560] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3578, 3561, 3578) */
		reached[1][3561] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3578, 3571, 3578) */
		reached[1][3571] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2071: // STATE 3562 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3578:0:1 - 1)
		IfNotBlocked
		reached[1][3562] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3578, 3563, 3578) */
		reached[1][3563] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3578, 3564, 3578) */
		reached[1][3564] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3578, 3571, 3578) */
		reached[1][3571] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2072: // STATE 3565 - mutant_1.pml:328 - [((STOP==ABORT))] (3578:0:1 - 1)
		IfNotBlocked
		reached[1][3565] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3578, 3566, 3578) */
		reached[1][3566] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3578, 3567, 3578) */
		reached[1][3567] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3578, 3571, 3578) */
		reached[1][3571] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2073: // STATE 3569 - mutant_1.pml:332 - [(1)] (3578:0:0 - 1)
		IfNotBlocked
		reached[1][3569] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3578, 3571, 3578) */
		reached[1][3571] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2074: // STATE 3574 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3574] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2075: // STATE 3577 - mutant_1.pml:339 - [(1)] (3588:0:1 - 1)
		IfNotBlocked
		reached[1][3577] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3588, 3579, 3588) */
		reached[1][3579] = 1;
		;
		/* merge: .(goto)(3588, 3582, 3588) */
		reached[1][3582] = 1;
		;
		/* merge: j = (j+1)(3588, 3584, 3588) */
		reached[1][3584] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3589, 3588) */
		reached[1][3589] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2076: // STATE 3584 - mutant_1.pml:375 - [j = (j+1)] (0:3588:1 - 13)
		IfNotBlocked
		reached[1][3584] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3589, 3588) */
		reached[1][3589] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2077: // STATE 3586 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3586] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2078: // STATE 3593 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3593] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2079: // STATE 3594 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3594] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2080: // STATE 3595 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3595] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2081: // STATE 3596 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (3616:0:1 - 1)
		IfNotBlocked
		reached[1][3596] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3616, 3597, 3616) */
		reached[1][3597] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3616, 3598, 3616) */
		reached[1][3598] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3616, 3614, 3616) */
		reached[1][3614] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2082: // STATE 3614 - mutant_1.pml:246 - [.(goto)] (0:3616:0 - 6)
		IfNotBlocked
		reached[1][3614] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2083: // STATE 3599 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (3616:0:1 - 1)
		IfNotBlocked
		reached[1][3599] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3616, 3600, 3616) */
		reached[1][3600] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3616, 3601, 3616) */
		reached[1][3601] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3616, 3614, 3616) */
		reached[1][3614] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2084: // STATE 3602 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3616:0:1 - 1)
		IfNotBlocked
		reached[1][3602] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3616, 3603, 3616) */
		reached[1][3603] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3616, 3604, 3616) */
		reached[1][3604] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3616, 3614, 3616) */
		reached[1][3614] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2085: // STATE 3605 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3616:0:1 - 1)
		IfNotBlocked
		reached[1][3605] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3616, 3606, 3616) */
		reached[1][3606] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3616, 3607, 3616) */
		reached[1][3607] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3616, 3614, 3616) */
		reached[1][3614] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2086: // STATE 3608 - mutant_1.pml:240 - [((START==ABORT))] (3616:0:1 - 1)
		IfNotBlocked
		reached[1][3608] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3616, 3609, 3616) */
		reached[1][3609] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3616, 3610, 3616) */
		reached[1][3610] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3616, 3614, 3616) */
		reached[1][3614] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2087: // STATE 3612 - mutant_1.pml:244 - [(1)] (3616:0:0 - 1)
		IfNotBlocked
		reached[1][3612] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3616, 3614, 3616) */
		reached[1][3614] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2088: // STATE 3616 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3616] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2089: // STATE 3618 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3618] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2090: // STATE 3621 - mutant_1.pml:252 - [(1)] (3719:0:1 - 1)
		IfNotBlocked
		reached[1][3621] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3719, 3623, 3719) */
		reached[1][3623] = 1;
		;
		/* merge: .(goto)(3719, 3713, 3719) */
		reached[1][3713] = 1;
		;
		/* merge: j = (j-1)(3719, 3715, 3719) */
		reached[1][3715] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3720, 3719) */
		reached[1][3720] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2091: // STATE 3625 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3625] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2092: // STATE 3626 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (3651:0:1 - 1)
		IfNotBlocked
		reached[1][3626] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3651, 3627, 3651) */
		reached[1][3627] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3651, 3628, 3651) */
		reached[1][3628] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3651, 3644, 3651) */
		reached[1][3644] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2093: // STATE 3644 - mutant_1.pml:276 - [.(goto)] (0:3651:0 - 6)
		IfNotBlocked
		reached[1][3644] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2094: // STATE 3629 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (3651:0:1 - 1)
		IfNotBlocked
		reached[1][3629] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3651, 3630, 3651) */
		reached[1][3630] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3651, 3631, 3651) */
		reached[1][3631] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3651, 3644, 3651) */
		reached[1][3644] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2095: // STATE 3632 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3651:0:1 - 1)
		IfNotBlocked
		reached[1][3632] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3651, 3633, 3651) */
		reached[1][3633] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3651, 3634, 3651) */
		reached[1][3634] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3651, 3644, 3651) */
		reached[1][3644] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2096: // STATE 3635 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3651:0:1 - 1)
		IfNotBlocked
		reached[1][3635] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3651, 3636, 3651) */
		reached[1][3636] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3651, 3637, 3651) */
		reached[1][3637] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3651, 3644, 3651) */
		reached[1][3644] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2097: // STATE 3638 - mutant_1.pml:270 - [((PAUSE==ABORT))] (3651:0:1 - 1)
		IfNotBlocked
		reached[1][3638] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3651, 3639, 3651) */
		reached[1][3639] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3651, 3640, 3651) */
		reached[1][3640] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3651, 3644, 3651) */
		reached[1][3644] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2098: // STATE 3642 - mutant_1.pml:274 - [(1)] (3651:0:0 - 1)
		IfNotBlocked
		reached[1][3642] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3651, 3644, 3651) */
		reached[1][3644] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2099: // STATE 3647 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3647] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2100: // STATE 3650 - mutant_1.pml:281 - [(1)] (3719:0:1 - 1)
		IfNotBlocked
		reached[1][3650] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3719, 3652, 3719) */
		reached[1][3652] = 1;
		;
		/* merge: .(goto)(3719, 3713, 3719) */
		reached[1][3713] = 1;
		;
		/* merge: j = (j-1)(3719, 3715, 3719) */
		reached[1][3715] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3720, 3719) */
		reached[1][3720] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2101: // STATE 3654 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3654] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2102: // STATE 3655 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (3680:0:1 - 1)
		IfNotBlocked
		reached[1][3655] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3680, 3656, 3680) */
		reached[1][3656] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3680, 3657, 3680) */
		reached[1][3657] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3680, 3673, 3680) */
		reached[1][3673] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2103: // STATE 3673 - mutant_1.pml:305 - [.(goto)] (0:3680:0 - 6)
		IfNotBlocked
		reached[1][3673] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2104: // STATE 3658 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (3680:0:1 - 1)
		IfNotBlocked
		reached[1][3658] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3680, 3659, 3680) */
		reached[1][3659] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3680, 3660, 3680) */
		reached[1][3660] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3680, 3673, 3680) */
		reached[1][3673] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2105: // STATE 3661 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3680:0:1 - 1)
		IfNotBlocked
		reached[1][3661] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3680, 3662, 3680) */
		reached[1][3662] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3680, 3663, 3680) */
		reached[1][3663] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3680, 3673, 3680) */
		reached[1][3673] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2106: // STATE 3664 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3680:0:1 - 1)
		IfNotBlocked
		reached[1][3664] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3680, 3665, 3680) */
		reached[1][3665] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3680, 3666, 3680) */
		reached[1][3666] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3680, 3673, 3680) */
		reached[1][3673] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2107: // STATE 3667 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (3680:0:1 - 1)
		IfNotBlocked
		reached[1][3667] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3680, 3668, 3680) */
		reached[1][3668] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3680, 3669, 3680) */
		reached[1][3669] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3680, 3673, 3680) */
		reached[1][3673] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2108: // STATE 3671 - mutant_1.pml:303 - [(1)] (3680:0:0 - 1)
		IfNotBlocked
		reached[1][3671] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3680, 3673, 3680) */
		reached[1][3673] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2109: // STATE 3676 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3676] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2110: // STATE 3679 - mutant_1.pml:310 - [(1)] (3719:0:1 - 1)
		IfNotBlocked
		reached[1][3679] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3719, 3681, 3719) */
		reached[1][3681] = 1;
		;
		/* merge: .(goto)(3719, 3713, 3719) */
		reached[1][3713] = 1;
		;
		/* merge: j = (j-1)(3719, 3715, 3719) */
		reached[1][3715] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3720, 3719) */
		reached[1][3720] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2111: // STATE 3683 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3683] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2112: // STATE 3684 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (3709:0:1 - 1)
		IfNotBlocked
		reached[1][3684] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3709, 3685, 3709) */
		reached[1][3685] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3709, 3686, 3709) */
		reached[1][3686] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3709, 3702, 3709) */
		reached[1][3702] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2113: // STATE 3702 - mutant_1.pml:334 - [.(goto)] (0:3709:0 - 6)
		IfNotBlocked
		reached[1][3702] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2114: // STATE 3687 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (3709:0:1 - 1)
		IfNotBlocked
		reached[1][3687] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3709, 3688, 3709) */
		reached[1][3688] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3709, 3689, 3709) */
		reached[1][3689] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3709, 3702, 3709) */
		reached[1][3702] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2115: // STATE 3690 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3709:0:1 - 1)
		IfNotBlocked
		reached[1][3690] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3709, 3691, 3709) */
		reached[1][3691] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3709, 3692, 3709) */
		reached[1][3692] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3709, 3702, 3709) */
		reached[1][3702] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2116: // STATE 3693 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3709:0:1 - 1)
		IfNotBlocked
		reached[1][3693] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3709, 3694, 3709) */
		reached[1][3694] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3709, 3695, 3709) */
		reached[1][3695] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3709, 3702, 3709) */
		reached[1][3702] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2117: // STATE 3696 - mutant_1.pml:328 - [((STOP==ABORT))] (3709:0:1 - 1)
		IfNotBlocked
		reached[1][3696] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3709, 3697, 3709) */
		reached[1][3697] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3709, 3698, 3709) */
		reached[1][3698] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3709, 3702, 3709) */
		reached[1][3702] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2118: // STATE 3700 - mutant_1.pml:332 - [(1)] (3709:0:0 - 1)
		IfNotBlocked
		reached[1][3700] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3709, 3702, 3709) */
		reached[1][3702] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2119: // STATE 3705 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3705] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2120: // STATE 3708 - mutant_1.pml:339 - [(1)] (3719:0:1 - 1)
		IfNotBlocked
		reached[1][3708] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3719, 3710, 3719) */
		reached[1][3710] = 1;
		;
		/* merge: .(goto)(3719, 3713, 3719) */
		reached[1][3713] = 1;
		;
		/* merge: j = (j-1)(3719, 3715, 3719) */
		reached[1][3715] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3720, 3719) */
		reached[1][3720] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2121: // STATE 3715 - mutant_1.pml:386 - [j = (j-1)] (0:3719:1 - 13)
		IfNotBlocked
		reached[1][3715] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3720, 3719) */
		reached[1][3720] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2122: // STATE 3717 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3717] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2123: // STATE 3727 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3727] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2124: // STATE 3728 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3728] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2125: // STATE 3729 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (3749:0:1 - 1)
		IfNotBlocked
		reached[1][3729] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3749, 3730, 3749) */
		reached[1][3730] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3749, 3731, 3749) */
		reached[1][3731] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3749, 3747, 3749) */
		reached[1][3747] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2126: // STATE 3747 - mutant_1.pml:246 - [.(goto)] (0:3749:0 - 6)
		IfNotBlocked
		reached[1][3747] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2127: // STATE 3732 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (3749:0:1 - 1)
		IfNotBlocked
		reached[1][3732] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3749, 3733, 3749) */
		reached[1][3733] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3749, 3734, 3749) */
		reached[1][3734] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3749, 3747, 3749) */
		reached[1][3747] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2128: // STATE 3735 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3749:0:1 - 1)
		IfNotBlocked
		reached[1][3735] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3749, 3736, 3749) */
		reached[1][3736] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3749, 3737, 3749) */
		reached[1][3737] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3749, 3747, 3749) */
		reached[1][3747] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2129: // STATE 3738 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3749:0:1 - 1)
		IfNotBlocked
		reached[1][3738] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3749, 3739, 3749) */
		reached[1][3739] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3749, 3740, 3749) */
		reached[1][3740] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3749, 3747, 3749) */
		reached[1][3747] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2130: // STATE 3741 - mutant_1.pml:240 - [((START==ABORT))] (3749:0:1 - 1)
		IfNotBlocked
		reached[1][3741] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3749, 3742, 3749) */
		reached[1][3742] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3749, 3743, 3749) */
		reached[1][3743] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3749, 3747, 3749) */
		reached[1][3747] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2131: // STATE 3745 - mutant_1.pml:244 - [(1)] (3749:0:0 - 1)
		IfNotBlocked
		reached[1][3745] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3749, 3747, 3749) */
		reached[1][3747] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2132: // STATE 3749 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3749] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2133: // STATE 3751 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3751] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2134: // STATE 3754 - mutant_1.pml:252 - [(1)] (3852:0:1 - 1)
		IfNotBlocked
		reached[1][3754] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3852, 3756, 3852) */
		reached[1][3756] = 1;
		;
		/* merge: .(goto)(3852, 3846, 3852) */
		reached[1][3846] = 1;
		;
		/* merge: j = (j+1)(3852, 3848, 3852) */
		reached[1][3848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3853, 3852) */
		reached[1][3853] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2135: // STATE 3758 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3758] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2136: // STATE 3759 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (3784:0:1 - 1)
		IfNotBlocked
		reached[1][3759] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3784, 3760, 3784) */
		reached[1][3760] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3784, 3761, 3784) */
		reached[1][3761] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3784, 3777, 3784) */
		reached[1][3777] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2137: // STATE 3777 - mutant_1.pml:276 - [.(goto)] (0:3784:0 - 6)
		IfNotBlocked
		reached[1][3777] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2138: // STATE 3762 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (3784:0:1 - 1)
		IfNotBlocked
		reached[1][3762] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3784, 3763, 3784) */
		reached[1][3763] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3784, 3764, 3784) */
		reached[1][3764] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3784, 3777, 3784) */
		reached[1][3777] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2139: // STATE 3765 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3784:0:1 - 1)
		IfNotBlocked
		reached[1][3765] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3784, 3766, 3784) */
		reached[1][3766] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3784, 3767, 3784) */
		reached[1][3767] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3784, 3777, 3784) */
		reached[1][3777] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2140: // STATE 3768 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3784:0:1 - 1)
		IfNotBlocked
		reached[1][3768] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3784, 3769, 3784) */
		reached[1][3769] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3784, 3770, 3784) */
		reached[1][3770] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3784, 3777, 3784) */
		reached[1][3777] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2141: // STATE 3771 - mutant_1.pml:270 - [((PAUSE==ABORT))] (3784:0:1 - 1)
		IfNotBlocked
		reached[1][3771] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3784, 3772, 3784) */
		reached[1][3772] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3784, 3773, 3784) */
		reached[1][3773] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3784, 3777, 3784) */
		reached[1][3777] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2142: // STATE 3775 - mutant_1.pml:274 - [(1)] (3784:0:0 - 1)
		IfNotBlocked
		reached[1][3775] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3784, 3777, 3784) */
		reached[1][3777] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2143: // STATE 3780 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3780] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2144: // STATE 3783 - mutant_1.pml:281 - [(1)] (3852:0:1 - 1)
		IfNotBlocked
		reached[1][3783] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3852, 3785, 3852) */
		reached[1][3785] = 1;
		;
		/* merge: .(goto)(3852, 3846, 3852) */
		reached[1][3846] = 1;
		;
		/* merge: j = (j+1)(3852, 3848, 3852) */
		reached[1][3848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3853, 3852) */
		reached[1][3853] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2145: // STATE 3787 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3787] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2146: // STATE 3788 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (3813:0:1 - 1)
		IfNotBlocked
		reached[1][3788] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3813, 3789, 3813) */
		reached[1][3789] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3813, 3790, 3813) */
		reached[1][3790] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3813, 3806, 3813) */
		reached[1][3806] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2147: // STATE 3806 - mutant_1.pml:305 - [.(goto)] (0:3813:0 - 6)
		IfNotBlocked
		reached[1][3806] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2148: // STATE 3791 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (3813:0:1 - 1)
		IfNotBlocked
		reached[1][3791] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3813, 3792, 3813) */
		reached[1][3792] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3813, 3793, 3813) */
		reached[1][3793] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3813, 3806, 3813) */
		reached[1][3806] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2149: // STATE 3794 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3813:0:1 - 1)
		IfNotBlocked
		reached[1][3794] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3813, 3795, 3813) */
		reached[1][3795] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3813, 3796, 3813) */
		reached[1][3796] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3813, 3806, 3813) */
		reached[1][3806] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2150: // STATE 3797 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3813:0:1 - 1)
		IfNotBlocked
		reached[1][3797] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3813, 3798, 3813) */
		reached[1][3798] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3813, 3799, 3813) */
		reached[1][3799] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3813, 3806, 3813) */
		reached[1][3806] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2151: // STATE 3800 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (3813:0:1 - 1)
		IfNotBlocked
		reached[1][3800] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3813, 3801, 3813) */
		reached[1][3801] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3813, 3802, 3813) */
		reached[1][3802] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3813, 3806, 3813) */
		reached[1][3806] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2152: // STATE 3804 - mutant_1.pml:303 - [(1)] (3813:0:0 - 1)
		IfNotBlocked
		reached[1][3804] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3813, 3806, 3813) */
		reached[1][3806] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2153: // STATE 3809 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3809] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2154: // STATE 3812 - mutant_1.pml:310 - [(1)] (3852:0:1 - 1)
		IfNotBlocked
		reached[1][3812] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3852, 3814, 3852) */
		reached[1][3814] = 1;
		;
		/* merge: .(goto)(3852, 3846, 3852) */
		reached[1][3846] = 1;
		;
		/* merge: j = (j+1)(3852, 3848, 3852) */
		reached[1][3848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3853, 3852) */
		reached[1][3853] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2155: // STATE 3816 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3816] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2156: // STATE 3817 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (3842:0:1 - 1)
		IfNotBlocked
		reached[1][3817] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3842, 3818, 3842) */
		reached[1][3818] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3842, 3819, 3842) */
		reached[1][3819] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3842, 3835, 3842) */
		reached[1][3835] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2157: // STATE 3835 - mutant_1.pml:334 - [.(goto)] (0:3842:0 - 6)
		IfNotBlocked
		reached[1][3835] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2158: // STATE 3820 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (3842:0:1 - 1)
		IfNotBlocked
		reached[1][3820] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3842, 3821, 3842) */
		reached[1][3821] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3842, 3822, 3842) */
		reached[1][3822] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3842, 3835, 3842) */
		reached[1][3835] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2159: // STATE 3823 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3842:0:1 - 1)
		IfNotBlocked
		reached[1][3823] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3842, 3824, 3842) */
		reached[1][3824] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3842, 3825, 3842) */
		reached[1][3825] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3842, 3835, 3842) */
		reached[1][3835] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2160: // STATE 3826 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3842:0:1 - 1)
		IfNotBlocked
		reached[1][3826] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3842, 3827, 3842) */
		reached[1][3827] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3842, 3828, 3842) */
		reached[1][3828] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3842, 3835, 3842) */
		reached[1][3835] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2161: // STATE 3829 - mutant_1.pml:328 - [((STOP==ABORT))] (3842:0:1 - 1)
		IfNotBlocked
		reached[1][3829] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3842, 3830, 3842) */
		reached[1][3830] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3842, 3831, 3842) */
		reached[1][3831] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3842, 3835, 3842) */
		reached[1][3835] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2162: // STATE 3833 - mutant_1.pml:332 - [(1)] (3842:0:0 - 1)
		IfNotBlocked
		reached[1][3833] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3842, 3835, 3842) */
		reached[1][3835] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2163: // STATE 3838 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3838] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2164: // STATE 3841 - mutant_1.pml:339 - [(1)] (3852:0:1 - 1)
		IfNotBlocked
		reached[1][3841] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3852, 3843, 3852) */
		reached[1][3843] = 1;
		;
		/* merge: .(goto)(3852, 3846, 3852) */
		reached[1][3846] = 1;
		;
		/* merge: j = (j+1)(3852, 3848, 3852) */
		reached[1][3848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3853, 3852) */
		reached[1][3853] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2165: // STATE 3848 - mutant_1.pml:375 - [j = (j+1)] (0:3852:1 - 13)
		IfNotBlocked
		reached[1][3848] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3853, 3852) */
		reached[1][3853] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2166: // STATE 3850 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3850] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2167: // STATE 3856 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3856] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2168: // STATE 3857 - mutant_1.pml:405 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3857] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2169: // STATE 3858 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3858] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2170: // STATE 3860 - mutant_1.pml:407 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3860] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2171: // STATE 3861 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3861] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2172: // STATE 3863 - mutant_1.pml:409 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3863] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2173: // STATE 3864 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3864] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2174: // STATE 3866 - mutant_1.pml:411 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3866] = 1;
		if (!((6==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2175: // STATE 3867 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3867] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2176: // STATE 3871 - mutant_1.pml:414 - [j = (j+1)] (0:3875:1 - 5)
		IfNotBlocked
		reached[1][3871] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 3876, 3875) */
		reached[1][3876] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2177: // STATE 3873 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3873] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2178: // STATE 3884 - mutant_1.pml:451 - [(((11==ABORTING)||(11==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3884] = 1;
		if (!(((11==4)||(11==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2179: // STATE 3885 - mutant_1.pml:422 - [(((2==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3885] = 1;
		if (!(((2==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2180: // STATE 3886 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][3886] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2181: // STATE 3888 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3888] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2182: // STATE 3889 - mutant_1.pml:394 - [(((2==START)||(2==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3889] = 1;
		if (!(((2==9)||(2==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2183: // STATE 3890 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3890] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2184: // STATE 3891 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3891] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2185: // STATE 3892 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (3912:0:1 - 1)
		IfNotBlocked
		reached[1][3892] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3912, 3893, 3912) */
		reached[1][3893] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3912, 3894, 3912) */
		reached[1][3894] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3912, 3910, 3912) */
		reached[1][3910] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2186: // STATE 3910 - mutant_1.pml:246 - [.(goto)] (0:3912:0 - 6)
		IfNotBlocked
		reached[1][3910] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2187: // STATE 3895 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (3912:0:1 - 1)
		IfNotBlocked
		reached[1][3895] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3912, 3896, 3912) */
		reached[1][3896] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3912, 3897, 3912) */
		reached[1][3897] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3912, 3910, 3912) */
		reached[1][3910] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2188: // STATE 3898 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3912:0:1 - 1)
		IfNotBlocked
		reached[1][3898] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3912, 3899, 3912) */
		reached[1][3899] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3912, 3900, 3912) */
		reached[1][3900] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3912, 3910, 3912) */
		reached[1][3910] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2189: // STATE 3901 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3912:0:1 - 1)
		IfNotBlocked
		reached[1][3901] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3912, 3902, 3912) */
		reached[1][3902] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3912, 3903, 3912) */
		reached[1][3903] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3912, 3910, 3912) */
		reached[1][3910] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2190: // STATE 3904 - mutant_1.pml:240 - [((START==ABORT))] (3912:0:1 - 1)
		IfNotBlocked
		reached[1][3904] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3912, 3905, 3912) */
		reached[1][3905] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3912, 3906, 3912) */
		reached[1][3906] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3912, 3910, 3912) */
		reached[1][3910] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2191: // STATE 3908 - mutant_1.pml:244 - [(1)] (3912:0:0 - 1)
		IfNotBlocked
		reached[1][3908] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3912, 3910, 3912) */
		reached[1][3910] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2192: // STATE 3912 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3912] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2193: // STATE 3914 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3914] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2194: // STATE 3917 - mutant_1.pml:252 - [(1)] (4015:0:1 - 1)
		IfNotBlocked
		reached[1][3917] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4015, 3919, 4015) */
		reached[1][3919] = 1;
		;
		/* merge: .(goto)(4015, 4009, 4015) */
		reached[1][4009] = 1;
		;
		/* merge: j = (j+1)(4015, 4011, 4015) */
		reached[1][4011] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4016, 4015) */
		reached[1][4016] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2195: // STATE 3921 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3921] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2196: // STATE 3922 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (3947:0:1 - 1)
		IfNotBlocked
		reached[1][3922] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3947, 3923, 3947) */
		reached[1][3923] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3947, 3924, 3947) */
		reached[1][3924] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3947, 3940, 3947) */
		reached[1][3940] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2197: // STATE 3940 - mutant_1.pml:276 - [.(goto)] (0:3947:0 - 6)
		IfNotBlocked
		reached[1][3940] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2198: // STATE 3925 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (3947:0:1 - 1)
		IfNotBlocked
		reached[1][3925] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3947, 3926, 3947) */
		reached[1][3926] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3947, 3927, 3947) */
		reached[1][3927] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3947, 3940, 3947) */
		reached[1][3940] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2199: // STATE 3928 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3947:0:1 - 1)
		IfNotBlocked
		reached[1][3928] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3947, 3929, 3947) */
		reached[1][3929] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3947, 3930, 3947) */
		reached[1][3930] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3947, 3940, 3947) */
		reached[1][3940] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2200: // STATE 3931 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3947:0:1 - 1)
		IfNotBlocked
		reached[1][3931] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3947, 3932, 3947) */
		reached[1][3932] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3947, 3933, 3947) */
		reached[1][3933] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3947, 3940, 3947) */
		reached[1][3940] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2201: // STATE 3934 - mutant_1.pml:270 - [((PAUSE==ABORT))] (3947:0:1 - 1)
		IfNotBlocked
		reached[1][3934] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3947, 3935, 3947) */
		reached[1][3935] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3947, 3936, 3947) */
		reached[1][3936] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3947, 3940, 3947) */
		reached[1][3940] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2202: // STATE 3938 - mutant_1.pml:274 - [(1)] (3947:0:0 - 1)
		IfNotBlocked
		reached[1][3938] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3947, 3940, 3947) */
		reached[1][3940] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2203: // STATE 3943 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3943] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2204: // STATE 3946 - mutant_1.pml:281 - [(1)] (4015:0:1 - 1)
		IfNotBlocked
		reached[1][3946] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4015, 3948, 4015) */
		reached[1][3948] = 1;
		;
		/* merge: .(goto)(4015, 4009, 4015) */
		reached[1][4009] = 1;
		;
		/* merge: j = (j+1)(4015, 4011, 4015) */
		reached[1][4011] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4016, 4015) */
		reached[1][4016] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2205: // STATE 3950 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3950] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2206: // STATE 3951 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (3976:0:1 - 1)
		IfNotBlocked
		reached[1][3951] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(3976, 3952, 3976) */
		reached[1][3952] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(3976, 3953, 3976) */
		reached[1][3953] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3976, 3969, 3976) */
		reached[1][3969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2207: // STATE 3969 - mutant_1.pml:305 - [.(goto)] (0:3976:0 - 6)
		IfNotBlocked
		reached[1][3969] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2208: // STATE 3954 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (3976:0:1 - 1)
		IfNotBlocked
		reached[1][3954] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(3976, 3955, 3976) */
		reached[1][3955] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(3976, 3956, 3976) */
		reached[1][3956] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3976, 3969, 3976) */
		reached[1][3969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2209: // STATE 3957 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (3976:0:1 - 1)
		IfNotBlocked
		reached[1][3957] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(3976, 3958, 3976) */
		reached[1][3958] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(3976, 3959, 3976) */
		reached[1][3959] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3976, 3969, 3976) */
		reached[1][3969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2210: // STATE 3960 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (3976:0:1 - 1)
		IfNotBlocked
		reached[1][3960] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(3976, 3961, 3976) */
		reached[1][3961] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(3976, 3962, 3976) */
		reached[1][3962] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3976, 3969, 3976) */
		reached[1][3969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2211: // STATE 3963 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (3976:0:1 - 1)
		IfNotBlocked
		reached[1][3963] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(3976, 3964, 3976) */
		reached[1][3964] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(3976, 3965, 3976) */
		reached[1][3965] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(3976, 3969, 3976) */
		reached[1][3969] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2212: // STATE 3967 - mutant_1.pml:303 - [(1)] (3976:0:0 - 1)
		IfNotBlocked
		reached[1][3967] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(3976, 3969, 3976) */
		reached[1][3969] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2213: // STATE 3972 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3972] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2214: // STATE 3975 - mutant_1.pml:310 - [(1)] (4015:0:1 - 1)
		IfNotBlocked
		reached[1][3975] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4015, 3977, 4015) */
		reached[1][3977] = 1;
		;
		/* merge: .(goto)(4015, 4009, 4015) */
		reached[1][4009] = 1;
		;
		/* merge: j = (j+1)(4015, 4011, 4015) */
		reached[1][4011] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4016, 4015) */
		reached[1][4016] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2215: // STATE 3979 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][3979] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2216: // STATE 3980 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (4005:0:1 - 1)
		IfNotBlocked
		reached[1][3980] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4005, 3981, 4005) */
		reached[1][3981] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4005, 3982, 4005) */
		reached[1][3982] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4005, 3998, 4005) */
		reached[1][3998] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2217: // STATE 3998 - mutant_1.pml:334 - [.(goto)] (0:4005:0 - 6)
		IfNotBlocked
		reached[1][3998] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2218: // STATE 3983 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (4005:0:1 - 1)
		IfNotBlocked
		reached[1][3983] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4005, 3984, 4005) */
		reached[1][3984] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4005, 3985, 4005) */
		reached[1][3985] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4005, 3998, 4005) */
		reached[1][3998] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2219: // STATE 3986 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4005:0:1 - 1)
		IfNotBlocked
		reached[1][3986] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4005, 3987, 4005) */
		reached[1][3987] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4005, 3988, 4005) */
		reached[1][3988] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4005, 3998, 4005) */
		reached[1][3998] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2220: // STATE 3989 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4005:0:1 - 1)
		IfNotBlocked
		reached[1][3989] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4005, 3990, 4005) */
		reached[1][3990] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4005, 3991, 4005) */
		reached[1][3991] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4005, 3998, 4005) */
		reached[1][3998] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2221: // STATE 3992 - mutant_1.pml:328 - [((STOP==ABORT))] (4005:0:1 - 1)
		IfNotBlocked
		reached[1][3992] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4005, 3993, 4005) */
		reached[1][3993] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4005, 3994, 4005) */
		reached[1][3994] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4005, 3998, 4005) */
		reached[1][3998] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2222: // STATE 3996 - mutant_1.pml:332 - [(1)] (4005:0:0 - 1)
		IfNotBlocked
		reached[1][3996] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4005, 3998, 4005) */
		reached[1][3998] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2223: // STATE 4001 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4001] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2224: // STATE 4004 - mutant_1.pml:339 - [(1)] (4015:0:1 - 1)
		IfNotBlocked
		reached[1][4004] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4015, 4006, 4015) */
		reached[1][4006] = 1;
		;
		/* merge: .(goto)(4015, 4009, 4015) */
		reached[1][4009] = 1;
		;
		/* merge: j = (j+1)(4015, 4011, 4015) */
		reached[1][4011] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4016, 4015) */
		reached[1][4016] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2225: // STATE 4011 - mutant_1.pml:375 - [j = (j+1)] (0:4015:1 - 13)
		IfNotBlocked
		reached[1][4011] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4016, 4015) */
		reached[1][4016] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2226: // STATE 4013 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4013] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2227: // STATE 4020 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4020] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2228: // STATE 4021 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4021] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2229: // STATE 4022 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4022] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2230: // STATE 4023 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (4043:0:1 - 1)
		IfNotBlocked
		reached[1][4023] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4043, 4024, 4043) */
		reached[1][4024] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4043, 4025, 4043) */
		reached[1][4025] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4043, 4041, 4043) */
		reached[1][4041] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2231: // STATE 4041 - mutant_1.pml:246 - [.(goto)] (0:4043:0 - 6)
		IfNotBlocked
		reached[1][4041] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2232: // STATE 4026 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (4043:0:1 - 1)
		IfNotBlocked
		reached[1][4026] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4043, 4027, 4043) */
		reached[1][4027] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4043, 4028, 4043) */
		reached[1][4028] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4043, 4041, 4043) */
		reached[1][4041] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2233: // STATE 4029 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4043:0:1 - 1)
		IfNotBlocked
		reached[1][4029] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4043, 4030, 4043) */
		reached[1][4030] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4043, 4031, 4043) */
		reached[1][4031] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4043, 4041, 4043) */
		reached[1][4041] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2234: // STATE 4032 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4043:0:1 - 1)
		IfNotBlocked
		reached[1][4032] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4043, 4033, 4043) */
		reached[1][4033] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4043, 4034, 4043) */
		reached[1][4034] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4043, 4041, 4043) */
		reached[1][4041] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2235: // STATE 4035 - mutant_1.pml:240 - [((START==ABORT))] (4043:0:1 - 1)
		IfNotBlocked
		reached[1][4035] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4043, 4036, 4043) */
		reached[1][4036] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4043, 4037, 4043) */
		reached[1][4037] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4043, 4041, 4043) */
		reached[1][4041] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2236: // STATE 4039 - mutant_1.pml:244 - [(1)] (4043:0:0 - 1)
		IfNotBlocked
		reached[1][4039] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4043, 4041, 4043) */
		reached[1][4041] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2237: // STATE 4043 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4043] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2238: // STATE 4045 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4045] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2239: // STATE 4048 - mutant_1.pml:252 - [(1)] (4146:0:1 - 1)
		IfNotBlocked
		reached[1][4048] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4146, 4050, 4146) */
		reached[1][4050] = 1;
		;
		/* merge: .(goto)(4146, 4140, 4146) */
		reached[1][4140] = 1;
		;
		/* merge: j = (j-1)(4146, 4142, 4146) */
		reached[1][4142] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4147, 4146) */
		reached[1][4147] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2240: // STATE 4052 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4052] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2241: // STATE 4053 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (4078:0:1 - 1)
		IfNotBlocked
		reached[1][4053] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4078, 4054, 4078) */
		reached[1][4054] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4078, 4055, 4078) */
		reached[1][4055] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4078, 4071, 4078) */
		reached[1][4071] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2242: // STATE 4071 - mutant_1.pml:276 - [.(goto)] (0:4078:0 - 6)
		IfNotBlocked
		reached[1][4071] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2243: // STATE 4056 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (4078:0:1 - 1)
		IfNotBlocked
		reached[1][4056] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4078, 4057, 4078) */
		reached[1][4057] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4078, 4058, 4078) */
		reached[1][4058] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4078, 4071, 4078) */
		reached[1][4071] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2244: // STATE 4059 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4078:0:1 - 1)
		IfNotBlocked
		reached[1][4059] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4078, 4060, 4078) */
		reached[1][4060] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4078, 4061, 4078) */
		reached[1][4061] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4078, 4071, 4078) */
		reached[1][4071] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2245: // STATE 4062 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4078:0:1 - 1)
		IfNotBlocked
		reached[1][4062] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4078, 4063, 4078) */
		reached[1][4063] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4078, 4064, 4078) */
		reached[1][4064] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4078, 4071, 4078) */
		reached[1][4071] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2246: // STATE 4065 - mutant_1.pml:270 - [((PAUSE==ABORT))] (4078:0:1 - 1)
		IfNotBlocked
		reached[1][4065] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4078, 4066, 4078) */
		reached[1][4066] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4078, 4067, 4078) */
		reached[1][4067] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4078, 4071, 4078) */
		reached[1][4071] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2247: // STATE 4069 - mutant_1.pml:274 - [(1)] (4078:0:0 - 1)
		IfNotBlocked
		reached[1][4069] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4078, 4071, 4078) */
		reached[1][4071] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2248: // STATE 4074 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4074] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2249: // STATE 4077 - mutant_1.pml:281 - [(1)] (4146:0:1 - 1)
		IfNotBlocked
		reached[1][4077] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4146, 4079, 4146) */
		reached[1][4079] = 1;
		;
		/* merge: .(goto)(4146, 4140, 4146) */
		reached[1][4140] = 1;
		;
		/* merge: j = (j-1)(4146, 4142, 4146) */
		reached[1][4142] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4147, 4146) */
		reached[1][4147] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2250: // STATE 4081 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4081] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2251: // STATE 4082 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (4107:0:1 - 1)
		IfNotBlocked
		reached[1][4082] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4107, 4083, 4107) */
		reached[1][4083] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4107, 4084, 4107) */
		reached[1][4084] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4107, 4100, 4107) */
		reached[1][4100] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2252: // STATE 4100 - mutant_1.pml:305 - [.(goto)] (0:4107:0 - 6)
		IfNotBlocked
		reached[1][4100] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2253: // STATE 4085 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (4107:0:1 - 1)
		IfNotBlocked
		reached[1][4085] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4107, 4086, 4107) */
		reached[1][4086] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4107, 4087, 4107) */
		reached[1][4087] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4107, 4100, 4107) */
		reached[1][4100] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2254: // STATE 4088 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4107:0:1 - 1)
		IfNotBlocked
		reached[1][4088] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4107, 4089, 4107) */
		reached[1][4089] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4107, 4090, 4107) */
		reached[1][4090] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4107, 4100, 4107) */
		reached[1][4100] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2255: // STATE 4091 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4107:0:1 - 1)
		IfNotBlocked
		reached[1][4091] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4107, 4092, 4107) */
		reached[1][4092] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4107, 4093, 4107) */
		reached[1][4093] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4107, 4100, 4107) */
		reached[1][4100] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2256: // STATE 4094 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (4107:0:1 - 1)
		IfNotBlocked
		reached[1][4094] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4107, 4095, 4107) */
		reached[1][4095] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4107, 4096, 4107) */
		reached[1][4096] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4107, 4100, 4107) */
		reached[1][4100] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2257: // STATE 4098 - mutant_1.pml:303 - [(1)] (4107:0:0 - 1)
		IfNotBlocked
		reached[1][4098] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4107, 4100, 4107) */
		reached[1][4100] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2258: // STATE 4103 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4103] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2259: // STATE 4106 - mutant_1.pml:310 - [(1)] (4146:0:1 - 1)
		IfNotBlocked
		reached[1][4106] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4146, 4108, 4146) */
		reached[1][4108] = 1;
		;
		/* merge: .(goto)(4146, 4140, 4146) */
		reached[1][4140] = 1;
		;
		/* merge: j = (j-1)(4146, 4142, 4146) */
		reached[1][4142] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4147, 4146) */
		reached[1][4147] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2260: // STATE 4110 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4110] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2261: // STATE 4111 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (4136:0:1 - 1)
		IfNotBlocked
		reached[1][4111] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4136, 4112, 4136) */
		reached[1][4112] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4136, 4113, 4136) */
		reached[1][4113] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4136, 4129, 4136) */
		reached[1][4129] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2262: // STATE 4129 - mutant_1.pml:334 - [.(goto)] (0:4136:0 - 6)
		IfNotBlocked
		reached[1][4129] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2263: // STATE 4114 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (4136:0:1 - 1)
		IfNotBlocked
		reached[1][4114] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4136, 4115, 4136) */
		reached[1][4115] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4136, 4116, 4136) */
		reached[1][4116] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4136, 4129, 4136) */
		reached[1][4129] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2264: // STATE 4117 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4136:0:1 - 1)
		IfNotBlocked
		reached[1][4117] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4136, 4118, 4136) */
		reached[1][4118] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4136, 4119, 4136) */
		reached[1][4119] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4136, 4129, 4136) */
		reached[1][4129] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2265: // STATE 4120 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4136:0:1 - 1)
		IfNotBlocked
		reached[1][4120] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4136, 4121, 4136) */
		reached[1][4121] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4136, 4122, 4136) */
		reached[1][4122] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4136, 4129, 4136) */
		reached[1][4129] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2266: // STATE 4123 - mutant_1.pml:328 - [((STOP==ABORT))] (4136:0:1 - 1)
		IfNotBlocked
		reached[1][4123] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4136, 4124, 4136) */
		reached[1][4124] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4136, 4125, 4136) */
		reached[1][4125] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4136, 4129, 4136) */
		reached[1][4129] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2267: // STATE 4127 - mutant_1.pml:332 - [(1)] (4136:0:0 - 1)
		IfNotBlocked
		reached[1][4127] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4136, 4129, 4136) */
		reached[1][4129] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2268: // STATE 4132 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4132] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2269: // STATE 4135 - mutant_1.pml:339 - [(1)] (4146:0:1 - 1)
		IfNotBlocked
		reached[1][4135] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4146, 4137, 4146) */
		reached[1][4137] = 1;
		;
		/* merge: .(goto)(4146, 4140, 4146) */
		reached[1][4140] = 1;
		;
		/* merge: j = (j-1)(4146, 4142, 4146) */
		reached[1][4142] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4147, 4146) */
		reached[1][4147] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2270: // STATE 4142 - mutant_1.pml:386 - [j = (j-1)] (0:4146:1 - 13)
		IfNotBlocked
		reached[1][4142] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4147, 4146) */
		reached[1][4147] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2271: // STATE 4144 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4144] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2272: // STATE 4154 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4154] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2273: // STATE 4155 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4155] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2274: // STATE 4156 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (4176:0:1 - 1)
		IfNotBlocked
		reached[1][4156] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4176, 4157, 4176) */
		reached[1][4157] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4176, 4158, 4176) */
		reached[1][4158] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4176, 4174, 4176) */
		reached[1][4174] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2275: // STATE 4174 - mutant_1.pml:246 - [.(goto)] (0:4176:0 - 6)
		IfNotBlocked
		reached[1][4174] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2276: // STATE 4159 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (4176:0:1 - 1)
		IfNotBlocked
		reached[1][4159] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4176, 4160, 4176) */
		reached[1][4160] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4176, 4161, 4176) */
		reached[1][4161] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4176, 4174, 4176) */
		reached[1][4174] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2277: // STATE 4162 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4176:0:1 - 1)
		IfNotBlocked
		reached[1][4162] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4176, 4163, 4176) */
		reached[1][4163] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4176, 4164, 4176) */
		reached[1][4164] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4176, 4174, 4176) */
		reached[1][4174] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2278: // STATE 4165 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4176:0:1 - 1)
		IfNotBlocked
		reached[1][4165] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4176, 4166, 4176) */
		reached[1][4166] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4176, 4167, 4176) */
		reached[1][4167] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4176, 4174, 4176) */
		reached[1][4174] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2279: // STATE 4168 - mutant_1.pml:240 - [((START==ABORT))] (4176:0:1 - 1)
		IfNotBlocked
		reached[1][4168] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4176, 4169, 4176) */
		reached[1][4169] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4176, 4170, 4176) */
		reached[1][4170] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4176, 4174, 4176) */
		reached[1][4174] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2280: // STATE 4172 - mutant_1.pml:244 - [(1)] (4176:0:0 - 1)
		IfNotBlocked
		reached[1][4172] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4176, 4174, 4176) */
		reached[1][4174] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2281: // STATE 4176 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4176] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2282: // STATE 4178 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4178] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2283: // STATE 4181 - mutant_1.pml:252 - [(1)] (4279:0:1 - 1)
		IfNotBlocked
		reached[1][4181] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4279, 4183, 4279) */
		reached[1][4183] = 1;
		;
		/* merge: .(goto)(4279, 4273, 4279) */
		reached[1][4273] = 1;
		;
		/* merge: j = (j+1)(4279, 4275, 4279) */
		reached[1][4275] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4280, 4279) */
		reached[1][4280] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2284: // STATE 4185 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4185] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2285: // STATE 4186 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (4211:0:1 - 1)
		IfNotBlocked
		reached[1][4186] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4211, 4187, 4211) */
		reached[1][4187] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4211, 4188, 4211) */
		reached[1][4188] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4211, 4204, 4211) */
		reached[1][4204] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2286: // STATE 4204 - mutant_1.pml:276 - [.(goto)] (0:4211:0 - 6)
		IfNotBlocked
		reached[1][4204] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2287: // STATE 4189 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (4211:0:1 - 1)
		IfNotBlocked
		reached[1][4189] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4211, 4190, 4211) */
		reached[1][4190] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4211, 4191, 4211) */
		reached[1][4191] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4211, 4204, 4211) */
		reached[1][4204] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2288: // STATE 4192 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4211:0:1 - 1)
		IfNotBlocked
		reached[1][4192] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4211, 4193, 4211) */
		reached[1][4193] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4211, 4194, 4211) */
		reached[1][4194] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4211, 4204, 4211) */
		reached[1][4204] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2289: // STATE 4195 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4211:0:1 - 1)
		IfNotBlocked
		reached[1][4195] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4211, 4196, 4211) */
		reached[1][4196] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4211, 4197, 4211) */
		reached[1][4197] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4211, 4204, 4211) */
		reached[1][4204] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2290: // STATE 4198 - mutant_1.pml:270 - [((PAUSE==ABORT))] (4211:0:1 - 1)
		IfNotBlocked
		reached[1][4198] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4211, 4199, 4211) */
		reached[1][4199] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4211, 4200, 4211) */
		reached[1][4200] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4211, 4204, 4211) */
		reached[1][4204] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2291: // STATE 4202 - mutant_1.pml:274 - [(1)] (4211:0:0 - 1)
		IfNotBlocked
		reached[1][4202] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4211, 4204, 4211) */
		reached[1][4204] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2292: // STATE 4207 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4207] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2293: // STATE 4210 - mutant_1.pml:281 - [(1)] (4279:0:1 - 1)
		IfNotBlocked
		reached[1][4210] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4279, 4212, 4279) */
		reached[1][4212] = 1;
		;
		/* merge: .(goto)(4279, 4273, 4279) */
		reached[1][4273] = 1;
		;
		/* merge: j = (j+1)(4279, 4275, 4279) */
		reached[1][4275] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4280, 4279) */
		reached[1][4280] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2294: // STATE 4214 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4214] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2295: // STATE 4215 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (4240:0:1 - 1)
		IfNotBlocked
		reached[1][4215] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4240, 4216, 4240) */
		reached[1][4216] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4240, 4217, 4240) */
		reached[1][4217] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4240, 4233, 4240) */
		reached[1][4233] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2296: // STATE 4233 - mutant_1.pml:305 - [.(goto)] (0:4240:0 - 6)
		IfNotBlocked
		reached[1][4233] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2297: // STATE 4218 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (4240:0:1 - 1)
		IfNotBlocked
		reached[1][4218] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4240, 4219, 4240) */
		reached[1][4219] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4240, 4220, 4240) */
		reached[1][4220] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4240, 4233, 4240) */
		reached[1][4233] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2298: // STATE 4221 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4240:0:1 - 1)
		IfNotBlocked
		reached[1][4221] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4240, 4222, 4240) */
		reached[1][4222] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4240, 4223, 4240) */
		reached[1][4223] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4240, 4233, 4240) */
		reached[1][4233] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2299: // STATE 4224 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4240:0:1 - 1)
		IfNotBlocked
		reached[1][4224] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4240, 4225, 4240) */
		reached[1][4225] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4240, 4226, 4240) */
		reached[1][4226] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4240, 4233, 4240) */
		reached[1][4233] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2300: // STATE 4227 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (4240:0:1 - 1)
		IfNotBlocked
		reached[1][4227] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4240, 4228, 4240) */
		reached[1][4228] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4240, 4229, 4240) */
		reached[1][4229] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4240, 4233, 4240) */
		reached[1][4233] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2301: // STATE 4231 - mutant_1.pml:303 - [(1)] (4240:0:0 - 1)
		IfNotBlocked
		reached[1][4231] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4240, 4233, 4240) */
		reached[1][4233] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2302: // STATE 4236 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4236] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2303: // STATE 4239 - mutant_1.pml:310 - [(1)] (4279:0:1 - 1)
		IfNotBlocked
		reached[1][4239] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4279, 4241, 4279) */
		reached[1][4241] = 1;
		;
		/* merge: .(goto)(4279, 4273, 4279) */
		reached[1][4273] = 1;
		;
		/* merge: j = (j+1)(4279, 4275, 4279) */
		reached[1][4275] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4280, 4279) */
		reached[1][4280] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2304: // STATE 4243 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4243] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2305: // STATE 4244 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (4269:0:1 - 1)
		IfNotBlocked
		reached[1][4244] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4269, 4245, 4269) */
		reached[1][4245] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4269, 4246, 4269) */
		reached[1][4246] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4269, 4262, 4269) */
		reached[1][4262] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2306: // STATE 4262 - mutant_1.pml:334 - [.(goto)] (0:4269:0 - 6)
		IfNotBlocked
		reached[1][4262] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2307: // STATE 4247 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (4269:0:1 - 1)
		IfNotBlocked
		reached[1][4247] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4269, 4248, 4269) */
		reached[1][4248] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4269, 4249, 4269) */
		reached[1][4249] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4269, 4262, 4269) */
		reached[1][4262] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2308: // STATE 4250 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4269:0:1 - 1)
		IfNotBlocked
		reached[1][4250] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4269, 4251, 4269) */
		reached[1][4251] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4269, 4252, 4269) */
		reached[1][4252] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4269, 4262, 4269) */
		reached[1][4262] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2309: // STATE 4253 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4269:0:1 - 1)
		IfNotBlocked
		reached[1][4253] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4269, 4254, 4269) */
		reached[1][4254] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4269, 4255, 4269) */
		reached[1][4255] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4269, 4262, 4269) */
		reached[1][4262] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2310: // STATE 4256 - mutant_1.pml:328 - [((STOP==ABORT))] (4269:0:1 - 1)
		IfNotBlocked
		reached[1][4256] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4269, 4257, 4269) */
		reached[1][4257] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4269, 4258, 4269) */
		reached[1][4258] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4269, 4262, 4269) */
		reached[1][4262] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2311: // STATE 4260 - mutant_1.pml:332 - [(1)] (4269:0:0 - 1)
		IfNotBlocked
		reached[1][4260] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4269, 4262, 4269) */
		reached[1][4262] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2312: // STATE 4265 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4265] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2313: // STATE 4268 - mutant_1.pml:339 - [(1)] (4279:0:1 - 1)
		IfNotBlocked
		reached[1][4268] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4279, 4270, 4279) */
		reached[1][4270] = 1;
		;
		/* merge: .(goto)(4279, 4273, 4279) */
		reached[1][4273] = 1;
		;
		/* merge: j = (j+1)(4279, 4275, 4279) */
		reached[1][4275] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4280, 4279) */
		reached[1][4280] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2314: // STATE 4275 - mutant_1.pml:375 - [j = (j+1)] (0:4279:1 - 13)
		IfNotBlocked
		reached[1][4275] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4280, 4279) */
		reached[1][4280] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2315: // STATE 4277 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4277] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2316: // STATE 4283 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4283] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2317: // STATE 4284 - mutant_1.pml:405 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4284] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2318: // STATE 4285 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4285] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2319: // STATE 4287 - mutant_1.pml:407 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4287] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2320: // STATE 4288 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4288] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2321: // STATE 4290 - mutant_1.pml:409 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4290] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2322: // STATE 4291 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4291] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2323: // STATE 4293 - mutant_1.pml:411 - [((2==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4293] = 1;
		if (!((2==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2324: // STATE 4294 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4294] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2325: // STATE 4298 - mutant_1.pml:414 - [j = (j+1)] (0:4302:1 - 5)
		IfNotBlocked
		reached[1][4298] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4303, 4302) */
		reached[1][4303] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2326: // STATE 4300 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4300] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2327: // STATE 4321 - mutant_1.pml:469 - [executing[0] = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4321] = 1;
		(trpt+1)->bup.oval = ((int)now.executing[0]);
		now.executing[0] = 1;
#ifdef VAR_RANGES
		logval("executing[0]", ((int)now.executing[0]));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2328: // STATE 4322 - mutant_1.pml:434 - [all_workers_stopped = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4322] = 1;
		(trpt+1)->bup.oval = ((int)now.all_workers_stopped);
		now.all_workers_stopped = 1;
#ifdef VAR_RANGES
		logval("all_workers_stopped", ((int)now.all_workers_stopped));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2329: // STATE 4323 - mutant_1.pml:436 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4323] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2330: // STATE 4324 - mutant_1.pml:437 - [all_workers_stopped = (all_workers_stopped&&(states[j]==STOPPED))] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4324] = 1;
		(trpt+1)->bup.oval = ((int)now.all_workers_stopped);
		now.all_workers_stopped = (((int)now.all_workers_stopped)&&(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5));
#ifdef VAR_RANGES
		logval("all_workers_stopped", ((int)now.all_workers_stopped));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2331: // STATE 4325 - mutant_1.pml:438 - [exists_aborted_worker = (exists_aborted_worker||(states[j]==ABORTED))] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4325] = 1;
		(trpt+1)->bup.oval = ((int)now.exists_aborted_worker);
		now.exists_aborted_worker = (((int)now.exists_aborted_worker)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3));
#ifdef VAR_RANGES
		logval("exists_aborted_worker", ((int)now.exists_aborted_worker));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2332: // STATE 4326 - mutant_1.pml:439 - [j = (j+1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4326] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2333: // STATE 4328 - mutant_1.pml:441 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4328] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2334: // STATE 4334 - mutant_1.pml:472 - [(all_workers_stopped)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4334] = 1;
		if (!(((int)now.all_workers_stopped)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2335: // STATE 4335 - mutant_1.pml:316 - [(((STOP==START)&&(commands[0]==CONTINUE)))] (4360:0:1 - 1)
		IfNotBlocked
		reached[1][4335] = 1;
		if (!(((2==9)&&(now.commands[0]==8))))
			continue;
		/* merge: assert((states[0]==READY))(4360, 4336, 4360) */
		reached[1][4336] = 1;
		spin_assert((now.states[0]==13), "(states[0]==13)", II, tt, t);
		/* merge: commands[0] = START(4360, 4337, 4360) */
		reached[1][4337] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 9;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(4360, 4353, 4360) */
		reached[1][4353] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2336: // STATE 4353 - mutant_1.pml:334 - [.(goto)] (0:4360:0 - 6)
		IfNotBlocked
		reached[1][4353] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2337: // STATE 4338 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[0]==CONTINUE)))] (4360:0:1 - 1)
		IfNotBlocked
		reached[1][4338] = 1;
		if (!(((2==6)&&(now.commands[0]==8))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(4360, 4339, 4360) */
		reached[1][4339] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==11)), "((states[0]==12)||(states[0]==11))", II, tt, t);
		/* merge: commands[0] = PAUSE(4360, 4340, 4360) */
		reached[1][4340] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(4360, 4353, 4360) */
		reached[1][4353] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2338: // STATE 4341 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (4360:0:1 - 1)
		IfNotBlocked
		reached[1][4341] = 1;
		if (!(((2==8)&&((now.commands[0]==9)||(now.commands[0]==6)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(4360, 4342, 4360) */
		reached[1][4342] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==10)), "((states[0]==12)||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = CONTINUE(4360, 4343, 4360) */
		reached[1][4343] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(4360, 4353, 4360) */
		reached[1][4353] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2339: // STATE 4344 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (4360:0:1 - 1)
		IfNotBlocked
		reached[1][4344] = 1;
		if (!(((2==2)&&((now.commands[0]==8)||(now.commands[0]==6)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(4360, 4345, 4360) */
		reached[1][4345] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==10)), "(((states[0]==12)||(states[0]==11))||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = STOP(4360, 4346, 4360) */
		reached[1][4346] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 2;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(4360, 4353, 4360) */
		reached[1][4353] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2340: // STATE 4347 - mutant_1.pml:328 - [((STOP==ABORT))] (4360:0:1 - 1)
		IfNotBlocked
		reached[1][4347] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[0]!=READY))(4360, 4348, 4360) */
		reached[1][4348] = 1;
		spin_assert((now.states[0]!=13), "(states[0]!=13)", II, tt, t);
		/* merge: commands[0] = ABORT(4360, 4349, 4360) */
		reached[1][4349] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 1;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(4360, 4353, 4360) */
		reached[1][4353] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2341: // STATE 4351 - mutant_1.pml:332 - [(1)] (4360:0:0 - 1)
		IfNotBlocked
		reached[1][4351] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4360, 4353, 4360) */
		reached[1][4353] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2342: // STATE 4356 - mutant_1.pml:220 - [(((states[0]==STOPPED)||(states[0]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4356] = 1;
		if (!(((now.states[0]==5)||(now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2343: // STATE 4363 - mutant_1.pml:474 - [(exists_aborted_worker)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4363] = 1;
		if (!(((int)now.exists_aborted_worker)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2344: // STATE 4364 - mutant_1.pml:316 - [(((STOP==START)&&(commands[0]==CONTINUE)))] (4389:0:1 - 1)
		IfNotBlocked
		reached[1][4364] = 1;
		if (!(((2==9)&&(now.commands[0]==8))))
			continue;
		/* merge: assert((states[0]==READY))(4389, 4365, 4389) */
		reached[1][4365] = 1;
		spin_assert((now.states[0]==13), "(states[0]==13)", II, tt, t);
		/* merge: commands[0] = START(4389, 4366, 4389) */
		reached[1][4366] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 9;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(4389, 4382, 4389) */
		reached[1][4382] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2345: // STATE 4382 - mutant_1.pml:334 - [.(goto)] (0:4389:0 - 6)
		IfNotBlocked
		reached[1][4382] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2346: // STATE 4367 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[0]==CONTINUE)))] (4389:0:1 - 1)
		IfNotBlocked
		reached[1][4367] = 1;
		if (!(((2==6)&&(now.commands[0]==8))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==RUNNING)))(4389, 4368, 4389) */
		reached[1][4368] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==11)), "((states[0]==12)||(states[0]==11))", II, tt, t);
		/* merge: commands[0] = PAUSE(4389, 4369, 4389) */
		reached[1][4369] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 6;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(4389, 4382, 4389) */
		reached[1][4382] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2347: // STATE 4370 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[0]==START)||(commands[0]==PAUSE))))] (4389:0:1 - 1)
		IfNotBlocked
		reached[1][4370] = 1;
		if (!(((2==8)&&((now.commands[0]==9)||(now.commands[0]==6)))))
			continue;
		/* merge: assert(((states[0]==STARTING)||(states[0]==PAUSED)))(4389, 4371, 4389) */
		reached[1][4371] = 1;
		spin_assert(((now.states[0]==12)||(now.states[0]==10)), "((states[0]==12)||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = CONTINUE(4389, 4372, 4389) */
		reached[1][4372] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 8;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(4389, 4382, 4389) */
		reached[1][4382] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2348: // STATE 4373 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[0]==CONTINUE)||(commands[0]==PAUSE))))] (4389:0:1 - 1)
		IfNotBlocked
		reached[1][4373] = 1;
		if (!(((2==2)&&((now.commands[0]==8)||(now.commands[0]==6)))))
			continue;
		/* merge: assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))(4389, 4374, 4389) */
		reached[1][4374] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==10)), "(((states[0]==12)||(states[0]==11))||(states[0]==10))", II, tt, t);
		/* merge: commands[0] = STOP(4389, 4375, 4389) */
		reached[1][4375] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 2;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(4389, 4382, 4389) */
		reached[1][4382] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2349: // STATE 4376 - mutant_1.pml:328 - [((STOP==ABORT))] (4389:0:1 - 1)
		IfNotBlocked
		reached[1][4376] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[0]!=READY))(4389, 4377, 4389) */
		reached[1][4377] = 1;
		spin_assert((now.states[0]!=13), "(states[0]!=13)", II, tt, t);
		/* merge: commands[0] = ABORT(4389, 4378, 4389) */
		reached[1][4378] = 1;
		(trpt+1)->bup.oval = now.commands[0];
		now.commands[0] = 1;
#ifdef VAR_RANGES
		logval("commands[0]", now.commands[0]);
#endif
		;
		/* merge: .(goto)(4389, 4382, 4389) */
		reached[1][4382] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2350: // STATE 4380 - mutant_1.pml:332 - [(1)] (4389:0:0 - 1)
		IfNotBlocked
		reached[1][4380] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4389, 4382, 4389) */
		reached[1][4382] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2351: // STATE 4385 - mutant_1.pml:220 - [(((states[0]==STOPPED)||(states[0]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4385] = 1;
		if (!(((now.states[0]==5)||(now.states[0]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2352: // STATE 4396 - mutant_1.pml:479 - [executing[0] = 0] (0:0:1 - 8)
		IfNotBlocked
		reached[1][4396] = 1;
		(trpt+1)->bup.oval = ((int)now.executing[0]);
		now.executing[0] = 0;
#ifdef VAR_RANGES
		logval("executing[0]", ((int)now.executing[0]));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2353: // STATE 4398 - mutant_1.pml:519 - [((commands[0]==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4398] = 1;
		if (!((now.commands[0]==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2354: // STATE 4399 - mutant_1.pml:521 - [((states[0]==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4399] = 1;
		if (!((now.states[0]==10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2355: // STATE 4400 - mutant_1.pml:522 - [((commands[0]!=PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4400] = 1;
		if (!((now.commands[0]!=10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2356: // STATE 4402 - mutant_1.pml:524 - [assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==STARTING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4402] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==12)), "(((states[0]==12)||(states[0]==11))||(states[0]==12))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 2357: // STATE 4403 - mutant_1.pml:526 - [(((states[0]==STARTING)||(states[0]==RUNNING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4403] = 1;
		if (!(((now.states[0]==12)||(now.states[0]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2358: // STATE 4404 - mutant_1.pml:447 - [((10==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4404] = 1;
		if (!((10==11)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2359: // STATE 4405 - mutant_1.pml:422 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4405] = 1;
		if (!(((8==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2360: // STATE 4406 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4406] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2361: // STATE 4408 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4408] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2362: // STATE 4409 - mutant_1.pml:394 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4409] = 1;
		if (!(((8==9)||(8==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2363: // STATE 4410 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4410] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2364: // STATE 4411 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4411] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2365: // STATE 4412 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (4432:0:1 - 1)
		IfNotBlocked
		reached[1][4412] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4432, 4413, 4432) */
		reached[1][4413] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4432, 4414, 4432) */
		reached[1][4414] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4432, 4430, 4432) */
		reached[1][4430] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2366: // STATE 4430 - mutant_1.pml:246 - [.(goto)] (0:4432:0 - 6)
		IfNotBlocked
		reached[1][4430] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2367: // STATE 4415 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (4432:0:1 - 1)
		IfNotBlocked
		reached[1][4415] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4432, 4416, 4432) */
		reached[1][4416] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4432, 4417, 4432) */
		reached[1][4417] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4432, 4430, 4432) */
		reached[1][4430] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2368: // STATE 4418 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4432:0:1 - 1)
		IfNotBlocked
		reached[1][4418] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4432, 4419, 4432) */
		reached[1][4419] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4432, 4420, 4432) */
		reached[1][4420] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4432, 4430, 4432) */
		reached[1][4430] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2369: // STATE 4421 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4432:0:1 - 1)
		IfNotBlocked
		reached[1][4421] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4432, 4422, 4432) */
		reached[1][4422] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4432, 4423, 4432) */
		reached[1][4423] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4432, 4430, 4432) */
		reached[1][4430] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2370: // STATE 4424 - mutant_1.pml:240 - [((START==ABORT))] (4432:0:1 - 1)
		IfNotBlocked
		reached[1][4424] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4432, 4425, 4432) */
		reached[1][4425] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4432, 4426, 4432) */
		reached[1][4426] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4432, 4430, 4432) */
		reached[1][4430] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2371: // STATE 4428 - mutant_1.pml:244 - [(1)] (4432:0:0 - 1)
		IfNotBlocked
		reached[1][4428] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4432, 4430, 4432) */
		reached[1][4430] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2372: // STATE 4432 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4432] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2373: // STATE 4434 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4434] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2374: // STATE 4437 - mutant_1.pml:252 - [(1)] (4535:0:1 - 1)
		IfNotBlocked
		reached[1][4437] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4535, 4439, 4535) */
		reached[1][4439] = 1;
		;
		/* merge: .(goto)(4535, 4529, 4535) */
		reached[1][4529] = 1;
		;
		/* merge: j = (j+1)(4535, 4531, 4535) */
		reached[1][4531] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4536, 4535) */
		reached[1][4536] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2375: // STATE 4441 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4441] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2376: // STATE 4442 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (4467:0:1 - 1)
		IfNotBlocked
		reached[1][4442] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4467, 4443, 4467) */
		reached[1][4443] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4467, 4444, 4467) */
		reached[1][4444] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4467, 4460, 4467) */
		reached[1][4460] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2377: // STATE 4460 - mutant_1.pml:276 - [.(goto)] (0:4467:0 - 6)
		IfNotBlocked
		reached[1][4460] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2378: // STATE 4445 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (4467:0:1 - 1)
		IfNotBlocked
		reached[1][4445] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4467, 4446, 4467) */
		reached[1][4446] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4467, 4447, 4467) */
		reached[1][4447] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4467, 4460, 4467) */
		reached[1][4460] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2379: // STATE 4448 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4467:0:1 - 1)
		IfNotBlocked
		reached[1][4448] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4467, 4449, 4467) */
		reached[1][4449] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4467, 4450, 4467) */
		reached[1][4450] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4467, 4460, 4467) */
		reached[1][4460] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2380: // STATE 4451 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4467:0:1 - 1)
		IfNotBlocked
		reached[1][4451] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4467, 4452, 4467) */
		reached[1][4452] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4467, 4453, 4467) */
		reached[1][4453] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4467, 4460, 4467) */
		reached[1][4460] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2381: // STATE 4454 - mutant_1.pml:270 - [((PAUSE==ABORT))] (4467:0:1 - 1)
		IfNotBlocked
		reached[1][4454] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4467, 4455, 4467) */
		reached[1][4455] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4467, 4456, 4467) */
		reached[1][4456] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4467, 4460, 4467) */
		reached[1][4460] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2382: // STATE 4458 - mutant_1.pml:274 - [(1)] (4467:0:0 - 1)
		IfNotBlocked
		reached[1][4458] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4467, 4460, 4467) */
		reached[1][4460] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2383: // STATE 4463 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4463] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2384: // STATE 4466 - mutant_1.pml:281 - [(1)] (4535:0:1 - 1)
		IfNotBlocked
		reached[1][4466] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4535, 4468, 4535) */
		reached[1][4468] = 1;
		;
		/* merge: .(goto)(4535, 4529, 4535) */
		reached[1][4529] = 1;
		;
		/* merge: j = (j+1)(4535, 4531, 4535) */
		reached[1][4531] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4536, 4535) */
		reached[1][4536] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2385: // STATE 4470 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4470] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2386: // STATE 4471 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (4496:0:1 - 1)
		IfNotBlocked
		reached[1][4471] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4496, 4472, 4496) */
		reached[1][4472] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4496, 4473, 4496) */
		reached[1][4473] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4496, 4489, 4496) */
		reached[1][4489] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2387: // STATE 4489 - mutant_1.pml:305 - [.(goto)] (0:4496:0 - 6)
		IfNotBlocked
		reached[1][4489] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2388: // STATE 4474 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (4496:0:1 - 1)
		IfNotBlocked
		reached[1][4474] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4496, 4475, 4496) */
		reached[1][4475] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4496, 4476, 4496) */
		reached[1][4476] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4496, 4489, 4496) */
		reached[1][4489] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2389: // STATE 4477 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4496:0:1 - 1)
		IfNotBlocked
		reached[1][4477] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4496, 4478, 4496) */
		reached[1][4478] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4496, 4479, 4496) */
		reached[1][4479] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4496, 4489, 4496) */
		reached[1][4489] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2390: // STATE 4480 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4496:0:1 - 1)
		IfNotBlocked
		reached[1][4480] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4496, 4481, 4496) */
		reached[1][4481] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4496, 4482, 4496) */
		reached[1][4482] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4496, 4489, 4496) */
		reached[1][4489] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2391: // STATE 4483 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (4496:0:1 - 1)
		IfNotBlocked
		reached[1][4483] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4496, 4484, 4496) */
		reached[1][4484] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4496, 4485, 4496) */
		reached[1][4485] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4496, 4489, 4496) */
		reached[1][4489] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2392: // STATE 4487 - mutant_1.pml:303 - [(1)] (4496:0:0 - 1)
		IfNotBlocked
		reached[1][4487] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4496, 4489, 4496) */
		reached[1][4489] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2393: // STATE 4492 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4492] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2394: // STATE 4495 - mutant_1.pml:310 - [(1)] (4535:0:1 - 1)
		IfNotBlocked
		reached[1][4495] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4535, 4497, 4535) */
		reached[1][4497] = 1;
		;
		/* merge: .(goto)(4535, 4529, 4535) */
		reached[1][4529] = 1;
		;
		/* merge: j = (j+1)(4535, 4531, 4535) */
		reached[1][4531] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4536, 4535) */
		reached[1][4536] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2395: // STATE 4499 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4499] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2396: // STATE 4500 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (4525:0:1 - 1)
		IfNotBlocked
		reached[1][4500] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4525, 4501, 4525) */
		reached[1][4501] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4525, 4502, 4525) */
		reached[1][4502] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4525, 4518, 4525) */
		reached[1][4518] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2397: // STATE 4518 - mutant_1.pml:334 - [.(goto)] (0:4525:0 - 6)
		IfNotBlocked
		reached[1][4518] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2398: // STATE 4503 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (4525:0:1 - 1)
		IfNotBlocked
		reached[1][4503] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4525, 4504, 4525) */
		reached[1][4504] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4525, 4505, 4525) */
		reached[1][4505] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4525, 4518, 4525) */
		reached[1][4518] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2399: // STATE 4506 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4525:0:1 - 1)
		IfNotBlocked
		reached[1][4506] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4525, 4507, 4525) */
		reached[1][4507] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4525, 4508, 4525) */
		reached[1][4508] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4525, 4518, 4525) */
		reached[1][4518] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2400: // STATE 4509 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4525:0:1 - 1)
		IfNotBlocked
		reached[1][4509] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4525, 4510, 4525) */
		reached[1][4510] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4525, 4511, 4525) */
		reached[1][4511] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4525, 4518, 4525) */
		reached[1][4518] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2401: // STATE 4512 - mutant_1.pml:328 - [((STOP==ABORT))] (4525:0:1 - 1)
		IfNotBlocked
		reached[1][4512] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4525, 4513, 4525) */
		reached[1][4513] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4525, 4514, 4525) */
		reached[1][4514] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4525, 4518, 4525) */
		reached[1][4518] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2402: // STATE 4516 - mutant_1.pml:332 - [(1)] (4525:0:0 - 1)
		IfNotBlocked
		reached[1][4516] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4525, 4518, 4525) */
		reached[1][4518] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2403: // STATE 4521 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4521] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2404: // STATE 4524 - mutant_1.pml:339 - [(1)] (4535:0:1 - 1)
		IfNotBlocked
		reached[1][4524] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4535, 4526, 4535) */
		reached[1][4526] = 1;
		;
		/* merge: .(goto)(4535, 4529, 4535) */
		reached[1][4529] = 1;
		;
		/* merge: j = (j+1)(4535, 4531, 4535) */
		reached[1][4531] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4536, 4535) */
		reached[1][4536] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2405: // STATE 4531 - mutant_1.pml:375 - [j = (j+1)] (0:4535:1 - 13)
		IfNotBlocked
		reached[1][4531] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4536, 4535) */
		reached[1][4536] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2406: // STATE 4533 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4533] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2407: // STATE 4540 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4540] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2408: // STATE 4541 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4541] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2409: // STATE 4542 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4542] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2410: // STATE 4543 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (4563:0:1 - 1)
		IfNotBlocked
		reached[1][4543] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4563, 4544, 4563) */
		reached[1][4544] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4563, 4545, 4563) */
		reached[1][4545] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4563, 4561, 4563) */
		reached[1][4561] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2411: // STATE 4561 - mutant_1.pml:246 - [.(goto)] (0:4563:0 - 6)
		IfNotBlocked
		reached[1][4561] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2412: // STATE 4546 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (4563:0:1 - 1)
		IfNotBlocked
		reached[1][4546] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4563, 4547, 4563) */
		reached[1][4547] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4563, 4548, 4563) */
		reached[1][4548] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4563, 4561, 4563) */
		reached[1][4561] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2413: // STATE 4549 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4563:0:1 - 1)
		IfNotBlocked
		reached[1][4549] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4563, 4550, 4563) */
		reached[1][4550] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4563, 4551, 4563) */
		reached[1][4551] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4563, 4561, 4563) */
		reached[1][4561] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2414: // STATE 4552 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4563:0:1 - 1)
		IfNotBlocked
		reached[1][4552] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4563, 4553, 4563) */
		reached[1][4553] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4563, 4554, 4563) */
		reached[1][4554] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4563, 4561, 4563) */
		reached[1][4561] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2415: // STATE 4555 - mutant_1.pml:240 - [((START==ABORT))] (4563:0:1 - 1)
		IfNotBlocked
		reached[1][4555] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4563, 4556, 4563) */
		reached[1][4556] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4563, 4557, 4563) */
		reached[1][4557] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4563, 4561, 4563) */
		reached[1][4561] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2416: // STATE 4559 - mutant_1.pml:244 - [(1)] (4563:0:0 - 1)
		IfNotBlocked
		reached[1][4559] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4563, 4561, 4563) */
		reached[1][4561] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2417: // STATE 4563 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4563] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2418: // STATE 4565 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4565] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2419: // STATE 4568 - mutant_1.pml:252 - [(1)] (4666:0:1 - 1)
		IfNotBlocked
		reached[1][4568] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4666, 4570, 4666) */
		reached[1][4570] = 1;
		;
		/* merge: .(goto)(4666, 4660, 4666) */
		reached[1][4660] = 1;
		;
		/* merge: j = (j-1)(4666, 4662, 4666) */
		reached[1][4662] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4667, 4666) */
		reached[1][4667] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2420: // STATE 4572 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4572] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2421: // STATE 4573 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (4598:0:1 - 1)
		IfNotBlocked
		reached[1][4573] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4598, 4574, 4598) */
		reached[1][4574] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4598, 4575, 4598) */
		reached[1][4575] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4598, 4591, 4598) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2422: // STATE 4591 - mutant_1.pml:276 - [.(goto)] (0:4598:0 - 6)
		IfNotBlocked
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2423: // STATE 4576 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (4598:0:1 - 1)
		IfNotBlocked
		reached[1][4576] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4598, 4577, 4598) */
		reached[1][4577] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4598, 4578, 4598) */
		reached[1][4578] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4598, 4591, 4598) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2424: // STATE 4579 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4598:0:1 - 1)
		IfNotBlocked
		reached[1][4579] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4598, 4580, 4598) */
		reached[1][4580] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4598, 4581, 4598) */
		reached[1][4581] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4598, 4591, 4598) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2425: // STATE 4582 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4598:0:1 - 1)
		IfNotBlocked
		reached[1][4582] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4598, 4583, 4598) */
		reached[1][4583] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4598, 4584, 4598) */
		reached[1][4584] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4598, 4591, 4598) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2426: // STATE 4585 - mutant_1.pml:270 - [((PAUSE==ABORT))] (4598:0:1 - 1)
		IfNotBlocked
		reached[1][4585] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4598, 4586, 4598) */
		reached[1][4586] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4598, 4587, 4598) */
		reached[1][4587] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4598, 4591, 4598) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2427: // STATE 4589 - mutant_1.pml:274 - [(1)] (4598:0:0 - 1)
		IfNotBlocked
		reached[1][4589] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4598, 4591, 4598) */
		reached[1][4591] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2428: // STATE 4594 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4594] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2429: // STATE 4597 - mutant_1.pml:281 - [(1)] (4666:0:1 - 1)
		IfNotBlocked
		reached[1][4597] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4666, 4599, 4666) */
		reached[1][4599] = 1;
		;
		/* merge: .(goto)(4666, 4660, 4666) */
		reached[1][4660] = 1;
		;
		/* merge: j = (j-1)(4666, 4662, 4666) */
		reached[1][4662] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4667, 4666) */
		reached[1][4667] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2430: // STATE 4601 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4601] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2431: // STATE 4602 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (4627:0:1 - 1)
		IfNotBlocked
		reached[1][4602] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4627, 4603, 4627) */
		reached[1][4603] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4627, 4604, 4627) */
		reached[1][4604] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4627, 4620, 4627) */
		reached[1][4620] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2432: // STATE 4620 - mutant_1.pml:305 - [.(goto)] (0:4627:0 - 6)
		IfNotBlocked
		reached[1][4620] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2433: // STATE 4605 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (4627:0:1 - 1)
		IfNotBlocked
		reached[1][4605] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4627, 4606, 4627) */
		reached[1][4606] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4627, 4607, 4627) */
		reached[1][4607] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4627, 4620, 4627) */
		reached[1][4620] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2434: // STATE 4608 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4627:0:1 - 1)
		IfNotBlocked
		reached[1][4608] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4627, 4609, 4627) */
		reached[1][4609] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4627, 4610, 4627) */
		reached[1][4610] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4627, 4620, 4627) */
		reached[1][4620] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2435: // STATE 4611 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4627:0:1 - 1)
		IfNotBlocked
		reached[1][4611] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4627, 4612, 4627) */
		reached[1][4612] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4627, 4613, 4627) */
		reached[1][4613] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4627, 4620, 4627) */
		reached[1][4620] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2436: // STATE 4614 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (4627:0:1 - 1)
		IfNotBlocked
		reached[1][4614] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4627, 4615, 4627) */
		reached[1][4615] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4627, 4616, 4627) */
		reached[1][4616] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4627, 4620, 4627) */
		reached[1][4620] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2437: // STATE 4618 - mutant_1.pml:303 - [(1)] (4627:0:0 - 1)
		IfNotBlocked
		reached[1][4618] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4627, 4620, 4627) */
		reached[1][4620] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2438: // STATE 4623 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4623] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2439: // STATE 4626 - mutant_1.pml:310 - [(1)] (4666:0:1 - 1)
		IfNotBlocked
		reached[1][4626] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4666, 4628, 4666) */
		reached[1][4628] = 1;
		;
		/* merge: .(goto)(4666, 4660, 4666) */
		reached[1][4660] = 1;
		;
		/* merge: j = (j-1)(4666, 4662, 4666) */
		reached[1][4662] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4667, 4666) */
		reached[1][4667] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2440: // STATE 4630 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4630] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2441: // STATE 4631 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (4656:0:1 - 1)
		IfNotBlocked
		reached[1][4631] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4656, 4632, 4656) */
		reached[1][4632] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4656, 4633, 4656) */
		reached[1][4633] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4656, 4649, 4656) */
		reached[1][4649] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2442: // STATE 4649 - mutant_1.pml:334 - [.(goto)] (0:4656:0 - 6)
		IfNotBlocked
		reached[1][4649] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2443: // STATE 4634 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (4656:0:1 - 1)
		IfNotBlocked
		reached[1][4634] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4656, 4635, 4656) */
		reached[1][4635] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4656, 4636, 4656) */
		reached[1][4636] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4656, 4649, 4656) */
		reached[1][4649] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2444: // STATE 4637 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4656:0:1 - 1)
		IfNotBlocked
		reached[1][4637] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4656, 4638, 4656) */
		reached[1][4638] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4656, 4639, 4656) */
		reached[1][4639] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4656, 4649, 4656) */
		reached[1][4649] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2445: // STATE 4640 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4656:0:1 - 1)
		IfNotBlocked
		reached[1][4640] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4656, 4641, 4656) */
		reached[1][4641] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4656, 4642, 4656) */
		reached[1][4642] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4656, 4649, 4656) */
		reached[1][4649] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2446: // STATE 4643 - mutant_1.pml:328 - [((STOP==ABORT))] (4656:0:1 - 1)
		IfNotBlocked
		reached[1][4643] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4656, 4644, 4656) */
		reached[1][4644] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4656, 4645, 4656) */
		reached[1][4645] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4656, 4649, 4656) */
		reached[1][4649] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2447: // STATE 4647 - mutant_1.pml:332 - [(1)] (4656:0:0 - 1)
		IfNotBlocked
		reached[1][4647] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4656, 4649, 4656) */
		reached[1][4649] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2448: // STATE 4652 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4652] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2449: // STATE 4655 - mutant_1.pml:339 - [(1)] (4666:0:1 - 1)
		IfNotBlocked
		reached[1][4655] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4666, 4657, 4666) */
		reached[1][4657] = 1;
		;
		/* merge: .(goto)(4666, 4660, 4666) */
		reached[1][4660] = 1;
		;
		/* merge: j = (j-1)(4666, 4662, 4666) */
		reached[1][4662] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4667, 4666) */
		reached[1][4667] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2450: // STATE 4662 - mutant_1.pml:386 - [j = (j-1)] (0:4666:1 - 13)
		IfNotBlocked
		reached[1][4662] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4667, 4666) */
		reached[1][4667] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2451: // STATE 4664 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4664] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2452: // STATE 4674 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4674] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2453: // STATE 4675 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4675] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2454: // STATE 4676 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (4696:0:1 - 1)
		IfNotBlocked
		reached[1][4676] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4696, 4677, 4696) */
		reached[1][4677] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4696, 4678, 4696) */
		reached[1][4678] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4696, 4694, 4696) */
		reached[1][4694] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2455: // STATE 4694 - mutant_1.pml:246 - [.(goto)] (0:4696:0 - 6)
		IfNotBlocked
		reached[1][4694] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2456: // STATE 4679 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (4696:0:1 - 1)
		IfNotBlocked
		reached[1][4679] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4696, 4680, 4696) */
		reached[1][4680] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4696, 4681, 4696) */
		reached[1][4681] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4696, 4694, 4696) */
		reached[1][4694] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2457: // STATE 4682 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4696:0:1 - 1)
		IfNotBlocked
		reached[1][4682] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4696, 4683, 4696) */
		reached[1][4683] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4696, 4684, 4696) */
		reached[1][4684] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4696, 4694, 4696) */
		reached[1][4694] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2458: // STATE 4685 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4696:0:1 - 1)
		IfNotBlocked
		reached[1][4685] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4696, 4686, 4696) */
		reached[1][4686] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4696, 4687, 4696) */
		reached[1][4687] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4696, 4694, 4696) */
		reached[1][4694] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2459: // STATE 4688 - mutant_1.pml:240 - [((START==ABORT))] (4696:0:1 - 1)
		IfNotBlocked
		reached[1][4688] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4696, 4689, 4696) */
		reached[1][4689] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4696, 4690, 4696) */
		reached[1][4690] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4696, 4694, 4696) */
		reached[1][4694] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2460: // STATE 4692 - mutant_1.pml:244 - [(1)] (4696:0:0 - 1)
		IfNotBlocked
		reached[1][4692] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4696, 4694, 4696) */
		reached[1][4694] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2461: // STATE 4696 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4696] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2462: // STATE 4698 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4698] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2463: // STATE 4701 - mutant_1.pml:252 - [(1)] (4799:0:1 - 1)
		IfNotBlocked
		reached[1][4701] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4799, 4703, 4799) */
		reached[1][4703] = 1;
		;
		/* merge: .(goto)(4799, 4793, 4799) */
		reached[1][4793] = 1;
		;
		/* merge: j = (j+1)(4799, 4795, 4799) */
		reached[1][4795] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4800, 4799) */
		reached[1][4800] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2464: // STATE 4705 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4705] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2465: // STATE 4706 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (4731:0:1 - 1)
		IfNotBlocked
		reached[1][4706] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4731, 4707, 4731) */
		reached[1][4707] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4731, 4708, 4731) */
		reached[1][4708] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4731, 4724, 4731) */
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2466: // STATE 4724 - mutant_1.pml:276 - [.(goto)] (0:4731:0 - 6)
		IfNotBlocked
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2467: // STATE 4709 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (4731:0:1 - 1)
		IfNotBlocked
		reached[1][4709] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4731, 4710, 4731) */
		reached[1][4710] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4731, 4711, 4731) */
		reached[1][4711] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4731, 4724, 4731) */
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2468: // STATE 4712 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4731:0:1 - 1)
		IfNotBlocked
		reached[1][4712] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4731, 4713, 4731) */
		reached[1][4713] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4731, 4714, 4731) */
		reached[1][4714] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4731, 4724, 4731) */
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2469: // STATE 4715 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4731:0:1 - 1)
		IfNotBlocked
		reached[1][4715] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4731, 4716, 4731) */
		reached[1][4716] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4731, 4717, 4731) */
		reached[1][4717] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4731, 4724, 4731) */
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2470: // STATE 4718 - mutant_1.pml:270 - [((PAUSE==ABORT))] (4731:0:1 - 1)
		IfNotBlocked
		reached[1][4718] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4731, 4719, 4731) */
		reached[1][4719] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4731, 4720, 4731) */
		reached[1][4720] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4731, 4724, 4731) */
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2471: // STATE 4722 - mutant_1.pml:274 - [(1)] (4731:0:0 - 1)
		IfNotBlocked
		reached[1][4722] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4731, 4724, 4731) */
		reached[1][4724] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2472: // STATE 4727 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4727] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2473: // STATE 4730 - mutant_1.pml:281 - [(1)] (4799:0:1 - 1)
		IfNotBlocked
		reached[1][4730] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4799, 4732, 4799) */
		reached[1][4732] = 1;
		;
		/* merge: .(goto)(4799, 4793, 4799) */
		reached[1][4793] = 1;
		;
		/* merge: j = (j+1)(4799, 4795, 4799) */
		reached[1][4795] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4800, 4799) */
		reached[1][4800] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2474: // STATE 4734 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4734] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2475: // STATE 4735 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (4760:0:1 - 1)
		IfNotBlocked
		reached[1][4735] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4760, 4736, 4760) */
		reached[1][4736] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4760, 4737, 4760) */
		reached[1][4737] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4760, 4753, 4760) */
		reached[1][4753] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2476: // STATE 4753 - mutant_1.pml:305 - [.(goto)] (0:4760:0 - 6)
		IfNotBlocked
		reached[1][4753] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2477: // STATE 4738 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (4760:0:1 - 1)
		IfNotBlocked
		reached[1][4738] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4760, 4739, 4760) */
		reached[1][4739] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4760, 4740, 4760) */
		reached[1][4740] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4760, 4753, 4760) */
		reached[1][4753] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2478: // STATE 4741 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4760:0:1 - 1)
		IfNotBlocked
		reached[1][4741] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4760, 4742, 4760) */
		reached[1][4742] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4760, 4743, 4760) */
		reached[1][4743] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4760, 4753, 4760) */
		reached[1][4753] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2479: // STATE 4744 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4760:0:1 - 1)
		IfNotBlocked
		reached[1][4744] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4760, 4745, 4760) */
		reached[1][4745] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4760, 4746, 4760) */
		reached[1][4746] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4760, 4753, 4760) */
		reached[1][4753] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2480: // STATE 4747 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (4760:0:1 - 1)
		IfNotBlocked
		reached[1][4747] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4760, 4748, 4760) */
		reached[1][4748] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4760, 4749, 4760) */
		reached[1][4749] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4760, 4753, 4760) */
		reached[1][4753] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2481: // STATE 4751 - mutant_1.pml:303 - [(1)] (4760:0:0 - 1)
		IfNotBlocked
		reached[1][4751] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4760, 4753, 4760) */
		reached[1][4753] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2482: // STATE 4756 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4756] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2483: // STATE 4759 - mutant_1.pml:310 - [(1)] (4799:0:1 - 1)
		IfNotBlocked
		reached[1][4759] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4799, 4761, 4799) */
		reached[1][4761] = 1;
		;
		/* merge: .(goto)(4799, 4793, 4799) */
		reached[1][4793] = 1;
		;
		/* merge: j = (j+1)(4799, 4795, 4799) */
		reached[1][4795] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4800, 4799) */
		reached[1][4800] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2484: // STATE 4763 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4763] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2485: // STATE 4764 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (4789:0:1 - 1)
		IfNotBlocked
		reached[1][4764] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4789, 4765, 4789) */
		reached[1][4765] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4789, 4766, 4789) */
		reached[1][4766] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4789, 4782, 4789) */
		reached[1][4782] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2486: // STATE 4782 - mutant_1.pml:334 - [.(goto)] (0:4789:0 - 6)
		IfNotBlocked
		reached[1][4782] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2487: // STATE 4767 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (4789:0:1 - 1)
		IfNotBlocked
		reached[1][4767] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4789, 4768, 4789) */
		reached[1][4768] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4789, 4769, 4789) */
		reached[1][4769] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4789, 4782, 4789) */
		reached[1][4782] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2488: // STATE 4770 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4789:0:1 - 1)
		IfNotBlocked
		reached[1][4770] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4789, 4771, 4789) */
		reached[1][4771] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4789, 4772, 4789) */
		reached[1][4772] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4789, 4782, 4789) */
		reached[1][4782] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2489: // STATE 4773 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4789:0:1 - 1)
		IfNotBlocked
		reached[1][4773] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4789, 4774, 4789) */
		reached[1][4774] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4789, 4775, 4789) */
		reached[1][4775] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4789, 4782, 4789) */
		reached[1][4782] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2490: // STATE 4776 - mutant_1.pml:328 - [((STOP==ABORT))] (4789:0:1 - 1)
		IfNotBlocked
		reached[1][4776] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4789, 4777, 4789) */
		reached[1][4777] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4789, 4778, 4789) */
		reached[1][4778] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4789, 4782, 4789) */
		reached[1][4782] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2491: // STATE 4780 - mutant_1.pml:332 - [(1)] (4789:0:0 - 1)
		IfNotBlocked
		reached[1][4780] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4789, 4782, 4789) */
		reached[1][4782] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2492: // STATE 4785 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4785] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2493: // STATE 4788 - mutant_1.pml:339 - [(1)] (4799:0:1 - 1)
		IfNotBlocked
		reached[1][4788] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4799, 4790, 4799) */
		reached[1][4790] = 1;
		;
		/* merge: .(goto)(4799, 4793, 4799) */
		reached[1][4793] = 1;
		;
		/* merge: j = (j+1)(4799, 4795, 4799) */
		reached[1][4795] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4800, 4799) */
		reached[1][4800] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2494: // STATE 4795 - mutant_1.pml:375 - [j = (j+1)] (0:4799:1 - 13)
		IfNotBlocked
		reached[1][4795] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4800, 4799) */
		reached[1][4800] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2495: // STATE 4797 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4797] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2496: // STATE 4803 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4803] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2497: // STATE 4804 - mutant_1.pml:405 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4804] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2498: // STATE 4805 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4805] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2499: // STATE 4807 - mutant_1.pml:407 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4807] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2500: // STATE 4808 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4808] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2501: // STATE 4810 - mutant_1.pml:409 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4810] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2502: // STATE 4811 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4811] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2503: // STATE 4813 - mutant_1.pml:411 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4813] = 1;
		if (!((8==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2504: // STATE 4814 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4814] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2505: // STATE 4818 - mutant_1.pml:414 - [j = (j+1)] (0:4822:1 - 5)
		IfNotBlocked
		reached[1][4818] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4823, 4822) */
		reached[1][4823] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2506: // STATE 4820 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4820] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2507: // STATE 4831 - mutant_1.pml:449 - [((10==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4831] = 1;
		if (!((10==10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2508: // STATE 4832 - mutant_1.pml:422 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4832] = 1;
		if (!(((6==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2509: // STATE 4833 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4833] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2510: // STATE 4835 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4835] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2511: // STATE 4836 - mutant_1.pml:394 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4836] = 1;
		if (!(((6==9)||(6==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2512: // STATE 4837 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4837] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2513: // STATE 4838 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4838] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2514: // STATE 4839 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (4859:0:1 - 1)
		IfNotBlocked
		reached[1][4839] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4859, 4840, 4859) */
		reached[1][4840] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4859, 4841, 4859) */
		reached[1][4841] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4859, 4857, 4859) */
		reached[1][4857] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2515: // STATE 4857 - mutant_1.pml:246 - [.(goto)] (0:4859:0 - 6)
		IfNotBlocked
		reached[1][4857] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2516: // STATE 4842 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (4859:0:1 - 1)
		IfNotBlocked
		reached[1][4842] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4859, 4843, 4859) */
		reached[1][4843] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4859, 4844, 4859) */
		reached[1][4844] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4859, 4857, 4859) */
		reached[1][4857] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2517: // STATE 4845 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4859:0:1 - 1)
		IfNotBlocked
		reached[1][4845] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4859, 4846, 4859) */
		reached[1][4846] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4859, 4847, 4859) */
		reached[1][4847] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4859, 4857, 4859) */
		reached[1][4857] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2518: // STATE 4848 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4859:0:1 - 1)
		IfNotBlocked
		reached[1][4848] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4859, 4849, 4859) */
		reached[1][4849] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4859, 4850, 4859) */
		reached[1][4850] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4859, 4857, 4859) */
		reached[1][4857] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2519: // STATE 4851 - mutant_1.pml:240 - [((START==ABORT))] (4859:0:1 - 1)
		IfNotBlocked
		reached[1][4851] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4859, 4852, 4859) */
		reached[1][4852] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4859, 4853, 4859) */
		reached[1][4853] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4859, 4857, 4859) */
		reached[1][4857] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2520: // STATE 4855 - mutant_1.pml:244 - [(1)] (4859:0:0 - 1)
		IfNotBlocked
		reached[1][4855] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4859, 4857, 4859) */
		reached[1][4857] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2521: // STATE 4859 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4859] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2522: // STATE 4861 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4861] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2523: // STATE 4864 - mutant_1.pml:252 - [(1)] (4962:0:1 - 1)
		IfNotBlocked
		reached[1][4864] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4962, 4866, 4962) */
		reached[1][4866] = 1;
		;
		/* merge: .(goto)(4962, 4956, 4962) */
		reached[1][4956] = 1;
		;
		/* merge: j = (j+1)(4962, 4958, 4962) */
		reached[1][4958] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4963, 4962) */
		reached[1][4963] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2524: // STATE 4868 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4868] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2525: // STATE 4869 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (4894:0:1 - 1)
		IfNotBlocked
		reached[1][4869] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4894, 4870, 4894) */
		reached[1][4870] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4894, 4871, 4894) */
		reached[1][4871] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4894, 4887, 4894) */
		reached[1][4887] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2526: // STATE 4887 - mutant_1.pml:276 - [.(goto)] (0:4894:0 - 6)
		IfNotBlocked
		reached[1][4887] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2527: // STATE 4872 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (4894:0:1 - 1)
		IfNotBlocked
		reached[1][4872] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4894, 4873, 4894) */
		reached[1][4873] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4894, 4874, 4894) */
		reached[1][4874] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4894, 4887, 4894) */
		reached[1][4887] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2528: // STATE 4875 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4894:0:1 - 1)
		IfNotBlocked
		reached[1][4875] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4894, 4876, 4894) */
		reached[1][4876] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4894, 4877, 4894) */
		reached[1][4877] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4894, 4887, 4894) */
		reached[1][4887] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2529: // STATE 4878 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4894:0:1 - 1)
		IfNotBlocked
		reached[1][4878] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4894, 4879, 4894) */
		reached[1][4879] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4894, 4880, 4894) */
		reached[1][4880] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4894, 4887, 4894) */
		reached[1][4887] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2530: // STATE 4881 - mutant_1.pml:270 - [((PAUSE==ABORT))] (4894:0:1 - 1)
		IfNotBlocked
		reached[1][4881] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4894, 4882, 4894) */
		reached[1][4882] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4894, 4883, 4894) */
		reached[1][4883] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4894, 4887, 4894) */
		reached[1][4887] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2531: // STATE 4885 - mutant_1.pml:274 - [(1)] (4894:0:0 - 1)
		IfNotBlocked
		reached[1][4885] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4894, 4887, 4894) */
		reached[1][4887] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2532: // STATE 4890 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4890] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2533: // STATE 4893 - mutant_1.pml:281 - [(1)] (4962:0:1 - 1)
		IfNotBlocked
		reached[1][4893] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4962, 4895, 4962) */
		reached[1][4895] = 1;
		;
		/* merge: .(goto)(4962, 4956, 4962) */
		reached[1][4956] = 1;
		;
		/* merge: j = (j+1)(4962, 4958, 4962) */
		reached[1][4958] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4963, 4962) */
		reached[1][4963] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2534: // STATE 4897 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4897] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2535: // STATE 4898 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (4923:0:1 - 1)
		IfNotBlocked
		reached[1][4898] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4923, 4899, 4923) */
		reached[1][4899] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4923, 4900, 4923) */
		reached[1][4900] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4923, 4916, 4923) */
		reached[1][4916] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2536: // STATE 4916 - mutant_1.pml:305 - [.(goto)] (0:4923:0 - 6)
		IfNotBlocked
		reached[1][4916] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2537: // STATE 4901 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (4923:0:1 - 1)
		IfNotBlocked
		reached[1][4901] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4923, 4902, 4923) */
		reached[1][4902] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4923, 4903, 4923) */
		reached[1][4903] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4923, 4916, 4923) */
		reached[1][4916] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2538: // STATE 4904 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4923:0:1 - 1)
		IfNotBlocked
		reached[1][4904] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4923, 4905, 4923) */
		reached[1][4905] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4923, 4906, 4923) */
		reached[1][4906] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4923, 4916, 4923) */
		reached[1][4916] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2539: // STATE 4907 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4923:0:1 - 1)
		IfNotBlocked
		reached[1][4907] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4923, 4908, 4923) */
		reached[1][4908] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4923, 4909, 4923) */
		reached[1][4909] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4923, 4916, 4923) */
		reached[1][4916] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2540: // STATE 4910 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (4923:0:1 - 1)
		IfNotBlocked
		reached[1][4910] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4923, 4911, 4923) */
		reached[1][4911] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4923, 4912, 4923) */
		reached[1][4912] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4923, 4916, 4923) */
		reached[1][4916] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2541: // STATE 4914 - mutant_1.pml:303 - [(1)] (4923:0:0 - 1)
		IfNotBlocked
		reached[1][4914] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4923, 4916, 4923) */
		reached[1][4916] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2542: // STATE 4919 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4919] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2543: // STATE 4922 - mutant_1.pml:310 - [(1)] (4962:0:1 - 1)
		IfNotBlocked
		reached[1][4922] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4962, 4924, 4962) */
		reached[1][4924] = 1;
		;
		/* merge: .(goto)(4962, 4956, 4962) */
		reached[1][4956] = 1;
		;
		/* merge: j = (j+1)(4962, 4958, 4962) */
		reached[1][4958] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4963, 4962) */
		reached[1][4963] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2544: // STATE 4926 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4926] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2545: // STATE 4927 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (4952:0:1 - 1)
		IfNotBlocked
		reached[1][4927] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4952, 4928, 4952) */
		reached[1][4928] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4952, 4929, 4952) */
		reached[1][4929] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4952, 4945, 4952) */
		reached[1][4945] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2546: // STATE 4945 - mutant_1.pml:334 - [.(goto)] (0:4952:0 - 6)
		IfNotBlocked
		reached[1][4945] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2547: // STATE 4930 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (4952:0:1 - 1)
		IfNotBlocked
		reached[1][4930] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4952, 4931, 4952) */
		reached[1][4931] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4952, 4932, 4952) */
		reached[1][4932] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4952, 4945, 4952) */
		reached[1][4945] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2548: // STATE 4933 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4952:0:1 - 1)
		IfNotBlocked
		reached[1][4933] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4952, 4934, 4952) */
		reached[1][4934] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4952, 4935, 4952) */
		reached[1][4935] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4952, 4945, 4952) */
		reached[1][4945] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2549: // STATE 4936 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4952:0:1 - 1)
		IfNotBlocked
		reached[1][4936] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4952, 4937, 4952) */
		reached[1][4937] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4952, 4938, 4952) */
		reached[1][4938] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4952, 4945, 4952) */
		reached[1][4945] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2550: // STATE 4939 - mutant_1.pml:328 - [((STOP==ABORT))] (4952:0:1 - 1)
		IfNotBlocked
		reached[1][4939] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4952, 4940, 4952) */
		reached[1][4940] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4952, 4941, 4952) */
		reached[1][4941] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4952, 4945, 4952) */
		reached[1][4945] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2551: // STATE 4943 - mutant_1.pml:332 - [(1)] (4952:0:0 - 1)
		IfNotBlocked
		reached[1][4943] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4952, 4945, 4952) */
		reached[1][4945] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2552: // STATE 4948 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4948] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2553: // STATE 4951 - mutant_1.pml:339 - [(1)] (4962:0:1 - 1)
		IfNotBlocked
		reached[1][4951] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4962, 4953, 4962) */
		reached[1][4953] = 1;
		;
		/* merge: .(goto)(4962, 4956, 4962) */
		reached[1][4956] = 1;
		;
		/* merge: j = (j+1)(4962, 4958, 4962) */
		reached[1][4958] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4963, 4962) */
		reached[1][4963] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2554: // STATE 4958 - mutant_1.pml:375 - [j = (j+1)] (0:4962:1 - 13)
		IfNotBlocked
		reached[1][4958] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 4963, 4962) */
		reached[1][4963] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2555: // STATE 4960 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4960] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2556: // STATE 4967 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][4967] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2557: // STATE 4968 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4968] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2558: // STATE 4969 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4969] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2559: // STATE 4970 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (4990:0:1 - 1)
		IfNotBlocked
		reached[1][4970] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(4990, 4971, 4990) */
		reached[1][4971] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(4990, 4972, 4990) */
		reached[1][4972] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4990, 4988, 4990) */
		reached[1][4988] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2560: // STATE 4988 - mutant_1.pml:246 - [.(goto)] (0:4990:0 - 6)
		IfNotBlocked
		reached[1][4988] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2561: // STATE 4973 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (4990:0:1 - 1)
		IfNotBlocked
		reached[1][4973] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(4990, 4974, 4990) */
		reached[1][4974] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(4990, 4975, 4990) */
		reached[1][4975] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4990, 4988, 4990) */
		reached[1][4988] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2562: // STATE 4976 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (4990:0:1 - 1)
		IfNotBlocked
		reached[1][4976] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(4990, 4977, 4990) */
		reached[1][4977] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(4990, 4978, 4990) */
		reached[1][4978] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4990, 4988, 4990) */
		reached[1][4988] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2563: // STATE 4979 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (4990:0:1 - 1)
		IfNotBlocked
		reached[1][4979] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(4990, 4980, 4990) */
		reached[1][4980] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(4990, 4981, 4990) */
		reached[1][4981] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4990, 4988, 4990) */
		reached[1][4988] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2564: // STATE 4982 - mutant_1.pml:240 - [((START==ABORT))] (4990:0:1 - 1)
		IfNotBlocked
		reached[1][4982] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(4990, 4983, 4990) */
		reached[1][4983] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(4990, 4984, 4990) */
		reached[1][4984] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(4990, 4988, 4990) */
		reached[1][4988] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2565: // STATE 4986 - mutant_1.pml:244 - [(1)] (4990:0:0 - 1)
		IfNotBlocked
		reached[1][4986] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(4990, 4988, 4990) */
		reached[1][4988] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2566: // STATE 4990 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4990] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2567: // STATE 4992 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4992] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2568: // STATE 4995 - mutant_1.pml:252 - [(1)] (5093:0:1 - 1)
		IfNotBlocked
		reached[1][4995] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5093, 4997, 5093) */
		reached[1][4997] = 1;
		;
		/* merge: .(goto)(5093, 5087, 5093) */
		reached[1][5087] = 1;
		;
		/* merge: j = (j-1)(5093, 5089, 5093) */
		reached[1][5089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5094, 5093) */
		reached[1][5094] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2569: // STATE 4999 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][4999] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2570: // STATE 5000 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (5025:0:1 - 1)
		IfNotBlocked
		reached[1][5000] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5025, 5001, 5025) */
		reached[1][5001] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5025, 5002, 5025) */
		reached[1][5002] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5025, 5018, 5025) */
		reached[1][5018] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2571: // STATE 5018 - mutant_1.pml:276 - [.(goto)] (0:5025:0 - 6)
		IfNotBlocked
		reached[1][5018] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2572: // STATE 5003 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (5025:0:1 - 1)
		IfNotBlocked
		reached[1][5003] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5025, 5004, 5025) */
		reached[1][5004] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5025, 5005, 5025) */
		reached[1][5005] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5025, 5018, 5025) */
		reached[1][5018] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2573: // STATE 5006 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5025:0:1 - 1)
		IfNotBlocked
		reached[1][5006] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5025, 5007, 5025) */
		reached[1][5007] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5025, 5008, 5025) */
		reached[1][5008] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5025, 5018, 5025) */
		reached[1][5018] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2574: // STATE 5009 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5025:0:1 - 1)
		IfNotBlocked
		reached[1][5009] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5025, 5010, 5025) */
		reached[1][5010] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5025, 5011, 5025) */
		reached[1][5011] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5025, 5018, 5025) */
		reached[1][5018] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2575: // STATE 5012 - mutant_1.pml:270 - [((PAUSE==ABORT))] (5025:0:1 - 1)
		IfNotBlocked
		reached[1][5012] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5025, 5013, 5025) */
		reached[1][5013] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5025, 5014, 5025) */
		reached[1][5014] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5025, 5018, 5025) */
		reached[1][5018] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2576: // STATE 5016 - mutant_1.pml:274 - [(1)] (5025:0:0 - 1)
		IfNotBlocked
		reached[1][5016] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5025, 5018, 5025) */
		reached[1][5018] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2577: // STATE 5021 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5021] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2578: // STATE 5024 - mutant_1.pml:281 - [(1)] (5093:0:1 - 1)
		IfNotBlocked
		reached[1][5024] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5093, 5026, 5093) */
		reached[1][5026] = 1;
		;
		/* merge: .(goto)(5093, 5087, 5093) */
		reached[1][5087] = 1;
		;
		/* merge: j = (j-1)(5093, 5089, 5093) */
		reached[1][5089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5094, 5093) */
		reached[1][5094] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2579: // STATE 5028 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5028] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2580: // STATE 5029 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (5054:0:1 - 1)
		IfNotBlocked
		reached[1][5029] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5054, 5030, 5054) */
		reached[1][5030] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5054, 5031, 5054) */
		reached[1][5031] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5054, 5047, 5054) */
		reached[1][5047] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2581: // STATE 5047 - mutant_1.pml:305 - [.(goto)] (0:5054:0 - 6)
		IfNotBlocked
		reached[1][5047] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2582: // STATE 5032 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (5054:0:1 - 1)
		IfNotBlocked
		reached[1][5032] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5054, 5033, 5054) */
		reached[1][5033] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5054, 5034, 5054) */
		reached[1][5034] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5054, 5047, 5054) */
		reached[1][5047] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2583: // STATE 5035 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5054:0:1 - 1)
		IfNotBlocked
		reached[1][5035] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5054, 5036, 5054) */
		reached[1][5036] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5054, 5037, 5054) */
		reached[1][5037] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5054, 5047, 5054) */
		reached[1][5047] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2584: // STATE 5038 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5054:0:1 - 1)
		IfNotBlocked
		reached[1][5038] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5054, 5039, 5054) */
		reached[1][5039] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5054, 5040, 5054) */
		reached[1][5040] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5054, 5047, 5054) */
		reached[1][5047] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2585: // STATE 5041 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (5054:0:1 - 1)
		IfNotBlocked
		reached[1][5041] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5054, 5042, 5054) */
		reached[1][5042] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5054, 5043, 5054) */
		reached[1][5043] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5054, 5047, 5054) */
		reached[1][5047] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2586: // STATE 5045 - mutant_1.pml:303 - [(1)] (5054:0:0 - 1)
		IfNotBlocked
		reached[1][5045] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5054, 5047, 5054) */
		reached[1][5047] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2587: // STATE 5050 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5050] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2588: // STATE 5053 - mutant_1.pml:310 - [(1)] (5093:0:1 - 1)
		IfNotBlocked
		reached[1][5053] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5093, 5055, 5093) */
		reached[1][5055] = 1;
		;
		/* merge: .(goto)(5093, 5087, 5093) */
		reached[1][5087] = 1;
		;
		/* merge: j = (j-1)(5093, 5089, 5093) */
		reached[1][5089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5094, 5093) */
		reached[1][5094] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2589: // STATE 5057 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5057] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2590: // STATE 5058 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (5083:0:1 - 1)
		IfNotBlocked
		reached[1][5058] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5083, 5059, 5083) */
		reached[1][5059] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5083, 5060, 5083) */
		reached[1][5060] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5083, 5076, 5083) */
		reached[1][5076] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2591: // STATE 5076 - mutant_1.pml:334 - [.(goto)] (0:5083:0 - 6)
		IfNotBlocked
		reached[1][5076] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2592: // STATE 5061 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (5083:0:1 - 1)
		IfNotBlocked
		reached[1][5061] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5083, 5062, 5083) */
		reached[1][5062] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5083, 5063, 5083) */
		reached[1][5063] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5083, 5076, 5083) */
		reached[1][5076] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2593: // STATE 5064 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5083:0:1 - 1)
		IfNotBlocked
		reached[1][5064] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5083, 5065, 5083) */
		reached[1][5065] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5083, 5066, 5083) */
		reached[1][5066] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5083, 5076, 5083) */
		reached[1][5076] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2594: // STATE 5067 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5083:0:1 - 1)
		IfNotBlocked
		reached[1][5067] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5083, 5068, 5083) */
		reached[1][5068] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5083, 5069, 5083) */
		reached[1][5069] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5083, 5076, 5083) */
		reached[1][5076] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2595: // STATE 5070 - mutant_1.pml:328 - [((STOP==ABORT))] (5083:0:1 - 1)
		IfNotBlocked
		reached[1][5070] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5083, 5071, 5083) */
		reached[1][5071] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5083, 5072, 5083) */
		reached[1][5072] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5083, 5076, 5083) */
		reached[1][5076] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2596: // STATE 5074 - mutant_1.pml:332 - [(1)] (5083:0:0 - 1)
		IfNotBlocked
		reached[1][5074] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5083, 5076, 5083) */
		reached[1][5076] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2597: // STATE 5079 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5079] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2598: // STATE 5082 - mutant_1.pml:339 - [(1)] (5093:0:1 - 1)
		IfNotBlocked
		reached[1][5082] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5093, 5084, 5093) */
		reached[1][5084] = 1;
		;
		/* merge: .(goto)(5093, 5087, 5093) */
		reached[1][5087] = 1;
		;
		/* merge: j = (j-1)(5093, 5089, 5093) */
		reached[1][5089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5094, 5093) */
		reached[1][5094] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2599: // STATE 5089 - mutant_1.pml:386 - [j = (j-1)] (0:5093:1 - 13)
		IfNotBlocked
		reached[1][5089] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5094, 5093) */
		reached[1][5094] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2600: // STATE 5091 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5091] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2601: // STATE 5101 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5101] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2602: // STATE 5102 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5102] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2603: // STATE 5103 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (5123:0:1 - 1)
		IfNotBlocked
		reached[1][5103] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5123, 5104, 5123) */
		reached[1][5104] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5123, 5105, 5123) */
		reached[1][5105] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5123, 5121, 5123) */
		reached[1][5121] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2604: // STATE 5121 - mutant_1.pml:246 - [.(goto)] (0:5123:0 - 6)
		IfNotBlocked
		reached[1][5121] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2605: // STATE 5106 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (5123:0:1 - 1)
		IfNotBlocked
		reached[1][5106] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5123, 5107, 5123) */
		reached[1][5107] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5123, 5108, 5123) */
		reached[1][5108] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5123, 5121, 5123) */
		reached[1][5121] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2606: // STATE 5109 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5123:0:1 - 1)
		IfNotBlocked
		reached[1][5109] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5123, 5110, 5123) */
		reached[1][5110] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5123, 5111, 5123) */
		reached[1][5111] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5123, 5121, 5123) */
		reached[1][5121] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2607: // STATE 5112 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5123:0:1 - 1)
		IfNotBlocked
		reached[1][5112] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5123, 5113, 5123) */
		reached[1][5113] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5123, 5114, 5123) */
		reached[1][5114] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5123, 5121, 5123) */
		reached[1][5121] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2608: // STATE 5115 - mutant_1.pml:240 - [((START==ABORT))] (5123:0:1 - 1)
		IfNotBlocked
		reached[1][5115] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5123, 5116, 5123) */
		reached[1][5116] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5123, 5117, 5123) */
		reached[1][5117] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5123, 5121, 5123) */
		reached[1][5121] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2609: // STATE 5119 - mutant_1.pml:244 - [(1)] (5123:0:0 - 1)
		IfNotBlocked
		reached[1][5119] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5123, 5121, 5123) */
		reached[1][5121] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2610: // STATE 5123 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5123] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2611: // STATE 5125 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5125] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2612: // STATE 5128 - mutant_1.pml:252 - [(1)] (5226:0:1 - 1)
		IfNotBlocked
		reached[1][5128] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5226, 5130, 5226) */
		reached[1][5130] = 1;
		;
		/* merge: .(goto)(5226, 5220, 5226) */
		reached[1][5220] = 1;
		;
		/* merge: j = (j+1)(5226, 5222, 5226) */
		reached[1][5222] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5227, 5226) */
		reached[1][5227] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2613: // STATE 5132 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5132] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2614: // STATE 5133 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (5158:0:1 - 1)
		IfNotBlocked
		reached[1][5133] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5158, 5134, 5158) */
		reached[1][5134] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5158, 5135, 5158) */
		reached[1][5135] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5158, 5151, 5158) */
		reached[1][5151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2615: // STATE 5151 - mutant_1.pml:276 - [.(goto)] (0:5158:0 - 6)
		IfNotBlocked
		reached[1][5151] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2616: // STATE 5136 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (5158:0:1 - 1)
		IfNotBlocked
		reached[1][5136] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5158, 5137, 5158) */
		reached[1][5137] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5158, 5138, 5158) */
		reached[1][5138] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5158, 5151, 5158) */
		reached[1][5151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2617: // STATE 5139 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5158:0:1 - 1)
		IfNotBlocked
		reached[1][5139] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5158, 5140, 5158) */
		reached[1][5140] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5158, 5141, 5158) */
		reached[1][5141] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5158, 5151, 5158) */
		reached[1][5151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2618: // STATE 5142 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5158:0:1 - 1)
		IfNotBlocked
		reached[1][5142] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5158, 5143, 5158) */
		reached[1][5143] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5158, 5144, 5158) */
		reached[1][5144] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5158, 5151, 5158) */
		reached[1][5151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2619: // STATE 5145 - mutant_1.pml:270 - [((PAUSE==ABORT))] (5158:0:1 - 1)
		IfNotBlocked
		reached[1][5145] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5158, 5146, 5158) */
		reached[1][5146] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5158, 5147, 5158) */
		reached[1][5147] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5158, 5151, 5158) */
		reached[1][5151] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2620: // STATE 5149 - mutant_1.pml:274 - [(1)] (5158:0:0 - 1)
		IfNotBlocked
		reached[1][5149] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5158, 5151, 5158) */
		reached[1][5151] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2621: // STATE 5154 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5154] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2622: // STATE 5157 - mutant_1.pml:281 - [(1)] (5226:0:1 - 1)
		IfNotBlocked
		reached[1][5157] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5226, 5159, 5226) */
		reached[1][5159] = 1;
		;
		/* merge: .(goto)(5226, 5220, 5226) */
		reached[1][5220] = 1;
		;
		/* merge: j = (j+1)(5226, 5222, 5226) */
		reached[1][5222] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5227, 5226) */
		reached[1][5227] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2623: // STATE 5161 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5161] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2624: // STATE 5162 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (5187:0:1 - 1)
		IfNotBlocked
		reached[1][5162] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5187, 5163, 5187) */
		reached[1][5163] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5187, 5164, 5187) */
		reached[1][5164] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5187, 5180, 5187) */
		reached[1][5180] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2625: // STATE 5180 - mutant_1.pml:305 - [.(goto)] (0:5187:0 - 6)
		IfNotBlocked
		reached[1][5180] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2626: // STATE 5165 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (5187:0:1 - 1)
		IfNotBlocked
		reached[1][5165] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5187, 5166, 5187) */
		reached[1][5166] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5187, 5167, 5187) */
		reached[1][5167] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5187, 5180, 5187) */
		reached[1][5180] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2627: // STATE 5168 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5187:0:1 - 1)
		IfNotBlocked
		reached[1][5168] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5187, 5169, 5187) */
		reached[1][5169] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5187, 5170, 5187) */
		reached[1][5170] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5187, 5180, 5187) */
		reached[1][5180] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2628: // STATE 5171 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5187:0:1 - 1)
		IfNotBlocked
		reached[1][5171] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5187, 5172, 5187) */
		reached[1][5172] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5187, 5173, 5187) */
		reached[1][5173] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5187, 5180, 5187) */
		reached[1][5180] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2629: // STATE 5174 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (5187:0:1 - 1)
		IfNotBlocked
		reached[1][5174] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5187, 5175, 5187) */
		reached[1][5175] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5187, 5176, 5187) */
		reached[1][5176] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5187, 5180, 5187) */
		reached[1][5180] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2630: // STATE 5178 - mutant_1.pml:303 - [(1)] (5187:0:0 - 1)
		IfNotBlocked
		reached[1][5178] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5187, 5180, 5187) */
		reached[1][5180] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2631: // STATE 5183 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5183] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2632: // STATE 5186 - mutant_1.pml:310 - [(1)] (5226:0:1 - 1)
		IfNotBlocked
		reached[1][5186] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5226, 5188, 5226) */
		reached[1][5188] = 1;
		;
		/* merge: .(goto)(5226, 5220, 5226) */
		reached[1][5220] = 1;
		;
		/* merge: j = (j+1)(5226, 5222, 5226) */
		reached[1][5222] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5227, 5226) */
		reached[1][5227] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2633: // STATE 5190 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5190] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2634: // STATE 5191 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (5216:0:1 - 1)
		IfNotBlocked
		reached[1][5191] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5216, 5192, 5216) */
		reached[1][5192] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5216, 5193, 5216) */
		reached[1][5193] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5216, 5209, 5216) */
		reached[1][5209] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2635: // STATE 5209 - mutant_1.pml:334 - [.(goto)] (0:5216:0 - 6)
		IfNotBlocked
		reached[1][5209] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2636: // STATE 5194 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (5216:0:1 - 1)
		IfNotBlocked
		reached[1][5194] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5216, 5195, 5216) */
		reached[1][5195] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5216, 5196, 5216) */
		reached[1][5196] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5216, 5209, 5216) */
		reached[1][5209] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2637: // STATE 5197 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5216:0:1 - 1)
		IfNotBlocked
		reached[1][5197] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5216, 5198, 5216) */
		reached[1][5198] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5216, 5199, 5216) */
		reached[1][5199] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5216, 5209, 5216) */
		reached[1][5209] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2638: // STATE 5200 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5216:0:1 - 1)
		IfNotBlocked
		reached[1][5200] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5216, 5201, 5216) */
		reached[1][5201] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5216, 5202, 5216) */
		reached[1][5202] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5216, 5209, 5216) */
		reached[1][5209] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2639: // STATE 5203 - mutant_1.pml:328 - [((STOP==ABORT))] (5216:0:1 - 1)
		IfNotBlocked
		reached[1][5203] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5216, 5204, 5216) */
		reached[1][5204] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5216, 5205, 5216) */
		reached[1][5205] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5216, 5209, 5216) */
		reached[1][5209] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2640: // STATE 5207 - mutant_1.pml:332 - [(1)] (5216:0:0 - 1)
		IfNotBlocked
		reached[1][5207] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5216, 5209, 5216) */
		reached[1][5209] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2641: // STATE 5212 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5212] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2642: // STATE 5215 - mutant_1.pml:339 - [(1)] (5226:0:1 - 1)
		IfNotBlocked
		reached[1][5215] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5226, 5217, 5226) */
		reached[1][5217] = 1;
		;
		/* merge: .(goto)(5226, 5220, 5226) */
		reached[1][5220] = 1;
		;
		/* merge: j = (j+1)(5226, 5222, 5226) */
		reached[1][5222] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5227, 5226) */
		reached[1][5227] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2643: // STATE 5222 - mutant_1.pml:375 - [j = (j+1)] (0:5226:1 - 13)
		IfNotBlocked
		reached[1][5222] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5227, 5226) */
		reached[1][5227] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2644: // STATE 5224 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5224] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2645: // STATE 5230 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5230] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2646: // STATE 5231 - mutant_1.pml:405 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5231] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2647: // STATE 5232 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5232] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2648: // STATE 5234 - mutant_1.pml:407 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5234] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2649: // STATE 5235 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5235] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2650: // STATE 5237 - mutant_1.pml:409 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5237] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2651: // STATE 5238 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5238] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2652: // STATE 5240 - mutant_1.pml:411 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5240] = 1;
		if (!((6==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2653: // STATE 5241 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5241] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2654: // STATE 5245 - mutant_1.pml:414 - [j = (j+1)] (0:5249:1 - 5)
		IfNotBlocked
		reached[1][5245] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5250, 5249) */
		reached[1][5250] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2655: // STATE 5247 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5247] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2656: // STATE 5258 - mutant_1.pml:451 - [(((10==ABORTING)||(10==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5258] = 1;
		if (!(((10==4)||(10==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2657: // STATE 5259 - mutant_1.pml:422 - [(((2==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5259] = 1;
		if (!(((2==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2658: // STATE 5260 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5260] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2659: // STATE 5262 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5262] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2660: // STATE 5263 - mutant_1.pml:394 - [(((2==START)||(2==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5263] = 1;
		if (!(((2==9)||(2==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2661: // STATE 5264 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5264] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2662: // STATE 5265 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5265] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2663: // STATE 5266 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (5286:0:1 - 1)
		IfNotBlocked
		reached[1][5266] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5286, 5267, 5286) */
		reached[1][5267] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5286, 5268, 5286) */
		reached[1][5268] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5286, 5284, 5286) */
		reached[1][5284] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2664: // STATE 5284 - mutant_1.pml:246 - [.(goto)] (0:5286:0 - 6)
		IfNotBlocked
		reached[1][5284] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2665: // STATE 5269 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (5286:0:1 - 1)
		IfNotBlocked
		reached[1][5269] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5286, 5270, 5286) */
		reached[1][5270] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5286, 5271, 5286) */
		reached[1][5271] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5286, 5284, 5286) */
		reached[1][5284] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2666: // STATE 5272 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5286:0:1 - 1)
		IfNotBlocked
		reached[1][5272] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5286, 5273, 5286) */
		reached[1][5273] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5286, 5274, 5286) */
		reached[1][5274] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5286, 5284, 5286) */
		reached[1][5284] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2667: // STATE 5275 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5286:0:1 - 1)
		IfNotBlocked
		reached[1][5275] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5286, 5276, 5286) */
		reached[1][5276] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5286, 5277, 5286) */
		reached[1][5277] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5286, 5284, 5286) */
		reached[1][5284] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2668: // STATE 5278 - mutant_1.pml:240 - [((START==ABORT))] (5286:0:1 - 1)
		IfNotBlocked
		reached[1][5278] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5286, 5279, 5286) */
		reached[1][5279] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5286, 5280, 5286) */
		reached[1][5280] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5286, 5284, 5286) */
		reached[1][5284] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2669: // STATE 5282 - mutant_1.pml:244 - [(1)] (5286:0:0 - 1)
		IfNotBlocked
		reached[1][5282] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5286, 5284, 5286) */
		reached[1][5284] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2670: // STATE 5286 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5286] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2671: // STATE 5288 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5288] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2672: // STATE 5291 - mutant_1.pml:252 - [(1)] (5389:0:1 - 1)
		IfNotBlocked
		reached[1][5291] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5389, 5293, 5389) */
		reached[1][5293] = 1;
		;
		/* merge: .(goto)(5389, 5383, 5389) */
		reached[1][5383] = 1;
		;
		/* merge: j = (j+1)(5389, 5385, 5389) */
		reached[1][5385] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5390, 5389) */
		reached[1][5390] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2673: // STATE 5295 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5295] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2674: // STATE 5296 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (5321:0:1 - 1)
		IfNotBlocked
		reached[1][5296] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5321, 5297, 5321) */
		reached[1][5297] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5321, 5298, 5321) */
		reached[1][5298] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5321, 5314, 5321) */
		reached[1][5314] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2675: // STATE 5314 - mutant_1.pml:276 - [.(goto)] (0:5321:0 - 6)
		IfNotBlocked
		reached[1][5314] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2676: // STATE 5299 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (5321:0:1 - 1)
		IfNotBlocked
		reached[1][5299] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5321, 5300, 5321) */
		reached[1][5300] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5321, 5301, 5321) */
		reached[1][5301] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5321, 5314, 5321) */
		reached[1][5314] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2677: // STATE 5302 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5321:0:1 - 1)
		IfNotBlocked
		reached[1][5302] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5321, 5303, 5321) */
		reached[1][5303] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5321, 5304, 5321) */
		reached[1][5304] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5321, 5314, 5321) */
		reached[1][5314] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2678: // STATE 5305 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5321:0:1 - 1)
		IfNotBlocked
		reached[1][5305] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5321, 5306, 5321) */
		reached[1][5306] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5321, 5307, 5321) */
		reached[1][5307] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5321, 5314, 5321) */
		reached[1][5314] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2679: // STATE 5308 - mutant_1.pml:270 - [((PAUSE==ABORT))] (5321:0:1 - 1)
		IfNotBlocked
		reached[1][5308] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5321, 5309, 5321) */
		reached[1][5309] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5321, 5310, 5321) */
		reached[1][5310] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5321, 5314, 5321) */
		reached[1][5314] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2680: // STATE 5312 - mutant_1.pml:274 - [(1)] (5321:0:0 - 1)
		IfNotBlocked
		reached[1][5312] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5321, 5314, 5321) */
		reached[1][5314] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2681: // STATE 5317 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5317] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2682: // STATE 5320 - mutant_1.pml:281 - [(1)] (5389:0:1 - 1)
		IfNotBlocked
		reached[1][5320] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5389, 5322, 5389) */
		reached[1][5322] = 1;
		;
		/* merge: .(goto)(5389, 5383, 5389) */
		reached[1][5383] = 1;
		;
		/* merge: j = (j+1)(5389, 5385, 5389) */
		reached[1][5385] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5390, 5389) */
		reached[1][5390] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2683: // STATE 5324 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5324] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2684: // STATE 5325 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (5350:0:1 - 1)
		IfNotBlocked
		reached[1][5325] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5350, 5326, 5350) */
		reached[1][5326] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5350, 5327, 5350) */
		reached[1][5327] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5350, 5343, 5350) */
		reached[1][5343] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2685: // STATE 5343 - mutant_1.pml:305 - [.(goto)] (0:5350:0 - 6)
		IfNotBlocked
		reached[1][5343] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2686: // STATE 5328 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (5350:0:1 - 1)
		IfNotBlocked
		reached[1][5328] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5350, 5329, 5350) */
		reached[1][5329] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5350, 5330, 5350) */
		reached[1][5330] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5350, 5343, 5350) */
		reached[1][5343] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2687: // STATE 5331 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5350:0:1 - 1)
		IfNotBlocked
		reached[1][5331] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5350, 5332, 5350) */
		reached[1][5332] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5350, 5333, 5350) */
		reached[1][5333] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5350, 5343, 5350) */
		reached[1][5343] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2688: // STATE 5334 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5350:0:1 - 1)
		IfNotBlocked
		reached[1][5334] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5350, 5335, 5350) */
		reached[1][5335] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5350, 5336, 5350) */
		reached[1][5336] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5350, 5343, 5350) */
		reached[1][5343] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2689: // STATE 5337 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (5350:0:1 - 1)
		IfNotBlocked
		reached[1][5337] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5350, 5338, 5350) */
		reached[1][5338] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5350, 5339, 5350) */
		reached[1][5339] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5350, 5343, 5350) */
		reached[1][5343] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2690: // STATE 5341 - mutant_1.pml:303 - [(1)] (5350:0:0 - 1)
		IfNotBlocked
		reached[1][5341] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5350, 5343, 5350) */
		reached[1][5343] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2691: // STATE 5346 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5346] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2692: // STATE 5349 - mutant_1.pml:310 - [(1)] (5389:0:1 - 1)
		IfNotBlocked
		reached[1][5349] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5389, 5351, 5389) */
		reached[1][5351] = 1;
		;
		/* merge: .(goto)(5389, 5383, 5389) */
		reached[1][5383] = 1;
		;
		/* merge: j = (j+1)(5389, 5385, 5389) */
		reached[1][5385] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5390, 5389) */
		reached[1][5390] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2693: // STATE 5353 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5353] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2694: // STATE 5354 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (5379:0:1 - 1)
		IfNotBlocked
		reached[1][5354] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5379, 5355, 5379) */
		reached[1][5355] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5379, 5356, 5379) */
		reached[1][5356] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5379, 5372, 5379) */
		reached[1][5372] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2695: // STATE 5372 - mutant_1.pml:334 - [.(goto)] (0:5379:0 - 6)
		IfNotBlocked
		reached[1][5372] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2696: // STATE 5357 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (5379:0:1 - 1)
		IfNotBlocked
		reached[1][5357] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5379, 5358, 5379) */
		reached[1][5358] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5379, 5359, 5379) */
		reached[1][5359] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5379, 5372, 5379) */
		reached[1][5372] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2697: // STATE 5360 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5379:0:1 - 1)
		IfNotBlocked
		reached[1][5360] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5379, 5361, 5379) */
		reached[1][5361] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5379, 5362, 5379) */
		reached[1][5362] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5379, 5372, 5379) */
		reached[1][5372] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2698: // STATE 5363 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5379:0:1 - 1)
		IfNotBlocked
		reached[1][5363] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5379, 5364, 5379) */
		reached[1][5364] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5379, 5365, 5379) */
		reached[1][5365] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5379, 5372, 5379) */
		reached[1][5372] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2699: // STATE 5366 - mutant_1.pml:328 - [((STOP==ABORT))] (5379:0:1 - 1)
		IfNotBlocked
		reached[1][5366] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5379, 5367, 5379) */
		reached[1][5367] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5379, 5368, 5379) */
		reached[1][5368] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5379, 5372, 5379) */
		reached[1][5372] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2700: // STATE 5370 - mutant_1.pml:332 - [(1)] (5379:0:0 - 1)
		IfNotBlocked
		reached[1][5370] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5379, 5372, 5379) */
		reached[1][5372] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2701: // STATE 5375 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5375] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2702: // STATE 5378 - mutant_1.pml:339 - [(1)] (5389:0:1 - 1)
		IfNotBlocked
		reached[1][5378] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5389, 5380, 5389) */
		reached[1][5380] = 1;
		;
		/* merge: .(goto)(5389, 5383, 5389) */
		reached[1][5383] = 1;
		;
		/* merge: j = (j+1)(5389, 5385, 5389) */
		reached[1][5385] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5390, 5389) */
		reached[1][5390] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2703: // STATE 5385 - mutant_1.pml:375 - [j = (j+1)] (0:5389:1 - 13)
		IfNotBlocked
		reached[1][5385] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5390, 5389) */
		reached[1][5390] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2704: // STATE 5387 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5387] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2705: // STATE 5394 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5394] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2706: // STATE 5395 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5395] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2707: // STATE 5396 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5396] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2708: // STATE 5397 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (5417:0:1 - 1)
		IfNotBlocked
		reached[1][5397] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5417, 5398, 5417) */
		reached[1][5398] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5417, 5399, 5417) */
		reached[1][5399] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5417, 5415, 5417) */
		reached[1][5415] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2709: // STATE 5415 - mutant_1.pml:246 - [.(goto)] (0:5417:0 - 6)
		IfNotBlocked
		reached[1][5415] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2710: // STATE 5400 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (5417:0:1 - 1)
		IfNotBlocked
		reached[1][5400] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5417, 5401, 5417) */
		reached[1][5401] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5417, 5402, 5417) */
		reached[1][5402] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5417, 5415, 5417) */
		reached[1][5415] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2711: // STATE 5403 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5417:0:1 - 1)
		IfNotBlocked
		reached[1][5403] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5417, 5404, 5417) */
		reached[1][5404] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5417, 5405, 5417) */
		reached[1][5405] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5417, 5415, 5417) */
		reached[1][5415] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2712: // STATE 5406 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5417:0:1 - 1)
		IfNotBlocked
		reached[1][5406] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5417, 5407, 5417) */
		reached[1][5407] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5417, 5408, 5417) */
		reached[1][5408] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5417, 5415, 5417) */
		reached[1][5415] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2713: // STATE 5409 - mutant_1.pml:240 - [((START==ABORT))] (5417:0:1 - 1)
		IfNotBlocked
		reached[1][5409] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5417, 5410, 5417) */
		reached[1][5410] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5417, 5411, 5417) */
		reached[1][5411] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5417, 5415, 5417) */
		reached[1][5415] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2714: // STATE 5413 - mutant_1.pml:244 - [(1)] (5417:0:0 - 1)
		IfNotBlocked
		reached[1][5413] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5417, 5415, 5417) */
		reached[1][5415] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2715: // STATE 5417 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5417] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2716: // STATE 5419 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5419] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2717: // STATE 5422 - mutant_1.pml:252 - [(1)] (5520:0:1 - 1)
		IfNotBlocked
		reached[1][5422] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5520, 5424, 5520) */
		reached[1][5424] = 1;
		;
		/* merge: .(goto)(5520, 5514, 5520) */
		reached[1][5514] = 1;
		;
		/* merge: j = (j-1)(5520, 5516, 5520) */
		reached[1][5516] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5521, 5520) */
		reached[1][5521] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2718: // STATE 5426 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5426] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2719: // STATE 5427 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (5452:0:1 - 1)
		IfNotBlocked
		reached[1][5427] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5452, 5428, 5452) */
		reached[1][5428] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5452, 5429, 5452) */
		reached[1][5429] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5452, 5445, 5452) */
		reached[1][5445] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2720: // STATE 5445 - mutant_1.pml:276 - [.(goto)] (0:5452:0 - 6)
		IfNotBlocked
		reached[1][5445] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2721: // STATE 5430 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (5452:0:1 - 1)
		IfNotBlocked
		reached[1][5430] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5452, 5431, 5452) */
		reached[1][5431] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5452, 5432, 5452) */
		reached[1][5432] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5452, 5445, 5452) */
		reached[1][5445] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2722: // STATE 5433 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5452:0:1 - 1)
		IfNotBlocked
		reached[1][5433] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5452, 5434, 5452) */
		reached[1][5434] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5452, 5435, 5452) */
		reached[1][5435] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5452, 5445, 5452) */
		reached[1][5445] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2723: // STATE 5436 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5452:0:1 - 1)
		IfNotBlocked
		reached[1][5436] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5452, 5437, 5452) */
		reached[1][5437] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5452, 5438, 5452) */
		reached[1][5438] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5452, 5445, 5452) */
		reached[1][5445] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2724: // STATE 5439 - mutant_1.pml:270 - [((PAUSE==ABORT))] (5452:0:1 - 1)
		IfNotBlocked
		reached[1][5439] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5452, 5440, 5452) */
		reached[1][5440] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5452, 5441, 5452) */
		reached[1][5441] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5452, 5445, 5452) */
		reached[1][5445] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2725: // STATE 5443 - mutant_1.pml:274 - [(1)] (5452:0:0 - 1)
		IfNotBlocked
		reached[1][5443] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5452, 5445, 5452) */
		reached[1][5445] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2726: // STATE 5448 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5448] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2727: // STATE 5451 - mutant_1.pml:281 - [(1)] (5520:0:1 - 1)
		IfNotBlocked
		reached[1][5451] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5520, 5453, 5520) */
		reached[1][5453] = 1;
		;
		/* merge: .(goto)(5520, 5514, 5520) */
		reached[1][5514] = 1;
		;
		/* merge: j = (j-1)(5520, 5516, 5520) */
		reached[1][5516] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5521, 5520) */
		reached[1][5521] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2728: // STATE 5455 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5455] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2729: // STATE 5456 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (5481:0:1 - 1)
		IfNotBlocked
		reached[1][5456] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5481, 5457, 5481) */
		reached[1][5457] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5481, 5458, 5481) */
		reached[1][5458] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5481, 5474, 5481) */
		reached[1][5474] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2730: // STATE 5474 - mutant_1.pml:305 - [.(goto)] (0:5481:0 - 6)
		IfNotBlocked
		reached[1][5474] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2731: // STATE 5459 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (5481:0:1 - 1)
		IfNotBlocked
		reached[1][5459] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5481, 5460, 5481) */
		reached[1][5460] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5481, 5461, 5481) */
		reached[1][5461] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5481, 5474, 5481) */
		reached[1][5474] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2732: // STATE 5462 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5481:0:1 - 1)
		IfNotBlocked
		reached[1][5462] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5481, 5463, 5481) */
		reached[1][5463] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5481, 5464, 5481) */
		reached[1][5464] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5481, 5474, 5481) */
		reached[1][5474] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2733: // STATE 5465 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5481:0:1 - 1)
		IfNotBlocked
		reached[1][5465] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5481, 5466, 5481) */
		reached[1][5466] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5481, 5467, 5481) */
		reached[1][5467] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5481, 5474, 5481) */
		reached[1][5474] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2734: // STATE 5468 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (5481:0:1 - 1)
		IfNotBlocked
		reached[1][5468] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5481, 5469, 5481) */
		reached[1][5469] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5481, 5470, 5481) */
		reached[1][5470] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5481, 5474, 5481) */
		reached[1][5474] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2735: // STATE 5472 - mutant_1.pml:303 - [(1)] (5481:0:0 - 1)
		IfNotBlocked
		reached[1][5472] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5481, 5474, 5481) */
		reached[1][5474] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2736: // STATE 5477 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5477] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2737: // STATE 5480 - mutant_1.pml:310 - [(1)] (5520:0:1 - 1)
		IfNotBlocked
		reached[1][5480] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5520, 5482, 5520) */
		reached[1][5482] = 1;
		;
		/* merge: .(goto)(5520, 5514, 5520) */
		reached[1][5514] = 1;
		;
		/* merge: j = (j-1)(5520, 5516, 5520) */
		reached[1][5516] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5521, 5520) */
		reached[1][5521] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2738: // STATE 5484 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5484] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2739: // STATE 5485 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (5510:0:1 - 1)
		IfNotBlocked
		reached[1][5485] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5510, 5486, 5510) */
		reached[1][5486] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5510, 5487, 5510) */
		reached[1][5487] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5510, 5503, 5510) */
		reached[1][5503] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2740: // STATE 5503 - mutant_1.pml:334 - [.(goto)] (0:5510:0 - 6)
		IfNotBlocked
		reached[1][5503] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2741: // STATE 5488 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (5510:0:1 - 1)
		IfNotBlocked
		reached[1][5488] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5510, 5489, 5510) */
		reached[1][5489] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5510, 5490, 5510) */
		reached[1][5490] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5510, 5503, 5510) */
		reached[1][5503] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2742: // STATE 5491 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5510:0:1 - 1)
		IfNotBlocked
		reached[1][5491] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5510, 5492, 5510) */
		reached[1][5492] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5510, 5493, 5510) */
		reached[1][5493] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5510, 5503, 5510) */
		reached[1][5503] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2743: // STATE 5494 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5510:0:1 - 1)
		IfNotBlocked
		reached[1][5494] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5510, 5495, 5510) */
		reached[1][5495] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5510, 5496, 5510) */
		reached[1][5496] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5510, 5503, 5510) */
		reached[1][5503] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2744: // STATE 5497 - mutant_1.pml:328 - [((STOP==ABORT))] (5510:0:1 - 1)
		IfNotBlocked
		reached[1][5497] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5510, 5498, 5510) */
		reached[1][5498] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5510, 5499, 5510) */
		reached[1][5499] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5510, 5503, 5510) */
		reached[1][5503] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2745: // STATE 5501 - mutant_1.pml:332 - [(1)] (5510:0:0 - 1)
		IfNotBlocked
		reached[1][5501] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5510, 5503, 5510) */
		reached[1][5503] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2746: // STATE 5506 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5506] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2747: // STATE 5509 - mutant_1.pml:339 - [(1)] (5520:0:1 - 1)
		IfNotBlocked
		reached[1][5509] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5520, 5511, 5520) */
		reached[1][5511] = 1;
		;
		/* merge: .(goto)(5520, 5514, 5520) */
		reached[1][5514] = 1;
		;
		/* merge: j = (j-1)(5520, 5516, 5520) */
		reached[1][5516] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5521, 5520) */
		reached[1][5521] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2748: // STATE 5516 - mutant_1.pml:386 - [j = (j-1)] (0:5520:1 - 13)
		IfNotBlocked
		reached[1][5516] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5521, 5520) */
		reached[1][5521] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2749: // STATE 5518 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5518] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2750: // STATE 5528 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5528] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2751: // STATE 5529 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5529] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2752: // STATE 5530 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (5550:0:1 - 1)
		IfNotBlocked
		reached[1][5530] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5550, 5531, 5550) */
		reached[1][5531] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5550, 5532, 5550) */
		reached[1][5532] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5550, 5548, 5550) */
		reached[1][5548] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2753: // STATE 5548 - mutant_1.pml:246 - [.(goto)] (0:5550:0 - 6)
		IfNotBlocked
		reached[1][5548] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2754: // STATE 5533 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (5550:0:1 - 1)
		IfNotBlocked
		reached[1][5533] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5550, 5534, 5550) */
		reached[1][5534] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5550, 5535, 5550) */
		reached[1][5535] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5550, 5548, 5550) */
		reached[1][5548] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2755: // STATE 5536 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5550:0:1 - 1)
		IfNotBlocked
		reached[1][5536] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5550, 5537, 5550) */
		reached[1][5537] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5550, 5538, 5550) */
		reached[1][5538] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5550, 5548, 5550) */
		reached[1][5548] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2756: // STATE 5539 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5550:0:1 - 1)
		IfNotBlocked
		reached[1][5539] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5550, 5540, 5550) */
		reached[1][5540] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5550, 5541, 5550) */
		reached[1][5541] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5550, 5548, 5550) */
		reached[1][5548] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2757: // STATE 5542 - mutant_1.pml:240 - [((START==ABORT))] (5550:0:1 - 1)
		IfNotBlocked
		reached[1][5542] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5550, 5543, 5550) */
		reached[1][5543] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5550, 5544, 5550) */
		reached[1][5544] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5550, 5548, 5550) */
		reached[1][5548] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2758: // STATE 5546 - mutant_1.pml:244 - [(1)] (5550:0:0 - 1)
		IfNotBlocked
		reached[1][5546] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5550, 5548, 5550) */
		reached[1][5548] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2759: // STATE 5550 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5550] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2760: // STATE 5552 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5552] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2761: // STATE 5555 - mutant_1.pml:252 - [(1)] (5653:0:1 - 1)
		IfNotBlocked
		reached[1][5555] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5653, 5557, 5653) */
		reached[1][5557] = 1;
		;
		/* merge: .(goto)(5653, 5647, 5653) */
		reached[1][5647] = 1;
		;
		/* merge: j = (j+1)(5653, 5649, 5653) */
		reached[1][5649] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5654, 5653) */
		reached[1][5654] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2762: // STATE 5559 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5559] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2763: // STATE 5560 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (5585:0:1 - 1)
		IfNotBlocked
		reached[1][5560] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5585, 5561, 5585) */
		reached[1][5561] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5585, 5562, 5585) */
		reached[1][5562] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5585, 5578, 5585) */
		reached[1][5578] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2764: // STATE 5578 - mutant_1.pml:276 - [.(goto)] (0:5585:0 - 6)
		IfNotBlocked
		reached[1][5578] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2765: // STATE 5563 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (5585:0:1 - 1)
		IfNotBlocked
		reached[1][5563] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5585, 5564, 5585) */
		reached[1][5564] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5585, 5565, 5585) */
		reached[1][5565] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5585, 5578, 5585) */
		reached[1][5578] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2766: // STATE 5566 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5585:0:1 - 1)
		IfNotBlocked
		reached[1][5566] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5585, 5567, 5585) */
		reached[1][5567] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5585, 5568, 5585) */
		reached[1][5568] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5585, 5578, 5585) */
		reached[1][5578] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2767: // STATE 5569 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5585:0:1 - 1)
		IfNotBlocked
		reached[1][5569] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5585, 5570, 5585) */
		reached[1][5570] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5585, 5571, 5585) */
		reached[1][5571] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5585, 5578, 5585) */
		reached[1][5578] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2768: // STATE 5572 - mutant_1.pml:270 - [((PAUSE==ABORT))] (5585:0:1 - 1)
		IfNotBlocked
		reached[1][5572] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5585, 5573, 5585) */
		reached[1][5573] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5585, 5574, 5585) */
		reached[1][5574] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5585, 5578, 5585) */
		reached[1][5578] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2769: // STATE 5576 - mutant_1.pml:274 - [(1)] (5585:0:0 - 1)
		IfNotBlocked
		reached[1][5576] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5585, 5578, 5585) */
		reached[1][5578] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2770: // STATE 5581 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5581] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2771: // STATE 5584 - mutant_1.pml:281 - [(1)] (5653:0:1 - 1)
		IfNotBlocked
		reached[1][5584] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5653, 5586, 5653) */
		reached[1][5586] = 1;
		;
		/* merge: .(goto)(5653, 5647, 5653) */
		reached[1][5647] = 1;
		;
		/* merge: j = (j+1)(5653, 5649, 5653) */
		reached[1][5649] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5654, 5653) */
		reached[1][5654] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2772: // STATE 5588 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5588] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2773: // STATE 5589 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (5614:0:1 - 1)
		IfNotBlocked
		reached[1][5589] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5614, 5590, 5614) */
		reached[1][5590] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5614, 5591, 5614) */
		reached[1][5591] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5614, 5607, 5614) */
		reached[1][5607] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2774: // STATE 5607 - mutant_1.pml:305 - [.(goto)] (0:5614:0 - 6)
		IfNotBlocked
		reached[1][5607] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2775: // STATE 5592 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (5614:0:1 - 1)
		IfNotBlocked
		reached[1][5592] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5614, 5593, 5614) */
		reached[1][5593] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5614, 5594, 5614) */
		reached[1][5594] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5614, 5607, 5614) */
		reached[1][5607] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2776: // STATE 5595 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5614:0:1 - 1)
		IfNotBlocked
		reached[1][5595] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5614, 5596, 5614) */
		reached[1][5596] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5614, 5597, 5614) */
		reached[1][5597] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5614, 5607, 5614) */
		reached[1][5607] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2777: // STATE 5598 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5614:0:1 - 1)
		IfNotBlocked
		reached[1][5598] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5614, 5599, 5614) */
		reached[1][5599] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5614, 5600, 5614) */
		reached[1][5600] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5614, 5607, 5614) */
		reached[1][5607] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2778: // STATE 5601 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (5614:0:1 - 1)
		IfNotBlocked
		reached[1][5601] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5614, 5602, 5614) */
		reached[1][5602] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5614, 5603, 5614) */
		reached[1][5603] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5614, 5607, 5614) */
		reached[1][5607] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2779: // STATE 5605 - mutant_1.pml:303 - [(1)] (5614:0:0 - 1)
		IfNotBlocked
		reached[1][5605] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5614, 5607, 5614) */
		reached[1][5607] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2780: // STATE 5610 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5610] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2781: // STATE 5613 - mutant_1.pml:310 - [(1)] (5653:0:1 - 1)
		IfNotBlocked
		reached[1][5613] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5653, 5615, 5653) */
		reached[1][5615] = 1;
		;
		/* merge: .(goto)(5653, 5647, 5653) */
		reached[1][5647] = 1;
		;
		/* merge: j = (j+1)(5653, 5649, 5653) */
		reached[1][5649] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5654, 5653) */
		reached[1][5654] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2782: // STATE 5617 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5617] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2783: // STATE 5618 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (5643:0:1 - 1)
		IfNotBlocked
		reached[1][5618] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5643, 5619, 5643) */
		reached[1][5619] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5643, 5620, 5643) */
		reached[1][5620] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5643, 5636, 5643) */
		reached[1][5636] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2784: // STATE 5636 - mutant_1.pml:334 - [.(goto)] (0:5643:0 - 6)
		IfNotBlocked
		reached[1][5636] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2785: // STATE 5621 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (5643:0:1 - 1)
		IfNotBlocked
		reached[1][5621] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5643, 5622, 5643) */
		reached[1][5622] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5643, 5623, 5643) */
		reached[1][5623] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5643, 5636, 5643) */
		reached[1][5636] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2786: // STATE 5624 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5643:0:1 - 1)
		IfNotBlocked
		reached[1][5624] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5643, 5625, 5643) */
		reached[1][5625] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5643, 5626, 5643) */
		reached[1][5626] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5643, 5636, 5643) */
		reached[1][5636] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2787: // STATE 5627 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5643:0:1 - 1)
		IfNotBlocked
		reached[1][5627] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5643, 5628, 5643) */
		reached[1][5628] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5643, 5629, 5643) */
		reached[1][5629] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5643, 5636, 5643) */
		reached[1][5636] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2788: // STATE 5630 - mutant_1.pml:328 - [((STOP==ABORT))] (5643:0:1 - 1)
		IfNotBlocked
		reached[1][5630] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5643, 5631, 5643) */
		reached[1][5631] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5643, 5632, 5643) */
		reached[1][5632] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5643, 5636, 5643) */
		reached[1][5636] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2789: // STATE 5634 - mutant_1.pml:332 - [(1)] (5643:0:0 - 1)
		IfNotBlocked
		reached[1][5634] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5643, 5636, 5643) */
		reached[1][5636] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2790: // STATE 5639 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5639] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2791: // STATE 5642 - mutant_1.pml:339 - [(1)] (5653:0:1 - 1)
		IfNotBlocked
		reached[1][5642] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5653, 5644, 5653) */
		reached[1][5644] = 1;
		;
		/* merge: .(goto)(5653, 5647, 5653) */
		reached[1][5647] = 1;
		;
		/* merge: j = (j+1)(5653, 5649, 5653) */
		reached[1][5649] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5654, 5653) */
		reached[1][5654] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2792: // STATE 5649 - mutant_1.pml:375 - [j = (j+1)] (0:5653:1 - 13)
		IfNotBlocked
		reached[1][5649] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5654, 5653) */
		reached[1][5654] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2793: // STATE 5651 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5651] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2794: // STATE 5657 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5657] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2795: // STATE 5658 - mutant_1.pml:405 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5658] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2796: // STATE 5659 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5659] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2797: // STATE 5661 - mutant_1.pml:407 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5661] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2798: // STATE 5662 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5662] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2799: // STATE 5664 - mutant_1.pml:409 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5664] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2800: // STATE 5665 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5665] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2801: // STATE 5667 - mutant_1.pml:411 - [((2==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5667] = 1;
		if (!((2==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2802: // STATE 5668 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5668] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2803: // STATE 5672 - mutant_1.pml:414 - [j = (j+1)] (0:5676:1 - 5)
		IfNotBlocked
		reached[1][5672] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5677, 5676) */
		reached[1][5677] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2804: // STATE 5674 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5674] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2805: // STATE 5690 - mutant_1.pml:463 - [states[0] = 10] (0:0:1 - 41)
		IfNotBlocked
		reached[1][5690] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 10;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2806: // STATE 5698 - mutant_1.pml:532 - [(((commands[0]==STOP)||(commands[0]==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5698] = 1;
		if (!(((now.commands[0]==2)||(now.commands[0]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2807: // STATE 5703 - mutant_1.pml:536 - [((commands[0]==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5703] = 1;
		if (!((now.commands[0]==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2808: // STATE 5704 - mutant_1.pml:537 - [assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5704] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==10)), "(((states[0]==12)||(states[0]==11))||(states[0]==10))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 2809: // STATE 5705 - mutant_1.pml:458 - [states[0] = 7] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5705] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 7;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2810: // STATE 5706 - mutant_1.pml:447 - [((7==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5706] = 1;
		if (!((7==11)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2811: // STATE 5707 - mutant_1.pml:422 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5707] = 1;
		if (!(((8==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2812: // STATE 5708 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5708] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2813: // STATE 5710 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5710] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2814: // STATE 5711 - mutant_1.pml:394 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5711] = 1;
		if (!(((8==9)||(8==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2815: // STATE 5712 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5712] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2816: // STATE 5713 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5713] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2817: // STATE 5714 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (5734:0:1 - 1)
		IfNotBlocked
		reached[1][5714] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5734, 5715, 5734) */
		reached[1][5715] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5734, 5716, 5734) */
		reached[1][5716] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5734, 5732, 5734) */
		reached[1][5732] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2818: // STATE 5732 - mutant_1.pml:246 - [.(goto)] (0:5734:0 - 6)
		IfNotBlocked
		reached[1][5732] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2819: // STATE 5717 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (5734:0:1 - 1)
		IfNotBlocked
		reached[1][5717] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5734, 5718, 5734) */
		reached[1][5718] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5734, 5719, 5734) */
		reached[1][5719] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5734, 5732, 5734) */
		reached[1][5732] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2820: // STATE 5720 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5734:0:1 - 1)
		IfNotBlocked
		reached[1][5720] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5734, 5721, 5734) */
		reached[1][5721] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5734, 5722, 5734) */
		reached[1][5722] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5734, 5732, 5734) */
		reached[1][5732] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2821: // STATE 5723 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5734:0:1 - 1)
		IfNotBlocked
		reached[1][5723] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5734, 5724, 5734) */
		reached[1][5724] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5734, 5725, 5734) */
		reached[1][5725] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5734, 5732, 5734) */
		reached[1][5732] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2822: // STATE 5726 - mutant_1.pml:240 - [((START==ABORT))] (5734:0:1 - 1)
		IfNotBlocked
		reached[1][5726] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5734, 5727, 5734) */
		reached[1][5727] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5734, 5728, 5734) */
		reached[1][5728] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5734, 5732, 5734) */
		reached[1][5732] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2823: // STATE 5730 - mutant_1.pml:244 - [(1)] (5734:0:0 - 1)
		IfNotBlocked
		reached[1][5730] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5734, 5732, 5734) */
		reached[1][5732] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2824: // STATE 5734 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5734] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2825: // STATE 5736 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5736] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2826: // STATE 5739 - mutant_1.pml:252 - [(1)] (5837:0:1 - 1)
		IfNotBlocked
		reached[1][5739] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5837, 5741, 5837) */
		reached[1][5741] = 1;
		;
		/* merge: .(goto)(5837, 5831, 5837) */
		reached[1][5831] = 1;
		;
		/* merge: j = (j+1)(5837, 5833, 5837) */
		reached[1][5833] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5838, 5837) */
		reached[1][5838] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2827: // STATE 5743 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5743] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2828: // STATE 5744 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (5769:0:1 - 1)
		IfNotBlocked
		reached[1][5744] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5769, 5745, 5769) */
		reached[1][5745] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5769, 5746, 5769) */
		reached[1][5746] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5769, 5762, 5769) */
		reached[1][5762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2829: // STATE 5762 - mutant_1.pml:276 - [.(goto)] (0:5769:0 - 6)
		IfNotBlocked
		reached[1][5762] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2830: // STATE 5747 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (5769:0:1 - 1)
		IfNotBlocked
		reached[1][5747] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5769, 5748, 5769) */
		reached[1][5748] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5769, 5749, 5769) */
		reached[1][5749] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5769, 5762, 5769) */
		reached[1][5762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2831: // STATE 5750 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5769:0:1 - 1)
		IfNotBlocked
		reached[1][5750] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5769, 5751, 5769) */
		reached[1][5751] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5769, 5752, 5769) */
		reached[1][5752] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5769, 5762, 5769) */
		reached[1][5762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2832: // STATE 5753 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5769:0:1 - 1)
		IfNotBlocked
		reached[1][5753] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5769, 5754, 5769) */
		reached[1][5754] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5769, 5755, 5769) */
		reached[1][5755] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5769, 5762, 5769) */
		reached[1][5762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2833: // STATE 5756 - mutant_1.pml:270 - [((PAUSE==ABORT))] (5769:0:1 - 1)
		IfNotBlocked
		reached[1][5756] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5769, 5757, 5769) */
		reached[1][5757] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5769, 5758, 5769) */
		reached[1][5758] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5769, 5762, 5769) */
		reached[1][5762] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2834: // STATE 5760 - mutant_1.pml:274 - [(1)] (5769:0:0 - 1)
		IfNotBlocked
		reached[1][5760] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5769, 5762, 5769) */
		reached[1][5762] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2835: // STATE 5765 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5765] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2836: // STATE 5768 - mutant_1.pml:281 - [(1)] (5837:0:1 - 1)
		IfNotBlocked
		reached[1][5768] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5837, 5770, 5837) */
		reached[1][5770] = 1;
		;
		/* merge: .(goto)(5837, 5831, 5837) */
		reached[1][5831] = 1;
		;
		/* merge: j = (j+1)(5837, 5833, 5837) */
		reached[1][5833] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5838, 5837) */
		reached[1][5838] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2837: // STATE 5772 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5772] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2838: // STATE 5773 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (5798:0:1 - 1)
		IfNotBlocked
		reached[1][5773] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5798, 5774, 5798) */
		reached[1][5774] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5798, 5775, 5798) */
		reached[1][5775] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5798, 5791, 5798) */
		reached[1][5791] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2839: // STATE 5791 - mutant_1.pml:305 - [.(goto)] (0:5798:0 - 6)
		IfNotBlocked
		reached[1][5791] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2840: // STATE 5776 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (5798:0:1 - 1)
		IfNotBlocked
		reached[1][5776] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5798, 5777, 5798) */
		reached[1][5777] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5798, 5778, 5798) */
		reached[1][5778] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5798, 5791, 5798) */
		reached[1][5791] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2841: // STATE 5779 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5798:0:1 - 1)
		IfNotBlocked
		reached[1][5779] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5798, 5780, 5798) */
		reached[1][5780] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5798, 5781, 5798) */
		reached[1][5781] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5798, 5791, 5798) */
		reached[1][5791] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2842: // STATE 5782 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5798:0:1 - 1)
		IfNotBlocked
		reached[1][5782] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5798, 5783, 5798) */
		reached[1][5783] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5798, 5784, 5798) */
		reached[1][5784] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5798, 5791, 5798) */
		reached[1][5791] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2843: // STATE 5785 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (5798:0:1 - 1)
		IfNotBlocked
		reached[1][5785] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5798, 5786, 5798) */
		reached[1][5786] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5798, 5787, 5798) */
		reached[1][5787] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5798, 5791, 5798) */
		reached[1][5791] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2844: // STATE 5789 - mutant_1.pml:303 - [(1)] (5798:0:0 - 1)
		IfNotBlocked
		reached[1][5789] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5798, 5791, 5798) */
		reached[1][5791] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2845: // STATE 5794 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5794] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2846: // STATE 5797 - mutant_1.pml:310 - [(1)] (5837:0:1 - 1)
		IfNotBlocked
		reached[1][5797] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5837, 5799, 5837) */
		reached[1][5799] = 1;
		;
		/* merge: .(goto)(5837, 5831, 5837) */
		reached[1][5831] = 1;
		;
		/* merge: j = (j+1)(5837, 5833, 5837) */
		reached[1][5833] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5838, 5837) */
		reached[1][5838] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2847: // STATE 5801 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5801] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2848: // STATE 5802 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (5827:0:1 - 1)
		IfNotBlocked
		reached[1][5802] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5827, 5803, 5827) */
		reached[1][5803] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5827, 5804, 5827) */
		reached[1][5804] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5827, 5820, 5827) */
		reached[1][5820] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2849: // STATE 5820 - mutant_1.pml:334 - [.(goto)] (0:5827:0 - 6)
		IfNotBlocked
		reached[1][5820] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2850: // STATE 5805 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (5827:0:1 - 1)
		IfNotBlocked
		reached[1][5805] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5827, 5806, 5827) */
		reached[1][5806] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5827, 5807, 5827) */
		reached[1][5807] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5827, 5820, 5827) */
		reached[1][5820] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2851: // STATE 5808 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5827:0:1 - 1)
		IfNotBlocked
		reached[1][5808] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5827, 5809, 5827) */
		reached[1][5809] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5827, 5810, 5827) */
		reached[1][5810] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5827, 5820, 5827) */
		reached[1][5820] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2852: // STATE 5811 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5827:0:1 - 1)
		IfNotBlocked
		reached[1][5811] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5827, 5812, 5827) */
		reached[1][5812] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5827, 5813, 5827) */
		reached[1][5813] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5827, 5820, 5827) */
		reached[1][5820] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2853: // STATE 5814 - mutant_1.pml:328 - [((STOP==ABORT))] (5827:0:1 - 1)
		IfNotBlocked
		reached[1][5814] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5827, 5815, 5827) */
		reached[1][5815] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5827, 5816, 5827) */
		reached[1][5816] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5827, 5820, 5827) */
		reached[1][5820] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2854: // STATE 5818 - mutant_1.pml:332 - [(1)] (5827:0:0 - 1)
		IfNotBlocked
		reached[1][5818] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5827, 5820, 5827) */
		reached[1][5820] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2855: // STATE 5823 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5823] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2856: // STATE 5826 - mutant_1.pml:339 - [(1)] (5837:0:1 - 1)
		IfNotBlocked
		reached[1][5826] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5837, 5828, 5837) */
		reached[1][5828] = 1;
		;
		/* merge: .(goto)(5837, 5831, 5837) */
		reached[1][5831] = 1;
		;
		/* merge: j = (j+1)(5837, 5833, 5837) */
		reached[1][5833] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5838, 5837) */
		reached[1][5838] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2857: // STATE 5833 - mutant_1.pml:375 - [j = (j+1)] (0:5837:1 - 13)
		IfNotBlocked
		reached[1][5833] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5838, 5837) */
		reached[1][5838] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2858: // STATE 5835 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5835] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2859: // STATE 5842 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5842] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2860: // STATE 5843 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5843] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2861: // STATE 5844 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5844] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2862: // STATE 5845 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (5865:0:1 - 1)
		IfNotBlocked
		reached[1][5845] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5865, 5846, 5865) */
		reached[1][5846] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5865, 5847, 5865) */
		reached[1][5847] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5865, 5863, 5865) */
		reached[1][5863] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2863: // STATE 5863 - mutant_1.pml:246 - [.(goto)] (0:5865:0 - 6)
		IfNotBlocked
		reached[1][5863] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2864: // STATE 5848 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (5865:0:1 - 1)
		IfNotBlocked
		reached[1][5848] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5865, 5849, 5865) */
		reached[1][5849] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5865, 5850, 5865) */
		reached[1][5850] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5865, 5863, 5865) */
		reached[1][5863] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2865: // STATE 5851 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5865:0:1 - 1)
		IfNotBlocked
		reached[1][5851] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5865, 5852, 5865) */
		reached[1][5852] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5865, 5853, 5865) */
		reached[1][5853] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5865, 5863, 5865) */
		reached[1][5863] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2866: // STATE 5854 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5865:0:1 - 1)
		IfNotBlocked
		reached[1][5854] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5865, 5855, 5865) */
		reached[1][5855] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5865, 5856, 5865) */
		reached[1][5856] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5865, 5863, 5865) */
		reached[1][5863] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2867: // STATE 5857 - mutant_1.pml:240 - [((START==ABORT))] (5865:0:1 - 1)
		IfNotBlocked
		reached[1][5857] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5865, 5858, 5865) */
		reached[1][5858] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5865, 5859, 5865) */
		reached[1][5859] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5865, 5863, 5865) */
		reached[1][5863] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2868: // STATE 5861 - mutant_1.pml:244 - [(1)] (5865:0:0 - 1)
		IfNotBlocked
		reached[1][5861] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5865, 5863, 5865) */
		reached[1][5863] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2869: // STATE 5865 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5865] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2870: // STATE 5867 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5867] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2871: // STATE 5870 - mutant_1.pml:252 - [(1)] (5968:0:1 - 1)
		IfNotBlocked
		reached[1][5870] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5968, 5872, 5968) */
		reached[1][5872] = 1;
		;
		/* merge: .(goto)(5968, 5962, 5968) */
		reached[1][5962] = 1;
		;
		/* merge: j = (j-1)(5968, 5964, 5968) */
		reached[1][5964] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5969, 5968) */
		reached[1][5969] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2872: // STATE 5874 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5874] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2873: // STATE 5875 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (5900:0:1 - 1)
		IfNotBlocked
		reached[1][5875] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5900, 5876, 5900) */
		reached[1][5876] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5900, 5877, 5900) */
		reached[1][5877] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5900, 5893, 5900) */
		reached[1][5893] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2874: // STATE 5893 - mutant_1.pml:276 - [.(goto)] (0:5900:0 - 6)
		IfNotBlocked
		reached[1][5893] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2875: // STATE 5878 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (5900:0:1 - 1)
		IfNotBlocked
		reached[1][5878] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5900, 5879, 5900) */
		reached[1][5879] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5900, 5880, 5900) */
		reached[1][5880] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5900, 5893, 5900) */
		reached[1][5893] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2876: // STATE 5881 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5900:0:1 - 1)
		IfNotBlocked
		reached[1][5881] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5900, 5882, 5900) */
		reached[1][5882] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5900, 5883, 5900) */
		reached[1][5883] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5900, 5893, 5900) */
		reached[1][5893] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2877: // STATE 5884 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5900:0:1 - 1)
		IfNotBlocked
		reached[1][5884] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5900, 5885, 5900) */
		reached[1][5885] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5900, 5886, 5900) */
		reached[1][5886] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5900, 5893, 5900) */
		reached[1][5893] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2878: // STATE 5887 - mutant_1.pml:270 - [((PAUSE==ABORT))] (5900:0:1 - 1)
		IfNotBlocked
		reached[1][5887] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5900, 5888, 5900) */
		reached[1][5888] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5900, 5889, 5900) */
		reached[1][5889] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5900, 5893, 5900) */
		reached[1][5893] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2879: // STATE 5891 - mutant_1.pml:274 - [(1)] (5900:0:0 - 1)
		IfNotBlocked
		reached[1][5891] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5900, 5893, 5900) */
		reached[1][5893] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2880: // STATE 5896 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5896] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2881: // STATE 5899 - mutant_1.pml:281 - [(1)] (5968:0:1 - 1)
		IfNotBlocked
		reached[1][5899] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5968, 5901, 5968) */
		reached[1][5901] = 1;
		;
		/* merge: .(goto)(5968, 5962, 5968) */
		reached[1][5962] = 1;
		;
		/* merge: j = (j-1)(5968, 5964, 5968) */
		reached[1][5964] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5969, 5968) */
		reached[1][5969] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2882: // STATE 5903 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5903] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2883: // STATE 5904 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (5929:0:1 - 1)
		IfNotBlocked
		reached[1][5904] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5929, 5905, 5929) */
		reached[1][5905] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5929, 5906, 5929) */
		reached[1][5906] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5929, 5922, 5929) */
		reached[1][5922] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2884: // STATE 5922 - mutant_1.pml:305 - [.(goto)] (0:5929:0 - 6)
		IfNotBlocked
		reached[1][5922] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2885: // STATE 5907 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (5929:0:1 - 1)
		IfNotBlocked
		reached[1][5907] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5929, 5908, 5929) */
		reached[1][5908] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5929, 5909, 5929) */
		reached[1][5909] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5929, 5922, 5929) */
		reached[1][5922] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2886: // STATE 5910 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5929:0:1 - 1)
		IfNotBlocked
		reached[1][5910] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5929, 5911, 5929) */
		reached[1][5911] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5929, 5912, 5929) */
		reached[1][5912] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5929, 5922, 5929) */
		reached[1][5922] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2887: // STATE 5913 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5929:0:1 - 1)
		IfNotBlocked
		reached[1][5913] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5929, 5914, 5929) */
		reached[1][5914] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5929, 5915, 5929) */
		reached[1][5915] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5929, 5922, 5929) */
		reached[1][5922] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2888: // STATE 5916 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (5929:0:1 - 1)
		IfNotBlocked
		reached[1][5916] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5929, 5917, 5929) */
		reached[1][5917] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5929, 5918, 5929) */
		reached[1][5918] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5929, 5922, 5929) */
		reached[1][5922] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2889: // STATE 5920 - mutant_1.pml:303 - [(1)] (5929:0:0 - 1)
		IfNotBlocked
		reached[1][5920] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5929, 5922, 5929) */
		reached[1][5922] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2890: // STATE 5925 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5925] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2891: // STATE 5928 - mutant_1.pml:310 - [(1)] (5968:0:1 - 1)
		IfNotBlocked
		reached[1][5928] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5968, 5930, 5968) */
		reached[1][5930] = 1;
		;
		/* merge: .(goto)(5968, 5962, 5968) */
		reached[1][5962] = 1;
		;
		/* merge: j = (j-1)(5968, 5964, 5968) */
		reached[1][5964] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5969, 5968) */
		reached[1][5969] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2892: // STATE 5932 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5932] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2893: // STATE 5933 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (5958:0:1 - 1)
		IfNotBlocked
		reached[1][5933] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5958, 5934, 5958) */
		reached[1][5934] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5958, 5935, 5958) */
		reached[1][5935] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5958, 5951, 5958) */
		reached[1][5951] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2894: // STATE 5951 - mutant_1.pml:334 - [.(goto)] (0:5958:0 - 6)
		IfNotBlocked
		reached[1][5951] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2895: // STATE 5936 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (5958:0:1 - 1)
		IfNotBlocked
		reached[1][5936] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5958, 5937, 5958) */
		reached[1][5937] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5958, 5938, 5958) */
		reached[1][5938] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5958, 5951, 5958) */
		reached[1][5951] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2896: // STATE 5939 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5958:0:1 - 1)
		IfNotBlocked
		reached[1][5939] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5958, 5940, 5958) */
		reached[1][5940] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5958, 5941, 5958) */
		reached[1][5941] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5958, 5951, 5958) */
		reached[1][5951] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2897: // STATE 5942 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5958:0:1 - 1)
		IfNotBlocked
		reached[1][5942] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5958, 5943, 5958) */
		reached[1][5943] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5958, 5944, 5958) */
		reached[1][5944] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5958, 5951, 5958) */
		reached[1][5951] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2898: // STATE 5945 - mutant_1.pml:328 - [((STOP==ABORT))] (5958:0:1 - 1)
		IfNotBlocked
		reached[1][5945] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5958, 5946, 5958) */
		reached[1][5946] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5958, 5947, 5958) */
		reached[1][5947] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5958, 5951, 5958) */
		reached[1][5951] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2899: // STATE 5949 - mutant_1.pml:332 - [(1)] (5958:0:0 - 1)
		IfNotBlocked
		reached[1][5949] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5958, 5951, 5958) */
		reached[1][5951] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2900: // STATE 5954 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5954] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2901: // STATE 5957 - mutant_1.pml:339 - [(1)] (5968:0:1 - 1)
		IfNotBlocked
		reached[1][5957] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5968, 5959, 5968) */
		reached[1][5959] = 1;
		;
		/* merge: .(goto)(5968, 5962, 5968) */
		reached[1][5962] = 1;
		;
		/* merge: j = (j-1)(5968, 5964, 5968) */
		reached[1][5964] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5969, 5968) */
		reached[1][5969] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2902: // STATE 5964 - mutant_1.pml:386 - [j = (j-1)] (0:5968:1 - 13)
		IfNotBlocked
		reached[1][5964] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 5969, 5968) */
		reached[1][5969] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2903: // STATE 5966 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][5966] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2904: // STATE 5976 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5976] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2905: // STATE 5977 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5977] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2906: // STATE 5978 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (5998:0:1 - 1)
		IfNotBlocked
		reached[1][5978] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(5998, 5979, 5998) */
		reached[1][5979] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(5998, 5980, 5998) */
		reached[1][5980] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5998, 5996, 5998) */
		reached[1][5996] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2907: // STATE 5996 - mutant_1.pml:246 - [.(goto)] (0:5998:0 - 6)
		IfNotBlocked
		reached[1][5996] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2908: // STATE 5981 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (5998:0:1 - 1)
		IfNotBlocked
		reached[1][5981] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(5998, 5982, 5998) */
		reached[1][5982] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(5998, 5983, 5998) */
		reached[1][5983] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5998, 5996, 5998) */
		reached[1][5996] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2909: // STATE 5984 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (5998:0:1 - 1)
		IfNotBlocked
		reached[1][5984] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(5998, 5985, 5998) */
		reached[1][5985] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(5998, 5986, 5998) */
		reached[1][5986] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5998, 5996, 5998) */
		reached[1][5996] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2910: // STATE 5987 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (5998:0:1 - 1)
		IfNotBlocked
		reached[1][5987] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(5998, 5988, 5998) */
		reached[1][5988] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(5998, 5989, 5998) */
		reached[1][5989] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5998, 5996, 5998) */
		reached[1][5996] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2911: // STATE 5990 - mutant_1.pml:240 - [((START==ABORT))] (5998:0:1 - 1)
		IfNotBlocked
		reached[1][5990] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(5998, 5991, 5998) */
		reached[1][5991] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(5998, 5992, 5998) */
		reached[1][5992] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(5998, 5996, 5998) */
		reached[1][5996] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2912: // STATE 5994 - mutant_1.pml:244 - [(1)] (5998:0:0 - 1)
		IfNotBlocked
		reached[1][5994] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(5998, 5996, 5998) */
		reached[1][5996] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2913: // STATE 5998 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][5998] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2914: // STATE 6000 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6000] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2915: // STATE 6003 - mutant_1.pml:252 - [(1)] (6101:0:1 - 1)
		IfNotBlocked
		reached[1][6003] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6101, 6005, 6101) */
		reached[1][6005] = 1;
		;
		/* merge: .(goto)(6101, 6095, 6101) */
		reached[1][6095] = 1;
		;
		/* merge: j = (j+1)(6101, 6097, 6101) */
		reached[1][6097] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6102, 6101) */
		reached[1][6102] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2916: // STATE 6007 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6007] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2917: // STATE 6008 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (6033:0:1 - 1)
		IfNotBlocked
		reached[1][6008] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6033, 6009, 6033) */
		reached[1][6009] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6033, 6010, 6033) */
		reached[1][6010] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6033, 6026, 6033) */
		reached[1][6026] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2918: // STATE 6026 - mutant_1.pml:276 - [.(goto)] (0:6033:0 - 6)
		IfNotBlocked
		reached[1][6026] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2919: // STATE 6011 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (6033:0:1 - 1)
		IfNotBlocked
		reached[1][6011] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6033, 6012, 6033) */
		reached[1][6012] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6033, 6013, 6033) */
		reached[1][6013] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6033, 6026, 6033) */
		reached[1][6026] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2920: // STATE 6014 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6033:0:1 - 1)
		IfNotBlocked
		reached[1][6014] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6033, 6015, 6033) */
		reached[1][6015] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6033, 6016, 6033) */
		reached[1][6016] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6033, 6026, 6033) */
		reached[1][6026] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2921: // STATE 6017 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6033:0:1 - 1)
		IfNotBlocked
		reached[1][6017] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6033, 6018, 6033) */
		reached[1][6018] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6033, 6019, 6033) */
		reached[1][6019] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6033, 6026, 6033) */
		reached[1][6026] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2922: // STATE 6020 - mutant_1.pml:270 - [((PAUSE==ABORT))] (6033:0:1 - 1)
		IfNotBlocked
		reached[1][6020] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6033, 6021, 6033) */
		reached[1][6021] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6033, 6022, 6033) */
		reached[1][6022] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6033, 6026, 6033) */
		reached[1][6026] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2923: // STATE 6024 - mutant_1.pml:274 - [(1)] (6033:0:0 - 1)
		IfNotBlocked
		reached[1][6024] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6033, 6026, 6033) */
		reached[1][6026] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2924: // STATE 6029 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6029] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2925: // STATE 6032 - mutant_1.pml:281 - [(1)] (6101:0:1 - 1)
		IfNotBlocked
		reached[1][6032] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6101, 6034, 6101) */
		reached[1][6034] = 1;
		;
		/* merge: .(goto)(6101, 6095, 6101) */
		reached[1][6095] = 1;
		;
		/* merge: j = (j+1)(6101, 6097, 6101) */
		reached[1][6097] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6102, 6101) */
		reached[1][6102] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2926: // STATE 6036 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6036] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2927: // STATE 6037 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (6062:0:1 - 1)
		IfNotBlocked
		reached[1][6037] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6062, 6038, 6062) */
		reached[1][6038] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6062, 6039, 6062) */
		reached[1][6039] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6062, 6055, 6062) */
		reached[1][6055] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2928: // STATE 6055 - mutant_1.pml:305 - [.(goto)] (0:6062:0 - 6)
		IfNotBlocked
		reached[1][6055] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2929: // STATE 6040 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (6062:0:1 - 1)
		IfNotBlocked
		reached[1][6040] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6062, 6041, 6062) */
		reached[1][6041] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6062, 6042, 6062) */
		reached[1][6042] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6062, 6055, 6062) */
		reached[1][6055] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2930: // STATE 6043 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6062:0:1 - 1)
		IfNotBlocked
		reached[1][6043] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6062, 6044, 6062) */
		reached[1][6044] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6062, 6045, 6062) */
		reached[1][6045] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6062, 6055, 6062) */
		reached[1][6055] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2931: // STATE 6046 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6062:0:1 - 1)
		IfNotBlocked
		reached[1][6046] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6062, 6047, 6062) */
		reached[1][6047] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6062, 6048, 6062) */
		reached[1][6048] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6062, 6055, 6062) */
		reached[1][6055] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2932: // STATE 6049 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (6062:0:1 - 1)
		IfNotBlocked
		reached[1][6049] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6062, 6050, 6062) */
		reached[1][6050] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6062, 6051, 6062) */
		reached[1][6051] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6062, 6055, 6062) */
		reached[1][6055] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2933: // STATE 6053 - mutant_1.pml:303 - [(1)] (6062:0:0 - 1)
		IfNotBlocked
		reached[1][6053] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6062, 6055, 6062) */
		reached[1][6055] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2934: // STATE 6058 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6058] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2935: // STATE 6061 - mutant_1.pml:310 - [(1)] (6101:0:1 - 1)
		IfNotBlocked
		reached[1][6061] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6101, 6063, 6101) */
		reached[1][6063] = 1;
		;
		/* merge: .(goto)(6101, 6095, 6101) */
		reached[1][6095] = 1;
		;
		/* merge: j = (j+1)(6101, 6097, 6101) */
		reached[1][6097] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6102, 6101) */
		reached[1][6102] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2936: // STATE 6065 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6065] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2937: // STATE 6066 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (6091:0:1 - 1)
		IfNotBlocked
		reached[1][6066] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6091, 6067, 6091) */
		reached[1][6067] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6091, 6068, 6091) */
		reached[1][6068] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6091, 6084, 6091) */
		reached[1][6084] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2938: // STATE 6084 - mutant_1.pml:334 - [.(goto)] (0:6091:0 - 6)
		IfNotBlocked
		reached[1][6084] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2939: // STATE 6069 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (6091:0:1 - 1)
		IfNotBlocked
		reached[1][6069] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6091, 6070, 6091) */
		reached[1][6070] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6091, 6071, 6091) */
		reached[1][6071] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6091, 6084, 6091) */
		reached[1][6084] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2940: // STATE 6072 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6091:0:1 - 1)
		IfNotBlocked
		reached[1][6072] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6091, 6073, 6091) */
		reached[1][6073] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6091, 6074, 6091) */
		reached[1][6074] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6091, 6084, 6091) */
		reached[1][6084] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2941: // STATE 6075 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6091:0:1 - 1)
		IfNotBlocked
		reached[1][6075] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6091, 6076, 6091) */
		reached[1][6076] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6091, 6077, 6091) */
		reached[1][6077] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6091, 6084, 6091) */
		reached[1][6084] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2942: // STATE 6078 - mutant_1.pml:328 - [((STOP==ABORT))] (6091:0:1 - 1)
		IfNotBlocked
		reached[1][6078] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6091, 6079, 6091) */
		reached[1][6079] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6091, 6080, 6091) */
		reached[1][6080] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6091, 6084, 6091) */
		reached[1][6084] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2943: // STATE 6082 - mutant_1.pml:332 - [(1)] (6091:0:0 - 1)
		IfNotBlocked
		reached[1][6082] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6091, 6084, 6091) */
		reached[1][6084] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2944: // STATE 6087 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6087] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2945: // STATE 6090 - mutant_1.pml:339 - [(1)] (6101:0:1 - 1)
		IfNotBlocked
		reached[1][6090] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6101, 6092, 6101) */
		reached[1][6092] = 1;
		;
		/* merge: .(goto)(6101, 6095, 6101) */
		reached[1][6095] = 1;
		;
		/* merge: j = (j+1)(6101, 6097, 6101) */
		reached[1][6097] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6102, 6101) */
		reached[1][6102] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2946: // STATE 6097 - mutant_1.pml:375 - [j = (j+1)] (0:6101:1 - 13)
		IfNotBlocked
		reached[1][6097] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6102, 6101) */
		reached[1][6102] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2947: // STATE 6099 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6099] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2948: // STATE 6105 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6105] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2949: // STATE 6106 - mutant_1.pml:405 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6106] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2950: // STATE 6107 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6107] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2951: // STATE 6109 - mutant_1.pml:407 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6109] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2952: // STATE 6110 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6110] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2953: // STATE 6112 - mutant_1.pml:409 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6112] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2954: // STATE 6113 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6113] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2955: // STATE 6115 - mutant_1.pml:411 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6115] = 1;
		if (!((8==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2956: // STATE 6116 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6116] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2957: // STATE 6120 - mutant_1.pml:414 - [j = (j+1)] (0:6124:1 - 5)
		IfNotBlocked
		reached[1][6120] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6125, 6124) */
		reached[1][6125] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2958: // STATE 6122 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6122] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2959: // STATE 6133 - mutant_1.pml:449 - [((7==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6133] = 1;
		if (!((7==10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2960: // STATE 6134 - mutant_1.pml:422 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6134] = 1;
		if (!(((6==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2961: // STATE 6135 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6135] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 2962: // STATE 6137 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6137] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2963: // STATE 6138 - mutant_1.pml:394 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6138] = 1;
		if (!(((6==9)||(6==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2964: // STATE 6139 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6139] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2965: // STATE 6140 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6140] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2966: // STATE 6141 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (6161:0:1 - 1)
		IfNotBlocked
		reached[1][6141] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6161, 6142, 6161) */
		reached[1][6142] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6161, 6143, 6161) */
		reached[1][6143] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6161, 6159, 6161) */
		reached[1][6159] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2967: // STATE 6159 - mutant_1.pml:246 - [.(goto)] (0:6161:0 - 6)
		IfNotBlocked
		reached[1][6159] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2968: // STATE 6144 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (6161:0:1 - 1)
		IfNotBlocked
		reached[1][6144] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6161, 6145, 6161) */
		reached[1][6145] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6161, 6146, 6161) */
		reached[1][6146] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6161, 6159, 6161) */
		reached[1][6159] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2969: // STATE 6147 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6161:0:1 - 1)
		IfNotBlocked
		reached[1][6147] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6161, 6148, 6161) */
		reached[1][6148] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6161, 6149, 6161) */
		reached[1][6149] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6161, 6159, 6161) */
		reached[1][6159] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2970: // STATE 6150 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6161:0:1 - 1)
		IfNotBlocked
		reached[1][6150] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6161, 6151, 6161) */
		reached[1][6151] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6161, 6152, 6161) */
		reached[1][6152] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6161, 6159, 6161) */
		reached[1][6159] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2971: // STATE 6153 - mutant_1.pml:240 - [((START==ABORT))] (6161:0:1 - 1)
		IfNotBlocked
		reached[1][6153] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6161, 6154, 6161) */
		reached[1][6154] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6161, 6155, 6161) */
		reached[1][6155] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6161, 6159, 6161) */
		reached[1][6159] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2972: // STATE 6157 - mutant_1.pml:244 - [(1)] (6161:0:0 - 1)
		IfNotBlocked
		reached[1][6157] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6161, 6159, 6161) */
		reached[1][6159] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2973: // STATE 6161 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6161] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2974: // STATE 6163 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6163] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2975: // STATE 6166 - mutant_1.pml:252 - [(1)] (6264:0:1 - 1)
		IfNotBlocked
		reached[1][6166] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6264, 6168, 6264) */
		reached[1][6168] = 1;
		;
		/* merge: .(goto)(6264, 6258, 6264) */
		reached[1][6258] = 1;
		;
		/* merge: j = (j+1)(6264, 6260, 6264) */
		reached[1][6260] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6265, 6264) */
		reached[1][6265] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2976: // STATE 6170 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6170] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2977: // STATE 6171 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (6196:0:1 - 1)
		IfNotBlocked
		reached[1][6171] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6196, 6172, 6196) */
		reached[1][6172] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6196, 6173, 6196) */
		reached[1][6173] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6196, 6189, 6196) */
		reached[1][6189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2978: // STATE 6189 - mutant_1.pml:276 - [.(goto)] (0:6196:0 - 6)
		IfNotBlocked
		reached[1][6189] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2979: // STATE 6174 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (6196:0:1 - 1)
		IfNotBlocked
		reached[1][6174] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6196, 6175, 6196) */
		reached[1][6175] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6196, 6176, 6196) */
		reached[1][6176] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6196, 6189, 6196) */
		reached[1][6189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2980: // STATE 6177 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6196:0:1 - 1)
		IfNotBlocked
		reached[1][6177] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6196, 6178, 6196) */
		reached[1][6178] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6196, 6179, 6196) */
		reached[1][6179] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6196, 6189, 6196) */
		reached[1][6189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2981: // STATE 6180 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6196:0:1 - 1)
		IfNotBlocked
		reached[1][6180] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6196, 6181, 6196) */
		reached[1][6181] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6196, 6182, 6196) */
		reached[1][6182] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6196, 6189, 6196) */
		reached[1][6189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2982: // STATE 6183 - mutant_1.pml:270 - [((PAUSE==ABORT))] (6196:0:1 - 1)
		IfNotBlocked
		reached[1][6183] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6196, 6184, 6196) */
		reached[1][6184] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6196, 6185, 6196) */
		reached[1][6185] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6196, 6189, 6196) */
		reached[1][6189] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2983: // STATE 6187 - mutant_1.pml:274 - [(1)] (6196:0:0 - 1)
		IfNotBlocked
		reached[1][6187] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6196, 6189, 6196) */
		reached[1][6189] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2984: // STATE 6192 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6192] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2985: // STATE 6195 - mutant_1.pml:281 - [(1)] (6264:0:1 - 1)
		IfNotBlocked
		reached[1][6195] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6264, 6197, 6264) */
		reached[1][6197] = 1;
		;
		/* merge: .(goto)(6264, 6258, 6264) */
		reached[1][6258] = 1;
		;
		/* merge: j = (j+1)(6264, 6260, 6264) */
		reached[1][6260] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6265, 6264) */
		reached[1][6265] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2986: // STATE 6199 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6199] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2987: // STATE 6200 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (6225:0:1 - 1)
		IfNotBlocked
		reached[1][6200] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6225, 6201, 6225) */
		reached[1][6201] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6225, 6202, 6225) */
		reached[1][6202] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6225, 6218, 6225) */
		reached[1][6218] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2988: // STATE 6218 - mutant_1.pml:305 - [.(goto)] (0:6225:0 - 6)
		IfNotBlocked
		reached[1][6218] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2989: // STATE 6203 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (6225:0:1 - 1)
		IfNotBlocked
		reached[1][6203] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6225, 6204, 6225) */
		reached[1][6204] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6225, 6205, 6225) */
		reached[1][6205] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6225, 6218, 6225) */
		reached[1][6218] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2990: // STATE 6206 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6225:0:1 - 1)
		IfNotBlocked
		reached[1][6206] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6225, 6207, 6225) */
		reached[1][6207] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6225, 6208, 6225) */
		reached[1][6208] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6225, 6218, 6225) */
		reached[1][6218] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2991: // STATE 6209 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6225:0:1 - 1)
		IfNotBlocked
		reached[1][6209] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6225, 6210, 6225) */
		reached[1][6210] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6225, 6211, 6225) */
		reached[1][6211] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6225, 6218, 6225) */
		reached[1][6218] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2992: // STATE 6212 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (6225:0:1 - 1)
		IfNotBlocked
		reached[1][6212] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6225, 6213, 6225) */
		reached[1][6213] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6225, 6214, 6225) */
		reached[1][6214] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6225, 6218, 6225) */
		reached[1][6218] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2993: // STATE 6216 - mutant_1.pml:303 - [(1)] (6225:0:0 - 1)
		IfNotBlocked
		reached[1][6216] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6225, 6218, 6225) */
		reached[1][6218] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 2994: // STATE 6221 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6221] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2995: // STATE 6224 - mutant_1.pml:310 - [(1)] (6264:0:1 - 1)
		IfNotBlocked
		reached[1][6224] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6264, 6226, 6264) */
		reached[1][6226] = 1;
		;
		/* merge: .(goto)(6264, 6258, 6264) */
		reached[1][6258] = 1;
		;
		/* merge: j = (j+1)(6264, 6260, 6264) */
		reached[1][6260] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6265, 6264) */
		reached[1][6265] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 2996: // STATE 6228 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6228] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 2997: // STATE 6229 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (6254:0:1 - 1)
		IfNotBlocked
		reached[1][6229] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6254, 6230, 6254) */
		reached[1][6230] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6254, 6231, 6254) */
		reached[1][6231] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6254, 6247, 6254) */
		reached[1][6247] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 2998: // STATE 6247 - mutant_1.pml:334 - [.(goto)] (0:6254:0 - 6)
		IfNotBlocked
		reached[1][6247] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 2999: // STATE 6232 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (6254:0:1 - 1)
		IfNotBlocked
		reached[1][6232] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6254, 6233, 6254) */
		reached[1][6233] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6254, 6234, 6254) */
		reached[1][6234] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6254, 6247, 6254) */
		reached[1][6247] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3000: // STATE 6235 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6254:0:1 - 1)
		IfNotBlocked
		reached[1][6235] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6254, 6236, 6254) */
		reached[1][6236] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6254, 6237, 6254) */
		reached[1][6237] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6254, 6247, 6254) */
		reached[1][6247] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3001: // STATE 6238 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6254:0:1 - 1)
		IfNotBlocked
		reached[1][6238] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6254, 6239, 6254) */
		reached[1][6239] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6254, 6240, 6254) */
		reached[1][6240] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6254, 6247, 6254) */
		reached[1][6247] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3002: // STATE 6241 - mutant_1.pml:328 - [((STOP==ABORT))] (6254:0:1 - 1)
		IfNotBlocked
		reached[1][6241] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6254, 6242, 6254) */
		reached[1][6242] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6254, 6243, 6254) */
		reached[1][6243] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6254, 6247, 6254) */
		reached[1][6247] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3003: // STATE 6245 - mutant_1.pml:332 - [(1)] (6254:0:0 - 1)
		IfNotBlocked
		reached[1][6245] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6254, 6247, 6254) */
		reached[1][6247] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3004: // STATE 6250 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6250] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3005: // STATE 6253 - mutant_1.pml:339 - [(1)] (6264:0:1 - 1)
		IfNotBlocked
		reached[1][6253] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6264, 6255, 6264) */
		reached[1][6255] = 1;
		;
		/* merge: .(goto)(6264, 6258, 6264) */
		reached[1][6258] = 1;
		;
		/* merge: j = (j+1)(6264, 6260, 6264) */
		reached[1][6260] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6265, 6264) */
		reached[1][6265] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3006: // STATE 6260 - mutant_1.pml:375 - [j = (j+1)] (0:6264:1 - 13)
		IfNotBlocked
		reached[1][6260] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6265, 6264) */
		reached[1][6265] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3007: // STATE 6262 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6262] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3008: // STATE 6269 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6269] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3009: // STATE 6270 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6270] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3010: // STATE 6271 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6271] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3011: // STATE 6272 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (6292:0:1 - 1)
		IfNotBlocked
		reached[1][6272] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6292, 6273, 6292) */
		reached[1][6273] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6292, 6274, 6292) */
		reached[1][6274] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6292, 6290, 6292) */
		reached[1][6290] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3012: // STATE 6290 - mutant_1.pml:246 - [.(goto)] (0:6292:0 - 6)
		IfNotBlocked
		reached[1][6290] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3013: // STATE 6275 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (6292:0:1 - 1)
		IfNotBlocked
		reached[1][6275] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6292, 6276, 6292) */
		reached[1][6276] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6292, 6277, 6292) */
		reached[1][6277] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6292, 6290, 6292) */
		reached[1][6290] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3014: // STATE 6278 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6292:0:1 - 1)
		IfNotBlocked
		reached[1][6278] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6292, 6279, 6292) */
		reached[1][6279] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6292, 6280, 6292) */
		reached[1][6280] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6292, 6290, 6292) */
		reached[1][6290] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3015: // STATE 6281 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6292:0:1 - 1)
		IfNotBlocked
		reached[1][6281] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6292, 6282, 6292) */
		reached[1][6282] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6292, 6283, 6292) */
		reached[1][6283] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6292, 6290, 6292) */
		reached[1][6290] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3016: // STATE 6284 - mutant_1.pml:240 - [((START==ABORT))] (6292:0:1 - 1)
		IfNotBlocked
		reached[1][6284] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6292, 6285, 6292) */
		reached[1][6285] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6292, 6286, 6292) */
		reached[1][6286] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6292, 6290, 6292) */
		reached[1][6290] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3017: // STATE 6288 - mutant_1.pml:244 - [(1)] (6292:0:0 - 1)
		IfNotBlocked
		reached[1][6288] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6292, 6290, 6292) */
		reached[1][6290] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3018: // STATE 6292 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6292] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3019: // STATE 6294 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6294] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3020: // STATE 6297 - mutant_1.pml:252 - [(1)] (6395:0:1 - 1)
		IfNotBlocked
		reached[1][6297] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6395, 6299, 6395) */
		reached[1][6299] = 1;
		;
		/* merge: .(goto)(6395, 6389, 6395) */
		reached[1][6389] = 1;
		;
		/* merge: j = (j-1)(6395, 6391, 6395) */
		reached[1][6391] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6396, 6395) */
		reached[1][6396] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3021: // STATE 6301 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6301] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3022: // STATE 6302 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (6327:0:1 - 1)
		IfNotBlocked
		reached[1][6302] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6327, 6303, 6327) */
		reached[1][6303] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6327, 6304, 6327) */
		reached[1][6304] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6327, 6320, 6327) */
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3023: // STATE 6320 - mutant_1.pml:276 - [.(goto)] (0:6327:0 - 6)
		IfNotBlocked
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3024: // STATE 6305 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (6327:0:1 - 1)
		IfNotBlocked
		reached[1][6305] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6327, 6306, 6327) */
		reached[1][6306] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6327, 6307, 6327) */
		reached[1][6307] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6327, 6320, 6327) */
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3025: // STATE 6308 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6327:0:1 - 1)
		IfNotBlocked
		reached[1][6308] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6327, 6309, 6327) */
		reached[1][6309] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6327, 6310, 6327) */
		reached[1][6310] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6327, 6320, 6327) */
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3026: // STATE 6311 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6327:0:1 - 1)
		IfNotBlocked
		reached[1][6311] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6327, 6312, 6327) */
		reached[1][6312] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6327, 6313, 6327) */
		reached[1][6313] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6327, 6320, 6327) */
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3027: // STATE 6314 - mutant_1.pml:270 - [((PAUSE==ABORT))] (6327:0:1 - 1)
		IfNotBlocked
		reached[1][6314] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6327, 6315, 6327) */
		reached[1][6315] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6327, 6316, 6327) */
		reached[1][6316] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6327, 6320, 6327) */
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3028: // STATE 6318 - mutant_1.pml:274 - [(1)] (6327:0:0 - 1)
		IfNotBlocked
		reached[1][6318] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6327, 6320, 6327) */
		reached[1][6320] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3029: // STATE 6323 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6323] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3030: // STATE 6326 - mutant_1.pml:281 - [(1)] (6395:0:1 - 1)
		IfNotBlocked
		reached[1][6326] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6395, 6328, 6395) */
		reached[1][6328] = 1;
		;
		/* merge: .(goto)(6395, 6389, 6395) */
		reached[1][6389] = 1;
		;
		/* merge: j = (j-1)(6395, 6391, 6395) */
		reached[1][6391] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6396, 6395) */
		reached[1][6396] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3031: // STATE 6330 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6330] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3032: // STATE 6331 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (6356:0:1 - 1)
		IfNotBlocked
		reached[1][6331] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6356, 6332, 6356) */
		reached[1][6332] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6356, 6333, 6356) */
		reached[1][6333] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6356, 6349, 6356) */
		reached[1][6349] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3033: // STATE 6349 - mutant_1.pml:305 - [.(goto)] (0:6356:0 - 6)
		IfNotBlocked
		reached[1][6349] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3034: // STATE 6334 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (6356:0:1 - 1)
		IfNotBlocked
		reached[1][6334] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6356, 6335, 6356) */
		reached[1][6335] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6356, 6336, 6356) */
		reached[1][6336] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6356, 6349, 6356) */
		reached[1][6349] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3035: // STATE 6337 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6356:0:1 - 1)
		IfNotBlocked
		reached[1][6337] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6356, 6338, 6356) */
		reached[1][6338] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6356, 6339, 6356) */
		reached[1][6339] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6356, 6349, 6356) */
		reached[1][6349] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3036: // STATE 6340 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6356:0:1 - 1)
		IfNotBlocked
		reached[1][6340] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6356, 6341, 6356) */
		reached[1][6341] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6356, 6342, 6356) */
		reached[1][6342] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6356, 6349, 6356) */
		reached[1][6349] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3037: // STATE 6343 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (6356:0:1 - 1)
		IfNotBlocked
		reached[1][6343] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6356, 6344, 6356) */
		reached[1][6344] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6356, 6345, 6356) */
		reached[1][6345] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6356, 6349, 6356) */
		reached[1][6349] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3038: // STATE 6347 - mutant_1.pml:303 - [(1)] (6356:0:0 - 1)
		IfNotBlocked
		reached[1][6347] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6356, 6349, 6356) */
		reached[1][6349] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3039: // STATE 6352 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6352] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3040: // STATE 6355 - mutant_1.pml:310 - [(1)] (6395:0:1 - 1)
		IfNotBlocked
		reached[1][6355] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6395, 6357, 6395) */
		reached[1][6357] = 1;
		;
		/* merge: .(goto)(6395, 6389, 6395) */
		reached[1][6389] = 1;
		;
		/* merge: j = (j-1)(6395, 6391, 6395) */
		reached[1][6391] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6396, 6395) */
		reached[1][6396] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3041: // STATE 6359 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6359] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3042: // STATE 6360 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (6385:0:1 - 1)
		IfNotBlocked
		reached[1][6360] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6385, 6361, 6385) */
		reached[1][6361] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6385, 6362, 6385) */
		reached[1][6362] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6385, 6378, 6385) */
		reached[1][6378] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3043: // STATE 6378 - mutant_1.pml:334 - [.(goto)] (0:6385:0 - 6)
		IfNotBlocked
		reached[1][6378] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3044: // STATE 6363 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (6385:0:1 - 1)
		IfNotBlocked
		reached[1][6363] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6385, 6364, 6385) */
		reached[1][6364] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6385, 6365, 6385) */
		reached[1][6365] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6385, 6378, 6385) */
		reached[1][6378] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3045: // STATE 6366 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6385:0:1 - 1)
		IfNotBlocked
		reached[1][6366] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6385, 6367, 6385) */
		reached[1][6367] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6385, 6368, 6385) */
		reached[1][6368] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6385, 6378, 6385) */
		reached[1][6378] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3046: // STATE 6369 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6385:0:1 - 1)
		IfNotBlocked
		reached[1][6369] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6385, 6370, 6385) */
		reached[1][6370] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6385, 6371, 6385) */
		reached[1][6371] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6385, 6378, 6385) */
		reached[1][6378] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3047: // STATE 6372 - mutant_1.pml:328 - [((STOP==ABORT))] (6385:0:1 - 1)
		IfNotBlocked
		reached[1][6372] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6385, 6373, 6385) */
		reached[1][6373] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6385, 6374, 6385) */
		reached[1][6374] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6385, 6378, 6385) */
		reached[1][6378] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3048: // STATE 6376 - mutant_1.pml:332 - [(1)] (6385:0:0 - 1)
		IfNotBlocked
		reached[1][6376] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6385, 6378, 6385) */
		reached[1][6378] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3049: // STATE 6381 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6381] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3050: // STATE 6384 - mutant_1.pml:339 - [(1)] (6395:0:1 - 1)
		IfNotBlocked
		reached[1][6384] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6395, 6386, 6395) */
		reached[1][6386] = 1;
		;
		/* merge: .(goto)(6395, 6389, 6395) */
		reached[1][6389] = 1;
		;
		/* merge: j = (j-1)(6395, 6391, 6395) */
		reached[1][6391] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6396, 6395) */
		reached[1][6396] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3051: // STATE 6391 - mutant_1.pml:386 - [j = (j-1)] (0:6395:1 - 13)
		IfNotBlocked
		reached[1][6391] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6396, 6395) */
		reached[1][6396] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3052: // STATE 6393 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6393] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3053: // STATE 6403 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6403] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3054: // STATE 6404 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6404] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3055: // STATE 6405 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (6425:0:1 - 1)
		IfNotBlocked
		reached[1][6405] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6425, 6406, 6425) */
		reached[1][6406] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6425, 6407, 6425) */
		reached[1][6407] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6425, 6423, 6425) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3056: // STATE 6423 - mutant_1.pml:246 - [.(goto)] (0:6425:0 - 6)
		IfNotBlocked
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3057: // STATE 6408 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (6425:0:1 - 1)
		IfNotBlocked
		reached[1][6408] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6425, 6409, 6425) */
		reached[1][6409] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6425, 6410, 6425) */
		reached[1][6410] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6425, 6423, 6425) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3058: // STATE 6411 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6425:0:1 - 1)
		IfNotBlocked
		reached[1][6411] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6425, 6412, 6425) */
		reached[1][6412] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6425, 6413, 6425) */
		reached[1][6413] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6425, 6423, 6425) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3059: // STATE 6414 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6425:0:1 - 1)
		IfNotBlocked
		reached[1][6414] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6425, 6415, 6425) */
		reached[1][6415] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6425, 6416, 6425) */
		reached[1][6416] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6425, 6423, 6425) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3060: // STATE 6417 - mutant_1.pml:240 - [((START==ABORT))] (6425:0:1 - 1)
		IfNotBlocked
		reached[1][6417] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6425, 6418, 6425) */
		reached[1][6418] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6425, 6419, 6425) */
		reached[1][6419] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6425, 6423, 6425) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3061: // STATE 6421 - mutant_1.pml:244 - [(1)] (6425:0:0 - 1)
		IfNotBlocked
		reached[1][6421] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6425, 6423, 6425) */
		reached[1][6423] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3062: // STATE 6425 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6425] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3063: // STATE 6427 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6427] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3064: // STATE 6430 - mutant_1.pml:252 - [(1)] (6528:0:1 - 1)
		IfNotBlocked
		reached[1][6430] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6528, 6432, 6528) */
		reached[1][6432] = 1;
		;
		/* merge: .(goto)(6528, 6522, 6528) */
		reached[1][6522] = 1;
		;
		/* merge: j = (j+1)(6528, 6524, 6528) */
		reached[1][6524] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6529, 6528) */
		reached[1][6529] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3065: // STATE 6434 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6434] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3066: // STATE 6435 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (6460:0:1 - 1)
		IfNotBlocked
		reached[1][6435] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6460, 6436, 6460) */
		reached[1][6436] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6460, 6437, 6460) */
		reached[1][6437] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6460, 6453, 6460) */
		reached[1][6453] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3067: // STATE 6453 - mutant_1.pml:276 - [.(goto)] (0:6460:0 - 6)
		IfNotBlocked
		reached[1][6453] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3068: // STATE 6438 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (6460:0:1 - 1)
		IfNotBlocked
		reached[1][6438] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6460, 6439, 6460) */
		reached[1][6439] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6460, 6440, 6460) */
		reached[1][6440] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6460, 6453, 6460) */
		reached[1][6453] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3069: // STATE 6441 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6460:0:1 - 1)
		IfNotBlocked
		reached[1][6441] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6460, 6442, 6460) */
		reached[1][6442] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6460, 6443, 6460) */
		reached[1][6443] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6460, 6453, 6460) */
		reached[1][6453] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3070: // STATE 6444 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6460:0:1 - 1)
		IfNotBlocked
		reached[1][6444] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6460, 6445, 6460) */
		reached[1][6445] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6460, 6446, 6460) */
		reached[1][6446] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6460, 6453, 6460) */
		reached[1][6453] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3071: // STATE 6447 - mutant_1.pml:270 - [((PAUSE==ABORT))] (6460:0:1 - 1)
		IfNotBlocked
		reached[1][6447] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6460, 6448, 6460) */
		reached[1][6448] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6460, 6449, 6460) */
		reached[1][6449] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6460, 6453, 6460) */
		reached[1][6453] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3072: // STATE 6451 - mutant_1.pml:274 - [(1)] (6460:0:0 - 1)
		IfNotBlocked
		reached[1][6451] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6460, 6453, 6460) */
		reached[1][6453] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3073: // STATE 6456 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6456] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3074: // STATE 6459 - mutant_1.pml:281 - [(1)] (6528:0:1 - 1)
		IfNotBlocked
		reached[1][6459] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6528, 6461, 6528) */
		reached[1][6461] = 1;
		;
		/* merge: .(goto)(6528, 6522, 6528) */
		reached[1][6522] = 1;
		;
		/* merge: j = (j+1)(6528, 6524, 6528) */
		reached[1][6524] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6529, 6528) */
		reached[1][6529] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3075: // STATE 6463 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6463] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3076: // STATE 6464 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (6489:0:1 - 1)
		IfNotBlocked
		reached[1][6464] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6489, 6465, 6489) */
		reached[1][6465] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6489, 6466, 6489) */
		reached[1][6466] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6489, 6482, 6489) */
		reached[1][6482] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3077: // STATE 6482 - mutant_1.pml:305 - [.(goto)] (0:6489:0 - 6)
		IfNotBlocked
		reached[1][6482] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3078: // STATE 6467 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (6489:0:1 - 1)
		IfNotBlocked
		reached[1][6467] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6489, 6468, 6489) */
		reached[1][6468] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6489, 6469, 6489) */
		reached[1][6469] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6489, 6482, 6489) */
		reached[1][6482] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3079: // STATE 6470 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6489:0:1 - 1)
		IfNotBlocked
		reached[1][6470] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6489, 6471, 6489) */
		reached[1][6471] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6489, 6472, 6489) */
		reached[1][6472] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6489, 6482, 6489) */
		reached[1][6482] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3080: // STATE 6473 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6489:0:1 - 1)
		IfNotBlocked
		reached[1][6473] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6489, 6474, 6489) */
		reached[1][6474] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6489, 6475, 6489) */
		reached[1][6475] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6489, 6482, 6489) */
		reached[1][6482] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3081: // STATE 6476 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (6489:0:1 - 1)
		IfNotBlocked
		reached[1][6476] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6489, 6477, 6489) */
		reached[1][6477] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6489, 6478, 6489) */
		reached[1][6478] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6489, 6482, 6489) */
		reached[1][6482] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3082: // STATE 6480 - mutant_1.pml:303 - [(1)] (6489:0:0 - 1)
		IfNotBlocked
		reached[1][6480] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6489, 6482, 6489) */
		reached[1][6482] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3083: // STATE 6485 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6485] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3084: // STATE 6488 - mutant_1.pml:310 - [(1)] (6528:0:1 - 1)
		IfNotBlocked
		reached[1][6488] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6528, 6490, 6528) */
		reached[1][6490] = 1;
		;
		/* merge: .(goto)(6528, 6522, 6528) */
		reached[1][6522] = 1;
		;
		/* merge: j = (j+1)(6528, 6524, 6528) */
		reached[1][6524] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6529, 6528) */
		reached[1][6529] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3085: // STATE 6492 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6492] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3086: // STATE 6493 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (6518:0:1 - 1)
		IfNotBlocked
		reached[1][6493] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6518, 6494, 6518) */
		reached[1][6494] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6518, 6495, 6518) */
		reached[1][6495] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6518, 6511, 6518) */
		reached[1][6511] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3087: // STATE 6511 - mutant_1.pml:334 - [.(goto)] (0:6518:0 - 6)
		IfNotBlocked
		reached[1][6511] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3088: // STATE 6496 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (6518:0:1 - 1)
		IfNotBlocked
		reached[1][6496] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6518, 6497, 6518) */
		reached[1][6497] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6518, 6498, 6518) */
		reached[1][6498] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6518, 6511, 6518) */
		reached[1][6511] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3089: // STATE 6499 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6518:0:1 - 1)
		IfNotBlocked
		reached[1][6499] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6518, 6500, 6518) */
		reached[1][6500] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6518, 6501, 6518) */
		reached[1][6501] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6518, 6511, 6518) */
		reached[1][6511] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3090: // STATE 6502 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6518:0:1 - 1)
		IfNotBlocked
		reached[1][6502] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6518, 6503, 6518) */
		reached[1][6503] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6518, 6504, 6518) */
		reached[1][6504] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6518, 6511, 6518) */
		reached[1][6511] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3091: // STATE 6505 - mutant_1.pml:328 - [((STOP==ABORT))] (6518:0:1 - 1)
		IfNotBlocked
		reached[1][6505] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6518, 6506, 6518) */
		reached[1][6506] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6518, 6507, 6518) */
		reached[1][6507] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6518, 6511, 6518) */
		reached[1][6511] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3092: // STATE 6509 - mutant_1.pml:332 - [(1)] (6518:0:0 - 1)
		IfNotBlocked
		reached[1][6509] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6518, 6511, 6518) */
		reached[1][6511] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3093: // STATE 6514 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6514] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3094: // STATE 6517 - mutant_1.pml:339 - [(1)] (6528:0:1 - 1)
		IfNotBlocked
		reached[1][6517] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6528, 6519, 6528) */
		reached[1][6519] = 1;
		;
		/* merge: .(goto)(6528, 6522, 6528) */
		reached[1][6522] = 1;
		;
		/* merge: j = (j+1)(6528, 6524, 6528) */
		reached[1][6524] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6529, 6528) */
		reached[1][6529] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3095: // STATE 6524 - mutant_1.pml:375 - [j = (j+1)] (0:6528:1 - 13)
		IfNotBlocked
		reached[1][6524] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6529, 6528) */
		reached[1][6529] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3096: // STATE 6526 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6526] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3097: // STATE 6532 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6532] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3098: // STATE 6533 - mutant_1.pml:405 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6533] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3099: // STATE 6534 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6534] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3100: // STATE 6536 - mutant_1.pml:407 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6536] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3101: // STATE 6537 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6537] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3102: // STATE 6539 - mutant_1.pml:409 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6539] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3103: // STATE 6540 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6540] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3104: // STATE 6542 - mutant_1.pml:411 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6542] = 1;
		if (!((6==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3105: // STATE 6543 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6543] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3106: // STATE 6547 - mutant_1.pml:414 - [j = (j+1)] (0:6551:1 - 5)
		IfNotBlocked
		reached[1][6547] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6552, 6551) */
		reached[1][6552] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3107: // STATE 6549 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6549] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3108: // STATE 6560 - mutant_1.pml:451 - [(((7==ABORTING)||(7==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6560] = 1;
		if (!(((7==4)||(7==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3109: // STATE 6561 - mutant_1.pml:422 - [(((2==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6561] = 1;
		if (!(((2==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3110: // STATE 6562 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6562] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3111: // STATE 6564 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6564] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3112: // STATE 6565 - mutant_1.pml:394 - [(((2==START)||(2==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6565] = 1;
		if (!(((2==9)||(2==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3113: // STATE 6566 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6566] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3114: // STATE 6567 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6567] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3115: // STATE 6568 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (6588:0:1 - 1)
		IfNotBlocked
		reached[1][6568] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6588, 6569, 6588) */
		reached[1][6569] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6588, 6570, 6588) */
		reached[1][6570] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6588, 6586, 6588) */
		reached[1][6586] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3116: // STATE 6586 - mutant_1.pml:246 - [.(goto)] (0:6588:0 - 6)
		IfNotBlocked
		reached[1][6586] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3117: // STATE 6571 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (6588:0:1 - 1)
		IfNotBlocked
		reached[1][6571] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6588, 6572, 6588) */
		reached[1][6572] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6588, 6573, 6588) */
		reached[1][6573] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6588, 6586, 6588) */
		reached[1][6586] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3118: // STATE 6574 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6588:0:1 - 1)
		IfNotBlocked
		reached[1][6574] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6588, 6575, 6588) */
		reached[1][6575] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6588, 6576, 6588) */
		reached[1][6576] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6588, 6586, 6588) */
		reached[1][6586] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3119: // STATE 6577 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6588:0:1 - 1)
		IfNotBlocked
		reached[1][6577] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6588, 6578, 6588) */
		reached[1][6578] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6588, 6579, 6588) */
		reached[1][6579] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6588, 6586, 6588) */
		reached[1][6586] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3120: // STATE 6580 - mutant_1.pml:240 - [((START==ABORT))] (6588:0:1 - 1)
		IfNotBlocked
		reached[1][6580] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6588, 6581, 6588) */
		reached[1][6581] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6588, 6582, 6588) */
		reached[1][6582] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6588, 6586, 6588) */
		reached[1][6586] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3121: // STATE 6584 - mutant_1.pml:244 - [(1)] (6588:0:0 - 1)
		IfNotBlocked
		reached[1][6584] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6588, 6586, 6588) */
		reached[1][6586] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3122: // STATE 6588 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6588] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3123: // STATE 6590 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6590] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3124: // STATE 6593 - mutant_1.pml:252 - [(1)] (6691:0:1 - 1)
		IfNotBlocked
		reached[1][6593] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6691, 6595, 6691) */
		reached[1][6595] = 1;
		;
		/* merge: .(goto)(6691, 6685, 6691) */
		reached[1][6685] = 1;
		;
		/* merge: j = (j+1)(6691, 6687, 6691) */
		reached[1][6687] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6692, 6691) */
		reached[1][6692] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3125: // STATE 6597 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6597] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3126: // STATE 6598 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (6623:0:1 - 1)
		IfNotBlocked
		reached[1][6598] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6623, 6599, 6623) */
		reached[1][6599] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6623, 6600, 6623) */
		reached[1][6600] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6623, 6616, 6623) */
		reached[1][6616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3127: // STATE 6616 - mutant_1.pml:276 - [.(goto)] (0:6623:0 - 6)
		IfNotBlocked
		reached[1][6616] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3128: // STATE 6601 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (6623:0:1 - 1)
		IfNotBlocked
		reached[1][6601] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6623, 6602, 6623) */
		reached[1][6602] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6623, 6603, 6623) */
		reached[1][6603] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6623, 6616, 6623) */
		reached[1][6616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3129: // STATE 6604 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6623:0:1 - 1)
		IfNotBlocked
		reached[1][6604] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6623, 6605, 6623) */
		reached[1][6605] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6623, 6606, 6623) */
		reached[1][6606] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6623, 6616, 6623) */
		reached[1][6616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3130: // STATE 6607 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6623:0:1 - 1)
		IfNotBlocked
		reached[1][6607] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6623, 6608, 6623) */
		reached[1][6608] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6623, 6609, 6623) */
		reached[1][6609] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6623, 6616, 6623) */
		reached[1][6616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3131: // STATE 6610 - mutant_1.pml:270 - [((PAUSE==ABORT))] (6623:0:1 - 1)
		IfNotBlocked
		reached[1][6610] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6623, 6611, 6623) */
		reached[1][6611] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6623, 6612, 6623) */
		reached[1][6612] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6623, 6616, 6623) */
		reached[1][6616] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3132: // STATE 6614 - mutant_1.pml:274 - [(1)] (6623:0:0 - 1)
		IfNotBlocked
		reached[1][6614] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6623, 6616, 6623) */
		reached[1][6616] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3133: // STATE 6619 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6619] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3134: // STATE 6622 - mutant_1.pml:281 - [(1)] (6691:0:1 - 1)
		IfNotBlocked
		reached[1][6622] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6691, 6624, 6691) */
		reached[1][6624] = 1;
		;
		/* merge: .(goto)(6691, 6685, 6691) */
		reached[1][6685] = 1;
		;
		/* merge: j = (j+1)(6691, 6687, 6691) */
		reached[1][6687] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6692, 6691) */
		reached[1][6692] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3135: // STATE 6626 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6626] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3136: // STATE 6627 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (6652:0:1 - 1)
		IfNotBlocked
		reached[1][6627] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6652, 6628, 6652) */
		reached[1][6628] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6652, 6629, 6652) */
		reached[1][6629] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6652, 6645, 6652) */
		reached[1][6645] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3137: // STATE 6645 - mutant_1.pml:305 - [.(goto)] (0:6652:0 - 6)
		IfNotBlocked
		reached[1][6645] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3138: // STATE 6630 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (6652:0:1 - 1)
		IfNotBlocked
		reached[1][6630] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6652, 6631, 6652) */
		reached[1][6631] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6652, 6632, 6652) */
		reached[1][6632] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6652, 6645, 6652) */
		reached[1][6645] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3139: // STATE 6633 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6652:0:1 - 1)
		IfNotBlocked
		reached[1][6633] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6652, 6634, 6652) */
		reached[1][6634] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6652, 6635, 6652) */
		reached[1][6635] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6652, 6645, 6652) */
		reached[1][6645] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3140: // STATE 6636 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6652:0:1 - 1)
		IfNotBlocked
		reached[1][6636] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6652, 6637, 6652) */
		reached[1][6637] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6652, 6638, 6652) */
		reached[1][6638] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6652, 6645, 6652) */
		reached[1][6645] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3141: // STATE 6639 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (6652:0:1 - 1)
		IfNotBlocked
		reached[1][6639] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6652, 6640, 6652) */
		reached[1][6640] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6652, 6641, 6652) */
		reached[1][6641] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6652, 6645, 6652) */
		reached[1][6645] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3142: // STATE 6643 - mutant_1.pml:303 - [(1)] (6652:0:0 - 1)
		IfNotBlocked
		reached[1][6643] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6652, 6645, 6652) */
		reached[1][6645] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3143: // STATE 6648 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6648] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3144: // STATE 6651 - mutant_1.pml:310 - [(1)] (6691:0:1 - 1)
		IfNotBlocked
		reached[1][6651] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6691, 6653, 6691) */
		reached[1][6653] = 1;
		;
		/* merge: .(goto)(6691, 6685, 6691) */
		reached[1][6685] = 1;
		;
		/* merge: j = (j+1)(6691, 6687, 6691) */
		reached[1][6687] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6692, 6691) */
		reached[1][6692] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3145: // STATE 6655 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6655] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3146: // STATE 6656 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (6681:0:1 - 1)
		IfNotBlocked
		reached[1][6656] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6681, 6657, 6681) */
		reached[1][6657] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6681, 6658, 6681) */
		reached[1][6658] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6681, 6674, 6681) */
		reached[1][6674] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3147: // STATE 6674 - mutant_1.pml:334 - [.(goto)] (0:6681:0 - 6)
		IfNotBlocked
		reached[1][6674] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3148: // STATE 6659 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (6681:0:1 - 1)
		IfNotBlocked
		reached[1][6659] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6681, 6660, 6681) */
		reached[1][6660] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6681, 6661, 6681) */
		reached[1][6661] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6681, 6674, 6681) */
		reached[1][6674] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3149: // STATE 6662 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6681:0:1 - 1)
		IfNotBlocked
		reached[1][6662] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6681, 6663, 6681) */
		reached[1][6663] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6681, 6664, 6681) */
		reached[1][6664] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6681, 6674, 6681) */
		reached[1][6674] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3150: // STATE 6665 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6681:0:1 - 1)
		IfNotBlocked
		reached[1][6665] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6681, 6666, 6681) */
		reached[1][6666] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6681, 6667, 6681) */
		reached[1][6667] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6681, 6674, 6681) */
		reached[1][6674] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3151: // STATE 6668 - mutant_1.pml:328 - [((STOP==ABORT))] (6681:0:1 - 1)
		IfNotBlocked
		reached[1][6668] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6681, 6669, 6681) */
		reached[1][6669] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6681, 6670, 6681) */
		reached[1][6670] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6681, 6674, 6681) */
		reached[1][6674] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3152: // STATE 6672 - mutant_1.pml:332 - [(1)] (6681:0:0 - 1)
		IfNotBlocked
		reached[1][6672] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6681, 6674, 6681) */
		reached[1][6674] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3153: // STATE 6677 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6677] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3154: // STATE 6680 - mutant_1.pml:339 - [(1)] (6691:0:1 - 1)
		IfNotBlocked
		reached[1][6680] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6691, 6682, 6691) */
		reached[1][6682] = 1;
		;
		/* merge: .(goto)(6691, 6685, 6691) */
		reached[1][6685] = 1;
		;
		/* merge: j = (j+1)(6691, 6687, 6691) */
		reached[1][6687] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6692, 6691) */
		reached[1][6692] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3155: // STATE 6687 - mutant_1.pml:375 - [j = (j+1)] (0:6691:1 - 13)
		IfNotBlocked
		reached[1][6687] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6692, 6691) */
		reached[1][6692] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3156: // STATE 6689 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6689] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3157: // STATE 6696 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6696] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3158: // STATE 6697 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6697] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3159: // STATE 6698 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6698] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3160: // STATE 6699 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (6719:0:1 - 1)
		IfNotBlocked
		reached[1][6699] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6719, 6700, 6719) */
		reached[1][6700] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6719, 6701, 6719) */
		reached[1][6701] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6719, 6717, 6719) */
		reached[1][6717] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3161: // STATE 6717 - mutant_1.pml:246 - [.(goto)] (0:6719:0 - 6)
		IfNotBlocked
		reached[1][6717] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3162: // STATE 6702 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (6719:0:1 - 1)
		IfNotBlocked
		reached[1][6702] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6719, 6703, 6719) */
		reached[1][6703] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6719, 6704, 6719) */
		reached[1][6704] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6719, 6717, 6719) */
		reached[1][6717] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3163: // STATE 6705 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6719:0:1 - 1)
		IfNotBlocked
		reached[1][6705] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6719, 6706, 6719) */
		reached[1][6706] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6719, 6707, 6719) */
		reached[1][6707] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6719, 6717, 6719) */
		reached[1][6717] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3164: // STATE 6708 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6719:0:1 - 1)
		IfNotBlocked
		reached[1][6708] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6719, 6709, 6719) */
		reached[1][6709] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6719, 6710, 6719) */
		reached[1][6710] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6719, 6717, 6719) */
		reached[1][6717] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3165: // STATE 6711 - mutant_1.pml:240 - [((START==ABORT))] (6719:0:1 - 1)
		IfNotBlocked
		reached[1][6711] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6719, 6712, 6719) */
		reached[1][6712] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6719, 6713, 6719) */
		reached[1][6713] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6719, 6717, 6719) */
		reached[1][6717] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3166: // STATE 6715 - mutant_1.pml:244 - [(1)] (6719:0:0 - 1)
		IfNotBlocked
		reached[1][6715] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6719, 6717, 6719) */
		reached[1][6717] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3167: // STATE 6719 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6719] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3168: // STATE 6721 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6721] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3169: // STATE 6724 - mutant_1.pml:252 - [(1)] (6822:0:1 - 1)
		IfNotBlocked
		reached[1][6724] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6822, 6726, 6822) */
		reached[1][6726] = 1;
		;
		/* merge: .(goto)(6822, 6816, 6822) */
		reached[1][6816] = 1;
		;
		/* merge: j = (j-1)(6822, 6818, 6822) */
		reached[1][6818] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6823, 6822) */
		reached[1][6823] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3170: // STATE 6728 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6728] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3171: // STATE 6729 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (6754:0:1 - 1)
		IfNotBlocked
		reached[1][6729] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6754, 6730, 6754) */
		reached[1][6730] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6754, 6731, 6754) */
		reached[1][6731] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6754, 6747, 6754) */
		reached[1][6747] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3172: // STATE 6747 - mutant_1.pml:276 - [.(goto)] (0:6754:0 - 6)
		IfNotBlocked
		reached[1][6747] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3173: // STATE 6732 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (6754:0:1 - 1)
		IfNotBlocked
		reached[1][6732] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6754, 6733, 6754) */
		reached[1][6733] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6754, 6734, 6754) */
		reached[1][6734] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6754, 6747, 6754) */
		reached[1][6747] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3174: // STATE 6735 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6754:0:1 - 1)
		IfNotBlocked
		reached[1][6735] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6754, 6736, 6754) */
		reached[1][6736] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6754, 6737, 6754) */
		reached[1][6737] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6754, 6747, 6754) */
		reached[1][6747] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3175: // STATE 6738 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6754:0:1 - 1)
		IfNotBlocked
		reached[1][6738] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6754, 6739, 6754) */
		reached[1][6739] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6754, 6740, 6754) */
		reached[1][6740] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6754, 6747, 6754) */
		reached[1][6747] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3176: // STATE 6741 - mutant_1.pml:270 - [((PAUSE==ABORT))] (6754:0:1 - 1)
		IfNotBlocked
		reached[1][6741] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6754, 6742, 6754) */
		reached[1][6742] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6754, 6743, 6754) */
		reached[1][6743] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6754, 6747, 6754) */
		reached[1][6747] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3177: // STATE 6745 - mutant_1.pml:274 - [(1)] (6754:0:0 - 1)
		IfNotBlocked
		reached[1][6745] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6754, 6747, 6754) */
		reached[1][6747] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3178: // STATE 6750 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6750] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3179: // STATE 6753 - mutant_1.pml:281 - [(1)] (6822:0:1 - 1)
		IfNotBlocked
		reached[1][6753] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6822, 6755, 6822) */
		reached[1][6755] = 1;
		;
		/* merge: .(goto)(6822, 6816, 6822) */
		reached[1][6816] = 1;
		;
		/* merge: j = (j-1)(6822, 6818, 6822) */
		reached[1][6818] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6823, 6822) */
		reached[1][6823] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3180: // STATE 6757 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6757] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3181: // STATE 6758 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (6783:0:1 - 1)
		IfNotBlocked
		reached[1][6758] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6783, 6759, 6783) */
		reached[1][6759] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6783, 6760, 6783) */
		reached[1][6760] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6783, 6776, 6783) */
		reached[1][6776] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3182: // STATE 6776 - mutant_1.pml:305 - [.(goto)] (0:6783:0 - 6)
		IfNotBlocked
		reached[1][6776] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3183: // STATE 6761 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (6783:0:1 - 1)
		IfNotBlocked
		reached[1][6761] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6783, 6762, 6783) */
		reached[1][6762] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6783, 6763, 6783) */
		reached[1][6763] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6783, 6776, 6783) */
		reached[1][6776] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3184: // STATE 6764 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6783:0:1 - 1)
		IfNotBlocked
		reached[1][6764] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6783, 6765, 6783) */
		reached[1][6765] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6783, 6766, 6783) */
		reached[1][6766] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6783, 6776, 6783) */
		reached[1][6776] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3185: // STATE 6767 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6783:0:1 - 1)
		IfNotBlocked
		reached[1][6767] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6783, 6768, 6783) */
		reached[1][6768] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6783, 6769, 6783) */
		reached[1][6769] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6783, 6776, 6783) */
		reached[1][6776] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3186: // STATE 6770 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (6783:0:1 - 1)
		IfNotBlocked
		reached[1][6770] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6783, 6771, 6783) */
		reached[1][6771] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6783, 6772, 6783) */
		reached[1][6772] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6783, 6776, 6783) */
		reached[1][6776] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3187: // STATE 6774 - mutant_1.pml:303 - [(1)] (6783:0:0 - 1)
		IfNotBlocked
		reached[1][6774] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6783, 6776, 6783) */
		reached[1][6776] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3188: // STATE 6779 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6779] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3189: // STATE 6782 - mutant_1.pml:310 - [(1)] (6822:0:1 - 1)
		IfNotBlocked
		reached[1][6782] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6822, 6784, 6822) */
		reached[1][6784] = 1;
		;
		/* merge: .(goto)(6822, 6816, 6822) */
		reached[1][6816] = 1;
		;
		/* merge: j = (j-1)(6822, 6818, 6822) */
		reached[1][6818] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6823, 6822) */
		reached[1][6823] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3190: // STATE 6786 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6786] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3191: // STATE 6787 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (6812:0:1 - 1)
		IfNotBlocked
		reached[1][6787] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6812, 6788, 6812) */
		reached[1][6788] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6812, 6789, 6812) */
		reached[1][6789] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6812, 6805, 6812) */
		reached[1][6805] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3192: // STATE 6805 - mutant_1.pml:334 - [.(goto)] (0:6812:0 - 6)
		IfNotBlocked
		reached[1][6805] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3193: // STATE 6790 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (6812:0:1 - 1)
		IfNotBlocked
		reached[1][6790] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6812, 6791, 6812) */
		reached[1][6791] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6812, 6792, 6812) */
		reached[1][6792] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6812, 6805, 6812) */
		reached[1][6805] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3194: // STATE 6793 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6812:0:1 - 1)
		IfNotBlocked
		reached[1][6793] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6812, 6794, 6812) */
		reached[1][6794] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6812, 6795, 6812) */
		reached[1][6795] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6812, 6805, 6812) */
		reached[1][6805] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3195: // STATE 6796 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6812:0:1 - 1)
		IfNotBlocked
		reached[1][6796] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6812, 6797, 6812) */
		reached[1][6797] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6812, 6798, 6812) */
		reached[1][6798] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6812, 6805, 6812) */
		reached[1][6805] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3196: // STATE 6799 - mutant_1.pml:328 - [((STOP==ABORT))] (6812:0:1 - 1)
		IfNotBlocked
		reached[1][6799] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6812, 6800, 6812) */
		reached[1][6800] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6812, 6801, 6812) */
		reached[1][6801] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6812, 6805, 6812) */
		reached[1][6805] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3197: // STATE 6803 - mutant_1.pml:332 - [(1)] (6812:0:0 - 1)
		IfNotBlocked
		reached[1][6803] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6812, 6805, 6812) */
		reached[1][6805] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3198: // STATE 6808 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6808] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3199: // STATE 6811 - mutant_1.pml:339 - [(1)] (6822:0:1 - 1)
		IfNotBlocked
		reached[1][6811] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6822, 6813, 6822) */
		reached[1][6813] = 1;
		;
		/* merge: .(goto)(6822, 6816, 6822) */
		reached[1][6816] = 1;
		;
		/* merge: j = (j-1)(6822, 6818, 6822) */
		reached[1][6818] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6823, 6822) */
		reached[1][6823] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3200: // STATE 6818 - mutant_1.pml:386 - [j = (j-1)] (0:6822:1 - 13)
		IfNotBlocked
		reached[1][6818] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6823, 6822) */
		reached[1][6823] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3201: // STATE 6820 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6820] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3202: // STATE 6830 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6830] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3203: // STATE 6831 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6831] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3204: // STATE 6832 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (6852:0:1 - 1)
		IfNotBlocked
		reached[1][6832] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6852, 6833, 6852) */
		reached[1][6833] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6852, 6834, 6852) */
		reached[1][6834] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6852, 6850, 6852) */
		reached[1][6850] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3205: // STATE 6850 - mutant_1.pml:246 - [.(goto)] (0:6852:0 - 6)
		IfNotBlocked
		reached[1][6850] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3206: // STATE 6835 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (6852:0:1 - 1)
		IfNotBlocked
		reached[1][6835] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6852, 6836, 6852) */
		reached[1][6836] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6852, 6837, 6852) */
		reached[1][6837] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6852, 6850, 6852) */
		reached[1][6850] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3207: // STATE 6838 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6852:0:1 - 1)
		IfNotBlocked
		reached[1][6838] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6852, 6839, 6852) */
		reached[1][6839] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6852, 6840, 6852) */
		reached[1][6840] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6852, 6850, 6852) */
		reached[1][6850] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3208: // STATE 6841 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6852:0:1 - 1)
		IfNotBlocked
		reached[1][6841] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6852, 6842, 6852) */
		reached[1][6842] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6852, 6843, 6852) */
		reached[1][6843] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6852, 6850, 6852) */
		reached[1][6850] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3209: // STATE 6844 - mutant_1.pml:240 - [((START==ABORT))] (6852:0:1 - 1)
		IfNotBlocked
		reached[1][6844] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6852, 6845, 6852) */
		reached[1][6845] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6852, 6846, 6852) */
		reached[1][6846] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6852, 6850, 6852) */
		reached[1][6850] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3210: // STATE 6848 - mutant_1.pml:244 - [(1)] (6852:0:0 - 1)
		IfNotBlocked
		reached[1][6848] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6852, 6850, 6852) */
		reached[1][6850] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3211: // STATE 6852 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6852] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3212: // STATE 6854 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6854] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3213: // STATE 6857 - mutant_1.pml:252 - [(1)] (6955:0:1 - 1)
		IfNotBlocked
		reached[1][6857] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6955, 6859, 6955) */
		reached[1][6859] = 1;
		;
		/* merge: .(goto)(6955, 6949, 6955) */
		reached[1][6949] = 1;
		;
		/* merge: j = (j+1)(6955, 6951, 6955) */
		reached[1][6951] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6956, 6955) */
		reached[1][6956] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3214: // STATE 6861 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6861] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3215: // STATE 6862 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (6887:0:1 - 1)
		IfNotBlocked
		reached[1][6862] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6887, 6863, 6887) */
		reached[1][6863] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6887, 6864, 6887) */
		reached[1][6864] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6887, 6880, 6887) */
		reached[1][6880] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3216: // STATE 6880 - mutant_1.pml:276 - [.(goto)] (0:6887:0 - 6)
		IfNotBlocked
		reached[1][6880] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3217: // STATE 6865 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (6887:0:1 - 1)
		IfNotBlocked
		reached[1][6865] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6887, 6866, 6887) */
		reached[1][6866] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6887, 6867, 6887) */
		reached[1][6867] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6887, 6880, 6887) */
		reached[1][6880] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3218: // STATE 6868 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6887:0:1 - 1)
		IfNotBlocked
		reached[1][6868] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6887, 6869, 6887) */
		reached[1][6869] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6887, 6870, 6887) */
		reached[1][6870] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6887, 6880, 6887) */
		reached[1][6880] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3219: // STATE 6871 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6887:0:1 - 1)
		IfNotBlocked
		reached[1][6871] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6887, 6872, 6887) */
		reached[1][6872] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6887, 6873, 6887) */
		reached[1][6873] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6887, 6880, 6887) */
		reached[1][6880] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3220: // STATE 6874 - mutant_1.pml:270 - [((PAUSE==ABORT))] (6887:0:1 - 1)
		IfNotBlocked
		reached[1][6874] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6887, 6875, 6887) */
		reached[1][6875] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6887, 6876, 6887) */
		reached[1][6876] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6887, 6880, 6887) */
		reached[1][6880] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3221: // STATE 6878 - mutant_1.pml:274 - [(1)] (6887:0:0 - 1)
		IfNotBlocked
		reached[1][6878] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6887, 6880, 6887) */
		reached[1][6880] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3222: // STATE 6883 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6883] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3223: // STATE 6886 - mutant_1.pml:281 - [(1)] (6955:0:1 - 1)
		IfNotBlocked
		reached[1][6886] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6955, 6888, 6955) */
		reached[1][6888] = 1;
		;
		/* merge: .(goto)(6955, 6949, 6955) */
		reached[1][6949] = 1;
		;
		/* merge: j = (j+1)(6955, 6951, 6955) */
		reached[1][6951] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6956, 6955) */
		reached[1][6956] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3224: // STATE 6890 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6890] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3225: // STATE 6891 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (6916:0:1 - 1)
		IfNotBlocked
		reached[1][6891] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6916, 6892, 6916) */
		reached[1][6892] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6916, 6893, 6916) */
		reached[1][6893] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6916, 6909, 6916) */
		reached[1][6909] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3226: // STATE 6909 - mutant_1.pml:305 - [.(goto)] (0:6916:0 - 6)
		IfNotBlocked
		reached[1][6909] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3227: // STATE 6894 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (6916:0:1 - 1)
		IfNotBlocked
		reached[1][6894] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6916, 6895, 6916) */
		reached[1][6895] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6916, 6896, 6916) */
		reached[1][6896] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6916, 6909, 6916) */
		reached[1][6909] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3228: // STATE 6897 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6916:0:1 - 1)
		IfNotBlocked
		reached[1][6897] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6916, 6898, 6916) */
		reached[1][6898] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6916, 6899, 6916) */
		reached[1][6899] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6916, 6909, 6916) */
		reached[1][6909] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3229: // STATE 6900 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6916:0:1 - 1)
		IfNotBlocked
		reached[1][6900] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6916, 6901, 6916) */
		reached[1][6901] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6916, 6902, 6916) */
		reached[1][6902] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6916, 6909, 6916) */
		reached[1][6909] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3230: // STATE 6903 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (6916:0:1 - 1)
		IfNotBlocked
		reached[1][6903] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6916, 6904, 6916) */
		reached[1][6904] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6916, 6905, 6916) */
		reached[1][6905] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6916, 6909, 6916) */
		reached[1][6909] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3231: // STATE 6907 - mutant_1.pml:303 - [(1)] (6916:0:0 - 1)
		IfNotBlocked
		reached[1][6907] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6916, 6909, 6916) */
		reached[1][6909] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3232: // STATE 6912 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6912] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3233: // STATE 6915 - mutant_1.pml:310 - [(1)] (6955:0:1 - 1)
		IfNotBlocked
		reached[1][6915] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6955, 6917, 6955) */
		reached[1][6917] = 1;
		;
		/* merge: .(goto)(6955, 6949, 6955) */
		reached[1][6949] = 1;
		;
		/* merge: j = (j+1)(6955, 6951, 6955) */
		reached[1][6951] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6956, 6955) */
		reached[1][6956] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3234: // STATE 6919 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6919] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3235: // STATE 6920 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (6945:0:1 - 1)
		IfNotBlocked
		reached[1][6920] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(6945, 6921, 6945) */
		reached[1][6921] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(6945, 6922, 6945) */
		reached[1][6922] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6945, 6938, 6945) */
		reached[1][6938] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3236: // STATE 6938 - mutant_1.pml:334 - [.(goto)] (0:6945:0 - 6)
		IfNotBlocked
		reached[1][6938] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3237: // STATE 6923 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (6945:0:1 - 1)
		IfNotBlocked
		reached[1][6923] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(6945, 6924, 6945) */
		reached[1][6924] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(6945, 6925, 6945) */
		reached[1][6925] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6945, 6938, 6945) */
		reached[1][6938] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3238: // STATE 6926 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (6945:0:1 - 1)
		IfNotBlocked
		reached[1][6926] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(6945, 6927, 6945) */
		reached[1][6927] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(6945, 6928, 6945) */
		reached[1][6928] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6945, 6938, 6945) */
		reached[1][6938] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3239: // STATE 6929 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (6945:0:1 - 1)
		IfNotBlocked
		reached[1][6929] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(6945, 6930, 6945) */
		reached[1][6930] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(6945, 6931, 6945) */
		reached[1][6931] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6945, 6938, 6945) */
		reached[1][6938] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3240: // STATE 6932 - mutant_1.pml:328 - [((STOP==ABORT))] (6945:0:1 - 1)
		IfNotBlocked
		reached[1][6932] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(6945, 6933, 6945) */
		reached[1][6933] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(6945, 6934, 6945) */
		reached[1][6934] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(6945, 6938, 6945) */
		reached[1][6938] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3241: // STATE 6936 - mutant_1.pml:332 - [(1)] (6945:0:0 - 1)
		IfNotBlocked
		reached[1][6936] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6945, 6938, 6945) */
		reached[1][6938] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3242: // STATE 6941 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6941] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3243: // STATE 6944 - mutant_1.pml:339 - [(1)] (6955:0:1 - 1)
		IfNotBlocked
		reached[1][6944] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(6955, 6946, 6955) */
		reached[1][6946] = 1;
		;
		/* merge: .(goto)(6955, 6949, 6955) */
		reached[1][6949] = 1;
		;
		/* merge: j = (j+1)(6955, 6951, 6955) */
		reached[1][6951] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6956, 6955) */
		reached[1][6956] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3244: // STATE 6951 - mutant_1.pml:375 - [j = (j+1)] (0:6955:1 - 13)
		IfNotBlocked
		reached[1][6951] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6956, 6955) */
		reached[1][6956] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3245: // STATE 6953 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6953] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3246: // STATE 6959 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6959] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3247: // STATE 6960 - mutant_1.pml:405 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6960] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3248: // STATE 6961 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6961] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3249: // STATE 6963 - mutant_1.pml:407 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6963] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3250: // STATE 6964 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6964] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3251: // STATE 6966 - mutant_1.pml:409 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6966] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3252: // STATE 6967 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6967] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3253: // STATE 6969 - mutant_1.pml:411 - [((2==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6969] = 1;
		if (!((2==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3254: // STATE 6970 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6970] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3255: // STATE 6974 - mutant_1.pml:414 - [j = (j+1)] (0:6978:1 - 5)
		IfNotBlocked
		reached[1][6974] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 6979, 6978) */
		reached[1][6979] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3256: // STATE 6976 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6976] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3257: // STATE 6993 - mutant_1.pml:447 - [((5==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6993] = 1;
		if (!((5==11)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3258: // STATE 6994 - mutant_1.pml:422 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6994] = 1;
		if (!(((8==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3259: // STATE 6995 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][6995] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3260: // STATE 6997 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6997] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3261: // STATE 6998 - mutant_1.pml:394 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6998] = 1;
		if (!(((8==9)||(8==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3262: // STATE 6999 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][6999] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3263: // STATE 7000 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7000] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3264: // STATE 7001 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (7021:0:1 - 1)
		IfNotBlocked
		reached[1][7001] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7021, 7002, 7021) */
		reached[1][7002] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7021, 7003, 7021) */
		reached[1][7003] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7021, 7019, 7021) */
		reached[1][7019] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3265: // STATE 7019 - mutant_1.pml:246 - [.(goto)] (0:7021:0 - 6)
		IfNotBlocked
		reached[1][7019] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3266: // STATE 7004 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (7021:0:1 - 1)
		IfNotBlocked
		reached[1][7004] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7021, 7005, 7021) */
		reached[1][7005] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7021, 7006, 7021) */
		reached[1][7006] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7021, 7019, 7021) */
		reached[1][7019] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3267: // STATE 7007 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7021:0:1 - 1)
		IfNotBlocked
		reached[1][7007] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7021, 7008, 7021) */
		reached[1][7008] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7021, 7009, 7021) */
		reached[1][7009] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7021, 7019, 7021) */
		reached[1][7019] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3268: // STATE 7010 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7021:0:1 - 1)
		IfNotBlocked
		reached[1][7010] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7021, 7011, 7021) */
		reached[1][7011] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7021, 7012, 7021) */
		reached[1][7012] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7021, 7019, 7021) */
		reached[1][7019] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3269: // STATE 7013 - mutant_1.pml:240 - [((START==ABORT))] (7021:0:1 - 1)
		IfNotBlocked
		reached[1][7013] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7021, 7014, 7021) */
		reached[1][7014] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7021, 7015, 7021) */
		reached[1][7015] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7021, 7019, 7021) */
		reached[1][7019] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3270: // STATE 7017 - mutant_1.pml:244 - [(1)] (7021:0:0 - 1)
		IfNotBlocked
		reached[1][7017] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7021, 7019, 7021) */
		reached[1][7019] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3271: // STATE 7021 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7021] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3272: // STATE 7023 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7023] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3273: // STATE 7026 - mutant_1.pml:252 - [(1)] (7124:0:1 - 1)
		IfNotBlocked
		reached[1][7026] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7124, 7028, 7124) */
		reached[1][7028] = 1;
		;
		/* merge: .(goto)(7124, 7118, 7124) */
		reached[1][7118] = 1;
		;
		/* merge: j = (j+1)(7124, 7120, 7124) */
		reached[1][7120] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7125, 7124) */
		reached[1][7125] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3274: // STATE 7030 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7030] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3275: // STATE 7031 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (7056:0:1 - 1)
		IfNotBlocked
		reached[1][7031] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7056, 7032, 7056) */
		reached[1][7032] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7056, 7033, 7056) */
		reached[1][7033] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7056, 7049, 7056) */
		reached[1][7049] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3276: // STATE 7049 - mutant_1.pml:276 - [.(goto)] (0:7056:0 - 6)
		IfNotBlocked
		reached[1][7049] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3277: // STATE 7034 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (7056:0:1 - 1)
		IfNotBlocked
		reached[1][7034] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7056, 7035, 7056) */
		reached[1][7035] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7056, 7036, 7056) */
		reached[1][7036] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7056, 7049, 7056) */
		reached[1][7049] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3278: // STATE 7037 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7056:0:1 - 1)
		IfNotBlocked
		reached[1][7037] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7056, 7038, 7056) */
		reached[1][7038] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7056, 7039, 7056) */
		reached[1][7039] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7056, 7049, 7056) */
		reached[1][7049] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3279: // STATE 7040 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7056:0:1 - 1)
		IfNotBlocked
		reached[1][7040] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7056, 7041, 7056) */
		reached[1][7041] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7056, 7042, 7056) */
		reached[1][7042] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7056, 7049, 7056) */
		reached[1][7049] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3280: // STATE 7043 - mutant_1.pml:270 - [((PAUSE==ABORT))] (7056:0:1 - 1)
		IfNotBlocked
		reached[1][7043] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7056, 7044, 7056) */
		reached[1][7044] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7056, 7045, 7056) */
		reached[1][7045] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7056, 7049, 7056) */
		reached[1][7049] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3281: // STATE 7047 - mutant_1.pml:274 - [(1)] (7056:0:0 - 1)
		IfNotBlocked
		reached[1][7047] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7056, 7049, 7056) */
		reached[1][7049] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3282: // STATE 7052 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7052] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3283: // STATE 7055 - mutant_1.pml:281 - [(1)] (7124:0:1 - 1)
		IfNotBlocked
		reached[1][7055] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7124, 7057, 7124) */
		reached[1][7057] = 1;
		;
		/* merge: .(goto)(7124, 7118, 7124) */
		reached[1][7118] = 1;
		;
		/* merge: j = (j+1)(7124, 7120, 7124) */
		reached[1][7120] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7125, 7124) */
		reached[1][7125] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3284: // STATE 7059 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7059] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3285: // STATE 7060 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (7085:0:1 - 1)
		IfNotBlocked
		reached[1][7060] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7085, 7061, 7085) */
		reached[1][7061] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7085, 7062, 7085) */
		reached[1][7062] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7085, 7078, 7085) */
		reached[1][7078] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3286: // STATE 7078 - mutant_1.pml:305 - [.(goto)] (0:7085:0 - 6)
		IfNotBlocked
		reached[1][7078] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3287: // STATE 7063 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (7085:0:1 - 1)
		IfNotBlocked
		reached[1][7063] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7085, 7064, 7085) */
		reached[1][7064] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7085, 7065, 7085) */
		reached[1][7065] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7085, 7078, 7085) */
		reached[1][7078] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3288: // STATE 7066 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7085:0:1 - 1)
		IfNotBlocked
		reached[1][7066] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7085, 7067, 7085) */
		reached[1][7067] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7085, 7068, 7085) */
		reached[1][7068] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7085, 7078, 7085) */
		reached[1][7078] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3289: // STATE 7069 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7085:0:1 - 1)
		IfNotBlocked
		reached[1][7069] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7085, 7070, 7085) */
		reached[1][7070] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7085, 7071, 7085) */
		reached[1][7071] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7085, 7078, 7085) */
		reached[1][7078] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3290: // STATE 7072 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (7085:0:1 - 1)
		IfNotBlocked
		reached[1][7072] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7085, 7073, 7085) */
		reached[1][7073] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7085, 7074, 7085) */
		reached[1][7074] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7085, 7078, 7085) */
		reached[1][7078] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3291: // STATE 7076 - mutant_1.pml:303 - [(1)] (7085:0:0 - 1)
		IfNotBlocked
		reached[1][7076] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7085, 7078, 7085) */
		reached[1][7078] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3292: // STATE 7081 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7081] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3293: // STATE 7084 - mutant_1.pml:310 - [(1)] (7124:0:1 - 1)
		IfNotBlocked
		reached[1][7084] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7124, 7086, 7124) */
		reached[1][7086] = 1;
		;
		/* merge: .(goto)(7124, 7118, 7124) */
		reached[1][7118] = 1;
		;
		/* merge: j = (j+1)(7124, 7120, 7124) */
		reached[1][7120] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7125, 7124) */
		reached[1][7125] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3294: // STATE 7088 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7088] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3295: // STATE 7089 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (7114:0:1 - 1)
		IfNotBlocked
		reached[1][7089] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7114, 7090, 7114) */
		reached[1][7090] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7114, 7091, 7114) */
		reached[1][7091] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7114, 7107, 7114) */
		reached[1][7107] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3296: // STATE 7107 - mutant_1.pml:334 - [.(goto)] (0:7114:0 - 6)
		IfNotBlocked
		reached[1][7107] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3297: // STATE 7092 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (7114:0:1 - 1)
		IfNotBlocked
		reached[1][7092] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7114, 7093, 7114) */
		reached[1][7093] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7114, 7094, 7114) */
		reached[1][7094] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7114, 7107, 7114) */
		reached[1][7107] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3298: // STATE 7095 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7114:0:1 - 1)
		IfNotBlocked
		reached[1][7095] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7114, 7096, 7114) */
		reached[1][7096] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7114, 7097, 7114) */
		reached[1][7097] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7114, 7107, 7114) */
		reached[1][7107] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3299: // STATE 7098 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7114:0:1 - 1)
		IfNotBlocked
		reached[1][7098] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7114, 7099, 7114) */
		reached[1][7099] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7114, 7100, 7114) */
		reached[1][7100] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7114, 7107, 7114) */
		reached[1][7107] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3300: // STATE 7101 - mutant_1.pml:328 - [((STOP==ABORT))] (7114:0:1 - 1)
		IfNotBlocked
		reached[1][7101] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7114, 7102, 7114) */
		reached[1][7102] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7114, 7103, 7114) */
		reached[1][7103] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7114, 7107, 7114) */
		reached[1][7107] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3301: // STATE 7105 - mutant_1.pml:332 - [(1)] (7114:0:0 - 1)
		IfNotBlocked
		reached[1][7105] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7114, 7107, 7114) */
		reached[1][7107] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3302: // STATE 7110 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7110] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3303: // STATE 7113 - mutant_1.pml:339 - [(1)] (7124:0:1 - 1)
		IfNotBlocked
		reached[1][7113] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7124, 7115, 7124) */
		reached[1][7115] = 1;
		;
		/* merge: .(goto)(7124, 7118, 7124) */
		reached[1][7118] = 1;
		;
		/* merge: j = (j+1)(7124, 7120, 7124) */
		reached[1][7120] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7125, 7124) */
		reached[1][7125] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3304: // STATE 7120 - mutant_1.pml:375 - [j = (j+1)] (0:7124:1 - 13)
		IfNotBlocked
		reached[1][7120] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7125, 7124) */
		reached[1][7125] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3305: // STATE 7122 - mutant_1.pml:377 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][7122] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 3306: // STATE 7129 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7129] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3307: // STATE 7130 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7130] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3308: // STATE 7131 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7131] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3309: // STATE 7132 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (7152:0:1 - 1)
		IfNotBlocked
		reached[1][7132] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7152, 7133, 7152) */
		reached[1][7133] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7152, 7134, 7152) */
		reached[1][7134] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7152, 7150, 7152) */
		reached[1][7150] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3310: // STATE 7150 - mutant_1.pml:246 - [.(goto)] (0:7152:0 - 6)
		IfNotBlocked
		reached[1][7150] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3311: // STATE 7135 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (7152:0:1 - 1)
		IfNotBlocked
		reached[1][7135] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7152, 7136, 7152) */
		reached[1][7136] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7152, 7137, 7152) */
		reached[1][7137] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7152, 7150, 7152) */
		reached[1][7150] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3312: // STATE 7138 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7152:0:1 - 1)
		IfNotBlocked
		reached[1][7138] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7152, 7139, 7152) */
		reached[1][7139] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7152, 7140, 7152) */
		reached[1][7140] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7152, 7150, 7152) */
		reached[1][7150] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3313: // STATE 7141 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7152:0:1 - 1)
		IfNotBlocked
		reached[1][7141] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7152, 7142, 7152) */
		reached[1][7142] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7152, 7143, 7152) */
		reached[1][7143] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7152, 7150, 7152) */
		reached[1][7150] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3314: // STATE 7144 - mutant_1.pml:240 - [((START==ABORT))] (7152:0:1 - 1)
		IfNotBlocked
		reached[1][7144] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7152, 7145, 7152) */
		reached[1][7145] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7152, 7146, 7152) */
		reached[1][7146] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7152, 7150, 7152) */
		reached[1][7150] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3315: // STATE 7148 - mutant_1.pml:244 - [(1)] (7152:0:0 - 1)
		IfNotBlocked
		reached[1][7148] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7152, 7150, 7152) */
		reached[1][7150] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3316: // STATE 7152 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7152] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3317: // STATE 7154 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7154] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3318: // STATE 7157 - mutant_1.pml:252 - [(1)] (7255:0:1 - 1)
		IfNotBlocked
		reached[1][7157] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7255, 7159, 7255) */
		reached[1][7159] = 1;
		;
		/* merge: .(goto)(7255, 7249, 7255) */
		reached[1][7249] = 1;
		;
		/* merge: j = (j-1)(7255, 7251, 7255) */
		reached[1][7251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7256, 7255) */
		reached[1][7256] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3319: // STATE 7161 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7161] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3320: // STATE 7162 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (7187:0:1 - 1)
		IfNotBlocked
		reached[1][7162] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7187, 7163, 7187) */
		reached[1][7163] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7187, 7164, 7187) */
		reached[1][7164] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7187, 7180, 7187) */
		reached[1][7180] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3321: // STATE 7180 - mutant_1.pml:276 - [.(goto)] (0:7187:0 - 6)
		IfNotBlocked
		reached[1][7180] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3322: // STATE 7165 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (7187:0:1 - 1)
		IfNotBlocked
		reached[1][7165] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7187, 7166, 7187) */
		reached[1][7166] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7187, 7167, 7187) */
		reached[1][7167] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7187, 7180, 7187) */
		reached[1][7180] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3323: // STATE 7168 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7187:0:1 - 1)
		IfNotBlocked
		reached[1][7168] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7187, 7169, 7187) */
		reached[1][7169] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7187, 7170, 7187) */
		reached[1][7170] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7187, 7180, 7187) */
		reached[1][7180] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3324: // STATE 7171 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7187:0:1 - 1)
		IfNotBlocked
		reached[1][7171] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7187, 7172, 7187) */
		reached[1][7172] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7187, 7173, 7187) */
		reached[1][7173] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7187, 7180, 7187) */
		reached[1][7180] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3325: // STATE 7174 - mutant_1.pml:270 - [((PAUSE==ABORT))] (7187:0:1 - 1)
		IfNotBlocked
		reached[1][7174] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7187, 7175, 7187) */
		reached[1][7175] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7187, 7176, 7187) */
		reached[1][7176] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7187, 7180, 7187) */
		reached[1][7180] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3326: // STATE 7178 - mutant_1.pml:274 - [(1)] (7187:0:0 - 1)
		IfNotBlocked
		reached[1][7178] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7187, 7180, 7187) */
		reached[1][7180] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3327: // STATE 7183 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7183] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3328: // STATE 7186 - mutant_1.pml:281 - [(1)] (7255:0:1 - 1)
		IfNotBlocked
		reached[1][7186] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7255, 7188, 7255) */
		reached[1][7188] = 1;
		;
		/* merge: .(goto)(7255, 7249, 7255) */
		reached[1][7249] = 1;
		;
		/* merge: j = (j-1)(7255, 7251, 7255) */
		reached[1][7251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7256, 7255) */
		reached[1][7256] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3329: // STATE 7190 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7190] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3330: // STATE 7191 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (7216:0:1 - 1)
		IfNotBlocked
		reached[1][7191] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7216, 7192, 7216) */
		reached[1][7192] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7216, 7193, 7216) */
		reached[1][7193] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7216, 7209, 7216) */
		reached[1][7209] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3331: // STATE 7209 - mutant_1.pml:305 - [.(goto)] (0:7216:0 - 6)
		IfNotBlocked
		reached[1][7209] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3332: // STATE 7194 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (7216:0:1 - 1)
		IfNotBlocked
		reached[1][7194] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7216, 7195, 7216) */
		reached[1][7195] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7216, 7196, 7216) */
		reached[1][7196] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7216, 7209, 7216) */
		reached[1][7209] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3333: // STATE 7197 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7216:0:1 - 1)
		IfNotBlocked
		reached[1][7197] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7216, 7198, 7216) */
		reached[1][7198] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7216, 7199, 7216) */
		reached[1][7199] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7216, 7209, 7216) */
		reached[1][7209] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3334: // STATE 7200 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7216:0:1 - 1)
		IfNotBlocked
		reached[1][7200] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7216, 7201, 7216) */
		reached[1][7201] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7216, 7202, 7216) */
		reached[1][7202] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7216, 7209, 7216) */
		reached[1][7209] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3335: // STATE 7203 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (7216:0:1 - 1)
		IfNotBlocked
		reached[1][7203] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7216, 7204, 7216) */
		reached[1][7204] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7216, 7205, 7216) */
		reached[1][7205] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7216, 7209, 7216) */
		reached[1][7209] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3336: // STATE 7207 - mutant_1.pml:303 - [(1)] (7216:0:0 - 1)
		IfNotBlocked
		reached[1][7207] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7216, 7209, 7216) */
		reached[1][7209] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3337: // STATE 7212 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7212] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3338: // STATE 7215 - mutant_1.pml:310 - [(1)] (7255:0:1 - 1)
		IfNotBlocked
		reached[1][7215] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7255, 7217, 7255) */
		reached[1][7217] = 1;
		;
		/* merge: .(goto)(7255, 7249, 7255) */
		reached[1][7249] = 1;
		;
		/* merge: j = (j-1)(7255, 7251, 7255) */
		reached[1][7251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7256, 7255) */
		reached[1][7256] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3339: // STATE 7219 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7219] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3340: // STATE 7220 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (7245:0:1 - 1)
		IfNotBlocked
		reached[1][7220] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7245, 7221, 7245) */
		reached[1][7221] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7245, 7222, 7245) */
		reached[1][7222] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7245, 7238, 7245) */
		reached[1][7238] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3341: // STATE 7238 - mutant_1.pml:334 - [.(goto)] (0:7245:0 - 6)
		IfNotBlocked
		reached[1][7238] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3342: // STATE 7223 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (7245:0:1 - 1)
		IfNotBlocked
		reached[1][7223] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7245, 7224, 7245) */
		reached[1][7224] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7245, 7225, 7245) */
		reached[1][7225] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7245, 7238, 7245) */
		reached[1][7238] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3343: // STATE 7226 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7245:0:1 - 1)
		IfNotBlocked
		reached[1][7226] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7245, 7227, 7245) */
		reached[1][7227] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7245, 7228, 7245) */
		reached[1][7228] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7245, 7238, 7245) */
		reached[1][7238] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3344: // STATE 7229 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7245:0:1 - 1)
		IfNotBlocked
		reached[1][7229] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7245, 7230, 7245) */
		reached[1][7230] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7245, 7231, 7245) */
		reached[1][7231] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7245, 7238, 7245) */
		reached[1][7238] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3345: // STATE 7232 - mutant_1.pml:328 - [((STOP==ABORT))] (7245:0:1 - 1)
		IfNotBlocked
		reached[1][7232] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7245, 7233, 7245) */
		reached[1][7233] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7245, 7234, 7245) */
		reached[1][7234] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7245, 7238, 7245) */
		reached[1][7238] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3346: // STATE 7236 - mutant_1.pml:332 - [(1)] (7245:0:0 - 1)
		IfNotBlocked
		reached[1][7236] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7245, 7238, 7245) */
		reached[1][7238] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3347: // STATE 7241 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7241] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3348: // STATE 7244 - mutant_1.pml:339 - [(1)] (7255:0:1 - 1)
		IfNotBlocked
		reached[1][7244] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7255, 7246, 7255) */
		reached[1][7246] = 1;
		;
		/* merge: .(goto)(7255, 7249, 7255) */
		reached[1][7249] = 1;
		;
		/* merge: j = (j-1)(7255, 7251, 7255) */
		reached[1][7251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7256, 7255) */
		reached[1][7256] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3349: // STATE 7251 - mutant_1.pml:386 - [j = (j-1)] (0:7255:1 - 13)
		IfNotBlocked
		reached[1][7251] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7256, 7255) */
		reached[1][7256] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3350: // STATE 7253 - mutant_1.pml:388 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][7253] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 3351: // STATE 7263 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7263] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3352: // STATE 7264 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7264] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3353: // STATE 7265 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (7285:0:1 - 1)
		IfNotBlocked
		reached[1][7265] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7285, 7266, 7285) */
		reached[1][7266] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7285, 7267, 7285) */
		reached[1][7267] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7285, 7283, 7285) */
		reached[1][7283] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3354: // STATE 7283 - mutant_1.pml:246 - [.(goto)] (0:7285:0 - 6)
		IfNotBlocked
		reached[1][7283] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3355: // STATE 7268 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (7285:0:1 - 1)
		IfNotBlocked
		reached[1][7268] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7285, 7269, 7285) */
		reached[1][7269] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7285, 7270, 7285) */
		reached[1][7270] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7285, 7283, 7285) */
		reached[1][7283] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3356: // STATE 7271 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7285:0:1 - 1)
		IfNotBlocked
		reached[1][7271] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7285, 7272, 7285) */
		reached[1][7272] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7285, 7273, 7285) */
		reached[1][7273] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7285, 7283, 7285) */
		reached[1][7283] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3357: // STATE 7274 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7285:0:1 - 1)
		IfNotBlocked
		reached[1][7274] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7285, 7275, 7285) */
		reached[1][7275] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7285, 7276, 7285) */
		reached[1][7276] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7285, 7283, 7285) */
		reached[1][7283] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3358: // STATE 7277 - mutant_1.pml:240 - [((START==ABORT))] (7285:0:1 - 1)
		IfNotBlocked
		reached[1][7277] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7285, 7278, 7285) */
		reached[1][7278] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7285, 7279, 7285) */
		reached[1][7279] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7285, 7283, 7285) */
		reached[1][7283] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3359: // STATE 7281 - mutant_1.pml:244 - [(1)] (7285:0:0 - 1)
		IfNotBlocked
		reached[1][7281] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7285, 7283, 7285) */
		reached[1][7283] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3360: // STATE 7285 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7285] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3361: // STATE 7287 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7287] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3362: // STATE 7290 - mutant_1.pml:252 - [(1)] (7388:0:1 - 1)
		IfNotBlocked
		reached[1][7290] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7388, 7292, 7388) */
		reached[1][7292] = 1;
		;
		/* merge: .(goto)(7388, 7382, 7388) */
		reached[1][7382] = 1;
		;
		/* merge: j = (j+1)(7388, 7384, 7388) */
		reached[1][7384] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7389, 7388) */
		reached[1][7389] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3363: // STATE 7294 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7294] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3364: // STATE 7295 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (7320:0:1 - 1)
		IfNotBlocked
		reached[1][7295] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7320, 7296, 7320) */
		reached[1][7296] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7320, 7297, 7320) */
		reached[1][7297] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7320, 7313, 7320) */
		reached[1][7313] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3365: // STATE 7313 - mutant_1.pml:276 - [.(goto)] (0:7320:0 - 6)
		IfNotBlocked
		reached[1][7313] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3366: // STATE 7298 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (7320:0:1 - 1)
		IfNotBlocked
		reached[1][7298] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7320, 7299, 7320) */
		reached[1][7299] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7320, 7300, 7320) */
		reached[1][7300] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7320, 7313, 7320) */
		reached[1][7313] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3367: // STATE 7301 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7320:0:1 - 1)
		IfNotBlocked
		reached[1][7301] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7320, 7302, 7320) */
		reached[1][7302] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7320, 7303, 7320) */
		reached[1][7303] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7320, 7313, 7320) */
		reached[1][7313] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3368: // STATE 7304 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7320:0:1 - 1)
		IfNotBlocked
		reached[1][7304] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7320, 7305, 7320) */
		reached[1][7305] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7320, 7306, 7320) */
		reached[1][7306] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7320, 7313, 7320) */
		reached[1][7313] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3369: // STATE 7307 - mutant_1.pml:270 - [((PAUSE==ABORT))] (7320:0:1 - 1)
		IfNotBlocked
		reached[1][7307] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7320, 7308, 7320) */
		reached[1][7308] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7320, 7309, 7320) */
		reached[1][7309] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7320, 7313, 7320) */
		reached[1][7313] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3370: // STATE 7311 - mutant_1.pml:274 - [(1)] (7320:0:0 - 1)
		IfNotBlocked
		reached[1][7311] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7320, 7313, 7320) */
		reached[1][7313] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3371: // STATE 7316 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7316] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3372: // STATE 7319 - mutant_1.pml:281 - [(1)] (7388:0:1 - 1)
		IfNotBlocked
		reached[1][7319] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7388, 7321, 7388) */
		reached[1][7321] = 1;
		;
		/* merge: .(goto)(7388, 7382, 7388) */
		reached[1][7382] = 1;
		;
		/* merge: j = (j+1)(7388, 7384, 7388) */
		reached[1][7384] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7389, 7388) */
		reached[1][7389] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3373: // STATE 7323 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7323] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3374: // STATE 7324 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (7349:0:1 - 1)
		IfNotBlocked
		reached[1][7324] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7349, 7325, 7349) */
		reached[1][7325] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7349, 7326, 7349) */
		reached[1][7326] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7349, 7342, 7349) */
		reached[1][7342] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3375: // STATE 7342 - mutant_1.pml:305 - [.(goto)] (0:7349:0 - 6)
		IfNotBlocked
		reached[1][7342] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3376: // STATE 7327 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (7349:0:1 - 1)
		IfNotBlocked
		reached[1][7327] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7349, 7328, 7349) */
		reached[1][7328] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7349, 7329, 7349) */
		reached[1][7329] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7349, 7342, 7349) */
		reached[1][7342] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3377: // STATE 7330 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7349:0:1 - 1)
		IfNotBlocked
		reached[1][7330] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7349, 7331, 7349) */
		reached[1][7331] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7349, 7332, 7349) */
		reached[1][7332] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7349, 7342, 7349) */
		reached[1][7342] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3378: // STATE 7333 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7349:0:1 - 1)
		IfNotBlocked
		reached[1][7333] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7349, 7334, 7349) */
		reached[1][7334] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7349, 7335, 7349) */
		reached[1][7335] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7349, 7342, 7349) */
		reached[1][7342] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3379: // STATE 7336 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (7349:0:1 - 1)
		IfNotBlocked
		reached[1][7336] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7349, 7337, 7349) */
		reached[1][7337] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7349, 7338, 7349) */
		reached[1][7338] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7349, 7342, 7349) */
		reached[1][7342] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3380: // STATE 7340 - mutant_1.pml:303 - [(1)] (7349:0:0 - 1)
		IfNotBlocked
		reached[1][7340] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7349, 7342, 7349) */
		reached[1][7342] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3381: // STATE 7345 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7345] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3382: // STATE 7348 - mutant_1.pml:310 - [(1)] (7388:0:1 - 1)
		IfNotBlocked
		reached[1][7348] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7388, 7350, 7388) */
		reached[1][7350] = 1;
		;
		/* merge: .(goto)(7388, 7382, 7388) */
		reached[1][7382] = 1;
		;
		/* merge: j = (j+1)(7388, 7384, 7388) */
		reached[1][7384] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7389, 7388) */
		reached[1][7389] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3383: // STATE 7352 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7352] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3384: // STATE 7353 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (7378:0:1 - 1)
		IfNotBlocked
		reached[1][7353] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7378, 7354, 7378) */
		reached[1][7354] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7378, 7355, 7378) */
		reached[1][7355] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7378, 7371, 7378) */
		reached[1][7371] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3385: // STATE 7371 - mutant_1.pml:334 - [.(goto)] (0:7378:0 - 6)
		IfNotBlocked
		reached[1][7371] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3386: // STATE 7356 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (7378:0:1 - 1)
		IfNotBlocked
		reached[1][7356] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7378, 7357, 7378) */
		reached[1][7357] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7378, 7358, 7378) */
		reached[1][7358] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7378, 7371, 7378) */
		reached[1][7371] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3387: // STATE 7359 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7378:0:1 - 1)
		IfNotBlocked
		reached[1][7359] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7378, 7360, 7378) */
		reached[1][7360] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7378, 7361, 7378) */
		reached[1][7361] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7378, 7371, 7378) */
		reached[1][7371] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3388: // STATE 7362 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7378:0:1 - 1)
		IfNotBlocked
		reached[1][7362] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7378, 7363, 7378) */
		reached[1][7363] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7378, 7364, 7378) */
		reached[1][7364] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7378, 7371, 7378) */
		reached[1][7371] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3389: // STATE 7365 - mutant_1.pml:328 - [((STOP==ABORT))] (7378:0:1 - 1)
		IfNotBlocked
		reached[1][7365] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7378, 7366, 7378) */
		reached[1][7366] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7378, 7367, 7378) */
		reached[1][7367] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7378, 7371, 7378) */
		reached[1][7371] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3390: // STATE 7369 - mutant_1.pml:332 - [(1)] (7378:0:0 - 1)
		IfNotBlocked
		reached[1][7369] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7378, 7371, 7378) */
		reached[1][7371] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3391: // STATE 7374 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7374] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3392: // STATE 7377 - mutant_1.pml:339 - [(1)] (7388:0:1 - 1)
		IfNotBlocked
		reached[1][7377] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7388, 7379, 7388) */
		reached[1][7379] = 1;
		;
		/* merge: .(goto)(7388, 7382, 7388) */
		reached[1][7382] = 1;
		;
		/* merge: j = (j+1)(7388, 7384, 7388) */
		reached[1][7384] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7389, 7388) */
		reached[1][7389] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3393: // STATE 7384 - mutant_1.pml:375 - [j = (j+1)] (0:7388:1 - 13)
		IfNotBlocked
		reached[1][7384] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7389, 7388) */
		reached[1][7389] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3394: // STATE 7386 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7386] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3395: // STATE 7392 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7392] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3396: // STATE 7393 - mutant_1.pml:405 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7393] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3397: // STATE 7394 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7394] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3398: // STATE 7396 - mutant_1.pml:407 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7396] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3399: // STATE 7397 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7397] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3400: // STATE 7399 - mutant_1.pml:409 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7399] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3401: // STATE 7400 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7400] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3402: // STATE 7402 - mutant_1.pml:411 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7402] = 1;
		if (!((8==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3403: // STATE 7403 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7403] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3404: // STATE 7407 - mutant_1.pml:414 - [j = (j+1)] (0:7411:1 - 5)
		IfNotBlocked
		reached[1][7407] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7412, 7411) */
		reached[1][7412] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3405: // STATE 7409 - mutant_1.pml:416 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][7409] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 3406: // STATE 7420 - mutant_1.pml:449 - [((5==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7420] = 1;
		if (!((5==10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3407: // STATE 7421 - mutant_1.pml:422 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7421] = 1;
		if (!(((6==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3408: // STATE 7422 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7422] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3409: // STATE 7424 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7424] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3410: // STATE 7425 - mutant_1.pml:394 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7425] = 1;
		if (!(((6==9)||(6==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3411: // STATE 7426 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7426] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3412: // STATE 7427 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7427] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3413: // STATE 7428 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (7448:0:1 - 1)
		IfNotBlocked
		reached[1][7428] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7448, 7429, 7448) */
		reached[1][7429] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7448, 7430, 7448) */
		reached[1][7430] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7448, 7446, 7448) */
		reached[1][7446] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3414: // STATE 7446 - mutant_1.pml:246 - [.(goto)] (0:7448:0 - 6)
		IfNotBlocked
		reached[1][7446] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3415: // STATE 7431 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (7448:0:1 - 1)
		IfNotBlocked
		reached[1][7431] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7448, 7432, 7448) */
		reached[1][7432] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7448, 7433, 7448) */
		reached[1][7433] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7448, 7446, 7448) */
		reached[1][7446] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3416: // STATE 7434 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7448:0:1 - 1)
		IfNotBlocked
		reached[1][7434] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7448, 7435, 7448) */
		reached[1][7435] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7448, 7436, 7448) */
		reached[1][7436] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7448, 7446, 7448) */
		reached[1][7446] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3417: // STATE 7437 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7448:0:1 - 1)
		IfNotBlocked
		reached[1][7437] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7448, 7438, 7448) */
		reached[1][7438] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7448, 7439, 7448) */
		reached[1][7439] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7448, 7446, 7448) */
		reached[1][7446] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3418: // STATE 7440 - mutant_1.pml:240 - [((START==ABORT))] (7448:0:1 - 1)
		IfNotBlocked
		reached[1][7440] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7448, 7441, 7448) */
		reached[1][7441] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7448, 7442, 7448) */
		reached[1][7442] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7448, 7446, 7448) */
		reached[1][7446] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3419: // STATE 7444 - mutant_1.pml:244 - [(1)] (7448:0:0 - 1)
		IfNotBlocked
		reached[1][7444] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7448, 7446, 7448) */
		reached[1][7446] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3420: // STATE 7448 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7448] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3421: // STATE 7450 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7450] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3422: // STATE 7453 - mutant_1.pml:252 - [(1)] (7551:0:1 - 1)
		IfNotBlocked
		reached[1][7453] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7551, 7455, 7551) */
		reached[1][7455] = 1;
		;
		/* merge: .(goto)(7551, 7545, 7551) */
		reached[1][7545] = 1;
		;
		/* merge: j = (j+1)(7551, 7547, 7551) */
		reached[1][7547] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7552, 7551) */
		reached[1][7552] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3423: // STATE 7457 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7457] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3424: // STATE 7458 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (7483:0:1 - 1)
		IfNotBlocked
		reached[1][7458] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7483, 7459, 7483) */
		reached[1][7459] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7483, 7460, 7483) */
		reached[1][7460] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7483, 7476, 7483) */
		reached[1][7476] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3425: // STATE 7476 - mutant_1.pml:276 - [.(goto)] (0:7483:0 - 6)
		IfNotBlocked
		reached[1][7476] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3426: // STATE 7461 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (7483:0:1 - 1)
		IfNotBlocked
		reached[1][7461] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7483, 7462, 7483) */
		reached[1][7462] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7483, 7463, 7483) */
		reached[1][7463] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7483, 7476, 7483) */
		reached[1][7476] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3427: // STATE 7464 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7483:0:1 - 1)
		IfNotBlocked
		reached[1][7464] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7483, 7465, 7483) */
		reached[1][7465] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7483, 7466, 7483) */
		reached[1][7466] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7483, 7476, 7483) */
		reached[1][7476] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3428: // STATE 7467 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7483:0:1 - 1)
		IfNotBlocked
		reached[1][7467] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7483, 7468, 7483) */
		reached[1][7468] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7483, 7469, 7483) */
		reached[1][7469] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7483, 7476, 7483) */
		reached[1][7476] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3429: // STATE 7470 - mutant_1.pml:270 - [((PAUSE==ABORT))] (7483:0:1 - 1)
		IfNotBlocked
		reached[1][7470] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7483, 7471, 7483) */
		reached[1][7471] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7483, 7472, 7483) */
		reached[1][7472] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7483, 7476, 7483) */
		reached[1][7476] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3430: // STATE 7474 - mutant_1.pml:274 - [(1)] (7483:0:0 - 1)
		IfNotBlocked
		reached[1][7474] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7483, 7476, 7483) */
		reached[1][7476] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3431: // STATE 7479 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7479] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3432: // STATE 7482 - mutant_1.pml:281 - [(1)] (7551:0:1 - 1)
		IfNotBlocked
		reached[1][7482] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7551, 7484, 7551) */
		reached[1][7484] = 1;
		;
		/* merge: .(goto)(7551, 7545, 7551) */
		reached[1][7545] = 1;
		;
		/* merge: j = (j+1)(7551, 7547, 7551) */
		reached[1][7547] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7552, 7551) */
		reached[1][7552] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3433: // STATE 7486 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7486] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3434: // STATE 7487 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (7512:0:1 - 1)
		IfNotBlocked
		reached[1][7487] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7512, 7488, 7512) */
		reached[1][7488] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7512, 7489, 7512) */
		reached[1][7489] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7512, 7505, 7512) */
		reached[1][7505] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3435: // STATE 7505 - mutant_1.pml:305 - [.(goto)] (0:7512:0 - 6)
		IfNotBlocked
		reached[1][7505] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3436: // STATE 7490 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (7512:0:1 - 1)
		IfNotBlocked
		reached[1][7490] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7512, 7491, 7512) */
		reached[1][7491] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7512, 7492, 7512) */
		reached[1][7492] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7512, 7505, 7512) */
		reached[1][7505] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3437: // STATE 7493 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7512:0:1 - 1)
		IfNotBlocked
		reached[1][7493] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7512, 7494, 7512) */
		reached[1][7494] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7512, 7495, 7512) */
		reached[1][7495] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7512, 7505, 7512) */
		reached[1][7505] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3438: // STATE 7496 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7512:0:1 - 1)
		IfNotBlocked
		reached[1][7496] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7512, 7497, 7512) */
		reached[1][7497] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7512, 7498, 7512) */
		reached[1][7498] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7512, 7505, 7512) */
		reached[1][7505] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3439: // STATE 7499 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (7512:0:1 - 1)
		IfNotBlocked
		reached[1][7499] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7512, 7500, 7512) */
		reached[1][7500] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7512, 7501, 7512) */
		reached[1][7501] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7512, 7505, 7512) */
		reached[1][7505] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3440: // STATE 7503 - mutant_1.pml:303 - [(1)] (7512:0:0 - 1)
		IfNotBlocked
		reached[1][7503] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7512, 7505, 7512) */
		reached[1][7505] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3441: // STATE 7508 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7508] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3442: // STATE 7511 - mutant_1.pml:310 - [(1)] (7551:0:1 - 1)
		IfNotBlocked
		reached[1][7511] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7551, 7513, 7551) */
		reached[1][7513] = 1;
		;
		/* merge: .(goto)(7551, 7545, 7551) */
		reached[1][7545] = 1;
		;
		/* merge: j = (j+1)(7551, 7547, 7551) */
		reached[1][7547] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7552, 7551) */
		reached[1][7552] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3443: // STATE 7515 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7515] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3444: // STATE 7516 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (7541:0:1 - 1)
		IfNotBlocked
		reached[1][7516] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7541, 7517, 7541) */
		reached[1][7517] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7541, 7518, 7541) */
		reached[1][7518] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7541, 7534, 7541) */
		reached[1][7534] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3445: // STATE 7534 - mutant_1.pml:334 - [.(goto)] (0:7541:0 - 6)
		IfNotBlocked
		reached[1][7534] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3446: // STATE 7519 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (7541:0:1 - 1)
		IfNotBlocked
		reached[1][7519] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7541, 7520, 7541) */
		reached[1][7520] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7541, 7521, 7541) */
		reached[1][7521] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7541, 7534, 7541) */
		reached[1][7534] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3447: // STATE 7522 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7541:0:1 - 1)
		IfNotBlocked
		reached[1][7522] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7541, 7523, 7541) */
		reached[1][7523] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7541, 7524, 7541) */
		reached[1][7524] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7541, 7534, 7541) */
		reached[1][7534] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3448: // STATE 7525 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7541:0:1 - 1)
		IfNotBlocked
		reached[1][7525] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7541, 7526, 7541) */
		reached[1][7526] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7541, 7527, 7541) */
		reached[1][7527] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7541, 7534, 7541) */
		reached[1][7534] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3449: // STATE 7528 - mutant_1.pml:328 - [((STOP==ABORT))] (7541:0:1 - 1)
		IfNotBlocked
		reached[1][7528] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7541, 7529, 7541) */
		reached[1][7529] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7541, 7530, 7541) */
		reached[1][7530] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7541, 7534, 7541) */
		reached[1][7534] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3450: // STATE 7532 - mutant_1.pml:332 - [(1)] (7541:0:0 - 1)
		IfNotBlocked
		reached[1][7532] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7541, 7534, 7541) */
		reached[1][7534] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3451: // STATE 7537 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7537] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3452: // STATE 7540 - mutant_1.pml:339 - [(1)] (7551:0:1 - 1)
		IfNotBlocked
		reached[1][7540] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7551, 7542, 7551) */
		reached[1][7542] = 1;
		;
		/* merge: .(goto)(7551, 7545, 7551) */
		reached[1][7545] = 1;
		;
		/* merge: j = (j+1)(7551, 7547, 7551) */
		reached[1][7547] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7552, 7551) */
		reached[1][7552] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3453: // STATE 7547 - mutant_1.pml:375 - [j = (j+1)] (0:7551:1 - 13)
		IfNotBlocked
		reached[1][7547] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7552, 7551) */
		reached[1][7552] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3454: // STATE 7549 - mutant_1.pml:377 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][7549] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 3455: // STATE 7556 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7556] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3456: // STATE 7557 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7557] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3457: // STATE 7558 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7558] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3458: // STATE 7559 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (7579:0:1 - 1)
		IfNotBlocked
		reached[1][7559] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7579, 7560, 7579) */
		reached[1][7560] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7579, 7561, 7579) */
		reached[1][7561] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7579, 7577, 7579) */
		reached[1][7577] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3459: // STATE 7577 - mutant_1.pml:246 - [.(goto)] (0:7579:0 - 6)
		IfNotBlocked
		reached[1][7577] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3460: // STATE 7562 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (7579:0:1 - 1)
		IfNotBlocked
		reached[1][7562] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7579, 7563, 7579) */
		reached[1][7563] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7579, 7564, 7579) */
		reached[1][7564] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7579, 7577, 7579) */
		reached[1][7577] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3461: // STATE 7565 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7579:0:1 - 1)
		IfNotBlocked
		reached[1][7565] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7579, 7566, 7579) */
		reached[1][7566] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7579, 7567, 7579) */
		reached[1][7567] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7579, 7577, 7579) */
		reached[1][7577] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3462: // STATE 7568 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7579:0:1 - 1)
		IfNotBlocked
		reached[1][7568] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7579, 7569, 7579) */
		reached[1][7569] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7579, 7570, 7579) */
		reached[1][7570] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7579, 7577, 7579) */
		reached[1][7577] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3463: // STATE 7571 - mutant_1.pml:240 - [((START==ABORT))] (7579:0:1 - 1)
		IfNotBlocked
		reached[1][7571] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7579, 7572, 7579) */
		reached[1][7572] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7579, 7573, 7579) */
		reached[1][7573] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7579, 7577, 7579) */
		reached[1][7577] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3464: // STATE 7575 - mutant_1.pml:244 - [(1)] (7579:0:0 - 1)
		IfNotBlocked
		reached[1][7575] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7579, 7577, 7579) */
		reached[1][7577] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3465: // STATE 7579 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7579] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3466: // STATE 7581 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7581] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3467: // STATE 7584 - mutant_1.pml:252 - [(1)] (7682:0:1 - 1)
		IfNotBlocked
		reached[1][7584] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7682, 7586, 7682) */
		reached[1][7586] = 1;
		;
		/* merge: .(goto)(7682, 7676, 7682) */
		reached[1][7676] = 1;
		;
		/* merge: j = (j-1)(7682, 7678, 7682) */
		reached[1][7678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7683, 7682) */
		reached[1][7683] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3468: // STATE 7588 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7588] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3469: // STATE 7589 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (7614:0:1 - 1)
		IfNotBlocked
		reached[1][7589] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7614, 7590, 7614) */
		reached[1][7590] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7614, 7591, 7614) */
		reached[1][7591] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7614, 7607, 7614) */
		reached[1][7607] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3470: // STATE 7607 - mutant_1.pml:276 - [.(goto)] (0:7614:0 - 6)
		IfNotBlocked
		reached[1][7607] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3471: // STATE 7592 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (7614:0:1 - 1)
		IfNotBlocked
		reached[1][7592] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7614, 7593, 7614) */
		reached[1][7593] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7614, 7594, 7614) */
		reached[1][7594] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7614, 7607, 7614) */
		reached[1][7607] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3472: // STATE 7595 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7614:0:1 - 1)
		IfNotBlocked
		reached[1][7595] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7614, 7596, 7614) */
		reached[1][7596] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7614, 7597, 7614) */
		reached[1][7597] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7614, 7607, 7614) */
		reached[1][7607] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3473: // STATE 7598 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7614:0:1 - 1)
		IfNotBlocked
		reached[1][7598] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7614, 7599, 7614) */
		reached[1][7599] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7614, 7600, 7614) */
		reached[1][7600] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7614, 7607, 7614) */
		reached[1][7607] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3474: // STATE 7601 - mutant_1.pml:270 - [((PAUSE==ABORT))] (7614:0:1 - 1)
		IfNotBlocked
		reached[1][7601] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7614, 7602, 7614) */
		reached[1][7602] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7614, 7603, 7614) */
		reached[1][7603] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7614, 7607, 7614) */
		reached[1][7607] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3475: // STATE 7605 - mutant_1.pml:274 - [(1)] (7614:0:0 - 1)
		IfNotBlocked
		reached[1][7605] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7614, 7607, 7614) */
		reached[1][7607] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3476: // STATE 7610 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7610] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3477: // STATE 7613 - mutant_1.pml:281 - [(1)] (7682:0:1 - 1)
		IfNotBlocked
		reached[1][7613] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7682, 7615, 7682) */
		reached[1][7615] = 1;
		;
		/* merge: .(goto)(7682, 7676, 7682) */
		reached[1][7676] = 1;
		;
		/* merge: j = (j-1)(7682, 7678, 7682) */
		reached[1][7678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7683, 7682) */
		reached[1][7683] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3478: // STATE 7617 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7617] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3479: // STATE 7618 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (7643:0:1 - 1)
		IfNotBlocked
		reached[1][7618] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7643, 7619, 7643) */
		reached[1][7619] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7643, 7620, 7643) */
		reached[1][7620] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7643, 7636, 7643) */
		reached[1][7636] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3480: // STATE 7636 - mutant_1.pml:305 - [.(goto)] (0:7643:0 - 6)
		IfNotBlocked
		reached[1][7636] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3481: // STATE 7621 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (7643:0:1 - 1)
		IfNotBlocked
		reached[1][7621] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7643, 7622, 7643) */
		reached[1][7622] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7643, 7623, 7643) */
		reached[1][7623] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7643, 7636, 7643) */
		reached[1][7636] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3482: // STATE 7624 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7643:0:1 - 1)
		IfNotBlocked
		reached[1][7624] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7643, 7625, 7643) */
		reached[1][7625] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7643, 7626, 7643) */
		reached[1][7626] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7643, 7636, 7643) */
		reached[1][7636] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3483: // STATE 7627 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7643:0:1 - 1)
		IfNotBlocked
		reached[1][7627] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7643, 7628, 7643) */
		reached[1][7628] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7643, 7629, 7643) */
		reached[1][7629] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7643, 7636, 7643) */
		reached[1][7636] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3484: // STATE 7630 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (7643:0:1 - 1)
		IfNotBlocked
		reached[1][7630] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7643, 7631, 7643) */
		reached[1][7631] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7643, 7632, 7643) */
		reached[1][7632] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7643, 7636, 7643) */
		reached[1][7636] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3485: // STATE 7634 - mutant_1.pml:303 - [(1)] (7643:0:0 - 1)
		IfNotBlocked
		reached[1][7634] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7643, 7636, 7643) */
		reached[1][7636] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3486: // STATE 7639 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7639] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3487: // STATE 7642 - mutant_1.pml:310 - [(1)] (7682:0:1 - 1)
		IfNotBlocked
		reached[1][7642] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7682, 7644, 7682) */
		reached[1][7644] = 1;
		;
		/* merge: .(goto)(7682, 7676, 7682) */
		reached[1][7676] = 1;
		;
		/* merge: j = (j-1)(7682, 7678, 7682) */
		reached[1][7678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7683, 7682) */
		reached[1][7683] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3488: // STATE 7646 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7646] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3489: // STATE 7647 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (7672:0:1 - 1)
		IfNotBlocked
		reached[1][7647] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7672, 7648, 7672) */
		reached[1][7648] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7672, 7649, 7672) */
		reached[1][7649] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7672, 7665, 7672) */
		reached[1][7665] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3490: // STATE 7665 - mutant_1.pml:334 - [.(goto)] (0:7672:0 - 6)
		IfNotBlocked
		reached[1][7665] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3491: // STATE 7650 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (7672:0:1 - 1)
		IfNotBlocked
		reached[1][7650] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7672, 7651, 7672) */
		reached[1][7651] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7672, 7652, 7672) */
		reached[1][7652] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7672, 7665, 7672) */
		reached[1][7665] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3492: // STATE 7653 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7672:0:1 - 1)
		IfNotBlocked
		reached[1][7653] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7672, 7654, 7672) */
		reached[1][7654] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7672, 7655, 7672) */
		reached[1][7655] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7672, 7665, 7672) */
		reached[1][7665] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3493: // STATE 7656 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7672:0:1 - 1)
		IfNotBlocked
		reached[1][7656] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7672, 7657, 7672) */
		reached[1][7657] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7672, 7658, 7672) */
		reached[1][7658] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7672, 7665, 7672) */
		reached[1][7665] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3494: // STATE 7659 - mutant_1.pml:328 - [((STOP==ABORT))] (7672:0:1 - 1)
		IfNotBlocked
		reached[1][7659] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7672, 7660, 7672) */
		reached[1][7660] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7672, 7661, 7672) */
		reached[1][7661] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7672, 7665, 7672) */
		reached[1][7665] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3495: // STATE 7663 - mutant_1.pml:332 - [(1)] (7672:0:0 - 1)
		IfNotBlocked
		reached[1][7663] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7672, 7665, 7672) */
		reached[1][7665] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3496: // STATE 7668 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7668] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3497: // STATE 7671 - mutant_1.pml:339 - [(1)] (7682:0:1 - 1)
		IfNotBlocked
		reached[1][7671] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7682, 7673, 7682) */
		reached[1][7673] = 1;
		;
		/* merge: .(goto)(7682, 7676, 7682) */
		reached[1][7676] = 1;
		;
		/* merge: j = (j-1)(7682, 7678, 7682) */
		reached[1][7678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7683, 7682) */
		reached[1][7683] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3498: // STATE 7678 - mutant_1.pml:386 - [j = (j-1)] (0:7682:1 - 13)
		IfNotBlocked
		reached[1][7678] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7683, 7682) */
		reached[1][7683] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3499: // STATE 7680 - mutant_1.pml:388 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][7680] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 3500: // STATE 7690 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7690] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3501: // STATE 7691 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7691] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3502: // STATE 7692 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (7712:0:1 - 1)
		IfNotBlocked
		reached[1][7692] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7712, 7693, 7712) */
		reached[1][7693] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7712, 7694, 7712) */
		reached[1][7694] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7712, 7710, 7712) */
		reached[1][7710] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3503: // STATE 7710 - mutant_1.pml:246 - [.(goto)] (0:7712:0 - 6)
		IfNotBlocked
		reached[1][7710] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3504: // STATE 7695 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (7712:0:1 - 1)
		IfNotBlocked
		reached[1][7695] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7712, 7696, 7712) */
		reached[1][7696] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7712, 7697, 7712) */
		reached[1][7697] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7712, 7710, 7712) */
		reached[1][7710] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3505: // STATE 7698 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7712:0:1 - 1)
		IfNotBlocked
		reached[1][7698] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7712, 7699, 7712) */
		reached[1][7699] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7712, 7700, 7712) */
		reached[1][7700] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7712, 7710, 7712) */
		reached[1][7710] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3506: // STATE 7701 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7712:0:1 - 1)
		IfNotBlocked
		reached[1][7701] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7712, 7702, 7712) */
		reached[1][7702] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7712, 7703, 7712) */
		reached[1][7703] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7712, 7710, 7712) */
		reached[1][7710] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3507: // STATE 7704 - mutant_1.pml:240 - [((START==ABORT))] (7712:0:1 - 1)
		IfNotBlocked
		reached[1][7704] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7712, 7705, 7712) */
		reached[1][7705] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7712, 7706, 7712) */
		reached[1][7706] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7712, 7710, 7712) */
		reached[1][7710] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3508: // STATE 7708 - mutant_1.pml:244 - [(1)] (7712:0:0 - 1)
		IfNotBlocked
		reached[1][7708] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7712, 7710, 7712) */
		reached[1][7710] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3509: // STATE 7712 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7712] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3510: // STATE 7714 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7714] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3511: // STATE 7717 - mutant_1.pml:252 - [(1)] (7815:0:1 - 1)
		IfNotBlocked
		reached[1][7717] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7815, 7719, 7815) */
		reached[1][7719] = 1;
		;
		/* merge: .(goto)(7815, 7809, 7815) */
		reached[1][7809] = 1;
		;
		/* merge: j = (j+1)(7815, 7811, 7815) */
		reached[1][7811] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7816, 7815) */
		reached[1][7816] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3512: // STATE 7721 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7721] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3513: // STATE 7722 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (7747:0:1 - 1)
		IfNotBlocked
		reached[1][7722] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7747, 7723, 7747) */
		reached[1][7723] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7747, 7724, 7747) */
		reached[1][7724] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7747, 7740, 7747) */
		reached[1][7740] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3514: // STATE 7740 - mutant_1.pml:276 - [.(goto)] (0:7747:0 - 6)
		IfNotBlocked
		reached[1][7740] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3515: // STATE 7725 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (7747:0:1 - 1)
		IfNotBlocked
		reached[1][7725] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7747, 7726, 7747) */
		reached[1][7726] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7747, 7727, 7747) */
		reached[1][7727] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7747, 7740, 7747) */
		reached[1][7740] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3516: // STATE 7728 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7747:0:1 - 1)
		IfNotBlocked
		reached[1][7728] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7747, 7729, 7747) */
		reached[1][7729] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7747, 7730, 7747) */
		reached[1][7730] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7747, 7740, 7747) */
		reached[1][7740] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3517: // STATE 7731 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7747:0:1 - 1)
		IfNotBlocked
		reached[1][7731] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7747, 7732, 7747) */
		reached[1][7732] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7747, 7733, 7747) */
		reached[1][7733] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7747, 7740, 7747) */
		reached[1][7740] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3518: // STATE 7734 - mutant_1.pml:270 - [((PAUSE==ABORT))] (7747:0:1 - 1)
		IfNotBlocked
		reached[1][7734] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7747, 7735, 7747) */
		reached[1][7735] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7747, 7736, 7747) */
		reached[1][7736] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7747, 7740, 7747) */
		reached[1][7740] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3519: // STATE 7738 - mutant_1.pml:274 - [(1)] (7747:0:0 - 1)
		IfNotBlocked
		reached[1][7738] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7747, 7740, 7747) */
		reached[1][7740] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3520: // STATE 7743 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7743] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3521: // STATE 7746 - mutant_1.pml:281 - [(1)] (7815:0:1 - 1)
		IfNotBlocked
		reached[1][7746] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7815, 7748, 7815) */
		reached[1][7748] = 1;
		;
		/* merge: .(goto)(7815, 7809, 7815) */
		reached[1][7809] = 1;
		;
		/* merge: j = (j+1)(7815, 7811, 7815) */
		reached[1][7811] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7816, 7815) */
		reached[1][7816] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3522: // STATE 7750 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7750] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3523: // STATE 7751 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (7776:0:1 - 1)
		IfNotBlocked
		reached[1][7751] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7776, 7752, 7776) */
		reached[1][7752] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7776, 7753, 7776) */
		reached[1][7753] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7776, 7769, 7776) */
		reached[1][7769] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3524: // STATE 7769 - mutant_1.pml:305 - [.(goto)] (0:7776:0 - 6)
		IfNotBlocked
		reached[1][7769] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3525: // STATE 7754 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (7776:0:1 - 1)
		IfNotBlocked
		reached[1][7754] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7776, 7755, 7776) */
		reached[1][7755] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7776, 7756, 7776) */
		reached[1][7756] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7776, 7769, 7776) */
		reached[1][7769] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3526: // STATE 7757 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7776:0:1 - 1)
		IfNotBlocked
		reached[1][7757] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7776, 7758, 7776) */
		reached[1][7758] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7776, 7759, 7776) */
		reached[1][7759] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7776, 7769, 7776) */
		reached[1][7769] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3527: // STATE 7760 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7776:0:1 - 1)
		IfNotBlocked
		reached[1][7760] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7776, 7761, 7776) */
		reached[1][7761] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7776, 7762, 7776) */
		reached[1][7762] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7776, 7769, 7776) */
		reached[1][7769] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3528: // STATE 7763 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (7776:0:1 - 1)
		IfNotBlocked
		reached[1][7763] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7776, 7764, 7776) */
		reached[1][7764] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7776, 7765, 7776) */
		reached[1][7765] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7776, 7769, 7776) */
		reached[1][7769] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3529: // STATE 7767 - mutant_1.pml:303 - [(1)] (7776:0:0 - 1)
		IfNotBlocked
		reached[1][7767] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7776, 7769, 7776) */
		reached[1][7769] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3530: // STATE 7772 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7772] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3531: // STATE 7775 - mutant_1.pml:310 - [(1)] (7815:0:1 - 1)
		IfNotBlocked
		reached[1][7775] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7815, 7777, 7815) */
		reached[1][7777] = 1;
		;
		/* merge: .(goto)(7815, 7809, 7815) */
		reached[1][7809] = 1;
		;
		/* merge: j = (j+1)(7815, 7811, 7815) */
		reached[1][7811] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7816, 7815) */
		reached[1][7816] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3532: // STATE 7779 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7779] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3533: // STATE 7780 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (7805:0:1 - 1)
		IfNotBlocked
		reached[1][7780] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7805, 7781, 7805) */
		reached[1][7781] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7805, 7782, 7805) */
		reached[1][7782] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7805, 7798, 7805) */
		reached[1][7798] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3534: // STATE 7798 - mutant_1.pml:334 - [.(goto)] (0:7805:0 - 6)
		IfNotBlocked
		reached[1][7798] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3535: // STATE 7783 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (7805:0:1 - 1)
		IfNotBlocked
		reached[1][7783] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7805, 7784, 7805) */
		reached[1][7784] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7805, 7785, 7805) */
		reached[1][7785] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7805, 7798, 7805) */
		reached[1][7798] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3536: // STATE 7786 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7805:0:1 - 1)
		IfNotBlocked
		reached[1][7786] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7805, 7787, 7805) */
		reached[1][7787] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7805, 7788, 7805) */
		reached[1][7788] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7805, 7798, 7805) */
		reached[1][7798] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3537: // STATE 7789 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7805:0:1 - 1)
		IfNotBlocked
		reached[1][7789] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7805, 7790, 7805) */
		reached[1][7790] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7805, 7791, 7805) */
		reached[1][7791] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7805, 7798, 7805) */
		reached[1][7798] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3538: // STATE 7792 - mutant_1.pml:328 - [((STOP==ABORT))] (7805:0:1 - 1)
		IfNotBlocked
		reached[1][7792] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7805, 7793, 7805) */
		reached[1][7793] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7805, 7794, 7805) */
		reached[1][7794] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7805, 7798, 7805) */
		reached[1][7798] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3539: // STATE 7796 - mutant_1.pml:332 - [(1)] (7805:0:0 - 1)
		IfNotBlocked
		reached[1][7796] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7805, 7798, 7805) */
		reached[1][7798] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3540: // STATE 7801 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7801] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3541: // STATE 7804 - mutant_1.pml:339 - [(1)] (7815:0:1 - 1)
		IfNotBlocked
		reached[1][7804] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7815, 7806, 7815) */
		reached[1][7806] = 1;
		;
		/* merge: .(goto)(7815, 7809, 7815) */
		reached[1][7809] = 1;
		;
		/* merge: j = (j+1)(7815, 7811, 7815) */
		reached[1][7811] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7816, 7815) */
		reached[1][7816] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3542: // STATE 7811 - mutant_1.pml:375 - [j = (j+1)] (0:7815:1 - 13)
		IfNotBlocked
		reached[1][7811] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7816, 7815) */
		reached[1][7816] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3543: // STATE 7813 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7813] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3544: // STATE 7819 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7819] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3545: // STATE 7820 - mutant_1.pml:405 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7820] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3546: // STATE 7821 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7821] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3547: // STATE 7823 - mutant_1.pml:407 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7823] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3548: // STATE 7824 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7824] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3549: // STATE 7826 - mutant_1.pml:409 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7826] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3550: // STATE 7827 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7827] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3551: // STATE 7829 - mutant_1.pml:411 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7829] = 1;
		if (!((6==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3552: // STATE 7830 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7830] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3553: // STATE 7834 - mutant_1.pml:414 - [j = (j+1)] (0:7838:1 - 5)
		IfNotBlocked
		reached[1][7834] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7839, 7838) */
		reached[1][7839] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3554: // STATE 7836 - mutant_1.pml:416 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][7836] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 3555: // STATE 7847 - mutant_1.pml:451 - [(((5==ABORTING)||(5==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7847] = 1;
		if (!(((5==4)||(5==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3556: // STATE 7848 - mutant_1.pml:422 - [(((2==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7848] = 1;
		if (!(((2==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3557: // STATE 7849 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7849] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3558: // STATE 7851 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7851] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3559: // STATE 7852 - mutant_1.pml:394 - [(((2==START)||(2==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7852] = 1;
		if (!(((2==9)||(2==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3560: // STATE 7853 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7853] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3561: // STATE 7854 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7854] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3562: // STATE 7855 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (7875:0:1 - 1)
		IfNotBlocked
		reached[1][7855] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7875, 7856, 7875) */
		reached[1][7856] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7875, 7857, 7875) */
		reached[1][7857] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7875, 7873, 7875) */
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3563: // STATE 7873 - mutant_1.pml:246 - [.(goto)] (0:7875:0 - 6)
		IfNotBlocked
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3564: // STATE 7858 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (7875:0:1 - 1)
		IfNotBlocked
		reached[1][7858] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7875, 7859, 7875) */
		reached[1][7859] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7875, 7860, 7875) */
		reached[1][7860] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7875, 7873, 7875) */
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3565: // STATE 7861 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7875:0:1 - 1)
		IfNotBlocked
		reached[1][7861] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7875, 7862, 7875) */
		reached[1][7862] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7875, 7863, 7875) */
		reached[1][7863] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7875, 7873, 7875) */
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3566: // STATE 7864 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7875:0:1 - 1)
		IfNotBlocked
		reached[1][7864] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7875, 7865, 7875) */
		reached[1][7865] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7875, 7866, 7875) */
		reached[1][7866] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7875, 7873, 7875) */
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3567: // STATE 7867 - mutant_1.pml:240 - [((START==ABORT))] (7875:0:1 - 1)
		IfNotBlocked
		reached[1][7867] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7875, 7868, 7875) */
		reached[1][7868] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7875, 7869, 7875) */
		reached[1][7869] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7875, 7873, 7875) */
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3568: // STATE 7871 - mutant_1.pml:244 - [(1)] (7875:0:0 - 1)
		IfNotBlocked
		reached[1][7871] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7875, 7873, 7875) */
		reached[1][7873] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3569: // STATE 7875 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7875] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3570: // STATE 7877 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7877] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3571: // STATE 7880 - mutant_1.pml:252 - [(1)] (7978:0:1 - 1)
		IfNotBlocked
		reached[1][7880] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7978, 7882, 7978) */
		reached[1][7882] = 1;
		;
		/* merge: .(goto)(7978, 7972, 7978) */
		reached[1][7972] = 1;
		;
		/* merge: j = (j+1)(7978, 7974, 7978) */
		reached[1][7974] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7979, 7978) */
		reached[1][7979] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3572: // STATE 7884 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7884] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3573: // STATE 7885 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (7910:0:1 - 1)
		IfNotBlocked
		reached[1][7885] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7910, 7886, 7910) */
		reached[1][7886] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7910, 7887, 7910) */
		reached[1][7887] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7910, 7903, 7910) */
		reached[1][7903] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3574: // STATE 7903 - mutant_1.pml:276 - [.(goto)] (0:7910:0 - 6)
		IfNotBlocked
		reached[1][7903] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3575: // STATE 7888 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (7910:0:1 - 1)
		IfNotBlocked
		reached[1][7888] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7910, 7889, 7910) */
		reached[1][7889] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7910, 7890, 7910) */
		reached[1][7890] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7910, 7903, 7910) */
		reached[1][7903] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3576: // STATE 7891 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7910:0:1 - 1)
		IfNotBlocked
		reached[1][7891] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7910, 7892, 7910) */
		reached[1][7892] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7910, 7893, 7910) */
		reached[1][7893] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7910, 7903, 7910) */
		reached[1][7903] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3577: // STATE 7894 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7910:0:1 - 1)
		IfNotBlocked
		reached[1][7894] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7910, 7895, 7910) */
		reached[1][7895] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7910, 7896, 7910) */
		reached[1][7896] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7910, 7903, 7910) */
		reached[1][7903] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3578: // STATE 7897 - mutant_1.pml:270 - [((PAUSE==ABORT))] (7910:0:1 - 1)
		IfNotBlocked
		reached[1][7897] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7910, 7898, 7910) */
		reached[1][7898] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7910, 7899, 7910) */
		reached[1][7899] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7910, 7903, 7910) */
		reached[1][7903] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3579: // STATE 7901 - mutant_1.pml:274 - [(1)] (7910:0:0 - 1)
		IfNotBlocked
		reached[1][7901] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7910, 7903, 7910) */
		reached[1][7903] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3580: // STATE 7906 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7906] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3581: // STATE 7909 - mutant_1.pml:281 - [(1)] (7978:0:1 - 1)
		IfNotBlocked
		reached[1][7909] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7978, 7911, 7978) */
		reached[1][7911] = 1;
		;
		/* merge: .(goto)(7978, 7972, 7978) */
		reached[1][7972] = 1;
		;
		/* merge: j = (j+1)(7978, 7974, 7978) */
		reached[1][7974] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7979, 7978) */
		reached[1][7979] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3582: // STATE 7913 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7913] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3583: // STATE 7914 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (7939:0:1 - 1)
		IfNotBlocked
		reached[1][7914] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7939, 7915, 7939) */
		reached[1][7915] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7939, 7916, 7939) */
		reached[1][7916] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7939, 7932, 7939) */
		reached[1][7932] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3584: // STATE 7932 - mutant_1.pml:305 - [.(goto)] (0:7939:0 - 6)
		IfNotBlocked
		reached[1][7932] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3585: // STATE 7917 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (7939:0:1 - 1)
		IfNotBlocked
		reached[1][7917] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7939, 7918, 7939) */
		reached[1][7918] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7939, 7919, 7939) */
		reached[1][7919] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7939, 7932, 7939) */
		reached[1][7932] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3586: // STATE 7920 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7939:0:1 - 1)
		IfNotBlocked
		reached[1][7920] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7939, 7921, 7939) */
		reached[1][7921] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7939, 7922, 7939) */
		reached[1][7922] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7939, 7932, 7939) */
		reached[1][7932] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3587: // STATE 7923 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7939:0:1 - 1)
		IfNotBlocked
		reached[1][7923] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7939, 7924, 7939) */
		reached[1][7924] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7939, 7925, 7939) */
		reached[1][7925] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7939, 7932, 7939) */
		reached[1][7932] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3588: // STATE 7926 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (7939:0:1 - 1)
		IfNotBlocked
		reached[1][7926] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7939, 7927, 7939) */
		reached[1][7927] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7939, 7928, 7939) */
		reached[1][7928] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7939, 7932, 7939) */
		reached[1][7932] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3589: // STATE 7930 - mutant_1.pml:303 - [(1)] (7939:0:0 - 1)
		IfNotBlocked
		reached[1][7930] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7939, 7932, 7939) */
		reached[1][7932] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3590: // STATE 7935 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7935] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3591: // STATE 7938 - mutant_1.pml:310 - [(1)] (7978:0:1 - 1)
		IfNotBlocked
		reached[1][7938] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7978, 7940, 7978) */
		reached[1][7940] = 1;
		;
		/* merge: .(goto)(7978, 7972, 7978) */
		reached[1][7972] = 1;
		;
		/* merge: j = (j+1)(7978, 7974, 7978) */
		reached[1][7974] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7979, 7978) */
		reached[1][7979] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3592: // STATE 7942 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7942] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3593: // STATE 7943 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (7968:0:1 - 1)
		IfNotBlocked
		reached[1][7943] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(7968, 7944, 7968) */
		reached[1][7944] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(7968, 7945, 7968) */
		reached[1][7945] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7968, 7961, 7968) */
		reached[1][7961] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3594: // STATE 7961 - mutant_1.pml:334 - [.(goto)] (0:7968:0 - 6)
		IfNotBlocked
		reached[1][7961] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3595: // STATE 7946 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (7968:0:1 - 1)
		IfNotBlocked
		reached[1][7946] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(7968, 7947, 7968) */
		reached[1][7947] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(7968, 7948, 7968) */
		reached[1][7948] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7968, 7961, 7968) */
		reached[1][7961] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3596: // STATE 7949 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (7968:0:1 - 1)
		IfNotBlocked
		reached[1][7949] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(7968, 7950, 7968) */
		reached[1][7950] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(7968, 7951, 7968) */
		reached[1][7951] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7968, 7961, 7968) */
		reached[1][7961] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3597: // STATE 7952 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (7968:0:1 - 1)
		IfNotBlocked
		reached[1][7952] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(7968, 7953, 7968) */
		reached[1][7953] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(7968, 7954, 7968) */
		reached[1][7954] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7968, 7961, 7968) */
		reached[1][7961] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3598: // STATE 7955 - mutant_1.pml:328 - [((STOP==ABORT))] (7968:0:1 - 1)
		IfNotBlocked
		reached[1][7955] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(7968, 7956, 7968) */
		reached[1][7956] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(7968, 7957, 7968) */
		reached[1][7957] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(7968, 7961, 7968) */
		reached[1][7961] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3599: // STATE 7959 - mutant_1.pml:332 - [(1)] (7968:0:0 - 1)
		IfNotBlocked
		reached[1][7959] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7968, 7961, 7968) */
		reached[1][7961] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3600: // STATE 7964 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7964] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3601: // STATE 7967 - mutant_1.pml:339 - [(1)] (7978:0:1 - 1)
		IfNotBlocked
		reached[1][7967] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(7978, 7969, 7978) */
		reached[1][7969] = 1;
		;
		/* merge: .(goto)(7978, 7972, 7978) */
		reached[1][7972] = 1;
		;
		/* merge: j = (j+1)(7978, 7974, 7978) */
		reached[1][7974] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7979, 7978) */
		reached[1][7979] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3602: // STATE 7974 - mutant_1.pml:375 - [j = (j+1)] (0:7978:1 - 13)
		IfNotBlocked
		reached[1][7974] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 7979, 7978) */
		reached[1][7979] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3603: // STATE 7976 - mutant_1.pml:377 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][7976] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 3604: // STATE 7983 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][7983] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3605: // STATE 7984 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7984] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3606: // STATE 7985 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][7985] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3607: // STATE 7986 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (8006:0:1 - 1)
		IfNotBlocked
		reached[1][7986] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8006, 7987, 8006) */
		reached[1][7987] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8006, 7988, 8006) */
		reached[1][7988] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8006, 8004, 8006) */
		reached[1][8004] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3608: // STATE 8004 - mutant_1.pml:246 - [.(goto)] (0:8006:0 - 6)
		IfNotBlocked
		reached[1][8004] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3609: // STATE 7989 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (8006:0:1 - 1)
		IfNotBlocked
		reached[1][7989] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8006, 7990, 8006) */
		reached[1][7990] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8006, 7991, 8006) */
		reached[1][7991] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8006, 8004, 8006) */
		reached[1][8004] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3610: // STATE 7992 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8006:0:1 - 1)
		IfNotBlocked
		reached[1][7992] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8006, 7993, 8006) */
		reached[1][7993] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8006, 7994, 8006) */
		reached[1][7994] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8006, 8004, 8006) */
		reached[1][8004] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3611: // STATE 7995 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8006:0:1 - 1)
		IfNotBlocked
		reached[1][7995] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8006, 7996, 8006) */
		reached[1][7996] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8006, 7997, 8006) */
		reached[1][7997] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8006, 8004, 8006) */
		reached[1][8004] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3612: // STATE 7998 - mutant_1.pml:240 - [((START==ABORT))] (8006:0:1 - 1)
		IfNotBlocked
		reached[1][7998] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8006, 7999, 8006) */
		reached[1][7999] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8006, 8000, 8006) */
		reached[1][8000] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8006, 8004, 8006) */
		reached[1][8004] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3613: // STATE 8002 - mutant_1.pml:244 - [(1)] (8006:0:0 - 1)
		IfNotBlocked
		reached[1][8002] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8006, 8004, 8006) */
		reached[1][8004] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3614: // STATE 8006 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8006] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3615: // STATE 8008 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8008] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3616: // STATE 8011 - mutant_1.pml:252 - [(1)] (8109:0:1 - 1)
		IfNotBlocked
		reached[1][8011] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8109, 8013, 8109) */
		reached[1][8013] = 1;
		;
		/* merge: .(goto)(8109, 8103, 8109) */
		reached[1][8103] = 1;
		;
		/* merge: j = (j-1)(8109, 8105, 8109) */
		reached[1][8105] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8110, 8109) */
		reached[1][8110] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3617: // STATE 8015 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8015] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3618: // STATE 8016 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (8041:0:1 - 1)
		IfNotBlocked
		reached[1][8016] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8041, 8017, 8041) */
		reached[1][8017] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8041, 8018, 8041) */
		reached[1][8018] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8041, 8034, 8041) */
		reached[1][8034] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3619: // STATE 8034 - mutant_1.pml:276 - [.(goto)] (0:8041:0 - 6)
		IfNotBlocked
		reached[1][8034] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3620: // STATE 8019 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (8041:0:1 - 1)
		IfNotBlocked
		reached[1][8019] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8041, 8020, 8041) */
		reached[1][8020] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8041, 8021, 8041) */
		reached[1][8021] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8041, 8034, 8041) */
		reached[1][8034] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3621: // STATE 8022 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8041:0:1 - 1)
		IfNotBlocked
		reached[1][8022] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8041, 8023, 8041) */
		reached[1][8023] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8041, 8024, 8041) */
		reached[1][8024] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8041, 8034, 8041) */
		reached[1][8034] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3622: // STATE 8025 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8041:0:1 - 1)
		IfNotBlocked
		reached[1][8025] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8041, 8026, 8041) */
		reached[1][8026] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8041, 8027, 8041) */
		reached[1][8027] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8041, 8034, 8041) */
		reached[1][8034] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3623: // STATE 8028 - mutant_1.pml:270 - [((PAUSE==ABORT))] (8041:0:1 - 1)
		IfNotBlocked
		reached[1][8028] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8041, 8029, 8041) */
		reached[1][8029] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8041, 8030, 8041) */
		reached[1][8030] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8041, 8034, 8041) */
		reached[1][8034] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3624: // STATE 8032 - mutant_1.pml:274 - [(1)] (8041:0:0 - 1)
		IfNotBlocked
		reached[1][8032] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8041, 8034, 8041) */
		reached[1][8034] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3625: // STATE 8037 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8037] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3626: // STATE 8040 - mutant_1.pml:281 - [(1)] (8109:0:1 - 1)
		IfNotBlocked
		reached[1][8040] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8109, 8042, 8109) */
		reached[1][8042] = 1;
		;
		/* merge: .(goto)(8109, 8103, 8109) */
		reached[1][8103] = 1;
		;
		/* merge: j = (j-1)(8109, 8105, 8109) */
		reached[1][8105] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8110, 8109) */
		reached[1][8110] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3627: // STATE 8044 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8044] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3628: // STATE 8045 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (8070:0:1 - 1)
		IfNotBlocked
		reached[1][8045] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8070, 8046, 8070) */
		reached[1][8046] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8070, 8047, 8070) */
		reached[1][8047] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8070, 8063, 8070) */
		reached[1][8063] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3629: // STATE 8063 - mutant_1.pml:305 - [.(goto)] (0:8070:0 - 6)
		IfNotBlocked
		reached[1][8063] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3630: // STATE 8048 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (8070:0:1 - 1)
		IfNotBlocked
		reached[1][8048] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8070, 8049, 8070) */
		reached[1][8049] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8070, 8050, 8070) */
		reached[1][8050] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8070, 8063, 8070) */
		reached[1][8063] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3631: // STATE 8051 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8070:0:1 - 1)
		IfNotBlocked
		reached[1][8051] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8070, 8052, 8070) */
		reached[1][8052] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8070, 8053, 8070) */
		reached[1][8053] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8070, 8063, 8070) */
		reached[1][8063] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3632: // STATE 8054 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8070:0:1 - 1)
		IfNotBlocked
		reached[1][8054] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8070, 8055, 8070) */
		reached[1][8055] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8070, 8056, 8070) */
		reached[1][8056] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8070, 8063, 8070) */
		reached[1][8063] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3633: // STATE 8057 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (8070:0:1 - 1)
		IfNotBlocked
		reached[1][8057] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8070, 8058, 8070) */
		reached[1][8058] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8070, 8059, 8070) */
		reached[1][8059] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8070, 8063, 8070) */
		reached[1][8063] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3634: // STATE 8061 - mutant_1.pml:303 - [(1)] (8070:0:0 - 1)
		IfNotBlocked
		reached[1][8061] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8070, 8063, 8070) */
		reached[1][8063] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3635: // STATE 8066 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8066] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3636: // STATE 8069 - mutant_1.pml:310 - [(1)] (8109:0:1 - 1)
		IfNotBlocked
		reached[1][8069] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8109, 8071, 8109) */
		reached[1][8071] = 1;
		;
		/* merge: .(goto)(8109, 8103, 8109) */
		reached[1][8103] = 1;
		;
		/* merge: j = (j-1)(8109, 8105, 8109) */
		reached[1][8105] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8110, 8109) */
		reached[1][8110] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3637: // STATE 8073 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8073] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3638: // STATE 8074 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (8099:0:1 - 1)
		IfNotBlocked
		reached[1][8074] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8099, 8075, 8099) */
		reached[1][8075] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8099, 8076, 8099) */
		reached[1][8076] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8099, 8092, 8099) */
		reached[1][8092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3639: // STATE 8092 - mutant_1.pml:334 - [.(goto)] (0:8099:0 - 6)
		IfNotBlocked
		reached[1][8092] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3640: // STATE 8077 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (8099:0:1 - 1)
		IfNotBlocked
		reached[1][8077] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8099, 8078, 8099) */
		reached[1][8078] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8099, 8079, 8099) */
		reached[1][8079] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8099, 8092, 8099) */
		reached[1][8092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3641: // STATE 8080 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8099:0:1 - 1)
		IfNotBlocked
		reached[1][8080] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8099, 8081, 8099) */
		reached[1][8081] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8099, 8082, 8099) */
		reached[1][8082] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8099, 8092, 8099) */
		reached[1][8092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3642: // STATE 8083 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8099:0:1 - 1)
		IfNotBlocked
		reached[1][8083] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8099, 8084, 8099) */
		reached[1][8084] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8099, 8085, 8099) */
		reached[1][8085] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8099, 8092, 8099) */
		reached[1][8092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3643: // STATE 8086 - mutant_1.pml:328 - [((STOP==ABORT))] (8099:0:1 - 1)
		IfNotBlocked
		reached[1][8086] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8099, 8087, 8099) */
		reached[1][8087] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8099, 8088, 8099) */
		reached[1][8088] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8099, 8092, 8099) */
		reached[1][8092] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3644: // STATE 8090 - mutant_1.pml:332 - [(1)] (8099:0:0 - 1)
		IfNotBlocked
		reached[1][8090] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8099, 8092, 8099) */
		reached[1][8092] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3645: // STATE 8095 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8095] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3646: // STATE 8098 - mutant_1.pml:339 - [(1)] (8109:0:1 - 1)
		IfNotBlocked
		reached[1][8098] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8109, 8100, 8109) */
		reached[1][8100] = 1;
		;
		/* merge: .(goto)(8109, 8103, 8109) */
		reached[1][8103] = 1;
		;
		/* merge: j = (j-1)(8109, 8105, 8109) */
		reached[1][8105] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8110, 8109) */
		reached[1][8110] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3647: // STATE 8105 - mutant_1.pml:386 - [j = (j-1)] (0:8109:1 - 13)
		IfNotBlocked
		reached[1][8105] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8110, 8109) */
		reached[1][8110] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3648: // STATE 8107 - mutant_1.pml:388 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][8107] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 3649: // STATE 8117 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8117] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3650: // STATE 8118 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8118] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3651: // STATE 8119 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (8139:0:1 - 1)
		IfNotBlocked
		reached[1][8119] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8139, 8120, 8139) */
		reached[1][8120] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8139, 8121, 8139) */
		reached[1][8121] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8139, 8137, 8139) */
		reached[1][8137] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3652: // STATE 8137 - mutant_1.pml:246 - [.(goto)] (0:8139:0 - 6)
		IfNotBlocked
		reached[1][8137] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3653: // STATE 8122 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (8139:0:1 - 1)
		IfNotBlocked
		reached[1][8122] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8139, 8123, 8139) */
		reached[1][8123] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8139, 8124, 8139) */
		reached[1][8124] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8139, 8137, 8139) */
		reached[1][8137] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3654: // STATE 8125 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8139:0:1 - 1)
		IfNotBlocked
		reached[1][8125] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8139, 8126, 8139) */
		reached[1][8126] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8139, 8127, 8139) */
		reached[1][8127] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8139, 8137, 8139) */
		reached[1][8137] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3655: // STATE 8128 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8139:0:1 - 1)
		IfNotBlocked
		reached[1][8128] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8139, 8129, 8139) */
		reached[1][8129] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8139, 8130, 8139) */
		reached[1][8130] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8139, 8137, 8139) */
		reached[1][8137] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3656: // STATE 8131 - mutant_1.pml:240 - [((START==ABORT))] (8139:0:1 - 1)
		IfNotBlocked
		reached[1][8131] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8139, 8132, 8139) */
		reached[1][8132] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8139, 8133, 8139) */
		reached[1][8133] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8139, 8137, 8139) */
		reached[1][8137] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3657: // STATE 8135 - mutant_1.pml:244 - [(1)] (8139:0:0 - 1)
		IfNotBlocked
		reached[1][8135] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8139, 8137, 8139) */
		reached[1][8137] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3658: // STATE 8139 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8139] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3659: // STATE 8141 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8141] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3660: // STATE 8144 - mutant_1.pml:252 - [(1)] (8242:0:1 - 1)
		IfNotBlocked
		reached[1][8144] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8242, 8146, 8242) */
		reached[1][8146] = 1;
		;
		/* merge: .(goto)(8242, 8236, 8242) */
		reached[1][8236] = 1;
		;
		/* merge: j = (j+1)(8242, 8238, 8242) */
		reached[1][8238] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8243, 8242) */
		reached[1][8243] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3661: // STATE 8148 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8148] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3662: // STATE 8149 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (8174:0:1 - 1)
		IfNotBlocked
		reached[1][8149] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8174, 8150, 8174) */
		reached[1][8150] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8174, 8151, 8174) */
		reached[1][8151] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8174, 8167, 8174) */
		reached[1][8167] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3663: // STATE 8167 - mutant_1.pml:276 - [.(goto)] (0:8174:0 - 6)
		IfNotBlocked
		reached[1][8167] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3664: // STATE 8152 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (8174:0:1 - 1)
		IfNotBlocked
		reached[1][8152] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8174, 8153, 8174) */
		reached[1][8153] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8174, 8154, 8174) */
		reached[1][8154] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8174, 8167, 8174) */
		reached[1][8167] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3665: // STATE 8155 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8174:0:1 - 1)
		IfNotBlocked
		reached[1][8155] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8174, 8156, 8174) */
		reached[1][8156] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8174, 8157, 8174) */
		reached[1][8157] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8174, 8167, 8174) */
		reached[1][8167] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3666: // STATE 8158 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8174:0:1 - 1)
		IfNotBlocked
		reached[1][8158] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8174, 8159, 8174) */
		reached[1][8159] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8174, 8160, 8174) */
		reached[1][8160] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8174, 8167, 8174) */
		reached[1][8167] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3667: // STATE 8161 - mutant_1.pml:270 - [((PAUSE==ABORT))] (8174:0:1 - 1)
		IfNotBlocked
		reached[1][8161] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8174, 8162, 8174) */
		reached[1][8162] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8174, 8163, 8174) */
		reached[1][8163] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8174, 8167, 8174) */
		reached[1][8167] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3668: // STATE 8165 - mutant_1.pml:274 - [(1)] (8174:0:0 - 1)
		IfNotBlocked
		reached[1][8165] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8174, 8167, 8174) */
		reached[1][8167] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3669: // STATE 8170 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8170] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3670: // STATE 8173 - mutant_1.pml:281 - [(1)] (8242:0:1 - 1)
		IfNotBlocked
		reached[1][8173] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8242, 8175, 8242) */
		reached[1][8175] = 1;
		;
		/* merge: .(goto)(8242, 8236, 8242) */
		reached[1][8236] = 1;
		;
		/* merge: j = (j+1)(8242, 8238, 8242) */
		reached[1][8238] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8243, 8242) */
		reached[1][8243] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3671: // STATE 8177 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8177] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3672: // STATE 8178 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (8203:0:1 - 1)
		IfNotBlocked
		reached[1][8178] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8203, 8179, 8203) */
		reached[1][8179] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8203, 8180, 8203) */
		reached[1][8180] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8203, 8196, 8203) */
		reached[1][8196] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3673: // STATE 8196 - mutant_1.pml:305 - [.(goto)] (0:8203:0 - 6)
		IfNotBlocked
		reached[1][8196] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3674: // STATE 8181 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (8203:0:1 - 1)
		IfNotBlocked
		reached[1][8181] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8203, 8182, 8203) */
		reached[1][8182] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8203, 8183, 8203) */
		reached[1][8183] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8203, 8196, 8203) */
		reached[1][8196] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3675: // STATE 8184 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8203:0:1 - 1)
		IfNotBlocked
		reached[1][8184] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8203, 8185, 8203) */
		reached[1][8185] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8203, 8186, 8203) */
		reached[1][8186] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8203, 8196, 8203) */
		reached[1][8196] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3676: // STATE 8187 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8203:0:1 - 1)
		IfNotBlocked
		reached[1][8187] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8203, 8188, 8203) */
		reached[1][8188] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8203, 8189, 8203) */
		reached[1][8189] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8203, 8196, 8203) */
		reached[1][8196] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3677: // STATE 8190 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (8203:0:1 - 1)
		IfNotBlocked
		reached[1][8190] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8203, 8191, 8203) */
		reached[1][8191] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8203, 8192, 8203) */
		reached[1][8192] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8203, 8196, 8203) */
		reached[1][8196] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3678: // STATE 8194 - mutant_1.pml:303 - [(1)] (8203:0:0 - 1)
		IfNotBlocked
		reached[1][8194] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8203, 8196, 8203) */
		reached[1][8196] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3679: // STATE 8199 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8199] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3680: // STATE 8202 - mutant_1.pml:310 - [(1)] (8242:0:1 - 1)
		IfNotBlocked
		reached[1][8202] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8242, 8204, 8242) */
		reached[1][8204] = 1;
		;
		/* merge: .(goto)(8242, 8236, 8242) */
		reached[1][8236] = 1;
		;
		/* merge: j = (j+1)(8242, 8238, 8242) */
		reached[1][8238] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8243, 8242) */
		reached[1][8243] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3681: // STATE 8206 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8206] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3682: // STATE 8207 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (8232:0:1 - 1)
		IfNotBlocked
		reached[1][8207] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8232, 8208, 8232) */
		reached[1][8208] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8232, 8209, 8232) */
		reached[1][8209] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8232, 8225, 8232) */
		reached[1][8225] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3683: // STATE 8225 - mutant_1.pml:334 - [.(goto)] (0:8232:0 - 6)
		IfNotBlocked
		reached[1][8225] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3684: // STATE 8210 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (8232:0:1 - 1)
		IfNotBlocked
		reached[1][8210] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8232, 8211, 8232) */
		reached[1][8211] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8232, 8212, 8232) */
		reached[1][8212] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8232, 8225, 8232) */
		reached[1][8225] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3685: // STATE 8213 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8232:0:1 - 1)
		IfNotBlocked
		reached[1][8213] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8232, 8214, 8232) */
		reached[1][8214] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8232, 8215, 8232) */
		reached[1][8215] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8232, 8225, 8232) */
		reached[1][8225] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3686: // STATE 8216 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8232:0:1 - 1)
		IfNotBlocked
		reached[1][8216] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8232, 8217, 8232) */
		reached[1][8217] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8232, 8218, 8232) */
		reached[1][8218] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8232, 8225, 8232) */
		reached[1][8225] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3687: // STATE 8219 - mutant_1.pml:328 - [((STOP==ABORT))] (8232:0:1 - 1)
		IfNotBlocked
		reached[1][8219] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8232, 8220, 8232) */
		reached[1][8220] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8232, 8221, 8232) */
		reached[1][8221] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8232, 8225, 8232) */
		reached[1][8225] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3688: // STATE 8223 - mutant_1.pml:332 - [(1)] (8232:0:0 - 1)
		IfNotBlocked
		reached[1][8223] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8232, 8225, 8232) */
		reached[1][8225] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3689: // STATE 8228 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8228] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3690: // STATE 8231 - mutant_1.pml:339 - [(1)] (8242:0:1 - 1)
		IfNotBlocked
		reached[1][8231] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8242, 8233, 8242) */
		reached[1][8233] = 1;
		;
		/* merge: .(goto)(8242, 8236, 8242) */
		reached[1][8236] = 1;
		;
		/* merge: j = (j+1)(8242, 8238, 8242) */
		reached[1][8238] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8243, 8242) */
		reached[1][8243] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3691: // STATE 8238 - mutant_1.pml:375 - [j = (j+1)] (0:8242:1 - 13)
		IfNotBlocked
		reached[1][8238] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8243, 8242) */
		reached[1][8243] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3692: // STATE 8240 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8240] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3693: // STATE 8246 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8246] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3694: // STATE 8247 - mutant_1.pml:405 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8247] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3695: // STATE 8248 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8248] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3696: // STATE 8250 - mutant_1.pml:407 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8250] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3697: // STATE 8251 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8251] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3698: // STATE 8253 - mutant_1.pml:409 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8253] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3699: // STATE 8254 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8254] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3700: // STATE 8256 - mutant_1.pml:411 - [((2==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8256] = 1;
		if (!((2==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3701: // STATE 8257 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8257] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3702: // STATE 8261 - mutant_1.pml:414 - [j = (j+1)] (0:8265:1 - 5)
		IfNotBlocked
		reached[1][8261] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8266, 8265) */
		reached[1][8266] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3703: // STATE 8263 - mutant_1.pml:416 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][8263] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 3704: // STATE 8279 - mutant_1.pml:463 - [states[0] = 5] (0:0:1 - 41)
		IfNotBlocked
		reached[1][8279] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 5;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3705: // STATE 8281 - mutant_1.pml:540 - [((commands[0]==ABORT))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8281] = 1;
		if (!((now.commands[0]==1)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3706: // STATE 8282 - mutant_1.pml:541 - [assert((((states[0]==STARTING)||(states[0]==RUNNING))||(states[0]==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8282] = 1;
		spin_assert((((now.states[0]==12)||(now.states[0]==11))||(now.states[0]==7)), "(((states[0]==12)||(states[0]==11))||(states[0]==7))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 3707: // STATE 8283 - mutant_1.pml:458 - [states[0] = 4] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8283] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 4;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3708: // STATE 8284 - mutant_1.pml:447 - [((4==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8284] = 1;
		if (!((4==11)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3709: // STATE 8285 - mutant_1.pml:422 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8285] = 1;
		if (!(((8==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3710: // STATE 8286 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8286] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3711: // STATE 8288 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8288] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3712: // STATE 8289 - mutant_1.pml:394 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8289] = 1;
		if (!(((8==9)||(8==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3713: // STATE 8290 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8290] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3714: // STATE 8291 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8291] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3715: // STATE 8292 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (8312:0:1 - 1)
		IfNotBlocked
		reached[1][8292] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8312, 8293, 8312) */
		reached[1][8293] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8312, 8294, 8312) */
		reached[1][8294] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8312, 8310, 8312) */
		reached[1][8310] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3716: // STATE 8310 - mutant_1.pml:246 - [.(goto)] (0:8312:0 - 6)
		IfNotBlocked
		reached[1][8310] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3717: // STATE 8295 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (8312:0:1 - 1)
		IfNotBlocked
		reached[1][8295] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8312, 8296, 8312) */
		reached[1][8296] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8312, 8297, 8312) */
		reached[1][8297] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8312, 8310, 8312) */
		reached[1][8310] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3718: // STATE 8298 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8312:0:1 - 1)
		IfNotBlocked
		reached[1][8298] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8312, 8299, 8312) */
		reached[1][8299] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8312, 8300, 8312) */
		reached[1][8300] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8312, 8310, 8312) */
		reached[1][8310] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3719: // STATE 8301 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8312:0:1 - 1)
		IfNotBlocked
		reached[1][8301] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8312, 8302, 8312) */
		reached[1][8302] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8312, 8303, 8312) */
		reached[1][8303] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8312, 8310, 8312) */
		reached[1][8310] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3720: // STATE 8304 - mutant_1.pml:240 - [((START==ABORT))] (8312:0:1 - 1)
		IfNotBlocked
		reached[1][8304] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8312, 8305, 8312) */
		reached[1][8305] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8312, 8306, 8312) */
		reached[1][8306] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8312, 8310, 8312) */
		reached[1][8310] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3721: // STATE 8308 - mutant_1.pml:244 - [(1)] (8312:0:0 - 1)
		IfNotBlocked
		reached[1][8308] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8312, 8310, 8312) */
		reached[1][8310] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3722: // STATE 8312 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8312] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3723: // STATE 8314 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8314] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3724: // STATE 8317 - mutant_1.pml:252 - [(1)] (8415:0:1 - 1)
		IfNotBlocked
		reached[1][8317] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8415, 8319, 8415) */
		reached[1][8319] = 1;
		;
		/* merge: .(goto)(8415, 8409, 8415) */
		reached[1][8409] = 1;
		;
		/* merge: j = (j+1)(8415, 8411, 8415) */
		reached[1][8411] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8416, 8415) */
		reached[1][8416] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3725: // STATE 8321 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8321] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3726: // STATE 8322 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (8347:0:1 - 1)
		IfNotBlocked
		reached[1][8322] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8347, 8323, 8347) */
		reached[1][8323] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8347, 8324, 8347) */
		reached[1][8324] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8347, 8340, 8347) */
		reached[1][8340] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3727: // STATE 8340 - mutant_1.pml:276 - [.(goto)] (0:8347:0 - 6)
		IfNotBlocked
		reached[1][8340] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3728: // STATE 8325 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (8347:0:1 - 1)
		IfNotBlocked
		reached[1][8325] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8347, 8326, 8347) */
		reached[1][8326] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8347, 8327, 8347) */
		reached[1][8327] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8347, 8340, 8347) */
		reached[1][8340] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3729: // STATE 8328 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8347:0:1 - 1)
		IfNotBlocked
		reached[1][8328] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8347, 8329, 8347) */
		reached[1][8329] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8347, 8330, 8347) */
		reached[1][8330] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8347, 8340, 8347) */
		reached[1][8340] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3730: // STATE 8331 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8347:0:1 - 1)
		IfNotBlocked
		reached[1][8331] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8347, 8332, 8347) */
		reached[1][8332] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8347, 8333, 8347) */
		reached[1][8333] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8347, 8340, 8347) */
		reached[1][8340] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3731: // STATE 8334 - mutant_1.pml:270 - [((PAUSE==ABORT))] (8347:0:1 - 1)
		IfNotBlocked
		reached[1][8334] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8347, 8335, 8347) */
		reached[1][8335] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8347, 8336, 8347) */
		reached[1][8336] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8347, 8340, 8347) */
		reached[1][8340] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3732: // STATE 8338 - mutant_1.pml:274 - [(1)] (8347:0:0 - 1)
		IfNotBlocked
		reached[1][8338] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8347, 8340, 8347) */
		reached[1][8340] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3733: // STATE 8343 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8343] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3734: // STATE 8346 - mutant_1.pml:281 - [(1)] (8415:0:1 - 1)
		IfNotBlocked
		reached[1][8346] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8415, 8348, 8415) */
		reached[1][8348] = 1;
		;
		/* merge: .(goto)(8415, 8409, 8415) */
		reached[1][8409] = 1;
		;
		/* merge: j = (j+1)(8415, 8411, 8415) */
		reached[1][8411] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8416, 8415) */
		reached[1][8416] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3735: // STATE 8350 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8350] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3736: // STATE 8351 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (8376:0:1 - 1)
		IfNotBlocked
		reached[1][8351] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8376, 8352, 8376) */
		reached[1][8352] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8376, 8353, 8376) */
		reached[1][8353] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8376, 8369, 8376) */
		reached[1][8369] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3737: // STATE 8369 - mutant_1.pml:305 - [.(goto)] (0:8376:0 - 6)
		IfNotBlocked
		reached[1][8369] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3738: // STATE 8354 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (8376:0:1 - 1)
		IfNotBlocked
		reached[1][8354] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8376, 8355, 8376) */
		reached[1][8355] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8376, 8356, 8376) */
		reached[1][8356] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8376, 8369, 8376) */
		reached[1][8369] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3739: // STATE 8357 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8376:0:1 - 1)
		IfNotBlocked
		reached[1][8357] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8376, 8358, 8376) */
		reached[1][8358] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8376, 8359, 8376) */
		reached[1][8359] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8376, 8369, 8376) */
		reached[1][8369] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3740: // STATE 8360 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8376:0:1 - 1)
		IfNotBlocked
		reached[1][8360] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8376, 8361, 8376) */
		reached[1][8361] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8376, 8362, 8376) */
		reached[1][8362] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8376, 8369, 8376) */
		reached[1][8369] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3741: // STATE 8363 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (8376:0:1 - 1)
		IfNotBlocked
		reached[1][8363] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8376, 8364, 8376) */
		reached[1][8364] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8376, 8365, 8376) */
		reached[1][8365] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8376, 8369, 8376) */
		reached[1][8369] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3742: // STATE 8367 - mutant_1.pml:303 - [(1)] (8376:0:0 - 1)
		IfNotBlocked
		reached[1][8367] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8376, 8369, 8376) */
		reached[1][8369] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3743: // STATE 8372 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8372] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3744: // STATE 8375 - mutant_1.pml:310 - [(1)] (8415:0:1 - 1)
		IfNotBlocked
		reached[1][8375] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8415, 8377, 8415) */
		reached[1][8377] = 1;
		;
		/* merge: .(goto)(8415, 8409, 8415) */
		reached[1][8409] = 1;
		;
		/* merge: j = (j+1)(8415, 8411, 8415) */
		reached[1][8411] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8416, 8415) */
		reached[1][8416] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3745: // STATE 8379 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8379] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3746: // STATE 8380 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (8405:0:1 - 1)
		IfNotBlocked
		reached[1][8380] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8405, 8381, 8405) */
		reached[1][8381] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8405, 8382, 8405) */
		reached[1][8382] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8405, 8398, 8405) */
		reached[1][8398] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3747: // STATE 8398 - mutant_1.pml:334 - [.(goto)] (0:8405:0 - 6)
		IfNotBlocked
		reached[1][8398] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3748: // STATE 8383 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (8405:0:1 - 1)
		IfNotBlocked
		reached[1][8383] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8405, 8384, 8405) */
		reached[1][8384] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8405, 8385, 8405) */
		reached[1][8385] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8405, 8398, 8405) */
		reached[1][8398] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3749: // STATE 8386 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8405:0:1 - 1)
		IfNotBlocked
		reached[1][8386] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8405, 8387, 8405) */
		reached[1][8387] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8405, 8388, 8405) */
		reached[1][8388] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8405, 8398, 8405) */
		reached[1][8398] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3750: // STATE 8389 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8405:0:1 - 1)
		IfNotBlocked
		reached[1][8389] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8405, 8390, 8405) */
		reached[1][8390] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8405, 8391, 8405) */
		reached[1][8391] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8405, 8398, 8405) */
		reached[1][8398] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3751: // STATE 8392 - mutant_1.pml:328 - [((STOP==ABORT))] (8405:0:1 - 1)
		IfNotBlocked
		reached[1][8392] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8405, 8393, 8405) */
		reached[1][8393] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8405, 8394, 8405) */
		reached[1][8394] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8405, 8398, 8405) */
		reached[1][8398] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3752: // STATE 8396 - mutant_1.pml:332 - [(1)] (8405:0:0 - 1)
		IfNotBlocked
		reached[1][8396] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8405, 8398, 8405) */
		reached[1][8398] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3753: // STATE 8401 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8401] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3754: // STATE 8404 - mutant_1.pml:339 - [(1)] (8415:0:1 - 1)
		IfNotBlocked
		reached[1][8404] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8415, 8406, 8415) */
		reached[1][8406] = 1;
		;
		/* merge: .(goto)(8415, 8409, 8415) */
		reached[1][8409] = 1;
		;
		/* merge: j = (j+1)(8415, 8411, 8415) */
		reached[1][8411] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8416, 8415) */
		reached[1][8416] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3755: // STATE 8411 - mutant_1.pml:375 - [j = (j+1)] (0:8415:1 - 13)
		IfNotBlocked
		reached[1][8411] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8416, 8415) */
		reached[1][8416] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3756: // STATE 8413 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8413] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3757: // STATE 8420 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8420] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3758: // STATE 8421 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8421] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3759: // STATE 8422 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8422] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3760: // STATE 8423 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (8443:0:1 - 1)
		IfNotBlocked
		reached[1][8423] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8443, 8424, 8443) */
		reached[1][8424] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8443, 8425, 8443) */
		reached[1][8425] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8443, 8441, 8443) */
		reached[1][8441] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3761: // STATE 8441 - mutant_1.pml:246 - [.(goto)] (0:8443:0 - 6)
		IfNotBlocked
		reached[1][8441] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3762: // STATE 8426 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (8443:0:1 - 1)
		IfNotBlocked
		reached[1][8426] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8443, 8427, 8443) */
		reached[1][8427] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8443, 8428, 8443) */
		reached[1][8428] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8443, 8441, 8443) */
		reached[1][8441] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3763: // STATE 8429 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8443:0:1 - 1)
		IfNotBlocked
		reached[1][8429] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8443, 8430, 8443) */
		reached[1][8430] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8443, 8431, 8443) */
		reached[1][8431] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8443, 8441, 8443) */
		reached[1][8441] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3764: // STATE 8432 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8443:0:1 - 1)
		IfNotBlocked
		reached[1][8432] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8443, 8433, 8443) */
		reached[1][8433] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8443, 8434, 8443) */
		reached[1][8434] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8443, 8441, 8443) */
		reached[1][8441] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3765: // STATE 8435 - mutant_1.pml:240 - [((START==ABORT))] (8443:0:1 - 1)
		IfNotBlocked
		reached[1][8435] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8443, 8436, 8443) */
		reached[1][8436] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8443, 8437, 8443) */
		reached[1][8437] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8443, 8441, 8443) */
		reached[1][8441] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3766: // STATE 8439 - mutant_1.pml:244 - [(1)] (8443:0:0 - 1)
		IfNotBlocked
		reached[1][8439] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8443, 8441, 8443) */
		reached[1][8441] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3767: // STATE 8443 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8443] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3768: // STATE 8445 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8445] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3769: // STATE 8448 - mutant_1.pml:252 - [(1)] (8546:0:1 - 1)
		IfNotBlocked
		reached[1][8448] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8546, 8450, 8546) */
		reached[1][8450] = 1;
		;
		/* merge: .(goto)(8546, 8540, 8546) */
		reached[1][8540] = 1;
		;
		/* merge: j = (j-1)(8546, 8542, 8546) */
		reached[1][8542] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8547, 8546) */
		reached[1][8547] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3770: // STATE 8452 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8452] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3771: // STATE 8453 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (8478:0:1 - 1)
		IfNotBlocked
		reached[1][8453] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8478, 8454, 8478) */
		reached[1][8454] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8478, 8455, 8478) */
		reached[1][8455] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8478, 8471, 8478) */
		reached[1][8471] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3772: // STATE 8471 - mutant_1.pml:276 - [.(goto)] (0:8478:0 - 6)
		IfNotBlocked
		reached[1][8471] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3773: // STATE 8456 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (8478:0:1 - 1)
		IfNotBlocked
		reached[1][8456] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8478, 8457, 8478) */
		reached[1][8457] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8478, 8458, 8478) */
		reached[1][8458] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8478, 8471, 8478) */
		reached[1][8471] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3774: // STATE 8459 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8478:0:1 - 1)
		IfNotBlocked
		reached[1][8459] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8478, 8460, 8478) */
		reached[1][8460] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8478, 8461, 8478) */
		reached[1][8461] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8478, 8471, 8478) */
		reached[1][8471] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3775: // STATE 8462 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8478:0:1 - 1)
		IfNotBlocked
		reached[1][8462] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8478, 8463, 8478) */
		reached[1][8463] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8478, 8464, 8478) */
		reached[1][8464] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8478, 8471, 8478) */
		reached[1][8471] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3776: // STATE 8465 - mutant_1.pml:270 - [((PAUSE==ABORT))] (8478:0:1 - 1)
		IfNotBlocked
		reached[1][8465] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8478, 8466, 8478) */
		reached[1][8466] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8478, 8467, 8478) */
		reached[1][8467] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8478, 8471, 8478) */
		reached[1][8471] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3777: // STATE 8469 - mutant_1.pml:274 - [(1)] (8478:0:0 - 1)
		IfNotBlocked
		reached[1][8469] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8478, 8471, 8478) */
		reached[1][8471] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3778: // STATE 8474 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8474] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3779: // STATE 8477 - mutant_1.pml:281 - [(1)] (8546:0:1 - 1)
		IfNotBlocked
		reached[1][8477] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8546, 8479, 8546) */
		reached[1][8479] = 1;
		;
		/* merge: .(goto)(8546, 8540, 8546) */
		reached[1][8540] = 1;
		;
		/* merge: j = (j-1)(8546, 8542, 8546) */
		reached[1][8542] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8547, 8546) */
		reached[1][8547] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3780: // STATE 8481 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8481] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3781: // STATE 8482 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (8507:0:1 - 1)
		IfNotBlocked
		reached[1][8482] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8507, 8483, 8507) */
		reached[1][8483] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8507, 8484, 8507) */
		reached[1][8484] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8507, 8500, 8507) */
		reached[1][8500] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3782: // STATE 8500 - mutant_1.pml:305 - [.(goto)] (0:8507:0 - 6)
		IfNotBlocked
		reached[1][8500] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3783: // STATE 8485 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (8507:0:1 - 1)
		IfNotBlocked
		reached[1][8485] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8507, 8486, 8507) */
		reached[1][8486] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8507, 8487, 8507) */
		reached[1][8487] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8507, 8500, 8507) */
		reached[1][8500] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3784: // STATE 8488 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8507:0:1 - 1)
		IfNotBlocked
		reached[1][8488] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8507, 8489, 8507) */
		reached[1][8489] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8507, 8490, 8507) */
		reached[1][8490] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8507, 8500, 8507) */
		reached[1][8500] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3785: // STATE 8491 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8507:0:1 - 1)
		IfNotBlocked
		reached[1][8491] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8507, 8492, 8507) */
		reached[1][8492] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8507, 8493, 8507) */
		reached[1][8493] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8507, 8500, 8507) */
		reached[1][8500] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3786: // STATE 8494 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (8507:0:1 - 1)
		IfNotBlocked
		reached[1][8494] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8507, 8495, 8507) */
		reached[1][8495] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8507, 8496, 8507) */
		reached[1][8496] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8507, 8500, 8507) */
		reached[1][8500] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3787: // STATE 8498 - mutant_1.pml:303 - [(1)] (8507:0:0 - 1)
		IfNotBlocked
		reached[1][8498] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8507, 8500, 8507) */
		reached[1][8500] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3788: // STATE 8503 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8503] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3789: // STATE 8506 - mutant_1.pml:310 - [(1)] (8546:0:1 - 1)
		IfNotBlocked
		reached[1][8506] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8546, 8508, 8546) */
		reached[1][8508] = 1;
		;
		/* merge: .(goto)(8546, 8540, 8546) */
		reached[1][8540] = 1;
		;
		/* merge: j = (j-1)(8546, 8542, 8546) */
		reached[1][8542] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8547, 8546) */
		reached[1][8547] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3790: // STATE 8510 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8510] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3791: // STATE 8511 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (8536:0:1 - 1)
		IfNotBlocked
		reached[1][8511] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8536, 8512, 8536) */
		reached[1][8512] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8536, 8513, 8536) */
		reached[1][8513] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8536, 8529, 8536) */
		reached[1][8529] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3792: // STATE 8529 - mutant_1.pml:334 - [.(goto)] (0:8536:0 - 6)
		IfNotBlocked
		reached[1][8529] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3793: // STATE 8514 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (8536:0:1 - 1)
		IfNotBlocked
		reached[1][8514] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8536, 8515, 8536) */
		reached[1][8515] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8536, 8516, 8536) */
		reached[1][8516] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8536, 8529, 8536) */
		reached[1][8529] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3794: // STATE 8517 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8536:0:1 - 1)
		IfNotBlocked
		reached[1][8517] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8536, 8518, 8536) */
		reached[1][8518] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8536, 8519, 8536) */
		reached[1][8519] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8536, 8529, 8536) */
		reached[1][8529] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3795: // STATE 8520 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8536:0:1 - 1)
		IfNotBlocked
		reached[1][8520] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8536, 8521, 8536) */
		reached[1][8521] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8536, 8522, 8536) */
		reached[1][8522] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8536, 8529, 8536) */
		reached[1][8529] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3796: // STATE 8523 - mutant_1.pml:328 - [((STOP==ABORT))] (8536:0:1 - 1)
		IfNotBlocked
		reached[1][8523] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8536, 8524, 8536) */
		reached[1][8524] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8536, 8525, 8536) */
		reached[1][8525] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8536, 8529, 8536) */
		reached[1][8529] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3797: // STATE 8527 - mutant_1.pml:332 - [(1)] (8536:0:0 - 1)
		IfNotBlocked
		reached[1][8527] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8536, 8529, 8536) */
		reached[1][8529] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3798: // STATE 8532 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8532] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3799: // STATE 8535 - mutant_1.pml:339 - [(1)] (8546:0:1 - 1)
		IfNotBlocked
		reached[1][8535] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8546, 8537, 8546) */
		reached[1][8537] = 1;
		;
		/* merge: .(goto)(8546, 8540, 8546) */
		reached[1][8540] = 1;
		;
		/* merge: j = (j-1)(8546, 8542, 8546) */
		reached[1][8542] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8547, 8546) */
		reached[1][8547] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3800: // STATE 8542 - mutant_1.pml:386 - [j = (j-1)] (0:8546:1 - 13)
		IfNotBlocked
		reached[1][8542] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8547, 8546) */
		reached[1][8547] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3801: // STATE 8544 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8544] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3802: // STATE 8554 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8554] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3803: // STATE 8555 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8555] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3804: // STATE 8556 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (8576:0:1 - 1)
		IfNotBlocked
		reached[1][8556] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8576, 8557, 8576) */
		reached[1][8557] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8576, 8558, 8576) */
		reached[1][8558] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8576, 8574, 8576) */
		reached[1][8574] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3805: // STATE 8574 - mutant_1.pml:246 - [.(goto)] (0:8576:0 - 6)
		IfNotBlocked
		reached[1][8574] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3806: // STATE 8559 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (8576:0:1 - 1)
		IfNotBlocked
		reached[1][8559] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8576, 8560, 8576) */
		reached[1][8560] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8576, 8561, 8576) */
		reached[1][8561] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8576, 8574, 8576) */
		reached[1][8574] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3807: // STATE 8562 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8576:0:1 - 1)
		IfNotBlocked
		reached[1][8562] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8576, 8563, 8576) */
		reached[1][8563] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8576, 8564, 8576) */
		reached[1][8564] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8576, 8574, 8576) */
		reached[1][8574] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3808: // STATE 8565 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8576:0:1 - 1)
		IfNotBlocked
		reached[1][8565] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8576, 8566, 8576) */
		reached[1][8566] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8576, 8567, 8576) */
		reached[1][8567] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8576, 8574, 8576) */
		reached[1][8574] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3809: // STATE 8568 - mutant_1.pml:240 - [((START==ABORT))] (8576:0:1 - 1)
		IfNotBlocked
		reached[1][8568] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8576, 8569, 8576) */
		reached[1][8569] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8576, 8570, 8576) */
		reached[1][8570] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8576, 8574, 8576) */
		reached[1][8574] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3810: // STATE 8572 - mutant_1.pml:244 - [(1)] (8576:0:0 - 1)
		IfNotBlocked
		reached[1][8572] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8576, 8574, 8576) */
		reached[1][8574] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3811: // STATE 8576 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8576] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3812: // STATE 8578 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8578] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3813: // STATE 8581 - mutant_1.pml:252 - [(1)] (8679:0:1 - 1)
		IfNotBlocked
		reached[1][8581] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8679, 8583, 8679) */
		reached[1][8583] = 1;
		;
		/* merge: .(goto)(8679, 8673, 8679) */
		reached[1][8673] = 1;
		;
		/* merge: j = (j+1)(8679, 8675, 8679) */
		reached[1][8675] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8680, 8679) */
		reached[1][8680] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3814: // STATE 8585 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8585] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3815: // STATE 8586 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (8611:0:1 - 1)
		IfNotBlocked
		reached[1][8586] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8611, 8587, 8611) */
		reached[1][8587] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8611, 8588, 8611) */
		reached[1][8588] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8611, 8604, 8611) */
		reached[1][8604] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3816: // STATE 8604 - mutant_1.pml:276 - [.(goto)] (0:8611:0 - 6)
		IfNotBlocked
		reached[1][8604] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3817: // STATE 8589 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (8611:0:1 - 1)
		IfNotBlocked
		reached[1][8589] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8611, 8590, 8611) */
		reached[1][8590] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8611, 8591, 8611) */
		reached[1][8591] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8611, 8604, 8611) */
		reached[1][8604] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3818: // STATE 8592 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8611:0:1 - 1)
		IfNotBlocked
		reached[1][8592] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8611, 8593, 8611) */
		reached[1][8593] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8611, 8594, 8611) */
		reached[1][8594] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8611, 8604, 8611) */
		reached[1][8604] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3819: // STATE 8595 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8611:0:1 - 1)
		IfNotBlocked
		reached[1][8595] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8611, 8596, 8611) */
		reached[1][8596] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8611, 8597, 8611) */
		reached[1][8597] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8611, 8604, 8611) */
		reached[1][8604] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3820: // STATE 8598 - mutant_1.pml:270 - [((PAUSE==ABORT))] (8611:0:1 - 1)
		IfNotBlocked
		reached[1][8598] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8611, 8599, 8611) */
		reached[1][8599] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8611, 8600, 8611) */
		reached[1][8600] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8611, 8604, 8611) */
		reached[1][8604] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3821: // STATE 8602 - mutant_1.pml:274 - [(1)] (8611:0:0 - 1)
		IfNotBlocked
		reached[1][8602] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8611, 8604, 8611) */
		reached[1][8604] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3822: // STATE 8607 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8607] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3823: // STATE 8610 - mutant_1.pml:281 - [(1)] (8679:0:1 - 1)
		IfNotBlocked
		reached[1][8610] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8679, 8612, 8679) */
		reached[1][8612] = 1;
		;
		/* merge: .(goto)(8679, 8673, 8679) */
		reached[1][8673] = 1;
		;
		/* merge: j = (j+1)(8679, 8675, 8679) */
		reached[1][8675] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8680, 8679) */
		reached[1][8680] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3824: // STATE 8614 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8614] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3825: // STATE 8615 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (8640:0:1 - 1)
		IfNotBlocked
		reached[1][8615] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8640, 8616, 8640) */
		reached[1][8616] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8640, 8617, 8640) */
		reached[1][8617] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8640, 8633, 8640) */
		reached[1][8633] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3826: // STATE 8633 - mutant_1.pml:305 - [.(goto)] (0:8640:0 - 6)
		IfNotBlocked
		reached[1][8633] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3827: // STATE 8618 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (8640:0:1 - 1)
		IfNotBlocked
		reached[1][8618] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8640, 8619, 8640) */
		reached[1][8619] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8640, 8620, 8640) */
		reached[1][8620] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8640, 8633, 8640) */
		reached[1][8633] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3828: // STATE 8621 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8640:0:1 - 1)
		IfNotBlocked
		reached[1][8621] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8640, 8622, 8640) */
		reached[1][8622] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8640, 8623, 8640) */
		reached[1][8623] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8640, 8633, 8640) */
		reached[1][8633] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3829: // STATE 8624 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8640:0:1 - 1)
		IfNotBlocked
		reached[1][8624] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8640, 8625, 8640) */
		reached[1][8625] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8640, 8626, 8640) */
		reached[1][8626] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8640, 8633, 8640) */
		reached[1][8633] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3830: // STATE 8627 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (8640:0:1 - 1)
		IfNotBlocked
		reached[1][8627] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8640, 8628, 8640) */
		reached[1][8628] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8640, 8629, 8640) */
		reached[1][8629] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8640, 8633, 8640) */
		reached[1][8633] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3831: // STATE 8631 - mutant_1.pml:303 - [(1)] (8640:0:0 - 1)
		IfNotBlocked
		reached[1][8631] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8640, 8633, 8640) */
		reached[1][8633] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3832: // STATE 8636 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8636] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3833: // STATE 8639 - mutant_1.pml:310 - [(1)] (8679:0:1 - 1)
		IfNotBlocked
		reached[1][8639] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8679, 8641, 8679) */
		reached[1][8641] = 1;
		;
		/* merge: .(goto)(8679, 8673, 8679) */
		reached[1][8673] = 1;
		;
		/* merge: j = (j+1)(8679, 8675, 8679) */
		reached[1][8675] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8680, 8679) */
		reached[1][8680] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3834: // STATE 8643 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8643] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3835: // STATE 8644 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (8669:0:1 - 1)
		IfNotBlocked
		reached[1][8644] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8669, 8645, 8669) */
		reached[1][8645] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8669, 8646, 8669) */
		reached[1][8646] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8669, 8662, 8669) */
		reached[1][8662] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3836: // STATE 8662 - mutant_1.pml:334 - [.(goto)] (0:8669:0 - 6)
		IfNotBlocked
		reached[1][8662] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3837: // STATE 8647 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (8669:0:1 - 1)
		IfNotBlocked
		reached[1][8647] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8669, 8648, 8669) */
		reached[1][8648] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8669, 8649, 8669) */
		reached[1][8649] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8669, 8662, 8669) */
		reached[1][8662] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3838: // STATE 8650 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8669:0:1 - 1)
		IfNotBlocked
		reached[1][8650] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8669, 8651, 8669) */
		reached[1][8651] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8669, 8652, 8669) */
		reached[1][8652] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8669, 8662, 8669) */
		reached[1][8662] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3839: // STATE 8653 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8669:0:1 - 1)
		IfNotBlocked
		reached[1][8653] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8669, 8654, 8669) */
		reached[1][8654] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8669, 8655, 8669) */
		reached[1][8655] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8669, 8662, 8669) */
		reached[1][8662] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3840: // STATE 8656 - mutant_1.pml:328 - [((STOP==ABORT))] (8669:0:1 - 1)
		IfNotBlocked
		reached[1][8656] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8669, 8657, 8669) */
		reached[1][8657] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8669, 8658, 8669) */
		reached[1][8658] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8669, 8662, 8669) */
		reached[1][8662] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3841: // STATE 8660 - mutant_1.pml:332 - [(1)] (8669:0:0 - 1)
		IfNotBlocked
		reached[1][8660] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8669, 8662, 8669) */
		reached[1][8662] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3842: // STATE 8665 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8665] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3843: // STATE 8668 - mutant_1.pml:339 - [(1)] (8679:0:1 - 1)
		IfNotBlocked
		reached[1][8668] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8679, 8670, 8679) */
		reached[1][8670] = 1;
		;
		/* merge: .(goto)(8679, 8673, 8679) */
		reached[1][8673] = 1;
		;
		/* merge: j = (j+1)(8679, 8675, 8679) */
		reached[1][8675] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8680, 8679) */
		reached[1][8680] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3844: // STATE 8675 - mutant_1.pml:375 - [j = (j+1)] (0:8679:1 - 13)
		IfNotBlocked
		reached[1][8675] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8680, 8679) */
		reached[1][8680] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3845: // STATE 8677 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8677] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3846: // STATE 8683 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8683] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3847: // STATE 8684 - mutant_1.pml:405 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8684] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3848: // STATE 8685 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8685] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3849: // STATE 8687 - mutant_1.pml:407 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8687] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3850: // STATE 8688 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8688] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3851: // STATE 8690 - mutant_1.pml:409 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8690] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3852: // STATE 8691 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8691] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3853: // STATE 8693 - mutant_1.pml:411 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8693] = 1;
		if (!((8==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3854: // STATE 8694 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8694] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3855: // STATE 8698 - mutant_1.pml:414 - [j = (j+1)] (0:8702:1 - 5)
		IfNotBlocked
		reached[1][8698] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8703, 8702) */
		reached[1][8703] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3856: // STATE 8700 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8700] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3857: // STATE 8711 - mutant_1.pml:449 - [((4==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8711] = 1;
		if (!((4==10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3858: // STATE 8712 - mutant_1.pml:422 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8712] = 1;
		if (!(((6==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3859: // STATE 8713 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8713] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3860: // STATE 8715 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8715] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3861: // STATE 8716 - mutant_1.pml:394 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8716] = 1;
		if (!(((6==9)||(6==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3862: // STATE 8717 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8717] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3863: // STATE 8718 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8718] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3864: // STATE 8719 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (8739:0:1 - 1)
		IfNotBlocked
		reached[1][8719] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8739, 8720, 8739) */
		reached[1][8720] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8739, 8721, 8739) */
		reached[1][8721] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8739, 8737, 8739) */
		reached[1][8737] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3865: // STATE 8737 - mutant_1.pml:246 - [.(goto)] (0:8739:0 - 6)
		IfNotBlocked
		reached[1][8737] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3866: // STATE 8722 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (8739:0:1 - 1)
		IfNotBlocked
		reached[1][8722] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8739, 8723, 8739) */
		reached[1][8723] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8739, 8724, 8739) */
		reached[1][8724] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8739, 8737, 8739) */
		reached[1][8737] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3867: // STATE 8725 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8739:0:1 - 1)
		IfNotBlocked
		reached[1][8725] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8739, 8726, 8739) */
		reached[1][8726] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8739, 8727, 8739) */
		reached[1][8727] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8739, 8737, 8739) */
		reached[1][8737] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3868: // STATE 8728 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8739:0:1 - 1)
		IfNotBlocked
		reached[1][8728] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8739, 8729, 8739) */
		reached[1][8729] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8739, 8730, 8739) */
		reached[1][8730] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8739, 8737, 8739) */
		reached[1][8737] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3869: // STATE 8731 - mutant_1.pml:240 - [((START==ABORT))] (8739:0:1 - 1)
		IfNotBlocked
		reached[1][8731] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8739, 8732, 8739) */
		reached[1][8732] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8739, 8733, 8739) */
		reached[1][8733] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8739, 8737, 8739) */
		reached[1][8737] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3870: // STATE 8735 - mutant_1.pml:244 - [(1)] (8739:0:0 - 1)
		IfNotBlocked
		reached[1][8735] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8739, 8737, 8739) */
		reached[1][8737] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3871: // STATE 8739 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8739] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3872: // STATE 8741 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8741] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3873: // STATE 8744 - mutant_1.pml:252 - [(1)] (8842:0:1 - 1)
		IfNotBlocked
		reached[1][8744] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8842, 8746, 8842) */
		reached[1][8746] = 1;
		;
		/* merge: .(goto)(8842, 8836, 8842) */
		reached[1][8836] = 1;
		;
		/* merge: j = (j+1)(8842, 8838, 8842) */
		reached[1][8838] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8843, 8842) */
		reached[1][8843] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3874: // STATE 8748 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8748] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3875: // STATE 8749 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (8774:0:1 - 1)
		IfNotBlocked
		reached[1][8749] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8774, 8750, 8774) */
		reached[1][8750] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8774, 8751, 8774) */
		reached[1][8751] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8774, 8767, 8774) */
		reached[1][8767] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3876: // STATE 8767 - mutant_1.pml:276 - [.(goto)] (0:8774:0 - 6)
		IfNotBlocked
		reached[1][8767] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3877: // STATE 8752 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (8774:0:1 - 1)
		IfNotBlocked
		reached[1][8752] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8774, 8753, 8774) */
		reached[1][8753] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8774, 8754, 8774) */
		reached[1][8754] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8774, 8767, 8774) */
		reached[1][8767] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3878: // STATE 8755 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8774:0:1 - 1)
		IfNotBlocked
		reached[1][8755] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8774, 8756, 8774) */
		reached[1][8756] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8774, 8757, 8774) */
		reached[1][8757] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8774, 8767, 8774) */
		reached[1][8767] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3879: // STATE 8758 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8774:0:1 - 1)
		IfNotBlocked
		reached[1][8758] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8774, 8759, 8774) */
		reached[1][8759] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8774, 8760, 8774) */
		reached[1][8760] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8774, 8767, 8774) */
		reached[1][8767] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3880: // STATE 8761 - mutant_1.pml:270 - [((PAUSE==ABORT))] (8774:0:1 - 1)
		IfNotBlocked
		reached[1][8761] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8774, 8762, 8774) */
		reached[1][8762] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8774, 8763, 8774) */
		reached[1][8763] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8774, 8767, 8774) */
		reached[1][8767] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3881: // STATE 8765 - mutant_1.pml:274 - [(1)] (8774:0:0 - 1)
		IfNotBlocked
		reached[1][8765] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8774, 8767, 8774) */
		reached[1][8767] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3882: // STATE 8770 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8770] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3883: // STATE 8773 - mutant_1.pml:281 - [(1)] (8842:0:1 - 1)
		IfNotBlocked
		reached[1][8773] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8842, 8775, 8842) */
		reached[1][8775] = 1;
		;
		/* merge: .(goto)(8842, 8836, 8842) */
		reached[1][8836] = 1;
		;
		/* merge: j = (j+1)(8842, 8838, 8842) */
		reached[1][8838] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8843, 8842) */
		reached[1][8843] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3884: // STATE 8777 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8777] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3885: // STATE 8778 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (8803:0:1 - 1)
		IfNotBlocked
		reached[1][8778] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8803, 8779, 8803) */
		reached[1][8779] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8803, 8780, 8803) */
		reached[1][8780] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8803, 8796, 8803) */
		reached[1][8796] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3886: // STATE 8796 - mutant_1.pml:305 - [.(goto)] (0:8803:0 - 6)
		IfNotBlocked
		reached[1][8796] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3887: // STATE 8781 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (8803:0:1 - 1)
		IfNotBlocked
		reached[1][8781] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8803, 8782, 8803) */
		reached[1][8782] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8803, 8783, 8803) */
		reached[1][8783] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8803, 8796, 8803) */
		reached[1][8796] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3888: // STATE 8784 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8803:0:1 - 1)
		IfNotBlocked
		reached[1][8784] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8803, 8785, 8803) */
		reached[1][8785] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8803, 8786, 8803) */
		reached[1][8786] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8803, 8796, 8803) */
		reached[1][8796] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3889: // STATE 8787 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8803:0:1 - 1)
		IfNotBlocked
		reached[1][8787] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8803, 8788, 8803) */
		reached[1][8788] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8803, 8789, 8803) */
		reached[1][8789] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8803, 8796, 8803) */
		reached[1][8796] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3890: // STATE 8790 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (8803:0:1 - 1)
		IfNotBlocked
		reached[1][8790] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8803, 8791, 8803) */
		reached[1][8791] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8803, 8792, 8803) */
		reached[1][8792] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8803, 8796, 8803) */
		reached[1][8796] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3891: // STATE 8794 - mutant_1.pml:303 - [(1)] (8803:0:0 - 1)
		IfNotBlocked
		reached[1][8794] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8803, 8796, 8803) */
		reached[1][8796] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3892: // STATE 8799 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8799] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3893: // STATE 8802 - mutant_1.pml:310 - [(1)] (8842:0:1 - 1)
		IfNotBlocked
		reached[1][8802] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8842, 8804, 8842) */
		reached[1][8804] = 1;
		;
		/* merge: .(goto)(8842, 8836, 8842) */
		reached[1][8836] = 1;
		;
		/* merge: j = (j+1)(8842, 8838, 8842) */
		reached[1][8838] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8843, 8842) */
		reached[1][8843] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3894: // STATE 8806 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8806] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3895: // STATE 8807 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (8832:0:1 - 1)
		IfNotBlocked
		reached[1][8807] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8832, 8808, 8832) */
		reached[1][8808] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8832, 8809, 8832) */
		reached[1][8809] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8832, 8825, 8832) */
		reached[1][8825] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3896: // STATE 8825 - mutant_1.pml:334 - [.(goto)] (0:8832:0 - 6)
		IfNotBlocked
		reached[1][8825] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3897: // STATE 8810 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (8832:0:1 - 1)
		IfNotBlocked
		reached[1][8810] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8832, 8811, 8832) */
		reached[1][8811] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8832, 8812, 8832) */
		reached[1][8812] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8832, 8825, 8832) */
		reached[1][8825] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3898: // STATE 8813 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8832:0:1 - 1)
		IfNotBlocked
		reached[1][8813] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8832, 8814, 8832) */
		reached[1][8814] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8832, 8815, 8832) */
		reached[1][8815] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8832, 8825, 8832) */
		reached[1][8825] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3899: // STATE 8816 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8832:0:1 - 1)
		IfNotBlocked
		reached[1][8816] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8832, 8817, 8832) */
		reached[1][8817] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8832, 8818, 8832) */
		reached[1][8818] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8832, 8825, 8832) */
		reached[1][8825] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3900: // STATE 8819 - mutant_1.pml:328 - [((STOP==ABORT))] (8832:0:1 - 1)
		IfNotBlocked
		reached[1][8819] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8832, 8820, 8832) */
		reached[1][8820] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8832, 8821, 8832) */
		reached[1][8821] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8832, 8825, 8832) */
		reached[1][8825] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3901: // STATE 8823 - mutant_1.pml:332 - [(1)] (8832:0:0 - 1)
		IfNotBlocked
		reached[1][8823] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8832, 8825, 8832) */
		reached[1][8825] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3902: // STATE 8828 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8828] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3903: // STATE 8831 - mutant_1.pml:339 - [(1)] (8842:0:1 - 1)
		IfNotBlocked
		reached[1][8831] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8842, 8833, 8842) */
		reached[1][8833] = 1;
		;
		/* merge: .(goto)(8842, 8836, 8842) */
		reached[1][8836] = 1;
		;
		/* merge: j = (j+1)(8842, 8838, 8842) */
		reached[1][8838] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8843, 8842) */
		reached[1][8843] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3904: // STATE 8838 - mutant_1.pml:375 - [j = (j+1)] (0:8842:1 - 13)
		IfNotBlocked
		reached[1][8838] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8843, 8842) */
		reached[1][8843] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3905: // STATE 8840 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8840] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3906: // STATE 8847 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8847] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3907: // STATE 8848 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8848] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3908: // STATE 8849 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8849] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3909: // STATE 8850 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (8870:0:1 - 1)
		IfNotBlocked
		reached[1][8850] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8870, 8851, 8870) */
		reached[1][8851] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8870, 8852, 8870) */
		reached[1][8852] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8870, 8868, 8870) */
		reached[1][8868] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3910: // STATE 8868 - mutant_1.pml:246 - [.(goto)] (0:8870:0 - 6)
		IfNotBlocked
		reached[1][8868] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3911: // STATE 8853 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (8870:0:1 - 1)
		IfNotBlocked
		reached[1][8853] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8870, 8854, 8870) */
		reached[1][8854] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8870, 8855, 8870) */
		reached[1][8855] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8870, 8868, 8870) */
		reached[1][8868] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3912: // STATE 8856 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8870:0:1 - 1)
		IfNotBlocked
		reached[1][8856] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8870, 8857, 8870) */
		reached[1][8857] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8870, 8858, 8870) */
		reached[1][8858] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8870, 8868, 8870) */
		reached[1][8868] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3913: // STATE 8859 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8870:0:1 - 1)
		IfNotBlocked
		reached[1][8859] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8870, 8860, 8870) */
		reached[1][8860] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8870, 8861, 8870) */
		reached[1][8861] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8870, 8868, 8870) */
		reached[1][8868] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3914: // STATE 8862 - mutant_1.pml:240 - [((START==ABORT))] (8870:0:1 - 1)
		IfNotBlocked
		reached[1][8862] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8870, 8863, 8870) */
		reached[1][8863] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8870, 8864, 8870) */
		reached[1][8864] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8870, 8868, 8870) */
		reached[1][8868] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3915: // STATE 8866 - mutant_1.pml:244 - [(1)] (8870:0:0 - 1)
		IfNotBlocked
		reached[1][8866] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8870, 8868, 8870) */
		reached[1][8868] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3916: // STATE 8870 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8870] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3917: // STATE 8872 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8872] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3918: // STATE 8875 - mutant_1.pml:252 - [(1)] (8973:0:1 - 1)
		IfNotBlocked
		reached[1][8875] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8973, 8877, 8973) */
		reached[1][8877] = 1;
		;
		/* merge: .(goto)(8973, 8967, 8973) */
		reached[1][8967] = 1;
		;
		/* merge: j = (j-1)(8973, 8969, 8973) */
		reached[1][8969] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8974, 8973) */
		reached[1][8974] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3919: // STATE 8879 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8879] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3920: // STATE 8880 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (8905:0:1 - 1)
		IfNotBlocked
		reached[1][8880] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8905, 8881, 8905) */
		reached[1][8881] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8905, 8882, 8905) */
		reached[1][8882] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8905, 8898, 8905) */
		reached[1][8898] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3921: // STATE 8898 - mutant_1.pml:276 - [.(goto)] (0:8905:0 - 6)
		IfNotBlocked
		reached[1][8898] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3922: // STATE 8883 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (8905:0:1 - 1)
		IfNotBlocked
		reached[1][8883] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8905, 8884, 8905) */
		reached[1][8884] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8905, 8885, 8905) */
		reached[1][8885] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8905, 8898, 8905) */
		reached[1][8898] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3923: // STATE 8886 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8905:0:1 - 1)
		IfNotBlocked
		reached[1][8886] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8905, 8887, 8905) */
		reached[1][8887] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8905, 8888, 8905) */
		reached[1][8888] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8905, 8898, 8905) */
		reached[1][8898] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3924: // STATE 8889 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8905:0:1 - 1)
		IfNotBlocked
		reached[1][8889] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8905, 8890, 8905) */
		reached[1][8890] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8905, 8891, 8905) */
		reached[1][8891] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8905, 8898, 8905) */
		reached[1][8898] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3925: // STATE 8892 - mutant_1.pml:270 - [((PAUSE==ABORT))] (8905:0:1 - 1)
		IfNotBlocked
		reached[1][8892] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8905, 8893, 8905) */
		reached[1][8893] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8905, 8894, 8905) */
		reached[1][8894] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8905, 8898, 8905) */
		reached[1][8898] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3926: // STATE 8896 - mutant_1.pml:274 - [(1)] (8905:0:0 - 1)
		IfNotBlocked
		reached[1][8896] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8905, 8898, 8905) */
		reached[1][8898] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3927: // STATE 8901 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8901] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3928: // STATE 8904 - mutant_1.pml:281 - [(1)] (8973:0:1 - 1)
		IfNotBlocked
		reached[1][8904] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8973, 8906, 8973) */
		reached[1][8906] = 1;
		;
		/* merge: .(goto)(8973, 8967, 8973) */
		reached[1][8967] = 1;
		;
		/* merge: j = (j-1)(8973, 8969, 8973) */
		reached[1][8969] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8974, 8973) */
		reached[1][8974] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3929: // STATE 8908 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8908] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3930: // STATE 8909 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (8934:0:1 - 1)
		IfNotBlocked
		reached[1][8909] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8934, 8910, 8934) */
		reached[1][8910] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8934, 8911, 8934) */
		reached[1][8911] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8934, 8927, 8934) */
		reached[1][8927] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3931: // STATE 8927 - mutant_1.pml:305 - [.(goto)] (0:8934:0 - 6)
		IfNotBlocked
		reached[1][8927] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3932: // STATE 8912 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (8934:0:1 - 1)
		IfNotBlocked
		reached[1][8912] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8934, 8913, 8934) */
		reached[1][8913] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8934, 8914, 8934) */
		reached[1][8914] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8934, 8927, 8934) */
		reached[1][8927] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3933: // STATE 8915 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8934:0:1 - 1)
		IfNotBlocked
		reached[1][8915] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8934, 8916, 8934) */
		reached[1][8916] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8934, 8917, 8934) */
		reached[1][8917] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8934, 8927, 8934) */
		reached[1][8927] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3934: // STATE 8918 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8934:0:1 - 1)
		IfNotBlocked
		reached[1][8918] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8934, 8919, 8934) */
		reached[1][8919] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8934, 8920, 8934) */
		reached[1][8920] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8934, 8927, 8934) */
		reached[1][8927] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3935: // STATE 8921 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (8934:0:1 - 1)
		IfNotBlocked
		reached[1][8921] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8934, 8922, 8934) */
		reached[1][8922] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8934, 8923, 8934) */
		reached[1][8923] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8934, 8927, 8934) */
		reached[1][8927] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3936: // STATE 8925 - mutant_1.pml:303 - [(1)] (8934:0:0 - 1)
		IfNotBlocked
		reached[1][8925] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8934, 8927, 8934) */
		reached[1][8927] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3937: // STATE 8930 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8930] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3938: // STATE 8933 - mutant_1.pml:310 - [(1)] (8973:0:1 - 1)
		IfNotBlocked
		reached[1][8933] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8973, 8935, 8973) */
		reached[1][8935] = 1;
		;
		/* merge: .(goto)(8973, 8967, 8973) */
		reached[1][8967] = 1;
		;
		/* merge: j = (j-1)(8973, 8969, 8973) */
		reached[1][8969] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8974, 8973) */
		reached[1][8974] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3939: // STATE 8937 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8937] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3940: // STATE 8938 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (8963:0:1 - 1)
		IfNotBlocked
		reached[1][8938] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(8963, 8939, 8963) */
		reached[1][8939] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(8963, 8940, 8963) */
		reached[1][8940] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8963, 8956, 8963) */
		reached[1][8956] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3941: // STATE 8956 - mutant_1.pml:334 - [.(goto)] (0:8963:0 - 6)
		IfNotBlocked
		reached[1][8956] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3942: // STATE 8941 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (8963:0:1 - 1)
		IfNotBlocked
		reached[1][8941] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(8963, 8942, 8963) */
		reached[1][8942] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(8963, 8943, 8963) */
		reached[1][8943] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8963, 8956, 8963) */
		reached[1][8956] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3943: // STATE 8944 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (8963:0:1 - 1)
		IfNotBlocked
		reached[1][8944] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(8963, 8945, 8963) */
		reached[1][8945] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(8963, 8946, 8963) */
		reached[1][8946] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8963, 8956, 8963) */
		reached[1][8956] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3944: // STATE 8947 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (8963:0:1 - 1)
		IfNotBlocked
		reached[1][8947] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(8963, 8948, 8963) */
		reached[1][8948] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(8963, 8949, 8963) */
		reached[1][8949] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8963, 8956, 8963) */
		reached[1][8956] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3945: // STATE 8950 - mutant_1.pml:328 - [((STOP==ABORT))] (8963:0:1 - 1)
		IfNotBlocked
		reached[1][8950] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(8963, 8951, 8963) */
		reached[1][8951] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(8963, 8952, 8963) */
		reached[1][8952] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(8963, 8956, 8963) */
		reached[1][8956] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3946: // STATE 8954 - mutant_1.pml:332 - [(1)] (8963:0:0 - 1)
		IfNotBlocked
		reached[1][8954] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8963, 8956, 8963) */
		reached[1][8956] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3947: // STATE 8959 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8959] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3948: // STATE 8962 - mutant_1.pml:339 - [(1)] (8973:0:1 - 1)
		IfNotBlocked
		reached[1][8962] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(8973, 8964, 8973) */
		reached[1][8964] = 1;
		;
		/* merge: .(goto)(8973, 8967, 8973) */
		reached[1][8967] = 1;
		;
		/* merge: j = (j-1)(8973, 8969, 8973) */
		reached[1][8969] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8974, 8973) */
		reached[1][8974] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3949: // STATE 8969 - mutant_1.pml:386 - [j = (j-1)] (0:8973:1 - 13)
		IfNotBlocked
		reached[1][8969] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 8974, 8973) */
		reached[1][8974] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3950: // STATE 8971 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][8971] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3951: // STATE 8981 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8981] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3952: // STATE 8982 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][8982] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3953: // STATE 8983 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (9003:0:1 - 1)
		IfNotBlocked
		reached[1][8983] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9003, 8984, 9003) */
		reached[1][8984] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9003, 8985, 9003) */
		reached[1][8985] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9003, 9001, 9003) */
		reached[1][9001] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3954: // STATE 9001 - mutant_1.pml:246 - [.(goto)] (0:9003:0 - 6)
		IfNotBlocked
		reached[1][9001] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3955: // STATE 8986 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (9003:0:1 - 1)
		IfNotBlocked
		reached[1][8986] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9003, 8987, 9003) */
		reached[1][8987] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9003, 8988, 9003) */
		reached[1][8988] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9003, 9001, 9003) */
		reached[1][9001] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3956: // STATE 8989 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9003:0:1 - 1)
		IfNotBlocked
		reached[1][8989] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9003, 8990, 9003) */
		reached[1][8990] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9003, 8991, 9003) */
		reached[1][8991] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9003, 9001, 9003) */
		reached[1][9001] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3957: // STATE 8992 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9003:0:1 - 1)
		IfNotBlocked
		reached[1][8992] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9003, 8993, 9003) */
		reached[1][8993] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9003, 8994, 9003) */
		reached[1][8994] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9003, 9001, 9003) */
		reached[1][9001] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3958: // STATE 8995 - mutant_1.pml:240 - [((START==ABORT))] (9003:0:1 - 1)
		IfNotBlocked
		reached[1][8995] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9003, 8996, 9003) */
		reached[1][8996] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9003, 8997, 9003) */
		reached[1][8997] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9003, 9001, 9003) */
		reached[1][9001] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3959: // STATE 8999 - mutant_1.pml:244 - [(1)] (9003:0:0 - 1)
		IfNotBlocked
		reached[1][8999] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9003, 9001, 9003) */
		reached[1][9001] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3960: // STATE 9003 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9003] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3961: // STATE 9005 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9005] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3962: // STATE 9008 - mutant_1.pml:252 - [(1)] (9106:0:1 - 1)
		IfNotBlocked
		reached[1][9008] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9106, 9010, 9106) */
		reached[1][9010] = 1;
		;
		/* merge: .(goto)(9106, 9100, 9106) */
		reached[1][9100] = 1;
		;
		/* merge: j = (j+1)(9106, 9102, 9106) */
		reached[1][9102] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9107, 9106) */
		reached[1][9107] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3963: // STATE 9012 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9012] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3964: // STATE 9013 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (9038:0:1 - 1)
		IfNotBlocked
		reached[1][9013] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9038, 9014, 9038) */
		reached[1][9014] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9038, 9015, 9038) */
		reached[1][9015] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9038, 9031, 9038) */
		reached[1][9031] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3965: // STATE 9031 - mutant_1.pml:276 - [.(goto)] (0:9038:0 - 6)
		IfNotBlocked
		reached[1][9031] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3966: // STATE 9016 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (9038:0:1 - 1)
		IfNotBlocked
		reached[1][9016] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9038, 9017, 9038) */
		reached[1][9017] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9038, 9018, 9038) */
		reached[1][9018] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9038, 9031, 9038) */
		reached[1][9031] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3967: // STATE 9019 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9038:0:1 - 1)
		IfNotBlocked
		reached[1][9019] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9038, 9020, 9038) */
		reached[1][9020] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9038, 9021, 9038) */
		reached[1][9021] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9038, 9031, 9038) */
		reached[1][9031] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3968: // STATE 9022 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9038:0:1 - 1)
		IfNotBlocked
		reached[1][9022] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9038, 9023, 9038) */
		reached[1][9023] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9038, 9024, 9038) */
		reached[1][9024] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9038, 9031, 9038) */
		reached[1][9031] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3969: // STATE 9025 - mutant_1.pml:270 - [((PAUSE==ABORT))] (9038:0:1 - 1)
		IfNotBlocked
		reached[1][9025] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9038, 9026, 9038) */
		reached[1][9026] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9038, 9027, 9038) */
		reached[1][9027] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9038, 9031, 9038) */
		reached[1][9031] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3970: // STATE 9029 - mutant_1.pml:274 - [(1)] (9038:0:0 - 1)
		IfNotBlocked
		reached[1][9029] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9038, 9031, 9038) */
		reached[1][9031] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3971: // STATE 9034 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9034] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3972: // STATE 9037 - mutant_1.pml:281 - [(1)] (9106:0:1 - 1)
		IfNotBlocked
		reached[1][9037] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9106, 9039, 9106) */
		reached[1][9039] = 1;
		;
		/* merge: .(goto)(9106, 9100, 9106) */
		reached[1][9100] = 1;
		;
		/* merge: j = (j+1)(9106, 9102, 9106) */
		reached[1][9102] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9107, 9106) */
		reached[1][9107] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3973: // STATE 9041 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9041] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3974: // STATE 9042 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (9067:0:1 - 1)
		IfNotBlocked
		reached[1][9042] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9067, 9043, 9067) */
		reached[1][9043] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9067, 9044, 9067) */
		reached[1][9044] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9067, 9060, 9067) */
		reached[1][9060] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3975: // STATE 9060 - mutant_1.pml:305 - [.(goto)] (0:9067:0 - 6)
		IfNotBlocked
		reached[1][9060] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3976: // STATE 9045 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (9067:0:1 - 1)
		IfNotBlocked
		reached[1][9045] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9067, 9046, 9067) */
		reached[1][9046] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9067, 9047, 9067) */
		reached[1][9047] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9067, 9060, 9067) */
		reached[1][9060] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3977: // STATE 9048 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9067:0:1 - 1)
		IfNotBlocked
		reached[1][9048] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9067, 9049, 9067) */
		reached[1][9049] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9067, 9050, 9067) */
		reached[1][9050] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9067, 9060, 9067) */
		reached[1][9060] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3978: // STATE 9051 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9067:0:1 - 1)
		IfNotBlocked
		reached[1][9051] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9067, 9052, 9067) */
		reached[1][9052] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9067, 9053, 9067) */
		reached[1][9053] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9067, 9060, 9067) */
		reached[1][9060] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3979: // STATE 9054 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (9067:0:1 - 1)
		IfNotBlocked
		reached[1][9054] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9067, 9055, 9067) */
		reached[1][9055] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9067, 9056, 9067) */
		reached[1][9056] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9067, 9060, 9067) */
		reached[1][9060] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3980: // STATE 9058 - mutant_1.pml:303 - [(1)] (9067:0:0 - 1)
		IfNotBlocked
		reached[1][9058] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9067, 9060, 9067) */
		reached[1][9060] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3981: // STATE 9063 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9063] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3982: // STATE 9066 - mutant_1.pml:310 - [(1)] (9106:0:1 - 1)
		IfNotBlocked
		reached[1][9066] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9106, 9068, 9106) */
		reached[1][9068] = 1;
		;
		/* merge: .(goto)(9106, 9100, 9106) */
		reached[1][9100] = 1;
		;
		/* merge: j = (j+1)(9106, 9102, 9106) */
		reached[1][9102] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9107, 9106) */
		reached[1][9107] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3983: // STATE 9070 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9070] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3984: // STATE 9071 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (9096:0:1 - 1)
		IfNotBlocked
		reached[1][9071] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9096, 9072, 9096) */
		reached[1][9072] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9096, 9073, 9096) */
		reached[1][9073] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9096, 9089, 9096) */
		reached[1][9089] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3985: // STATE 9089 - mutant_1.pml:334 - [.(goto)] (0:9096:0 - 6)
		IfNotBlocked
		reached[1][9089] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 3986: // STATE 9074 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (9096:0:1 - 1)
		IfNotBlocked
		reached[1][9074] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9096, 9075, 9096) */
		reached[1][9075] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9096, 9076, 9096) */
		reached[1][9076] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9096, 9089, 9096) */
		reached[1][9089] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3987: // STATE 9077 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9096:0:1 - 1)
		IfNotBlocked
		reached[1][9077] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9096, 9078, 9096) */
		reached[1][9078] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9096, 9079, 9096) */
		reached[1][9079] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9096, 9089, 9096) */
		reached[1][9089] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3988: // STATE 9080 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9096:0:1 - 1)
		IfNotBlocked
		reached[1][9080] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9096, 9081, 9096) */
		reached[1][9081] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9096, 9082, 9096) */
		reached[1][9082] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9096, 9089, 9096) */
		reached[1][9089] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3989: // STATE 9083 - mutant_1.pml:328 - [((STOP==ABORT))] (9096:0:1 - 1)
		IfNotBlocked
		reached[1][9083] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9096, 9084, 9096) */
		reached[1][9084] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9096, 9085, 9096) */
		reached[1][9085] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9096, 9089, 9096) */
		reached[1][9089] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 3990: // STATE 9087 - mutant_1.pml:332 - [(1)] (9096:0:0 - 1)
		IfNotBlocked
		reached[1][9087] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9096, 9089, 9096) */
		reached[1][9089] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3991: // STATE 9092 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9092] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3992: // STATE 9095 - mutant_1.pml:339 - [(1)] (9106:0:1 - 1)
		IfNotBlocked
		reached[1][9095] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9106, 9097, 9106) */
		reached[1][9097] = 1;
		;
		/* merge: .(goto)(9106, 9100, 9106) */
		reached[1][9100] = 1;
		;
		/* merge: j = (j+1)(9106, 9102, 9106) */
		reached[1][9102] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9107, 9106) */
		reached[1][9107] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 3993: // STATE 9102 - mutant_1.pml:375 - [j = (j+1)] (0:9106:1 - 13)
		IfNotBlocked
		reached[1][9102] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9107, 9106) */
		reached[1][9107] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 3994: // STATE 9104 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9104] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 3995: // STATE 9110 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9110] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3996: // STATE 9111 - mutant_1.pml:405 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9111] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3997: // STATE 9112 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9112] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3998: // STATE 9114 - mutant_1.pml:407 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9114] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 3999: // STATE 9115 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9115] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4000: // STATE 9117 - mutant_1.pml:409 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9117] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4001: // STATE 9118 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9118] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4002: // STATE 9120 - mutant_1.pml:411 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9120] = 1;
		if (!((6==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4003: // STATE 9121 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9121] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4004: // STATE 9125 - mutant_1.pml:414 - [j = (j+1)] (0:9129:1 - 5)
		IfNotBlocked
		reached[1][9125] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9130, 9129) */
		reached[1][9130] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4005: // STATE 9127 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9127] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4006: // STATE 9138 - mutant_1.pml:451 - [(((4==ABORTING)||(4==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9138] = 1;
		if (!(((4==4)||(4==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4007: // STATE 9139 - mutant_1.pml:422 - [(((2==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9139] = 1;
		if (!(((2==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4008: // STATE 9140 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9140] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4009: // STATE 9142 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9142] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4010: // STATE 9143 - mutant_1.pml:394 - [(((2==START)||(2==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9143] = 1;
		if (!(((2==9)||(2==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4011: // STATE 9144 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9144] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4012: // STATE 9145 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9145] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4013: // STATE 9146 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (9166:0:1 - 1)
		IfNotBlocked
		reached[1][9146] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9166, 9147, 9166) */
		reached[1][9147] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9166, 9148, 9166) */
		reached[1][9148] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9166, 9164, 9166) */
		reached[1][9164] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4014: // STATE 9164 - mutant_1.pml:246 - [.(goto)] (0:9166:0 - 6)
		IfNotBlocked
		reached[1][9164] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4015: // STATE 9149 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (9166:0:1 - 1)
		IfNotBlocked
		reached[1][9149] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9166, 9150, 9166) */
		reached[1][9150] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9166, 9151, 9166) */
		reached[1][9151] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9166, 9164, 9166) */
		reached[1][9164] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4016: // STATE 9152 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9166:0:1 - 1)
		IfNotBlocked
		reached[1][9152] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9166, 9153, 9166) */
		reached[1][9153] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9166, 9154, 9166) */
		reached[1][9154] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9166, 9164, 9166) */
		reached[1][9164] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4017: // STATE 9155 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9166:0:1 - 1)
		IfNotBlocked
		reached[1][9155] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9166, 9156, 9166) */
		reached[1][9156] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9166, 9157, 9166) */
		reached[1][9157] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9166, 9164, 9166) */
		reached[1][9164] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4018: // STATE 9158 - mutant_1.pml:240 - [((START==ABORT))] (9166:0:1 - 1)
		IfNotBlocked
		reached[1][9158] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9166, 9159, 9166) */
		reached[1][9159] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9166, 9160, 9166) */
		reached[1][9160] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9166, 9164, 9166) */
		reached[1][9164] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4019: // STATE 9162 - mutant_1.pml:244 - [(1)] (9166:0:0 - 1)
		IfNotBlocked
		reached[1][9162] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9166, 9164, 9166) */
		reached[1][9164] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4020: // STATE 9166 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9166] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4021: // STATE 9168 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9168] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4022: // STATE 9171 - mutant_1.pml:252 - [(1)] (9269:0:1 - 1)
		IfNotBlocked
		reached[1][9171] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9269, 9173, 9269) */
		reached[1][9173] = 1;
		;
		/* merge: .(goto)(9269, 9263, 9269) */
		reached[1][9263] = 1;
		;
		/* merge: j = (j+1)(9269, 9265, 9269) */
		reached[1][9265] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9270, 9269) */
		reached[1][9270] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4023: // STATE 9175 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9175] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4024: // STATE 9176 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (9201:0:1 - 1)
		IfNotBlocked
		reached[1][9176] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9201, 9177, 9201) */
		reached[1][9177] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9201, 9178, 9201) */
		reached[1][9178] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9201, 9194, 9201) */
		reached[1][9194] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4025: // STATE 9194 - mutant_1.pml:276 - [.(goto)] (0:9201:0 - 6)
		IfNotBlocked
		reached[1][9194] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4026: // STATE 9179 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (9201:0:1 - 1)
		IfNotBlocked
		reached[1][9179] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9201, 9180, 9201) */
		reached[1][9180] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9201, 9181, 9201) */
		reached[1][9181] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9201, 9194, 9201) */
		reached[1][9194] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4027: // STATE 9182 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9201:0:1 - 1)
		IfNotBlocked
		reached[1][9182] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9201, 9183, 9201) */
		reached[1][9183] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9201, 9184, 9201) */
		reached[1][9184] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9201, 9194, 9201) */
		reached[1][9194] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4028: // STATE 9185 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9201:0:1 - 1)
		IfNotBlocked
		reached[1][9185] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9201, 9186, 9201) */
		reached[1][9186] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9201, 9187, 9201) */
		reached[1][9187] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9201, 9194, 9201) */
		reached[1][9194] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4029: // STATE 9188 - mutant_1.pml:270 - [((PAUSE==ABORT))] (9201:0:1 - 1)
		IfNotBlocked
		reached[1][9188] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9201, 9189, 9201) */
		reached[1][9189] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9201, 9190, 9201) */
		reached[1][9190] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9201, 9194, 9201) */
		reached[1][9194] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4030: // STATE 9192 - mutant_1.pml:274 - [(1)] (9201:0:0 - 1)
		IfNotBlocked
		reached[1][9192] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9201, 9194, 9201) */
		reached[1][9194] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4031: // STATE 9197 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9197] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4032: // STATE 9200 - mutant_1.pml:281 - [(1)] (9269:0:1 - 1)
		IfNotBlocked
		reached[1][9200] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9269, 9202, 9269) */
		reached[1][9202] = 1;
		;
		/* merge: .(goto)(9269, 9263, 9269) */
		reached[1][9263] = 1;
		;
		/* merge: j = (j+1)(9269, 9265, 9269) */
		reached[1][9265] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9270, 9269) */
		reached[1][9270] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4033: // STATE 9204 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9204] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4034: // STATE 9205 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (9230:0:1 - 1)
		IfNotBlocked
		reached[1][9205] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9230, 9206, 9230) */
		reached[1][9206] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9230, 9207, 9230) */
		reached[1][9207] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9230, 9223, 9230) */
		reached[1][9223] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4035: // STATE 9223 - mutant_1.pml:305 - [.(goto)] (0:9230:0 - 6)
		IfNotBlocked
		reached[1][9223] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4036: // STATE 9208 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (9230:0:1 - 1)
		IfNotBlocked
		reached[1][9208] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9230, 9209, 9230) */
		reached[1][9209] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9230, 9210, 9230) */
		reached[1][9210] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9230, 9223, 9230) */
		reached[1][9223] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4037: // STATE 9211 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9230:0:1 - 1)
		IfNotBlocked
		reached[1][9211] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9230, 9212, 9230) */
		reached[1][9212] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9230, 9213, 9230) */
		reached[1][9213] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9230, 9223, 9230) */
		reached[1][9223] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4038: // STATE 9214 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9230:0:1 - 1)
		IfNotBlocked
		reached[1][9214] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9230, 9215, 9230) */
		reached[1][9215] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9230, 9216, 9230) */
		reached[1][9216] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9230, 9223, 9230) */
		reached[1][9223] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4039: // STATE 9217 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (9230:0:1 - 1)
		IfNotBlocked
		reached[1][9217] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9230, 9218, 9230) */
		reached[1][9218] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9230, 9219, 9230) */
		reached[1][9219] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9230, 9223, 9230) */
		reached[1][9223] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4040: // STATE 9221 - mutant_1.pml:303 - [(1)] (9230:0:0 - 1)
		IfNotBlocked
		reached[1][9221] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9230, 9223, 9230) */
		reached[1][9223] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4041: // STATE 9226 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9226] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4042: // STATE 9229 - mutant_1.pml:310 - [(1)] (9269:0:1 - 1)
		IfNotBlocked
		reached[1][9229] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9269, 9231, 9269) */
		reached[1][9231] = 1;
		;
		/* merge: .(goto)(9269, 9263, 9269) */
		reached[1][9263] = 1;
		;
		/* merge: j = (j+1)(9269, 9265, 9269) */
		reached[1][9265] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9270, 9269) */
		reached[1][9270] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4043: // STATE 9233 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9233] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4044: // STATE 9234 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (9259:0:1 - 1)
		IfNotBlocked
		reached[1][9234] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9259, 9235, 9259) */
		reached[1][9235] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9259, 9236, 9259) */
		reached[1][9236] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9259, 9252, 9259) */
		reached[1][9252] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4045: // STATE 9252 - mutant_1.pml:334 - [.(goto)] (0:9259:0 - 6)
		IfNotBlocked
		reached[1][9252] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4046: // STATE 9237 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (9259:0:1 - 1)
		IfNotBlocked
		reached[1][9237] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9259, 9238, 9259) */
		reached[1][9238] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9259, 9239, 9259) */
		reached[1][9239] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9259, 9252, 9259) */
		reached[1][9252] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4047: // STATE 9240 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9259:0:1 - 1)
		IfNotBlocked
		reached[1][9240] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9259, 9241, 9259) */
		reached[1][9241] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9259, 9242, 9259) */
		reached[1][9242] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9259, 9252, 9259) */
		reached[1][9252] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4048: // STATE 9243 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9259:0:1 - 1)
		IfNotBlocked
		reached[1][9243] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9259, 9244, 9259) */
		reached[1][9244] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9259, 9245, 9259) */
		reached[1][9245] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9259, 9252, 9259) */
		reached[1][9252] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4049: // STATE 9246 - mutant_1.pml:328 - [((STOP==ABORT))] (9259:0:1 - 1)
		IfNotBlocked
		reached[1][9246] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9259, 9247, 9259) */
		reached[1][9247] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9259, 9248, 9259) */
		reached[1][9248] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9259, 9252, 9259) */
		reached[1][9252] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4050: // STATE 9250 - mutant_1.pml:332 - [(1)] (9259:0:0 - 1)
		IfNotBlocked
		reached[1][9250] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9259, 9252, 9259) */
		reached[1][9252] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4051: // STATE 9255 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9255] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4052: // STATE 9258 - mutant_1.pml:339 - [(1)] (9269:0:1 - 1)
		IfNotBlocked
		reached[1][9258] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9269, 9260, 9269) */
		reached[1][9260] = 1;
		;
		/* merge: .(goto)(9269, 9263, 9269) */
		reached[1][9263] = 1;
		;
		/* merge: j = (j+1)(9269, 9265, 9269) */
		reached[1][9265] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9270, 9269) */
		reached[1][9270] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4053: // STATE 9265 - mutant_1.pml:375 - [j = (j+1)] (0:9269:1 - 13)
		IfNotBlocked
		reached[1][9265] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9270, 9269) */
		reached[1][9270] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4054: // STATE 9267 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9267] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4055: // STATE 9274 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9274] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4056: // STATE 9275 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9275] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4057: // STATE 9276 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9276] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4058: // STATE 9277 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (9297:0:1 - 1)
		IfNotBlocked
		reached[1][9277] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9297, 9278, 9297) */
		reached[1][9278] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9297, 9279, 9297) */
		reached[1][9279] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9297, 9295, 9297) */
		reached[1][9295] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4059: // STATE 9295 - mutant_1.pml:246 - [.(goto)] (0:9297:0 - 6)
		IfNotBlocked
		reached[1][9295] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4060: // STATE 9280 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (9297:0:1 - 1)
		IfNotBlocked
		reached[1][9280] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9297, 9281, 9297) */
		reached[1][9281] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9297, 9282, 9297) */
		reached[1][9282] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9297, 9295, 9297) */
		reached[1][9295] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4061: // STATE 9283 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9297:0:1 - 1)
		IfNotBlocked
		reached[1][9283] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9297, 9284, 9297) */
		reached[1][9284] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9297, 9285, 9297) */
		reached[1][9285] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9297, 9295, 9297) */
		reached[1][9295] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4062: // STATE 9286 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9297:0:1 - 1)
		IfNotBlocked
		reached[1][9286] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9297, 9287, 9297) */
		reached[1][9287] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9297, 9288, 9297) */
		reached[1][9288] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9297, 9295, 9297) */
		reached[1][9295] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4063: // STATE 9289 - mutant_1.pml:240 - [((START==ABORT))] (9297:0:1 - 1)
		IfNotBlocked
		reached[1][9289] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9297, 9290, 9297) */
		reached[1][9290] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9297, 9291, 9297) */
		reached[1][9291] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9297, 9295, 9297) */
		reached[1][9295] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4064: // STATE 9293 - mutant_1.pml:244 - [(1)] (9297:0:0 - 1)
		IfNotBlocked
		reached[1][9293] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9297, 9295, 9297) */
		reached[1][9295] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4065: // STATE 9297 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9297] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4066: // STATE 9299 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9299] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4067: // STATE 9302 - mutant_1.pml:252 - [(1)] (9400:0:1 - 1)
		IfNotBlocked
		reached[1][9302] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9400, 9304, 9400) */
		reached[1][9304] = 1;
		;
		/* merge: .(goto)(9400, 9394, 9400) */
		reached[1][9394] = 1;
		;
		/* merge: j = (j-1)(9400, 9396, 9400) */
		reached[1][9396] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9401, 9400) */
		reached[1][9401] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4068: // STATE 9306 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9306] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4069: // STATE 9307 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (9332:0:1 - 1)
		IfNotBlocked
		reached[1][9307] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9332, 9308, 9332) */
		reached[1][9308] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9332, 9309, 9332) */
		reached[1][9309] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9332, 9325, 9332) */
		reached[1][9325] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4070: // STATE 9325 - mutant_1.pml:276 - [.(goto)] (0:9332:0 - 6)
		IfNotBlocked
		reached[1][9325] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4071: // STATE 9310 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (9332:0:1 - 1)
		IfNotBlocked
		reached[1][9310] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9332, 9311, 9332) */
		reached[1][9311] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9332, 9312, 9332) */
		reached[1][9312] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9332, 9325, 9332) */
		reached[1][9325] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4072: // STATE 9313 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9332:0:1 - 1)
		IfNotBlocked
		reached[1][9313] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9332, 9314, 9332) */
		reached[1][9314] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9332, 9315, 9332) */
		reached[1][9315] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9332, 9325, 9332) */
		reached[1][9325] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4073: // STATE 9316 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9332:0:1 - 1)
		IfNotBlocked
		reached[1][9316] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9332, 9317, 9332) */
		reached[1][9317] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9332, 9318, 9332) */
		reached[1][9318] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9332, 9325, 9332) */
		reached[1][9325] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4074: // STATE 9319 - mutant_1.pml:270 - [((PAUSE==ABORT))] (9332:0:1 - 1)
		IfNotBlocked
		reached[1][9319] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9332, 9320, 9332) */
		reached[1][9320] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9332, 9321, 9332) */
		reached[1][9321] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9332, 9325, 9332) */
		reached[1][9325] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4075: // STATE 9323 - mutant_1.pml:274 - [(1)] (9332:0:0 - 1)
		IfNotBlocked
		reached[1][9323] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9332, 9325, 9332) */
		reached[1][9325] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4076: // STATE 9328 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9328] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4077: // STATE 9331 - mutant_1.pml:281 - [(1)] (9400:0:1 - 1)
		IfNotBlocked
		reached[1][9331] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9400, 9333, 9400) */
		reached[1][9333] = 1;
		;
		/* merge: .(goto)(9400, 9394, 9400) */
		reached[1][9394] = 1;
		;
		/* merge: j = (j-1)(9400, 9396, 9400) */
		reached[1][9396] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9401, 9400) */
		reached[1][9401] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4078: // STATE 9335 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9335] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4079: // STATE 9336 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (9361:0:1 - 1)
		IfNotBlocked
		reached[1][9336] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9361, 9337, 9361) */
		reached[1][9337] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9361, 9338, 9361) */
		reached[1][9338] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9361, 9354, 9361) */
		reached[1][9354] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4080: // STATE 9354 - mutant_1.pml:305 - [.(goto)] (0:9361:0 - 6)
		IfNotBlocked
		reached[1][9354] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4081: // STATE 9339 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (9361:0:1 - 1)
		IfNotBlocked
		reached[1][9339] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9361, 9340, 9361) */
		reached[1][9340] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9361, 9341, 9361) */
		reached[1][9341] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9361, 9354, 9361) */
		reached[1][9354] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4082: // STATE 9342 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9361:0:1 - 1)
		IfNotBlocked
		reached[1][9342] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9361, 9343, 9361) */
		reached[1][9343] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9361, 9344, 9361) */
		reached[1][9344] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9361, 9354, 9361) */
		reached[1][9354] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4083: // STATE 9345 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9361:0:1 - 1)
		IfNotBlocked
		reached[1][9345] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9361, 9346, 9361) */
		reached[1][9346] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9361, 9347, 9361) */
		reached[1][9347] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9361, 9354, 9361) */
		reached[1][9354] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4084: // STATE 9348 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (9361:0:1 - 1)
		IfNotBlocked
		reached[1][9348] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9361, 9349, 9361) */
		reached[1][9349] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9361, 9350, 9361) */
		reached[1][9350] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9361, 9354, 9361) */
		reached[1][9354] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4085: // STATE 9352 - mutant_1.pml:303 - [(1)] (9361:0:0 - 1)
		IfNotBlocked
		reached[1][9352] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9361, 9354, 9361) */
		reached[1][9354] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4086: // STATE 9357 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9357] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4087: // STATE 9360 - mutant_1.pml:310 - [(1)] (9400:0:1 - 1)
		IfNotBlocked
		reached[1][9360] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9400, 9362, 9400) */
		reached[1][9362] = 1;
		;
		/* merge: .(goto)(9400, 9394, 9400) */
		reached[1][9394] = 1;
		;
		/* merge: j = (j-1)(9400, 9396, 9400) */
		reached[1][9396] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9401, 9400) */
		reached[1][9401] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4088: // STATE 9364 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9364] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4089: // STATE 9365 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (9390:0:1 - 1)
		IfNotBlocked
		reached[1][9365] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9390, 9366, 9390) */
		reached[1][9366] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9390, 9367, 9390) */
		reached[1][9367] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9390, 9383, 9390) */
		reached[1][9383] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4090: // STATE 9383 - mutant_1.pml:334 - [.(goto)] (0:9390:0 - 6)
		IfNotBlocked
		reached[1][9383] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4091: // STATE 9368 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (9390:0:1 - 1)
		IfNotBlocked
		reached[1][9368] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9390, 9369, 9390) */
		reached[1][9369] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9390, 9370, 9390) */
		reached[1][9370] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9390, 9383, 9390) */
		reached[1][9383] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4092: // STATE 9371 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9390:0:1 - 1)
		IfNotBlocked
		reached[1][9371] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9390, 9372, 9390) */
		reached[1][9372] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9390, 9373, 9390) */
		reached[1][9373] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9390, 9383, 9390) */
		reached[1][9383] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4093: // STATE 9374 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9390:0:1 - 1)
		IfNotBlocked
		reached[1][9374] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9390, 9375, 9390) */
		reached[1][9375] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9390, 9376, 9390) */
		reached[1][9376] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9390, 9383, 9390) */
		reached[1][9383] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4094: // STATE 9377 - mutant_1.pml:328 - [((STOP==ABORT))] (9390:0:1 - 1)
		IfNotBlocked
		reached[1][9377] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9390, 9378, 9390) */
		reached[1][9378] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9390, 9379, 9390) */
		reached[1][9379] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9390, 9383, 9390) */
		reached[1][9383] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4095: // STATE 9381 - mutant_1.pml:332 - [(1)] (9390:0:0 - 1)
		IfNotBlocked
		reached[1][9381] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9390, 9383, 9390) */
		reached[1][9383] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4096: // STATE 9386 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9386] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4097: // STATE 9389 - mutant_1.pml:339 - [(1)] (9400:0:1 - 1)
		IfNotBlocked
		reached[1][9389] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9400, 9391, 9400) */
		reached[1][9391] = 1;
		;
		/* merge: .(goto)(9400, 9394, 9400) */
		reached[1][9394] = 1;
		;
		/* merge: j = (j-1)(9400, 9396, 9400) */
		reached[1][9396] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9401, 9400) */
		reached[1][9401] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4098: // STATE 9396 - mutant_1.pml:386 - [j = (j-1)] (0:9400:1 - 13)
		IfNotBlocked
		reached[1][9396] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9401, 9400) */
		reached[1][9401] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4099: // STATE 9398 - mutant_1.pml:388 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9398] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4100: // STATE 9408 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9408] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4101: // STATE 9409 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9409] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4102: // STATE 9410 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (9430:0:1 - 1)
		IfNotBlocked
		reached[1][9410] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9430, 9411, 9430) */
		reached[1][9411] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9430, 9412, 9430) */
		reached[1][9412] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9430, 9428, 9430) */
		reached[1][9428] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4103: // STATE 9428 - mutant_1.pml:246 - [.(goto)] (0:9430:0 - 6)
		IfNotBlocked
		reached[1][9428] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4104: // STATE 9413 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (9430:0:1 - 1)
		IfNotBlocked
		reached[1][9413] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9430, 9414, 9430) */
		reached[1][9414] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9430, 9415, 9430) */
		reached[1][9415] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9430, 9428, 9430) */
		reached[1][9428] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4105: // STATE 9416 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9430:0:1 - 1)
		IfNotBlocked
		reached[1][9416] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9430, 9417, 9430) */
		reached[1][9417] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9430, 9418, 9430) */
		reached[1][9418] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9430, 9428, 9430) */
		reached[1][9428] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4106: // STATE 9419 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9430:0:1 - 1)
		IfNotBlocked
		reached[1][9419] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9430, 9420, 9430) */
		reached[1][9420] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9430, 9421, 9430) */
		reached[1][9421] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9430, 9428, 9430) */
		reached[1][9428] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4107: // STATE 9422 - mutant_1.pml:240 - [((START==ABORT))] (9430:0:1 - 1)
		IfNotBlocked
		reached[1][9422] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9430, 9423, 9430) */
		reached[1][9423] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9430, 9424, 9430) */
		reached[1][9424] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9430, 9428, 9430) */
		reached[1][9428] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4108: // STATE 9426 - mutant_1.pml:244 - [(1)] (9430:0:0 - 1)
		IfNotBlocked
		reached[1][9426] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9430, 9428, 9430) */
		reached[1][9428] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4109: // STATE 9430 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9430] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4110: // STATE 9432 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9432] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4111: // STATE 9435 - mutant_1.pml:252 - [(1)] (9533:0:1 - 1)
		IfNotBlocked
		reached[1][9435] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9533, 9437, 9533) */
		reached[1][9437] = 1;
		;
		/* merge: .(goto)(9533, 9527, 9533) */
		reached[1][9527] = 1;
		;
		/* merge: j = (j+1)(9533, 9529, 9533) */
		reached[1][9529] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9534, 9533) */
		reached[1][9534] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4112: // STATE 9439 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9439] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4113: // STATE 9440 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (9465:0:1 - 1)
		IfNotBlocked
		reached[1][9440] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9465, 9441, 9465) */
		reached[1][9441] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9465, 9442, 9465) */
		reached[1][9442] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9465, 9458, 9465) */
		reached[1][9458] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4114: // STATE 9458 - mutant_1.pml:276 - [.(goto)] (0:9465:0 - 6)
		IfNotBlocked
		reached[1][9458] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4115: // STATE 9443 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (9465:0:1 - 1)
		IfNotBlocked
		reached[1][9443] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9465, 9444, 9465) */
		reached[1][9444] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9465, 9445, 9465) */
		reached[1][9445] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9465, 9458, 9465) */
		reached[1][9458] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4116: // STATE 9446 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9465:0:1 - 1)
		IfNotBlocked
		reached[1][9446] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9465, 9447, 9465) */
		reached[1][9447] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9465, 9448, 9465) */
		reached[1][9448] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9465, 9458, 9465) */
		reached[1][9458] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4117: // STATE 9449 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9465:0:1 - 1)
		IfNotBlocked
		reached[1][9449] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9465, 9450, 9465) */
		reached[1][9450] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9465, 9451, 9465) */
		reached[1][9451] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9465, 9458, 9465) */
		reached[1][9458] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4118: // STATE 9452 - mutant_1.pml:270 - [((PAUSE==ABORT))] (9465:0:1 - 1)
		IfNotBlocked
		reached[1][9452] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9465, 9453, 9465) */
		reached[1][9453] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9465, 9454, 9465) */
		reached[1][9454] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9465, 9458, 9465) */
		reached[1][9458] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4119: // STATE 9456 - mutant_1.pml:274 - [(1)] (9465:0:0 - 1)
		IfNotBlocked
		reached[1][9456] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9465, 9458, 9465) */
		reached[1][9458] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4120: // STATE 9461 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9461] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4121: // STATE 9464 - mutant_1.pml:281 - [(1)] (9533:0:1 - 1)
		IfNotBlocked
		reached[1][9464] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9533, 9466, 9533) */
		reached[1][9466] = 1;
		;
		/* merge: .(goto)(9533, 9527, 9533) */
		reached[1][9527] = 1;
		;
		/* merge: j = (j+1)(9533, 9529, 9533) */
		reached[1][9529] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9534, 9533) */
		reached[1][9534] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4122: // STATE 9468 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9468] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4123: // STATE 9469 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (9494:0:1 - 1)
		IfNotBlocked
		reached[1][9469] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9494, 9470, 9494) */
		reached[1][9470] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9494, 9471, 9494) */
		reached[1][9471] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9494, 9487, 9494) */
		reached[1][9487] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4124: // STATE 9487 - mutant_1.pml:305 - [.(goto)] (0:9494:0 - 6)
		IfNotBlocked
		reached[1][9487] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4125: // STATE 9472 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (9494:0:1 - 1)
		IfNotBlocked
		reached[1][9472] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9494, 9473, 9494) */
		reached[1][9473] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9494, 9474, 9494) */
		reached[1][9474] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9494, 9487, 9494) */
		reached[1][9487] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4126: // STATE 9475 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9494:0:1 - 1)
		IfNotBlocked
		reached[1][9475] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9494, 9476, 9494) */
		reached[1][9476] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9494, 9477, 9494) */
		reached[1][9477] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9494, 9487, 9494) */
		reached[1][9487] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4127: // STATE 9478 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9494:0:1 - 1)
		IfNotBlocked
		reached[1][9478] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9494, 9479, 9494) */
		reached[1][9479] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9494, 9480, 9494) */
		reached[1][9480] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9494, 9487, 9494) */
		reached[1][9487] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4128: // STATE 9481 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (9494:0:1 - 1)
		IfNotBlocked
		reached[1][9481] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9494, 9482, 9494) */
		reached[1][9482] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9494, 9483, 9494) */
		reached[1][9483] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9494, 9487, 9494) */
		reached[1][9487] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4129: // STATE 9485 - mutant_1.pml:303 - [(1)] (9494:0:0 - 1)
		IfNotBlocked
		reached[1][9485] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9494, 9487, 9494) */
		reached[1][9487] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4130: // STATE 9490 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9490] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4131: // STATE 9493 - mutant_1.pml:310 - [(1)] (9533:0:1 - 1)
		IfNotBlocked
		reached[1][9493] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9533, 9495, 9533) */
		reached[1][9495] = 1;
		;
		/* merge: .(goto)(9533, 9527, 9533) */
		reached[1][9527] = 1;
		;
		/* merge: j = (j+1)(9533, 9529, 9533) */
		reached[1][9529] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9534, 9533) */
		reached[1][9534] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4132: // STATE 9497 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9497] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4133: // STATE 9498 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (9523:0:1 - 1)
		IfNotBlocked
		reached[1][9498] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9523, 9499, 9523) */
		reached[1][9499] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9523, 9500, 9523) */
		reached[1][9500] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9523, 9516, 9523) */
		reached[1][9516] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4134: // STATE 9516 - mutant_1.pml:334 - [.(goto)] (0:9523:0 - 6)
		IfNotBlocked
		reached[1][9516] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4135: // STATE 9501 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (9523:0:1 - 1)
		IfNotBlocked
		reached[1][9501] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9523, 9502, 9523) */
		reached[1][9502] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9523, 9503, 9523) */
		reached[1][9503] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9523, 9516, 9523) */
		reached[1][9516] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4136: // STATE 9504 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9523:0:1 - 1)
		IfNotBlocked
		reached[1][9504] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9523, 9505, 9523) */
		reached[1][9505] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9523, 9506, 9523) */
		reached[1][9506] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9523, 9516, 9523) */
		reached[1][9516] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4137: // STATE 9507 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9523:0:1 - 1)
		IfNotBlocked
		reached[1][9507] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9523, 9508, 9523) */
		reached[1][9508] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9523, 9509, 9523) */
		reached[1][9509] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9523, 9516, 9523) */
		reached[1][9516] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4138: // STATE 9510 - mutant_1.pml:328 - [((STOP==ABORT))] (9523:0:1 - 1)
		IfNotBlocked
		reached[1][9510] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9523, 9511, 9523) */
		reached[1][9511] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9523, 9512, 9523) */
		reached[1][9512] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9523, 9516, 9523) */
		reached[1][9516] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4139: // STATE 9514 - mutant_1.pml:332 - [(1)] (9523:0:0 - 1)
		IfNotBlocked
		reached[1][9514] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9523, 9516, 9523) */
		reached[1][9516] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4140: // STATE 9519 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9519] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4141: // STATE 9522 - mutant_1.pml:339 - [(1)] (9533:0:1 - 1)
		IfNotBlocked
		reached[1][9522] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9533, 9524, 9533) */
		reached[1][9524] = 1;
		;
		/* merge: .(goto)(9533, 9527, 9533) */
		reached[1][9527] = 1;
		;
		/* merge: j = (j+1)(9533, 9529, 9533) */
		reached[1][9529] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9534, 9533) */
		reached[1][9534] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4142: // STATE 9529 - mutant_1.pml:375 - [j = (j+1)] (0:9533:1 - 13)
		IfNotBlocked
		reached[1][9529] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9534, 9533) */
		reached[1][9534] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4143: // STATE 9531 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9531] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4144: // STATE 9537 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9537] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4145: // STATE 9538 - mutant_1.pml:405 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9538] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4146: // STATE 9539 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9539] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4147: // STATE 9541 - mutant_1.pml:407 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9541] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4148: // STATE 9542 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9542] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4149: // STATE 9544 - mutant_1.pml:409 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9544] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4150: // STATE 9545 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9545] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4151: // STATE 9547 - mutant_1.pml:411 - [((2==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9547] = 1;
		if (!((2==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4152: // STATE 9548 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9548] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4153: // STATE 9552 - mutant_1.pml:414 - [j = (j+1)] (0:9556:1 - 5)
		IfNotBlocked
		reached[1][9552] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9557, 9556) */
		reached[1][9557] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4154: // STATE 9554 - mutant_1.pml:416 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9554] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4155: // STATE 9571 - mutant_1.pml:447 - [((3==RUNNING))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9571] = 1;
		if (!((3==11)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4156: // STATE 9572 - mutant_1.pml:422 - [(((8==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9572] = 1;
		if (!(((8==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4157: // STATE 9573 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9573] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4158: // STATE 9575 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9575] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4159: // STATE 9576 - mutant_1.pml:394 - [(((8==START)||(8==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9576] = 1;
		if (!(((8==9)||(8==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4160: // STATE 9577 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9577] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4161: // STATE 9578 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9578] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4162: // STATE 9579 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (9599:0:1 - 1)
		IfNotBlocked
		reached[1][9579] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9599, 9580, 9599) */
		reached[1][9580] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9599, 9581, 9599) */
		reached[1][9581] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9599, 9597, 9599) */
		reached[1][9597] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4163: // STATE 9597 - mutant_1.pml:246 - [.(goto)] (0:9599:0 - 6)
		IfNotBlocked
		reached[1][9597] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4164: // STATE 9582 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (9599:0:1 - 1)
		IfNotBlocked
		reached[1][9582] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9599, 9583, 9599) */
		reached[1][9583] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9599, 9584, 9599) */
		reached[1][9584] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9599, 9597, 9599) */
		reached[1][9597] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4165: // STATE 9585 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9599:0:1 - 1)
		IfNotBlocked
		reached[1][9585] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9599, 9586, 9599) */
		reached[1][9586] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9599, 9587, 9599) */
		reached[1][9587] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9599, 9597, 9599) */
		reached[1][9597] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4166: // STATE 9588 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9599:0:1 - 1)
		IfNotBlocked
		reached[1][9588] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9599, 9589, 9599) */
		reached[1][9589] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9599, 9590, 9599) */
		reached[1][9590] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9599, 9597, 9599) */
		reached[1][9597] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4167: // STATE 9591 - mutant_1.pml:240 - [((START==ABORT))] (9599:0:1 - 1)
		IfNotBlocked
		reached[1][9591] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9599, 9592, 9599) */
		reached[1][9592] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9599, 9593, 9599) */
		reached[1][9593] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9599, 9597, 9599) */
		reached[1][9597] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4168: // STATE 9595 - mutant_1.pml:244 - [(1)] (9599:0:0 - 1)
		IfNotBlocked
		reached[1][9595] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9599, 9597, 9599) */
		reached[1][9597] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4169: // STATE 9599 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9599] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4170: // STATE 9601 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9601] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4171: // STATE 9604 - mutant_1.pml:252 - [(1)] (9702:0:1 - 1)
		IfNotBlocked
		reached[1][9604] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9702, 9606, 9702) */
		reached[1][9606] = 1;
		;
		/* merge: .(goto)(9702, 9696, 9702) */
		reached[1][9696] = 1;
		;
		/* merge: j = (j+1)(9702, 9698, 9702) */
		reached[1][9698] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9703, 9702) */
		reached[1][9703] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4172: // STATE 9608 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9608] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4173: // STATE 9609 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (9634:0:1 - 1)
		IfNotBlocked
		reached[1][9609] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9634, 9610, 9634) */
		reached[1][9610] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9634, 9611, 9634) */
		reached[1][9611] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9634, 9627, 9634) */
		reached[1][9627] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4174: // STATE 9627 - mutant_1.pml:276 - [.(goto)] (0:9634:0 - 6)
		IfNotBlocked
		reached[1][9627] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4175: // STATE 9612 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (9634:0:1 - 1)
		IfNotBlocked
		reached[1][9612] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9634, 9613, 9634) */
		reached[1][9613] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9634, 9614, 9634) */
		reached[1][9614] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9634, 9627, 9634) */
		reached[1][9627] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4176: // STATE 9615 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9634:0:1 - 1)
		IfNotBlocked
		reached[1][9615] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9634, 9616, 9634) */
		reached[1][9616] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9634, 9617, 9634) */
		reached[1][9617] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9634, 9627, 9634) */
		reached[1][9627] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4177: // STATE 9618 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9634:0:1 - 1)
		IfNotBlocked
		reached[1][9618] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9634, 9619, 9634) */
		reached[1][9619] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9634, 9620, 9634) */
		reached[1][9620] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9634, 9627, 9634) */
		reached[1][9627] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4178: // STATE 9621 - mutant_1.pml:270 - [((PAUSE==ABORT))] (9634:0:1 - 1)
		IfNotBlocked
		reached[1][9621] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9634, 9622, 9634) */
		reached[1][9622] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9634, 9623, 9634) */
		reached[1][9623] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9634, 9627, 9634) */
		reached[1][9627] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4179: // STATE 9625 - mutant_1.pml:274 - [(1)] (9634:0:0 - 1)
		IfNotBlocked
		reached[1][9625] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9634, 9627, 9634) */
		reached[1][9627] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4180: // STATE 9630 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9630] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4181: // STATE 9633 - mutant_1.pml:281 - [(1)] (9702:0:1 - 1)
		IfNotBlocked
		reached[1][9633] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9702, 9635, 9702) */
		reached[1][9635] = 1;
		;
		/* merge: .(goto)(9702, 9696, 9702) */
		reached[1][9696] = 1;
		;
		/* merge: j = (j+1)(9702, 9698, 9702) */
		reached[1][9698] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9703, 9702) */
		reached[1][9703] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4182: // STATE 9637 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9637] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4183: // STATE 9638 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (9663:0:1 - 1)
		IfNotBlocked
		reached[1][9638] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9663, 9639, 9663) */
		reached[1][9639] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9663, 9640, 9663) */
		reached[1][9640] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9663, 9656, 9663) */
		reached[1][9656] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4184: // STATE 9656 - mutant_1.pml:305 - [.(goto)] (0:9663:0 - 6)
		IfNotBlocked
		reached[1][9656] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4185: // STATE 9641 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (9663:0:1 - 1)
		IfNotBlocked
		reached[1][9641] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9663, 9642, 9663) */
		reached[1][9642] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9663, 9643, 9663) */
		reached[1][9643] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9663, 9656, 9663) */
		reached[1][9656] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4186: // STATE 9644 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9663:0:1 - 1)
		IfNotBlocked
		reached[1][9644] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9663, 9645, 9663) */
		reached[1][9645] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9663, 9646, 9663) */
		reached[1][9646] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9663, 9656, 9663) */
		reached[1][9656] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4187: // STATE 9647 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9663:0:1 - 1)
		IfNotBlocked
		reached[1][9647] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9663, 9648, 9663) */
		reached[1][9648] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9663, 9649, 9663) */
		reached[1][9649] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9663, 9656, 9663) */
		reached[1][9656] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4188: // STATE 9650 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (9663:0:1 - 1)
		IfNotBlocked
		reached[1][9650] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9663, 9651, 9663) */
		reached[1][9651] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9663, 9652, 9663) */
		reached[1][9652] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9663, 9656, 9663) */
		reached[1][9656] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4189: // STATE 9654 - mutant_1.pml:303 - [(1)] (9663:0:0 - 1)
		IfNotBlocked
		reached[1][9654] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9663, 9656, 9663) */
		reached[1][9656] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4190: // STATE 9659 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9659] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4191: // STATE 9662 - mutant_1.pml:310 - [(1)] (9702:0:1 - 1)
		IfNotBlocked
		reached[1][9662] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9702, 9664, 9702) */
		reached[1][9664] = 1;
		;
		/* merge: .(goto)(9702, 9696, 9702) */
		reached[1][9696] = 1;
		;
		/* merge: j = (j+1)(9702, 9698, 9702) */
		reached[1][9698] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9703, 9702) */
		reached[1][9703] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4192: // STATE 9666 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9666] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4193: // STATE 9667 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (9692:0:1 - 1)
		IfNotBlocked
		reached[1][9667] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9692, 9668, 9692) */
		reached[1][9668] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9692, 9669, 9692) */
		reached[1][9669] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9692, 9685, 9692) */
		reached[1][9685] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4194: // STATE 9685 - mutant_1.pml:334 - [.(goto)] (0:9692:0 - 6)
		IfNotBlocked
		reached[1][9685] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4195: // STATE 9670 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (9692:0:1 - 1)
		IfNotBlocked
		reached[1][9670] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9692, 9671, 9692) */
		reached[1][9671] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9692, 9672, 9692) */
		reached[1][9672] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9692, 9685, 9692) */
		reached[1][9685] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4196: // STATE 9673 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9692:0:1 - 1)
		IfNotBlocked
		reached[1][9673] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9692, 9674, 9692) */
		reached[1][9674] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9692, 9675, 9692) */
		reached[1][9675] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9692, 9685, 9692) */
		reached[1][9685] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4197: // STATE 9676 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9692:0:1 - 1)
		IfNotBlocked
		reached[1][9676] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9692, 9677, 9692) */
		reached[1][9677] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9692, 9678, 9692) */
		reached[1][9678] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9692, 9685, 9692) */
		reached[1][9685] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4198: // STATE 9679 - mutant_1.pml:328 - [((STOP==ABORT))] (9692:0:1 - 1)
		IfNotBlocked
		reached[1][9679] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9692, 9680, 9692) */
		reached[1][9680] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9692, 9681, 9692) */
		reached[1][9681] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9692, 9685, 9692) */
		reached[1][9685] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4199: // STATE 9683 - mutant_1.pml:332 - [(1)] (9692:0:0 - 1)
		IfNotBlocked
		reached[1][9683] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9692, 9685, 9692) */
		reached[1][9685] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4200: // STATE 9688 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9688] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4201: // STATE 9691 - mutant_1.pml:339 - [(1)] (9702:0:1 - 1)
		IfNotBlocked
		reached[1][9691] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9702, 9693, 9702) */
		reached[1][9693] = 1;
		;
		/* merge: .(goto)(9702, 9696, 9702) */
		reached[1][9696] = 1;
		;
		/* merge: j = (j+1)(9702, 9698, 9702) */
		reached[1][9698] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9703, 9702) */
		reached[1][9703] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4202: // STATE 9698 - mutant_1.pml:375 - [j = (j+1)] (0:9702:1 - 13)
		IfNotBlocked
		reached[1][9698] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9703, 9702) */
		reached[1][9703] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4203: // STATE 9700 - mutant_1.pml:377 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][9700] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4204: // STATE 9707 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9707] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4205: // STATE 9708 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9708] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4206: // STATE 9709 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9709] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4207: // STATE 9710 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (9730:0:1 - 1)
		IfNotBlocked
		reached[1][9710] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9730, 9711, 9730) */
		reached[1][9711] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9730, 9712, 9730) */
		reached[1][9712] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9730, 9728, 9730) */
		reached[1][9728] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4208: // STATE 9728 - mutant_1.pml:246 - [.(goto)] (0:9730:0 - 6)
		IfNotBlocked
		reached[1][9728] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4209: // STATE 9713 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (9730:0:1 - 1)
		IfNotBlocked
		reached[1][9713] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9730, 9714, 9730) */
		reached[1][9714] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9730, 9715, 9730) */
		reached[1][9715] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9730, 9728, 9730) */
		reached[1][9728] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4210: // STATE 9716 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9730:0:1 - 1)
		IfNotBlocked
		reached[1][9716] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9730, 9717, 9730) */
		reached[1][9717] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9730, 9718, 9730) */
		reached[1][9718] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9730, 9728, 9730) */
		reached[1][9728] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4211: // STATE 9719 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9730:0:1 - 1)
		IfNotBlocked
		reached[1][9719] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9730, 9720, 9730) */
		reached[1][9720] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9730, 9721, 9730) */
		reached[1][9721] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9730, 9728, 9730) */
		reached[1][9728] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4212: // STATE 9722 - mutant_1.pml:240 - [((START==ABORT))] (9730:0:1 - 1)
		IfNotBlocked
		reached[1][9722] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9730, 9723, 9730) */
		reached[1][9723] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9730, 9724, 9730) */
		reached[1][9724] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9730, 9728, 9730) */
		reached[1][9728] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4213: // STATE 9726 - mutant_1.pml:244 - [(1)] (9730:0:0 - 1)
		IfNotBlocked
		reached[1][9726] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9730, 9728, 9730) */
		reached[1][9728] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4214: // STATE 9730 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9730] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4215: // STATE 9732 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9732] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4216: // STATE 9735 - mutant_1.pml:252 - [(1)] (9833:0:1 - 1)
		IfNotBlocked
		reached[1][9735] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9833, 9737, 9833) */
		reached[1][9737] = 1;
		;
		/* merge: .(goto)(9833, 9827, 9833) */
		reached[1][9827] = 1;
		;
		/* merge: j = (j-1)(9833, 9829, 9833) */
		reached[1][9829] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9834, 9833) */
		reached[1][9834] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4217: // STATE 9739 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9739] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4218: // STATE 9740 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (9765:0:1 - 1)
		IfNotBlocked
		reached[1][9740] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9765, 9741, 9765) */
		reached[1][9741] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9765, 9742, 9765) */
		reached[1][9742] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9765, 9758, 9765) */
		reached[1][9758] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4219: // STATE 9758 - mutant_1.pml:276 - [.(goto)] (0:9765:0 - 6)
		IfNotBlocked
		reached[1][9758] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4220: // STATE 9743 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (9765:0:1 - 1)
		IfNotBlocked
		reached[1][9743] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9765, 9744, 9765) */
		reached[1][9744] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9765, 9745, 9765) */
		reached[1][9745] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9765, 9758, 9765) */
		reached[1][9758] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4221: // STATE 9746 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9765:0:1 - 1)
		IfNotBlocked
		reached[1][9746] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9765, 9747, 9765) */
		reached[1][9747] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9765, 9748, 9765) */
		reached[1][9748] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9765, 9758, 9765) */
		reached[1][9758] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4222: // STATE 9749 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9765:0:1 - 1)
		IfNotBlocked
		reached[1][9749] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9765, 9750, 9765) */
		reached[1][9750] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9765, 9751, 9765) */
		reached[1][9751] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9765, 9758, 9765) */
		reached[1][9758] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4223: // STATE 9752 - mutant_1.pml:270 - [((PAUSE==ABORT))] (9765:0:1 - 1)
		IfNotBlocked
		reached[1][9752] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9765, 9753, 9765) */
		reached[1][9753] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9765, 9754, 9765) */
		reached[1][9754] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9765, 9758, 9765) */
		reached[1][9758] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4224: // STATE 9756 - mutant_1.pml:274 - [(1)] (9765:0:0 - 1)
		IfNotBlocked
		reached[1][9756] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9765, 9758, 9765) */
		reached[1][9758] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4225: // STATE 9761 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9761] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4226: // STATE 9764 - mutant_1.pml:281 - [(1)] (9833:0:1 - 1)
		IfNotBlocked
		reached[1][9764] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9833, 9766, 9833) */
		reached[1][9766] = 1;
		;
		/* merge: .(goto)(9833, 9827, 9833) */
		reached[1][9827] = 1;
		;
		/* merge: j = (j-1)(9833, 9829, 9833) */
		reached[1][9829] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9834, 9833) */
		reached[1][9834] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4227: // STATE 9768 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9768] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4228: // STATE 9769 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (9794:0:1 - 1)
		IfNotBlocked
		reached[1][9769] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9794, 9770, 9794) */
		reached[1][9770] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9794, 9771, 9794) */
		reached[1][9771] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9794, 9787, 9794) */
		reached[1][9787] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4229: // STATE 9787 - mutant_1.pml:305 - [.(goto)] (0:9794:0 - 6)
		IfNotBlocked
		reached[1][9787] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4230: // STATE 9772 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (9794:0:1 - 1)
		IfNotBlocked
		reached[1][9772] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9794, 9773, 9794) */
		reached[1][9773] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9794, 9774, 9794) */
		reached[1][9774] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9794, 9787, 9794) */
		reached[1][9787] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4231: // STATE 9775 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9794:0:1 - 1)
		IfNotBlocked
		reached[1][9775] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9794, 9776, 9794) */
		reached[1][9776] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9794, 9777, 9794) */
		reached[1][9777] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9794, 9787, 9794) */
		reached[1][9787] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4232: // STATE 9778 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9794:0:1 - 1)
		IfNotBlocked
		reached[1][9778] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9794, 9779, 9794) */
		reached[1][9779] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9794, 9780, 9794) */
		reached[1][9780] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9794, 9787, 9794) */
		reached[1][9787] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4233: // STATE 9781 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (9794:0:1 - 1)
		IfNotBlocked
		reached[1][9781] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9794, 9782, 9794) */
		reached[1][9782] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9794, 9783, 9794) */
		reached[1][9783] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9794, 9787, 9794) */
		reached[1][9787] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4234: // STATE 9785 - mutant_1.pml:303 - [(1)] (9794:0:0 - 1)
		IfNotBlocked
		reached[1][9785] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9794, 9787, 9794) */
		reached[1][9787] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4235: // STATE 9790 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9790] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4236: // STATE 9793 - mutant_1.pml:310 - [(1)] (9833:0:1 - 1)
		IfNotBlocked
		reached[1][9793] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9833, 9795, 9833) */
		reached[1][9795] = 1;
		;
		/* merge: .(goto)(9833, 9827, 9833) */
		reached[1][9827] = 1;
		;
		/* merge: j = (j-1)(9833, 9829, 9833) */
		reached[1][9829] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9834, 9833) */
		reached[1][9834] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4237: // STATE 9797 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9797] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4238: // STATE 9798 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (9823:0:1 - 1)
		IfNotBlocked
		reached[1][9798] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9823, 9799, 9823) */
		reached[1][9799] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9823, 9800, 9823) */
		reached[1][9800] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9823, 9816, 9823) */
		reached[1][9816] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4239: // STATE 9816 - mutant_1.pml:334 - [.(goto)] (0:9823:0 - 6)
		IfNotBlocked
		reached[1][9816] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4240: // STATE 9801 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (9823:0:1 - 1)
		IfNotBlocked
		reached[1][9801] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9823, 9802, 9823) */
		reached[1][9802] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9823, 9803, 9823) */
		reached[1][9803] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9823, 9816, 9823) */
		reached[1][9816] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4241: // STATE 9804 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9823:0:1 - 1)
		IfNotBlocked
		reached[1][9804] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9823, 9805, 9823) */
		reached[1][9805] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9823, 9806, 9823) */
		reached[1][9806] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9823, 9816, 9823) */
		reached[1][9816] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4242: // STATE 9807 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9823:0:1 - 1)
		IfNotBlocked
		reached[1][9807] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9823, 9808, 9823) */
		reached[1][9808] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9823, 9809, 9823) */
		reached[1][9809] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9823, 9816, 9823) */
		reached[1][9816] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4243: // STATE 9810 - mutant_1.pml:328 - [((STOP==ABORT))] (9823:0:1 - 1)
		IfNotBlocked
		reached[1][9810] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9823, 9811, 9823) */
		reached[1][9811] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9823, 9812, 9823) */
		reached[1][9812] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9823, 9816, 9823) */
		reached[1][9816] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4244: // STATE 9814 - mutant_1.pml:332 - [(1)] (9823:0:0 - 1)
		IfNotBlocked
		reached[1][9814] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9823, 9816, 9823) */
		reached[1][9816] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4245: // STATE 9819 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9819] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4246: // STATE 9822 - mutant_1.pml:339 - [(1)] (9833:0:1 - 1)
		IfNotBlocked
		reached[1][9822] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9833, 9824, 9833) */
		reached[1][9824] = 1;
		;
		/* merge: .(goto)(9833, 9827, 9833) */
		reached[1][9827] = 1;
		;
		/* merge: j = (j-1)(9833, 9829, 9833) */
		reached[1][9829] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9834, 9833) */
		reached[1][9834] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4247: // STATE 9829 - mutant_1.pml:386 - [j = (j-1)] (0:9833:1 - 13)
		IfNotBlocked
		reached[1][9829] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9834, 9833) */
		reached[1][9834] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4248: // STATE 9831 - mutant_1.pml:388 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][9831] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4249: // STATE 9841 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9841] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4250: // STATE 9842 - mutant_1.pml:361 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9842] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4251: // STATE 9843 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (9863:0:1 - 1)
		IfNotBlocked
		reached[1][9843] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9863, 9844, 9863) */
		reached[1][9844] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9863, 9845, 9863) */
		reached[1][9845] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9863, 9861, 9863) */
		reached[1][9861] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4252: // STATE 9861 - mutant_1.pml:246 - [.(goto)] (0:9863:0 - 6)
		IfNotBlocked
		reached[1][9861] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4253: // STATE 9846 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (9863:0:1 - 1)
		IfNotBlocked
		reached[1][9846] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9863, 9847, 9863) */
		reached[1][9847] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9863, 9848, 9863) */
		reached[1][9848] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9863, 9861, 9863) */
		reached[1][9861] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4254: // STATE 9849 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9863:0:1 - 1)
		IfNotBlocked
		reached[1][9849] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9863, 9850, 9863) */
		reached[1][9850] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9863, 9851, 9863) */
		reached[1][9851] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9863, 9861, 9863) */
		reached[1][9861] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4255: // STATE 9852 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9863:0:1 - 1)
		IfNotBlocked
		reached[1][9852] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9863, 9853, 9863) */
		reached[1][9853] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9863, 9854, 9863) */
		reached[1][9854] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9863, 9861, 9863) */
		reached[1][9861] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4256: // STATE 9855 - mutant_1.pml:240 - [((START==ABORT))] (9863:0:1 - 1)
		IfNotBlocked
		reached[1][9855] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9863, 9856, 9863) */
		reached[1][9856] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9863, 9857, 9863) */
		reached[1][9857] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9863, 9861, 9863) */
		reached[1][9861] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4257: // STATE 9859 - mutant_1.pml:244 - [(1)] (9863:0:0 - 1)
		IfNotBlocked
		reached[1][9859] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9863, 9861, 9863) */
		reached[1][9861] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4258: // STATE 9863 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9863] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4259: // STATE 9865 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9865] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4260: // STATE 9868 - mutant_1.pml:252 - [(1)] (9966:0:1 - 1)
		IfNotBlocked
		reached[1][9868] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9966, 9870, 9966) */
		reached[1][9870] = 1;
		;
		/* merge: .(goto)(9966, 9960, 9966) */
		reached[1][9960] = 1;
		;
		/* merge: j = (j+1)(9966, 9962, 9966) */
		reached[1][9962] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9967, 9966) */
		reached[1][9967] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4261: // STATE 9872 - mutant_1.pml:363 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9872] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4262: // STATE 9873 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (9898:0:1 - 1)
		IfNotBlocked
		reached[1][9873] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9898, 9874, 9898) */
		reached[1][9874] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9898, 9875, 9898) */
		reached[1][9875] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9898, 9891, 9898) */
		reached[1][9891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4263: // STATE 9891 - mutant_1.pml:276 - [.(goto)] (0:9898:0 - 6)
		IfNotBlocked
		reached[1][9891] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4264: // STATE 9876 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (9898:0:1 - 1)
		IfNotBlocked
		reached[1][9876] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9898, 9877, 9898) */
		reached[1][9877] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9898, 9878, 9898) */
		reached[1][9878] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9898, 9891, 9898) */
		reached[1][9891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4265: // STATE 9879 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9898:0:1 - 1)
		IfNotBlocked
		reached[1][9879] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9898, 9880, 9898) */
		reached[1][9880] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9898, 9881, 9898) */
		reached[1][9881] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9898, 9891, 9898) */
		reached[1][9891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4266: // STATE 9882 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9898:0:1 - 1)
		IfNotBlocked
		reached[1][9882] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9898, 9883, 9898) */
		reached[1][9883] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9898, 9884, 9898) */
		reached[1][9884] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9898, 9891, 9898) */
		reached[1][9891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4267: // STATE 9885 - mutant_1.pml:270 - [((PAUSE==ABORT))] (9898:0:1 - 1)
		IfNotBlocked
		reached[1][9885] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9898, 9886, 9898) */
		reached[1][9886] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9898, 9887, 9898) */
		reached[1][9887] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9898, 9891, 9898) */
		reached[1][9891] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4268: // STATE 9889 - mutant_1.pml:274 - [(1)] (9898:0:0 - 1)
		IfNotBlocked
		reached[1][9889] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9898, 9891, 9898) */
		reached[1][9891] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4269: // STATE 9894 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9894] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4270: // STATE 9897 - mutant_1.pml:281 - [(1)] (9966:0:1 - 1)
		IfNotBlocked
		reached[1][9897] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9966, 9899, 9966) */
		reached[1][9899] = 1;
		;
		/* merge: .(goto)(9966, 9960, 9966) */
		reached[1][9960] = 1;
		;
		/* merge: j = (j+1)(9966, 9962, 9966) */
		reached[1][9962] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9967, 9966) */
		reached[1][9967] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4271: // STATE 9901 - mutant_1.pml:365 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9901] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4272: // STATE 9902 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (9927:0:1 - 1)
		IfNotBlocked
		reached[1][9902] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9927, 9903, 9927) */
		reached[1][9903] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9927, 9904, 9927) */
		reached[1][9904] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9927, 9920, 9927) */
		reached[1][9920] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4273: // STATE 9920 - mutant_1.pml:305 - [.(goto)] (0:9927:0 - 6)
		IfNotBlocked
		reached[1][9920] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4274: // STATE 9905 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (9927:0:1 - 1)
		IfNotBlocked
		reached[1][9905] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9927, 9906, 9927) */
		reached[1][9906] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9927, 9907, 9927) */
		reached[1][9907] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9927, 9920, 9927) */
		reached[1][9920] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4275: // STATE 9908 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9927:0:1 - 1)
		IfNotBlocked
		reached[1][9908] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9927, 9909, 9927) */
		reached[1][9909] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9927, 9910, 9927) */
		reached[1][9910] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9927, 9920, 9927) */
		reached[1][9920] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4276: // STATE 9911 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9927:0:1 - 1)
		IfNotBlocked
		reached[1][9911] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9927, 9912, 9927) */
		reached[1][9912] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9927, 9913, 9927) */
		reached[1][9913] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9927, 9920, 9927) */
		reached[1][9920] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4277: // STATE 9914 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (9927:0:1 - 1)
		IfNotBlocked
		reached[1][9914] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9927, 9915, 9927) */
		reached[1][9915] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9927, 9916, 9927) */
		reached[1][9916] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9927, 9920, 9927) */
		reached[1][9920] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4278: // STATE 9918 - mutant_1.pml:303 - [(1)] (9927:0:0 - 1)
		IfNotBlocked
		reached[1][9918] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9927, 9920, 9927) */
		reached[1][9920] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4279: // STATE 9923 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9923] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4280: // STATE 9926 - mutant_1.pml:310 - [(1)] (9966:0:1 - 1)
		IfNotBlocked
		reached[1][9926] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9966, 9928, 9966) */
		reached[1][9928] = 1;
		;
		/* merge: .(goto)(9966, 9960, 9966) */
		reached[1][9960] = 1;
		;
		/* merge: j = (j+1)(9966, 9962, 9966) */
		reached[1][9962] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9967, 9966) */
		reached[1][9967] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4281: // STATE 9930 - mutant_1.pml:367 - [(((8==STOP)||(8==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9930] = 1;
		if (!(((8==2)||(8==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4282: // STATE 9931 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (9956:0:1 - 1)
		IfNotBlocked
		reached[1][9931] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(9956, 9932, 9956) */
		reached[1][9932] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(9956, 9933, 9956) */
		reached[1][9933] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9956, 9949, 9956) */
		reached[1][9949] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4283: // STATE 9949 - mutant_1.pml:334 - [.(goto)] (0:9956:0 - 6)
		IfNotBlocked
		reached[1][9949] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4284: // STATE 9934 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (9956:0:1 - 1)
		IfNotBlocked
		reached[1][9934] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(9956, 9935, 9956) */
		reached[1][9935] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(9956, 9936, 9956) */
		reached[1][9936] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9956, 9949, 9956) */
		reached[1][9949] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4285: // STATE 9937 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (9956:0:1 - 1)
		IfNotBlocked
		reached[1][9937] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(9956, 9938, 9956) */
		reached[1][9938] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(9956, 9939, 9956) */
		reached[1][9939] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9956, 9949, 9956) */
		reached[1][9949] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4286: // STATE 9940 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (9956:0:1 - 1)
		IfNotBlocked
		reached[1][9940] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(9956, 9941, 9956) */
		reached[1][9941] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(9956, 9942, 9956) */
		reached[1][9942] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9956, 9949, 9956) */
		reached[1][9949] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4287: // STATE 9943 - mutant_1.pml:328 - [((STOP==ABORT))] (9956:0:1 - 1)
		IfNotBlocked
		reached[1][9943] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(9956, 9944, 9956) */
		reached[1][9944] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(9956, 9945, 9956) */
		reached[1][9945] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(9956, 9949, 9956) */
		reached[1][9949] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4288: // STATE 9947 - mutant_1.pml:332 - [(1)] (9956:0:0 - 1)
		IfNotBlocked
		reached[1][9947] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9956, 9949, 9956) */
		reached[1][9949] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4289: // STATE 9952 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9952] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4290: // STATE 9955 - mutant_1.pml:339 - [(1)] (9966:0:1 - 1)
		IfNotBlocked
		reached[1][9955] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(9966, 9957, 9966) */
		reached[1][9957] = 1;
		;
		/* merge: .(goto)(9966, 9960, 9966) */
		reached[1][9960] = 1;
		;
		/* merge: j = (j+1)(9966, 9962, 9966) */
		reached[1][9962] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9967, 9966) */
		reached[1][9967] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4291: // STATE 9962 - mutant_1.pml:375 - [j = (j+1)] (0:9966:1 - 13)
		IfNotBlocked
		reached[1][9962] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9967, 9966) */
		reached[1][9967] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4292: // STATE 9964 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][9964] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4293: // STATE 9970 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9970] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4294: // STATE 9971 - mutant_1.pml:405 - [((8==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9971] = 1;
		if (!((8==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4295: // STATE 9972 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9972] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4296: // STATE 9974 - mutant_1.pml:407 - [((8==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9974] = 1;
		if (!((8==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4297: // STATE 9975 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9975] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4298: // STATE 9977 - mutant_1.pml:409 - [((8==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9977] = 1;
		if (!((8==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4299: // STATE 9978 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9978] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4300: // STATE 9980 - mutant_1.pml:411 - [((8==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9980] = 1;
		if (!((8==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4301: // STATE 9981 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9981] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4302: // STATE 9985 - mutant_1.pml:414 - [j = (j+1)] (0:9989:1 - 5)
		IfNotBlocked
		reached[1][9985] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 9990, 9989) */
		reached[1][9990] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4303: // STATE 9987 - mutant_1.pml:416 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][9987] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4304: // STATE 9998 - mutant_1.pml:449 - [((3==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9998] = 1;
		if (!((3==10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4305: // STATE 9999 - mutant_1.pml:422 - [(((6==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][9999] = 1;
		if (!(((6==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4306: // STATE 10000 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][10000] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4307: // STATE 10002 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10002] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4308: // STATE 10003 - mutant_1.pml:394 - [(((6==START)||(6==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10003] = 1;
		if (!(((6==9)||(6==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4309: // STATE 10004 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10004] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4310: // STATE 10005 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10005] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4311: // STATE 10006 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (10026:0:1 - 1)
		IfNotBlocked
		reached[1][10006] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10026, 10007, 10026) */
		reached[1][10007] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10026, 10008, 10026) */
		reached[1][10008] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10026, 10024, 10026) */
		reached[1][10024] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4312: // STATE 10024 - mutant_1.pml:246 - [.(goto)] (0:10026:0 - 6)
		IfNotBlocked
		reached[1][10024] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4313: // STATE 10009 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (10026:0:1 - 1)
		IfNotBlocked
		reached[1][10009] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10026, 10010, 10026) */
		reached[1][10010] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10026, 10011, 10026) */
		reached[1][10011] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10026, 10024, 10026) */
		reached[1][10024] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4314: // STATE 10012 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10026:0:1 - 1)
		IfNotBlocked
		reached[1][10012] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10026, 10013, 10026) */
		reached[1][10013] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10026, 10014, 10026) */
		reached[1][10014] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10026, 10024, 10026) */
		reached[1][10024] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4315: // STATE 10015 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10026:0:1 - 1)
		IfNotBlocked
		reached[1][10015] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10026, 10016, 10026) */
		reached[1][10016] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10026, 10017, 10026) */
		reached[1][10017] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10026, 10024, 10026) */
		reached[1][10024] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4316: // STATE 10018 - mutant_1.pml:240 - [((START==ABORT))] (10026:0:1 - 1)
		IfNotBlocked
		reached[1][10018] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10026, 10019, 10026) */
		reached[1][10019] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10026, 10020, 10026) */
		reached[1][10020] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10026, 10024, 10026) */
		reached[1][10024] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4317: // STATE 10022 - mutant_1.pml:244 - [(1)] (10026:0:0 - 1)
		IfNotBlocked
		reached[1][10022] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10026, 10024, 10026) */
		reached[1][10024] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4318: // STATE 10026 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10026] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4319: // STATE 10028 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10028] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4320: // STATE 10031 - mutant_1.pml:252 - [(1)] (10129:0:1 - 1)
		IfNotBlocked
		reached[1][10031] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10129, 10033, 10129) */
		reached[1][10033] = 1;
		;
		/* merge: .(goto)(10129, 10123, 10129) */
		reached[1][10123] = 1;
		;
		/* merge: j = (j+1)(10129, 10125, 10129) */
		reached[1][10125] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10130, 10129) */
		reached[1][10130] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4321: // STATE 10035 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10035] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4322: // STATE 10036 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (10061:0:1 - 1)
		IfNotBlocked
		reached[1][10036] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10061, 10037, 10061) */
		reached[1][10037] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10061, 10038, 10061) */
		reached[1][10038] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10061, 10054, 10061) */
		reached[1][10054] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4323: // STATE 10054 - mutant_1.pml:276 - [.(goto)] (0:10061:0 - 6)
		IfNotBlocked
		reached[1][10054] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4324: // STATE 10039 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (10061:0:1 - 1)
		IfNotBlocked
		reached[1][10039] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10061, 10040, 10061) */
		reached[1][10040] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10061, 10041, 10061) */
		reached[1][10041] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10061, 10054, 10061) */
		reached[1][10054] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4325: // STATE 10042 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10061:0:1 - 1)
		IfNotBlocked
		reached[1][10042] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10061, 10043, 10061) */
		reached[1][10043] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10061, 10044, 10061) */
		reached[1][10044] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10061, 10054, 10061) */
		reached[1][10054] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4326: // STATE 10045 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10061:0:1 - 1)
		IfNotBlocked
		reached[1][10045] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10061, 10046, 10061) */
		reached[1][10046] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10061, 10047, 10061) */
		reached[1][10047] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10061, 10054, 10061) */
		reached[1][10054] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4327: // STATE 10048 - mutant_1.pml:270 - [((PAUSE==ABORT))] (10061:0:1 - 1)
		IfNotBlocked
		reached[1][10048] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10061, 10049, 10061) */
		reached[1][10049] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10061, 10050, 10061) */
		reached[1][10050] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10061, 10054, 10061) */
		reached[1][10054] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4328: // STATE 10052 - mutant_1.pml:274 - [(1)] (10061:0:0 - 1)
		IfNotBlocked
		reached[1][10052] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10061, 10054, 10061) */
		reached[1][10054] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4329: // STATE 10057 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10057] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4330: // STATE 10060 - mutant_1.pml:281 - [(1)] (10129:0:1 - 1)
		IfNotBlocked
		reached[1][10060] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10129, 10062, 10129) */
		reached[1][10062] = 1;
		;
		/* merge: .(goto)(10129, 10123, 10129) */
		reached[1][10123] = 1;
		;
		/* merge: j = (j+1)(10129, 10125, 10129) */
		reached[1][10125] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10130, 10129) */
		reached[1][10130] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4331: // STATE 10064 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10064] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4332: // STATE 10065 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (10090:0:1 - 1)
		IfNotBlocked
		reached[1][10065] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10090, 10066, 10090) */
		reached[1][10066] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10090, 10067, 10090) */
		reached[1][10067] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10090, 10083, 10090) */
		reached[1][10083] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4333: // STATE 10083 - mutant_1.pml:305 - [.(goto)] (0:10090:0 - 6)
		IfNotBlocked
		reached[1][10083] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4334: // STATE 10068 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (10090:0:1 - 1)
		IfNotBlocked
		reached[1][10068] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10090, 10069, 10090) */
		reached[1][10069] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10090, 10070, 10090) */
		reached[1][10070] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10090, 10083, 10090) */
		reached[1][10083] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4335: // STATE 10071 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10090:0:1 - 1)
		IfNotBlocked
		reached[1][10071] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10090, 10072, 10090) */
		reached[1][10072] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10090, 10073, 10090) */
		reached[1][10073] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10090, 10083, 10090) */
		reached[1][10083] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4336: // STATE 10074 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10090:0:1 - 1)
		IfNotBlocked
		reached[1][10074] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10090, 10075, 10090) */
		reached[1][10075] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10090, 10076, 10090) */
		reached[1][10076] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10090, 10083, 10090) */
		reached[1][10083] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4337: // STATE 10077 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (10090:0:1 - 1)
		IfNotBlocked
		reached[1][10077] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10090, 10078, 10090) */
		reached[1][10078] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10090, 10079, 10090) */
		reached[1][10079] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10090, 10083, 10090) */
		reached[1][10083] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4338: // STATE 10081 - mutant_1.pml:303 - [(1)] (10090:0:0 - 1)
		IfNotBlocked
		reached[1][10081] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10090, 10083, 10090) */
		reached[1][10083] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4339: // STATE 10086 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10086] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4340: // STATE 10089 - mutant_1.pml:310 - [(1)] (10129:0:1 - 1)
		IfNotBlocked
		reached[1][10089] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10129, 10091, 10129) */
		reached[1][10091] = 1;
		;
		/* merge: .(goto)(10129, 10123, 10129) */
		reached[1][10123] = 1;
		;
		/* merge: j = (j+1)(10129, 10125, 10129) */
		reached[1][10125] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10130, 10129) */
		reached[1][10130] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4341: // STATE 10093 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10093] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4342: // STATE 10094 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (10119:0:1 - 1)
		IfNotBlocked
		reached[1][10094] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10119, 10095, 10119) */
		reached[1][10095] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10119, 10096, 10119) */
		reached[1][10096] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10119, 10112, 10119) */
		reached[1][10112] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4343: // STATE 10112 - mutant_1.pml:334 - [.(goto)] (0:10119:0 - 6)
		IfNotBlocked
		reached[1][10112] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4344: // STATE 10097 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (10119:0:1 - 1)
		IfNotBlocked
		reached[1][10097] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10119, 10098, 10119) */
		reached[1][10098] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10119, 10099, 10119) */
		reached[1][10099] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10119, 10112, 10119) */
		reached[1][10112] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4345: // STATE 10100 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10119:0:1 - 1)
		IfNotBlocked
		reached[1][10100] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10119, 10101, 10119) */
		reached[1][10101] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10119, 10102, 10119) */
		reached[1][10102] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10119, 10112, 10119) */
		reached[1][10112] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4346: // STATE 10103 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10119:0:1 - 1)
		IfNotBlocked
		reached[1][10103] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10119, 10104, 10119) */
		reached[1][10104] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10119, 10105, 10119) */
		reached[1][10105] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10119, 10112, 10119) */
		reached[1][10112] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4347: // STATE 10106 - mutant_1.pml:328 - [((STOP==ABORT))] (10119:0:1 - 1)
		IfNotBlocked
		reached[1][10106] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10119, 10107, 10119) */
		reached[1][10107] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10119, 10108, 10119) */
		reached[1][10108] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10119, 10112, 10119) */
		reached[1][10112] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4348: // STATE 10110 - mutant_1.pml:332 - [(1)] (10119:0:0 - 1)
		IfNotBlocked
		reached[1][10110] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10119, 10112, 10119) */
		reached[1][10112] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4349: // STATE 10115 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10115] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4350: // STATE 10118 - mutant_1.pml:339 - [(1)] (10129:0:1 - 1)
		IfNotBlocked
		reached[1][10118] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10129, 10120, 10129) */
		reached[1][10120] = 1;
		;
		/* merge: .(goto)(10129, 10123, 10129) */
		reached[1][10123] = 1;
		;
		/* merge: j = (j+1)(10129, 10125, 10129) */
		reached[1][10125] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10130, 10129) */
		reached[1][10130] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4351: // STATE 10125 - mutant_1.pml:375 - [j = (j+1)] (0:10129:1 - 13)
		IfNotBlocked
		reached[1][10125] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10130, 10129) */
		reached[1][10130] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4352: // STATE 10127 - mutant_1.pml:377 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][10127] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4353: // STATE 10134 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][10134] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4354: // STATE 10135 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10135] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4355: // STATE 10136 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10136] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4356: // STATE 10137 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (10157:0:1 - 1)
		IfNotBlocked
		reached[1][10137] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10157, 10138, 10157) */
		reached[1][10138] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10157, 10139, 10157) */
		reached[1][10139] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10157, 10155, 10157) */
		reached[1][10155] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4357: // STATE 10155 - mutant_1.pml:246 - [.(goto)] (0:10157:0 - 6)
		IfNotBlocked
		reached[1][10155] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4358: // STATE 10140 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (10157:0:1 - 1)
		IfNotBlocked
		reached[1][10140] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10157, 10141, 10157) */
		reached[1][10141] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10157, 10142, 10157) */
		reached[1][10142] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10157, 10155, 10157) */
		reached[1][10155] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4359: // STATE 10143 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10157:0:1 - 1)
		IfNotBlocked
		reached[1][10143] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10157, 10144, 10157) */
		reached[1][10144] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10157, 10145, 10157) */
		reached[1][10145] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10157, 10155, 10157) */
		reached[1][10155] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4360: // STATE 10146 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10157:0:1 - 1)
		IfNotBlocked
		reached[1][10146] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10157, 10147, 10157) */
		reached[1][10147] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10157, 10148, 10157) */
		reached[1][10148] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10157, 10155, 10157) */
		reached[1][10155] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4361: // STATE 10149 - mutant_1.pml:240 - [((START==ABORT))] (10157:0:1 - 1)
		IfNotBlocked
		reached[1][10149] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10157, 10150, 10157) */
		reached[1][10150] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10157, 10151, 10157) */
		reached[1][10151] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10157, 10155, 10157) */
		reached[1][10155] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4362: // STATE 10153 - mutant_1.pml:244 - [(1)] (10157:0:0 - 1)
		IfNotBlocked
		reached[1][10153] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10157, 10155, 10157) */
		reached[1][10155] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4363: // STATE 10157 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10157] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4364: // STATE 10159 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10159] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4365: // STATE 10162 - mutant_1.pml:252 - [(1)] (10260:0:1 - 1)
		IfNotBlocked
		reached[1][10162] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10260, 10164, 10260) */
		reached[1][10164] = 1;
		;
		/* merge: .(goto)(10260, 10254, 10260) */
		reached[1][10254] = 1;
		;
		/* merge: j = (j-1)(10260, 10256, 10260) */
		reached[1][10256] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10261, 10260) */
		reached[1][10261] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4366: // STATE 10166 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10166] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4367: // STATE 10167 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (10192:0:1 - 1)
		IfNotBlocked
		reached[1][10167] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10192, 10168, 10192) */
		reached[1][10168] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10192, 10169, 10192) */
		reached[1][10169] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10192, 10185, 10192) */
		reached[1][10185] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4368: // STATE 10185 - mutant_1.pml:276 - [.(goto)] (0:10192:0 - 6)
		IfNotBlocked
		reached[1][10185] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4369: // STATE 10170 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (10192:0:1 - 1)
		IfNotBlocked
		reached[1][10170] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10192, 10171, 10192) */
		reached[1][10171] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10192, 10172, 10192) */
		reached[1][10172] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10192, 10185, 10192) */
		reached[1][10185] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4370: // STATE 10173 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10192:0:1 - 1)
		IfNotBlocked
		reached[1][10173] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10192, 10174, 10192) */
		reached[1][10174] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10192, 10175, 10192) */
		reached[1][10175] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10192, 10185, 10192) */
		reached[1][10185] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4371: // STATE 10176 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10192:0:1 - 1)
		IfNotBlocked
		reached[1][10176] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10192, 10177, 10192) */
		reached[1][10177] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10192, 10178, 10192) */
		reached[1][10178] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10192, 10185, 10192) */
		reached[1][10185] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4372: // STATE 10179 - mutant_1.pml:270 - [((PAUSE==ABORT))] (10192:0:1 - 1)
		IfNotBlocked
		reached[1][10179] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10192, 10180, 10192) */
		reached[1][10180] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10192, 10181, 10192) */
		reached[1][10181] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10192, 10185, 10192) */
		reached[1][10185] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4373: // STATE 10183 - mutant_1.pml:274 - [(1)] (10192:0:0 - 1)
		IfNotBlocked
		reached[1][10183] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10192, 10185, 10192) */
		reached[1][10185] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4374: // STATE 10188 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10188] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4375: // STATE 10191 - mutant_1.pml:281 - [(1)] (10260:0:1 - 1)
		IfNotBlocked
		reached[1][10191] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10260, 10193, 10260) */
		reached[1][10193] = 1;
		;
		/* merge: .(goto)(10260, 10254, 10260) */
		reached[1][10254] = 1;
		;
		/* merge: j = (j-1)(10260, 10256, 10260) */
		reached[1][10256] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10261, 10260) */
		reached[1][10261] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4376: // STATE 10195 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10195] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4377: // STATE 10196 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (10221:0:1 - 1)
		IfNotBlocked
		reached[1][10196] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10221, 10197, 10221) */
		reached[1][10197] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10221, 10198, 10221) */
		reached[1][10198] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10221, 10214, 10221) */
		reached[1][10214] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4378: // STATE 10214 - mutant_1.pml:305 - [.(goto)] (0:10221:0 - 6)
		IfNotBlocked
		reached[1][10214] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4379: // STATE 10199 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (10221:0:1 - 1)
		IfNotBlocked
		reached[1][10199] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10221, 10200, 10221) */
		reached[1][10200] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10221, 10201, 10221) */
		reached[1][10201] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10221, 10214, 10221) */
		reached[1][10214] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4380: // STATE 10202 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10221:0:1 - 1)
		IfNotBlocked
		reached[1][10202] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10221, 10203, 10221) */
		reached[1][10203] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10221, 10204, 10221) */
		reached[1][10204] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10221, 10214, 10221) */
		reached[1][10214] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4381: // STATE 10205 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10221:0:1 - 1)
		IfNotBlocked
		reached[1][10205] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10221, 10206, 10221) */
		reached[1][10206] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10221, 10207, 10221) */
		reached[1][10207] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10221, 10214, 10221) */
		reached[1][10214] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4382: // STATE 10208 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (10221:0:1 - 1)
		IfNotBlocked
		reached[1][10208] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10221, 10209, 10221) */
		reached[1][10209] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10221, 10210, 10221) */
		reached[1][10210] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10221, 10214, 10221) */
		reached[1][10214] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4383: // STATE 10212 - mutant_1.pml:303 - [(1)] (10221:0:0 - 1)
		IfNotBlocked
		reached[1][10212] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10221, 10214, 10221) */
		reached[1][10214] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4384: // STATE 10217 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10217] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4385: // STATE 10220 - mutant_1.pml:310 - [(1)] (10260:0:1 - 1)
		IfNotBlocked
		reached[1][10220] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10260, 10222, 10260) */
		reached[1][10222] = 1;
		;
		/* merge: .(goto)(10260, 10254, 10260) */
		reached[1][10254] = 1;
		;
		/* merge: j = (j-1)(10260, 10256, 10260) */
		reached[1][10256] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10261, 10260) */
		reached[1][10261] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4386: // STATE 10224 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10224] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4387: // STATE 10225 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (10250:0:1 - 1)
		IfNotBlocked
		reached[1][10225] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10250, 10226, 10250) */
		reached[1][10226] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10250, 10227, 10250) */
		reached[1][10227] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10250, 10243, 10250) */
		reached[1][10243] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4388: // STATE 10243 - mutant_1.pml:334 - [.(goto)] (0:10250:0 - 6)
		IfNotBlocked
		reached[1][10243] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4389: // STATE 10228 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (10250:0:1 - 1)
		IfNotBlocked
		reached[1][10228] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10250, 10229, 10250) */
		reached[1][10229] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10250, 10230, 10250) */
		reached[1][10230] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10250, 10243, 10250) */
		reached[1][10243] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4390: // STATE 10231 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10250:0:1 - 1)
		IfNotBlocked
		reached[1][10231] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10250, 10232, 10250) */
		reached[1][10232] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10250, 10233, 10250) */
		reached[1][10233] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10250, 10243, 10250) */
		reached[1][10243] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4391: // STATE 10234 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10250:0:1 - 1)
		IfNotBlocked
		reached[1][10234] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10250, 10235, 10250) */
		reached[1][10235] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10250, 10236, 10250) */
		reached[1][10236] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10250, 10243, 10250) */
		reached[1][10243] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4392: // STATE 10237 - mutant_1.pml:328 - [((STOP==ABORT))] (10250:0:1 - 1)
		IfNotBlocked
		reached[1][10237] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10250, 10238, 10250) */
		reached[1][10238] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10250, 10239, 10250) */
		reached[1][10239] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10250, 10243, 10250) */
		reached[1][10243] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4393: // STATE 10241 - mutant_1.pml:332 - [(1)] (10250:0:0 - 1)
		IfNotBlocked
		reached[1][10241] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10250, 10243, 10250) */
		reached[1][10243] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4394: // STATE 10246 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10246] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4395: // STATE 10249 - mutant_1.pml:339 - [(1)] (10260:0:1 - 1)
		IfNotBlocked
		reached[1][10249] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10260, 10251, 10260) */
		reached[1][10251] = 1;
		;
		/* merge: .(goto)(10260, 10254, 10260) */
		reached[1][10254] = 1;
		;
		/* merge: j = (j-1)(10260, 10256, 10260) */
		reached[1][10256] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10261, 10260) */
		reached[1][10261] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4396: // STATE 10256 - mutant_1.pml:386 - [j = (j-1)] (0:10260:1 - 13)
		IfNotBlocked
		reached[1][10256] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10261, 10260) */
		reached[1][10261] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4397: // STATE 10258 - mutant_1.pml:388 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][10258] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4398: // STATE 10268 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10268] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4399: // STATE 10269 - mutant_1.pml:361 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10269] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4400: // STATE 10270 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (10290:0:1 - 1)
		IfNotBlocked
		reached[1][10270] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10290, 10271, 10290) */
		reached[1][10271] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10290, 10272, 10290) */
		reached[1][10272] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10290, 10288, 10290) */
		reached[1][10288] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4401: // STATE 10288 - mutant_1.pml:246 - [.(goto)] (0:10290:0 - 6)
		IfNotBlocked
		reached[1][10288] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4402: // STATE 10273 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (10290:0:1 - 1)
		IfNotBlocked
		reached[1][10273] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10290, 10274, 10290) */
		reached[1][10274] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10290, 10275, 10290) */
		reached[1][10275] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10290, 10288, 10290) */
		reached[1][10288] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4403: // STATE 10276 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10290:0:1 - 1)
		IfNotBlocked
		reached[1][10276] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10290, 10277, 10290) */
		reached[1][10277] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10290, 10278, 10290) */
		reached[1][10278] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10290, 10288, 10290) */
		reached[1][10288] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4404: // STATE 10279 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10290:0:1 - 1)
		IfNotBlocked
		reached[1][10279] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10290, 10280, 10290) */
		reached[1][10280] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10290, 10281, 10290) */
		reached[1][10281] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10290, 10288, 10290) */
		reached[1][10288] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4405: // STATE 10282 - mutant_1.pml:240 - [((START==ABORT))] (10290:0:1 - 1)
		IfNotBlocked
		reached[1][10282] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10290, 10283, 10290) */
		reached[1][10283] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10290, 10284, 10290) */
		reached[1][10284] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10290, 10288, 10290) */
		reached[1][10288] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4406: // STATE 10286 - mutant_1.pml:244 - [(1)] (10290:0:0 - 1)
		IfNotBlocked
		reached[1][10286] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10290, 10288, 10290) */
		reached[1][10288] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4407: // STATE 10290 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10290] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4408: // STATE 10292 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10292] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4409: // STATE 10295 - mutant_1.pml:252 - [(1)] (10393:0:1 - 1)
		IfNotBlocked
		reached[1][10295] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10393, 10297, 10393) */
		reached[1][10297] = 1;
		;
		/* merge: .(goto)(10393, 10387, 10393) */
		reached[1][10387] = 1;
		;
		/* merge: j = (j+1)(10393, 10389, 10393) */
		reached[1][10389] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10394, 10393) */
		reached[1][10394] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4410: // STATE 10299 - mutant_1.pml:363 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10299] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4411: // STATE 10300 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (10325:0:1 - 1)
		IfNotBlocked
		reached[1][10300] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10325, 10301, 10325) */
		reached[1][10301] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10325, 10302, 10325) */
		reached[1][10302] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10325, 10318, 10325) */
		reached[1][10318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4412: // STATE 10318 - mutant_1.pml:276 - [.(goto)] (0:10325:0 - 6)
		IfNotBlocked
		reached[1][10318] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4413: // STATE 10303 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (10325:0:1 - 1)
		IfNotBlocked
		reached[1][10303] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10325, 10304, 10325) */
		reached[1][10304] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10325, 10305, 10325) */
		reached[1][10305] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10325, 10318, 10325) */
		reached[1][10318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4414: // STATE 10306 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10325:0:1 - 1)
		IfNotBlocked
		reached[1][10306] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10325, 10307, 10325) */
		reached[1][10307] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10325, 10308, 10325) */
		reached[1][10308] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10325, 10318, 10325) */
		reached[1][10318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4415: // STATE 10309 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10325:0:1 - 1)
		IfNotBlocked
		reached[1][10309] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10325, 10310, 10325) */
		reached[1][10310] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10325, 10311, 10325) */
		reached[1][10311] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10325, 10318, 10325) */
		reached[1][10318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4416: // STATE 10312 - mutant_1.pml:270 - [((PAUSE==ABORT))] (10325:0:1 - 1)
		IfNotBlocked
		reached[1][10312] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10325, 10313, 10325) */
		reached[1][10313] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10325, 10314, 10325) */
		reached[1][10314] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10325, 10318, 10325) */
		reached[1][10318] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4417: // STATE 10316 - mutant_1.pml:274 - [(1)] (10325:0:0 - 1)
		IfNotBlocked
		reached[1][10316] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10325, 10318, 10325) */
		reached[1][10318] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4418: // STATE 10321 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10321] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4419: // STATE 10324 - mutant_1.pml:281 - [(1)] (10393:0:1 - 1)
		IfNotBlocked
		reached[1][10324] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10393, 10326, 10393) */
		reached[1][10326] = 1;
		;
		/* merge: .(goto)(10393, 10387, 10393) */
		reached[1][10387] = 1;
		;
		/* merge: j = (j+1)(10393, 10389, 10393) */
		reached[1][10389] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10394, 10393) */
		reached[1][10394] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4420: // STATE 10328 - mutant_1.pml:365 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10328] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4421: // STATE 10329 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (10354:0:1 - 1)
		IfNotBlocked
		reached[1][10329] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10354, 10330, 10354) */
		reached[1][10330] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10354, 10331, 10354) */
		reached[1][10331] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10354, 10347, 10354) */
		reached[1][10347] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4422: // STATE 10347 - mutant_1.pml:305 - [.(goto)] (0:10354:0 - 6)
		IfNotBlocked
		reached[1][10347] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4423: // STATE 10332 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (10354:0:1 - 1)
		IfNotBlocked
		reached[1][10332] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10354, 10333, 10354) */
		reached[1][10333] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10354, 10334, 10354) */
		reached[1][10334] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10354, 10347, 10354) */
		reached[1][10347] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4424: // STATE 10335 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10354:0:1 - 1)
		IfNotBlocked
		reached[1][10335] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10354, 10336, 10354) */
		reached[1][10336] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10354, 10337, 10354) */
		reached[1][10337] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10354, 10347, 10354) */
		reached[1][10347] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4425: // STATE 10338 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10354:0:1 - 1)
		IfNotBlocked
		reached[1][10338] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10354, 10339, 10354) */
		reached[1][10339] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10354, 10340, 10354) */
		reached[1][10340] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10354, 10347, 10354) */
		reached[1][10347] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4426: // STATE 10341 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (10354:0:1 - 1)
		IfNotBlocked
		reached[1][10341] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10354, 10342, 10354) */
		reached[1][10342] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10354, 10343, 10354) */
		reached[1][10343] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10354, 10347, 10354) */
		reached[1][10347] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4427: // STATE 10345 - mutant_1.pml:303 - [(1)] (10354:0:0 - 1)
		IfNotBlocked
		reached[1][10345] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10354, 10347, 10354) */
		reached[1][10347] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4428: // STATE 10350 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10350] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4429: // STATE 10353 - mutant_1.pml:310 - [(1)] (10393:0:1 - 1)
		IfNotBlocked
		reached[1][10353] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10393, 10355, 10393) */
		reached[1][10355] = 1;
		;
		/* merge: .(goto)(10393, 10387, 10393) */
		reached[1][10387] = 1;
		;
		/* merge: j = (j+1)(10393, 10389, 10393) */
		reached[1][10389] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10394, 10393) */
		reached[1][10394] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4430: // STATE 10357 - mutant_1.pml:367 - [(((6==STOP)||(6==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10357] = 1;
		if (!(((6==2)||(6==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4431: // STATE 10358 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (10383:0:1 - 1)
		IfNotBlocked
		reached[1][10358] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10383, 10359, 10383) */
		reached[1][10359] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10383, 10360, 10383) */
		reached[1][10360] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10383, 10376, 10383) */
		reached[1][10376] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4432: // STATE 10376 - mutant_1.pml:334 - [.(goto)] (0:10383:0 - 6)
		IfNotBlocked
		reached[1][10376] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4433: // STATE 10361 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (10383:0:1 - 1)
		IfNotBlocked
		reached[1][10361] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10383, 10362, 10383) */
		reached[1][10362] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10383, 10363, 10383) */
		reached[1][10363] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10383, 10376, 10383) */
		reached[1][10376] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4434: // STATE 10364 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10383:0:1 - 1)
		IfNotBlocked
		reached[1][10364] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10383, 10365, 10383) */
		reached[1][10365] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10383, 10366, 10383) */
		reached[1][10366] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10383, 10376, 10383) */
		reached[1][10376] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4435: // STATE 10367 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10383:0:1 - 1)
		IfNotBlocked
		reached[1][10367] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10383, 10368, 10383) */
		reached[1][10368] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10383, 10369, 10383) */
		reached[1][10369] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10383, 10376, 10383) */
		reached[1][10376] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4436: // STATE 10370 - mutant_1.pml:328 - [((STOP==ABORT))] (10383:0:1 - 1)
		IfNotBlocked
		reached[1][10370] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10383, 10371, 10383) */
		reached[1][10371] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10383, 10372, 10383) */
		reached[1][10372] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10383, 10376, 10383) */
		reached[1][10376] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4437: // STATE 10374 - mutant_1.pml:332 - [(1)] (10383:0:0 - 1)
		IfNotBlocked
		reached[1][10374] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10383, 10376, 10383) */
		reached[1][10376] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4438: // STATE 10379 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10379] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4439: // STATE 10382 - mutant_1.pml:339 - [(1)] (10393:0:1 - 1)
		IfNotBlocked
		reached[1][10382] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10393, 10384, 10393) */
		reached[1][10384] = 1;
		;
		/* merge: .(goto)(10393, 10387, 10393) */
		reached[1][10387] = 1;
		;
		/* merge: j = (j+1)(10393, 10389, 10393) */
		reached[1][10389] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10394, 10393) */
		reached[1][10394] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4440: // STATE 10389 - mutant_1.pml:375 - [j = (j+1)] (0:10393:1 - 13)
		IfNotBlocked
		reached[1][10389] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10394, 10393) */
		reached[1][10394] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4441: // STATE 10391 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][10391] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4442: // STATE 10397 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10397] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4443: // STATE 10398 - mutant_1.pml:405 - [((6==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10398] = 1;
		if (!((6==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4444: // STATE 10399 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10399] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4445: // STATE 10401 - mutant_1.pml:407 - [((6==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10401] = 1;
		if (!((6==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4446: // STATE 10402 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10402] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4447: // STATE 10404 - mutant_1.pml:409 - [((6==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10404] = 1;
		if (!((6==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4448: // STATE 10405 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10405] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4449: // STATE 10407 - mutant_1.pml:411 - [((6==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10407] = 1;
		if (!((6==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4450: // STATE 10408 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10408] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4451: // STATE 10412 - mutant_1.pml:414 - [j = (j+1)] (0:10416:1 - 5)
		IfNotBlocked
		reached[1][10412] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10417, 10416) */
		reached[1][10417] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4452: // STATE 10414 - mutant_1.pml:416 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][10414] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4453: // STATE 10425 - mutant_1.pml:451 - [(((3==ABORTING)||(3==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10425] = 1;
		if (!(((3==4)||(3==7))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4454: // STATE 10426 - mutant_1.pml:422 - [(((2==CONTINUE)&&!(supervisor_started)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10426] = 1;
		if (!(((2==8)&& !(((int)now.supervisor_started)))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4455: // STATE 10427 - mutant_1.pml:423 - [supervisor_started = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][10427] = 1;
		(trpt+1)->bup.oval = ((int)now.supervisor_started);
		now.supervisor_started = 1;
#ifdef VAR_RANGES
		logval("supervisor_started", ((int)now.supervisor_started));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4456: // STATE 10429 - mutant_1.pml:426 - [(serialize_commands)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10429] = 1;
		if (!(((int)now.serialize_commands)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4457: // STATE 10430 - mutant_1.pml:394 - [(((2==START)||(2==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10430] = 1;
		if (!(((2==9)||(2==10))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4458: // STATE 10431 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10431] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4459: // STATE 10432 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10432] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4460: // STATE 10433 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (10453:0:1 - 1)
		IfNotBlocked
		reached[1][10433] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10453, 10434, 10453) */
		reached[1][10434] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10453, 10435, 10453) */
		reached[1][10435] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10453, 10451, 10453) */
		reached[1][10451] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4461: // STATE 10451 - mutant_1.pml:246 - [.(goto)] (0:10453:0 - 6)
		IfNotBlocked
		reached[1][10451] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4462: // STATE 10436 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (10453:0:1 - 1)
		IfNotBlocked
		reached[1][10436] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10453, 10437, 10453) */
		reached[1][10437] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10453, 10438, 10453) */
		reached[1][10438] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10453, 10451, 10453) */
		reached[1][10451] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4463: // STATE 10439 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10453:0:1 - 1)
		IfNotBlocked
		reached[1][10439] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10453, 10440, 10453) */
		reached[1][10440] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10453, 10441, 10453) */
		reached[1][10441] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10453, 10451, 10453) */
		reached[1][10451] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4464: // STATE 10442 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10453:0:1 - 1)
		IfNotBlocked
		reached[1][10442] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10453, 10443, 10453) */
		reached[1][10443] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10453, 10444, 10453) */
		reached[1][10444] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10453, 10451, 10453) */
		reached[1][10451] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4465: // STATE 10445 - mutant_1.pml:240 - [((START==ABORT))] (10453:0:1 - 1)
		IfNotBlocked
		reached[1][10445] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10453, 10446, 10453) */
		reached[1][10446] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10453, 10447, 10453) */
		reached[1][10447] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10453, 10451, 10453) */
		reached[1][10451] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4466: // STATE 10449 - mutant_1.pml:244 - [(1)] (10453:0:0 - 1)
		IfNotBlocked
		reached[1][10449] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10453, 10451, 10453) */
		reached[1][10451] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4467: // STATE 10453 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10453] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4468: // STATE 10455 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10455] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4469: // STATE 10458 - mutant_1.pml:252 - [(1)] (10556:0:1 - 1)
		IfNotBlocked
		reached[1][10458] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10556, 10460, 10556) */
		reached[1][10460] = 1;
		;
		/* merge: .(goto)(10556, 10550, 10556) */
		reached[1][10550] = 1;
		;
		/* merge: j = (j+1)(10556, 10552, 10556) */
		reached[1][10552] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10557, 10556) */
		reached[1][10557] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4470: // STATE 10462 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10462] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4471: // STATE 10463 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (10488:0:1 - 1)
		IfNotBlocked
		reached[1][10463] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10488, 10464, 10488) */
		reached[1][10464] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10488, 10465, 10488) */
		reached[1][10465] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10488, 10481, 10488) */
		reached[1][10481] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4472: // STATE 10481 - mutant_1.pml:276 - [.(goto)] (0:10488:0 - 6)
		IfNotBlocked
		reached[1][10481] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4473: // STATE 10466 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (10488:0:1 - 1)
		IfNotBlocked
		reached[1][10466] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10488, 10467, 10488) */
		reached[1][10467] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10488, 10468, 10488) */
		reached[1][10468] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10488, 10481, 10488) */
		reached[1][10481] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4474: // STATE 10469 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10488:0:1 - 1)
		IfNotBlocked
		reached[1][10469] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10488, 10470, 10488) */
		reached[1][10470] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10488, 10471, 10488) */
		reached[1][10471] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10488, 10481, 10488) */
		reached[1][10481] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4475: // STATE 10472 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10488:0:1 - 1)
		IfNotBlocked
		reached[1][10472] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10488, 10473, 10488) */
		reached[1][10473] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10488, 10474, 10488) */
		reached[1][10474] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10488, 10481, 10488) */
		reached[1][10481] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4476: // STATE 10475 - mutant_1.pml:270 - [((PAUSE==ABORT))] (10488:0:1 - 1)
		IfNotBlocked
		reached[1][10475] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10488, 10476, 10488) */
		reached[1][10476] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10488, 10477, 10488) */
		reached[1][10477] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10488, 10481, 10488) */
		reached[1][10481] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4477: // STATE 10479 - mutant_1.pml:274 - [(1)] (10488:0:0 - 1)
		IfNotBlocked
		reached[1][10479] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10488, 10481, 10488) */
		reached[1][10481] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4478: // STATE 10484 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10484] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4479: // STATE 10487 - mutant_1.pml:281 - [(1)] (10556:0:1 - 1)
		IfNotBlocked
		reached[1][10487] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10556, 10489, 10556) */
		reached[1][10489] = 1;
		;
		/* merge: .(goto)(10556, 10550, 10556) */
		reached[1][10550] = 1;
		;
		/* merge: j = (j+1)(10556, 10552, 10556) */
		reached[1][10552] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10557, 10556) */
		reached[1][10557] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4480: // STATE 10491 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10491] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4481: // STATE 10492 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (10517:0:1 - 1)
		IfNotBlocked
		reached[1][10492] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10517, 10493, 10517) */
		reached[1][10493] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10517, 10494, 10517) */
		reached[1][10494] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10517, 10510, 10517) */
		reached[1][10510] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4482: // STATE 10510 - mutant_1.pml:305 - [.(goto)] (0:10517:0 - 6)
		IfNotBlocked
		reached[1][10510] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4483: // STATE 10495 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (10517:0:1 - 1)
		IfNotBlocked
		reached[1][10495] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10517, 10496, 10517) */
		reached[1][10496] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10517, 10497, 10517) */
		reached[1][10497] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10517, 10510, 10517) */
		reached[1][10510] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4484: // STATE 10498 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10517:0:1 - 1)
		IfNotBlocked
		reached[1][10498] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10517, 10499, 10517) */
		reached[1][10499] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10517, 10500, 10517) */
		reached[1][10500] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10517, 10510, 10517) */
		reached[1][10510] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4485: // STATE 10501 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10517:0:1 - 1)
		IfNotBlocked
		reached[1][10501] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10517, 10502, 10517) */
		reached[1][10502] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10517, 10503, 10517) */
		reached[1][10503] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10517, 10510, 10517) */
		reached[1][10510] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4486: // STATE 10504 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (10517:0:1 - 1)
		IfNotBlocked
		reached[1][10504] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10517, 10505, 10517) */
		reached[1][10505] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10517, 10506, 10517) */
		reached[1][10506] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10517, 10510, 10517) */
		reached[1][10510] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4487: // STATE 10508 - mutant_1.pml:303 - [(1)] (10517:0:0 - 1)
		IfNotBlocked
		reached[1][10508] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10517, 10510, 10517) */
		reached[1][10510] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4488: // STATE 10513 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10513] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4489: // STATE 10516 - mutant_1.pml:310 - [(1)] (10556:0:1 - 1)
		IfNotBlocked
		reached[1][10516] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10556, 10518, 10556) */
		reached[1][10518] = 1;
		;
		/* merge: .(goto)(10556, 10550, 10556) */
		reached[1][10550] = 1;
		;
		/* merge: j = (j+1)(10556, 10552, 10556) */
		reached[1][10552] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10557, 10556) */
		reached[1][10557] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4490: // STATE 10520 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10520] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4491: // STATE 10521 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (10546:0:1 - 1)
		IfNotBlocked
		reached[1][10521] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10546, 10522, 10546) */
		reached[1][10522] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10546, 10523, 10546) */
		reached[1][10523] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10546, 10539, 10546) */
		reached[1][10539] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4492: // STATE 10539 - mutant_1.pml:334 - [.(goto)] (0:10546:0 - 6)
		IfNotBlocked
		reached[1][10539] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4493: // STATE 10524 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (10546:0:1 - 1)
		IfNotBlocked
		reached[1][10524] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10546, 10525, 10546) */
		reached[1][10525] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10546, 10526, 10546) */
		reached[1][10526] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10546, 10539, 10546) */
		reached[1][10539] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4494: // STATE 10527 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10546:0:1 - 1)
		IfNotBlocked
		reached[1][10527] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10546, 10528, 10546) */
		reached[1][10528] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10546, 10529, 10546) */
		reached[1][10529] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10546, 10539, 10546) */
		reached[1][10539] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4495: // STATE 10530 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10546:0:1 - 1)
		IfNotBlocked
		reached[1][10530] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10546, 10531, 10546) */
		reached[1][10531] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10546, 10532, 10546) */
		reached[1][10532] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10546, 10539, 10546) */
		reached[1][10539] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4496: // STATE 10533 - mutant_1.pml:328 - [((STOP==ABORT))] (10546:0:1 - 1)
		IfNotBlocked
		reached[1][10533] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10546, 10534, 10546) */
		reached[1][10534] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10546, 10535, 10546) */
		reached[1][10535] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10546, 10539, 10546) */
		reached[1][10539] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4497: // STATE 10537 - mutant_1.pml:332 - [(1)] (10546:0:0 - 1)
		IfNotBlocked
		reached[1][10537] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10546, 10539, 10546) */
		reached[1][10539] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4498: // STATE 10542 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10542] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4499: // STATE 10545 - mutant_1.pml:339 - [(1)] (10556:0:1 - 1)
		IfNotBlocked
		reached[1][10545] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10556, 10547, 10556) */
		reached[1][10547] = 1;
		;
		/* merge: .(goto)(10556, 10550, 10556) */
		reached[1][10550] = 1;
		;
		/* merge: j = (j+1)(10556, 10552, 10556) */
		reached[1][10552] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10557, 10556) */
		reached[1][10557] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4500: // STATE 10552 - mutant_1.pml:375 - [j = (j+1)] (0:10556:1 - 13)
		IfNotBlocked
		reached[1][10552] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10557, 10556) */
		reached[1][10557] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4501: // STATE 10554 - mutant_1.pml:377 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][10554] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4502: // STATE 10561 - mutant_1.pml:382 - [j = (3-1)] (0:0:1 - 1)
		IfNotBlocked
		reached[1][10561] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (3-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4503: // STATE 10562 - mutant_1.pml:384 - [((j>0))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10562] = 1;
		if (!((((int)((P1 *)_this)->j)>0)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4504: // STATE 10563 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10563] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4505: // STATE 10564 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (10584:0:1 - 1)
		IfNotBlocked
		reached[1][10564] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10584, 10565, 10584) */
		reached[1][10565] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10584, 10566, 10584) */
		reached[1][10566] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10584, 10582, 10584) */
		reached[1][10582] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4506: // STATE 10582 - mutant_1.pml:246 - [.(goto)] (0:10584:0 - 6)
		IfNotBlocked
		reached[1][10582] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4507: // STATE 10567 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (10584:0:1 - 1)
		IfNotBlocked
		reached[1][10567] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10584, 10568, 10584) */
		reached[1][10568] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10584, 10569, 10584) */
		reached[1][10569] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10584, 10582, 10584) */
		reached[1][10582] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4508: // STATE 10570 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10584:0:1 - 1)
		IfNotBlocked
		reached[1][10570] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10584, 10571, 10584) */
		reached[1][10571] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10584, 10572, 10584) */
		reached[1][10572] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10584, 10582, 10584) */
		reached[1][10582] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4509: // STATE 10573 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10584:0:1 - 1)
		IfNotBlocked
		reached[1][10573] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10584, 10574, 10584) */
		reached[1][10574] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10584, 10575, 10584) */
		reached[1][10575] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10584, 10582, 10584) */
		reached[1][10582] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4510: // STATE 10576 - mutant_1.pml:240 - [((START==ABORT))] (10584:0:1 - 1)
		IfNotBlocked
		reached[1][10576] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10584, 10577, 10584) */
		reached[1][10577] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10584, 10578, 10584) */
		reached[1][10578] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10584, 10582, 10584) */
		reached[1][10582] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4511: // STATE 10580 - mutant_1.pml:244 - [(1)] (10584:0:0 - 1)
		IfNotBlocked
		reached[1][10580] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10584, 10582, 10584) */
		reached[1][10582] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4512: // STATE 10584 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10584] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4513: // STATE 10586 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10586] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4514: // STATE 10589 - mutant_1.pml:252 - [(1)] (10687:0:1 - 1)
		IfNotBlocked
		reached[1][10589] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10687, 10591, 10687) */
		reached[1][10591] = 1;
		;
		/* merge: .(goto)(10687, 10681, 10687) */
		reached[1][10681] = 1;
		;
		/* merge: j = (j-1)(10687, 10683, 10687) */
		reached[1][10683] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10688, 10687) */
		reached[1][10688] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4515: // STATE 10593 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10593] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4516: // STATE 10594 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (10619:0:1 - 1)
		IfNotBlocked
		reached[1][10594] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10619, 10595, 10619) */
		reached[1][10595] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10619, 10596, 10619) */
		reached[1][10596] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10619, 10612, 10619) */
		reached[1][10612] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4517: // STATE 10612 - mutant_1.pml:276 - [.(goto)] (0:10619:0 - 6)
		IfNotBlocked
		reached[1][10612] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4518: // STATE 10597 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (10619:0:1 - 1)
		IfNotBlocked
		reached[1][10597] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10619, 10598, 10619) */
		reached[1][10598] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10619, 10599, 10619) */
		reached[1][10599] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10619, 10612, 10619) */
		reached[1][10612] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4519: // STATE 10600 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10619:0:1 - 1)
		IfNotBlocked
		reached[1][10600] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10619, 10601, 10619) */
		reached[1][10601] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10619, 10602, 10619) */
		reached[1][10602] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10619, 10612, 10619) */
		reached[1][10612] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4520: // STATE 10603 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10619:0:1 - 1)
		IfNotBlocked
		reached[1][10603] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10619, 10604, 10619) */
		reached[1][10604] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10619, 10605, 10619) */
		reached[1][10605] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10619, 10612, 10619) */
		reached[1][10612] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4521: // STATE 10606 - mutant_1.pml:270 - [((PAUSE==ABORT))] (10619:0:1 - 1)
		IfNotBlocked
		reached[1][10606] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10619, 10607, 10619) */
		reached[1][10607] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10619, 10608, 10619) */
		reached[1][10608] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10619, 10612, 10619) */
		reached[1][10612] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4522: // STATE 10610 - mutant_1.pml:274 - [(1)] (10619:0:0 - 1)
		IfNotBlocked
		reached[1][10610] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10619, 10612, 10619) */
		reached[1][10612] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4523: // STATE 10615 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10615] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4524: // STATE 10618 - mutant_1.pml:281 - [(1)] (10687:0:1 - 1)
		IfNotBlocked
		reached[1][10618] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10687, 10620, 10687) */
		reached[1][10620] = 1;
		;
		/* merge: .(goto)(10687, 10681, 10687) */
		reached[1][10681] = 1;
		;
		/* merge: j = (j-1)(10687, 10683, 10687) */
		reached[1][10683] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10688, 10687) */
		reached[1][10688] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4525: // STATE 10622 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10622] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4526: // STATE 10623 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (10648:0:1 - 1)
		IfNotBlocked
		reached[1][10623] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10648, 10624, 10648) */
		reached[1][10624] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10648, 10625, 10648) */
		reached[1][10625] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10648, 10641, 10648) */
		reached[1][10641] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4527: // STATE 10641 - mutant_1.pml:305 - [.(goto)] (0:10648:0 - 6)
		IfNotBlocked
		reached[1][10641] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4528: // STATE 10626 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (10648:0:1 - 1)
		IfNotBlocked
		reached[1][10626] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10648, 10627, 10648) */
		reached[1][10627] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10648, 10628, 10648) */
		reached[1][10628] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10648, 10641, 10648) */
		reached[1][10641] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4529: // STATE 10629 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10648:0:1 - 1)
		IfNotBlocked
		reached[1][10629] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10648, 10630, 10648) */
		reached[1][10630] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10648, 10631, 10648) */
		reached[1][10631] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10648, 10641, 10648) */
		reached[1][10641] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4530: // STATE 10632 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10648:0:1 - 1)
		IfNotBlocked
		reached[1][10632] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10648, 10633, 10648) */
		reached[1][10633] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10648, 10634, 10648) */
		reached[1][10634] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10648, 10641, 10648) */
		reached[1][10641] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4531: // STATE 10635 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (10648:0:1 - 1)
		IfNotBlocked
		reached[1][10635] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10648, 10636, 10648) */
		reached[1][10636] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10648, 10637, 10648) */
		reached[1][10637] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10648, 10641, 10648) */
		reached[1][10641] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4532: // STATE 10639 - mutant_1.pml:303 - [(1)] (10648:0:0 - 1)
		IfNotBlocked
		reached[1][10639] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10648, 10641, 10648) */
		reached[1][10641] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4533: // STATE 10644 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10644] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4534: // STATE 10647 - mutant_1.pml:310 - [(1)] (10687:0:1 - 1)
		IfNotBlocked
		reached[1][10647] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10687, 10649, 10687) */
		reached[1][10649] = 1;
		;
		/* merge: .(goto)(10687, 10681, 10687) */
		reached[1][10681] = 1;
		;
		/* merge: j = (j-1)(10687, 10683, 10687) */
		reached[1][10683] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10688, 10687) */
		reached[1][10688] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4535: // STATE 10651 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10651] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4536: // STATE 10652 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (10677:0:1 - 1)
		IfNotBlocked
		reached[1][10652] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10677, 10653, 10677) */
		reached[1][10653] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10677, 10654, 10677) */
		reached[1][10654] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10677, 10670, 10677) */
		reached[1][10670] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4537: // STATE 10670 - mutant_1.pml:334 - [.(goto)] (0:10677:0 - 6)
		IfNotBlocked
		reached[1][10670] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4538: // STATE 10655 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (10677:0:1 - 1)
		IfNotBlocked
		reached[1][10655] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10677, 10656, 10677) */
		reached[1][10656] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10677, 10657, 10677) */
		reached[1][10657] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10677, 10670, 10677) */
		reached[1][10670] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4539: // STATE 10658 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10677:0:1 - 1)
		IfNotBlocked
		reached[1][10658] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10677, 10659, 10677) */
		reached[1][10659] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10677, 10660, 10677) */
		reached[1][10660] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10677, 10670, 10677) */
		reached[1][10670] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4540: // STATE 10661 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10677:0:1 - 1)
		IfNotBlocked
		reached[1][10661] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10677, 10662, 10677) */
		reached[1][10662] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10677, 10663, 10677) */
		reached[1][10663] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10677, 10670, 10677) */
		reached[1][10670] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4541: // STATE 10664 - mutant_1.pml:328 - [((STOP==ABORT))] (10677:0:1 - 1)
		IfNotBlocked
		reached[1][10664] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10677, 10665, 10677) */
		reached[1][10665] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10677, 10666, 10677) */
		reached[1][10666] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10677, 10670, 10677) */
		reached[1][10670] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4542: // STATE 10668 - mutant_1.pml:332 - [(1)] (10677:0:0 - 1)
		IfNotBlocked
		reached[1][10668] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10677, 10670, 10677) */
		reached[1][10670] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4543: // STATE 10673 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10673] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4544: // STATE 10676 - mutant_1.pml:339 - [(1)] (10687:0:1 - 1)
		IfNotBlocked
		reached[1][10676] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10687, 10678, 10687) */
		reached[1][10678] = 1;
		;
		/* merge: .(goto)(10687, 10681, 10687) */
		reached[1][10681] = 1;
		;
		/* merge: j = (j-1)(10687, 10683, 10687) */
		reached[1][10683] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10688, 10687) */
		reached[1][10688] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4545: // STATE 10683 - mutant_1.pml:386 - [j = (j-1)] (0:10687:1 - 13)
		IfNotBlocked
		reached[1][10683] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)-1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10688, 10687) */
		reached[1][10688] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4546: // STATE 10685 - mutant_1.pml:388 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][10685] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4547: // STATE 10695 - mutant_1.pml:373 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10695] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4548: // STATE 10696 - mutant_1.pml:361 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10696] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4549: // STATE 10697 - mutant_1.pml:228 - [(((START==START)&&(commands[j]==CONTINUE)))] (10717:0:1 - 1)
		IfNotBlocked
		reached[1][10697] = 1;
		if (!(((9==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10717, 10698, 10717) */
		reached[1][10698] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10717, 10699, 10717) */
		reached[1][10699] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10717, 10715, 10717) */
		reached[1][10715] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4550: // STATE 10715 - mutant_1.pml:246 - [.(goto)] (0:10717:0 - 6)
		IfNotBlocked
		reached[1][10715] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4551: // STATE 10700 - mutant_1.pml:231 - [(((START==PAUSE)&&(commands[j]==CONTINUE)))] (10717:0:1 - 1)
		IfNotBlocked
		reached[1][10700] = 1;
		if (!(((9==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10717, 10701, 10717) */
		reached[1][10701] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10717, 10702, 10717) */
		reached[1][10702] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10717, 10715, 10717) */
		reached[1][10715] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4552: // STATE 10703 - mutant_1.pml:234 - [(((START==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10717:0:1 - 1)
		IfNotBlocked
		reached[1][10703] = 1;
		if (!(((9==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10717, 10704, 10717) */
		reached[1][10704] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10717, 10705, 10717) */
		reached[1][10705] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10717, 10715, 10717) */
		reached[1][10715] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4553: // STATE 10706 - mutant_1.pml:237 - [(((START==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10717:0:1 - 1)
		IfNotBlocked
		reached[1][10706] = 1;
		if (!(((9==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10717, 10707, 10717) */
		reached[1][10707] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10717, 10708, 10717) */
		reached[1][10708] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10717, 10715, 10717) */
		reached[1][10715] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4554: // STATE 10709 - mutant_1.pml:240 - [((START==ABORT))] (10717:0:1 - 1)
		IfNotBlocked
		reached[1][10709] = 1;
		if (!((9==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10717, 10710, 10717) */
		reached[1][10710] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10717, 10711, 10717) */
		reached[1][10711] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10717, 10715, 10717) */
		reached[1][10715] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4555: // STATE 10713 - mutant_1.pml:244 - [(1)] (10717:0:0 - 1)
		IfNotBlocked
		reached[1][10713] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10717, 10715, 10717) */
		reached[1][10715] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4556: // STATE 10717 - mutant_1.pml:247 - [(run Thread(j))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10717] = 1;
		if (!(addproc(II, 1, 0, ((int)((P1 *)_this)->j))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4557: // STATE 10719 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10719] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4558: // STATE 10722 - mutant_1.pml:252 - [(1)] (10820:0:1 - 1)
		IfNotBlocked
		reached[1][10722] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10820, 10724, 10820) */
		reached[1][10724] = 1;
		;
		/* merge: .(goto)(10820, 10814, 10820) */
		reached[1][10814] = 1;
		;
		/* merge: j = (j+1)(10820, 10816, 10820) */
		reached[1][10816] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10821, 10820) */
		reached[1][10821] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4559: // STATE 10726 - mutant_1.pml:363 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10726] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4560: // STATE 10727 - mutant_1.pml:258 - [(((PAUSE==START)&&(commands[j]==CONTINUE)))] (10752:0:1 - 1)
		IfNotBlocked
		reached[1][10727] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10752, 10728, 10752) */
		reached[1][10728] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10752, 10729, 10752) */
		reached[1][10729] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10752, 10745, 10752) */
		reached[1][10745] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4561: // STATE 10745 - mutant_1.pml:276 - [.(goto)] (0:10752:0 - 6)
		IfNotBlocked
		reached[1][10745] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4562: // STATE 10730 - mutant_1.pml:261 - [(((PAUSE==PAUSE)&&(commands[j]==CONTINUE)))] (10752:0:1 - 1)
		IfNotBlocked
		reached[1][10730] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10752, 10731, 10752) */
		reached[1][10731] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10752, 10732, 10752) */
		reached[1][10732] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10752, 10745, 10752) */
		reached[1][10745] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4563: // STATE 10733 - mutant_1.pml:264 - [(((PAUSE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10752:0:1 - 1)
		IfNotBlocked
		reached[1][10733] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10752, 10734, 10752) */
		reached[1][10734] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10752, 10735, 10752) */
		reached[1][10735] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10752, 10745, 10752) */
		reached[1][10745] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4564: // STATE 10736 - mutant_1.pml:267 - [(((PAUSE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10752:0:1 - 1)
		IfNotBlocked
		reached[1][10736] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10752, 10737, 10752) */
		reached[1][10737] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10752, 10738, 10752) */
		reached[1][10738] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10752, 10745, 10752) */
		reached[1][10745] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4565: // STATE 10739 - mutant_1.pml:270 - [((PAUSE==ABORT))] (10752:0:1 - 1)
		IfNotBlocked
		reached[1][10739] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10752, 10740, 10752) */
		reached[1][10740] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10752, 10741, 10752) */
		reached[1][10741] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10752, 10745, 10752) */
		reached[1][10745] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4566: // STATE 10743 - mutant_1.pml:274 - [(1)] (10752:0:0 - 1)
		IfNotBlocked
		reached[1][10743] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10752, 10745, 10752) */
		reached[1][10745] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4567: // STATE 10748 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10748] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4568: // STATE 10751 - mutant_1.pml:281 - [(1)] (10820:0:1 - 1)
		IfNotBlocked
		reached[1][10751] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10820, 10753, 10820) */
		reached[1][10753] = 1;
		;
		/* merge: .(goto)(10820, 10814, 10820) */
		reached[1][10814] = 1;
		;
		/* merge: j = (j+1)(10820, 10816, 10820) */
		reached[1][10816] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10821, 10820) */
		reached[1][10821] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4569: // STATE 10755 - mutant_1.pml:365 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10755] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4570: // STATE 10756 - mutant_1.pml:287 - [(((CONTINUE==START)&&(commands[j]==CONTINUE)))] (10781:0:1 - 1)
		IfNotBlocked
		reached[1][10756] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10781, 10757, 10781) */
		reached[1][10757] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10781, 10758, 10781) */
		reached[1][10758] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10781, 10774, 10781) */
		reached[1][10774] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4571: // STATE 10774 - mutant_1.pml:305 - [.(goto)] (0:10781:0 - 6)
		IfNotBlocked
		reached[1][10774] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4572: // STATE 10759 - mutant_1.pml:290 - [(((CONTINUE==PAUSE)&&(commands[j]==CONTINUE)))] (10781:0:1 - 1)
		IfNotBlocked
		reached[1][10759] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10781, 10760, 10781) */
		reached[1][10760] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10781, 10761, 10781) */
		reached[1][10761] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10781, 10774, 10781) */
		reached[1][10774] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4573: // STATE 10762 - mutant_1.pml:293 - [(((CONTINUE==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10781:0:1 - 1)
		IfNotBlocked
		reached[1][10762] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10781, 10763, 10781) */
		reached[1][10763] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10781, 10764, 10781) */
		reached[1][10764] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10781, 10774, 10781) */
		reached[1][10774] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4574: // STATE 10765 - mutant_1.pml:296 - [(((CONTINUE==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10781:0:1 - 1)
		IfNotBlocked
		reached[1][10765] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10781, 10766, 10781) */
		reached[1][10766] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10781, 10767, 10781) */
		reached[1][10767] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10781, 10774, 10781) */
		reached[1][10774] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4575: // STATE 10768 - mutant_1.pml:299 - [((CONTINUE==ABORT))] (10781:0:1 - 1)
		IfNotBlocked
		reached[1][10768] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10781, 10769, 10781) */
		reached[1][10769] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10781, 10770, 10781) */
		reached[1][10770] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10781, 10774, 10781) */
		reached[1][10774] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4576: // STATE 10772 - mutant_1.pml:303 - [(1)] (10781:0:0 - 1)
		IfNotBlocked
		reached[1][10772] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10781, 10774, 10781) */
		reached[1][10774] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4577: // STATE 10777 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10777] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4578: // STATE 10780 - mutant_1.pml:310 - [(1)] (10820:0:1 - 1)
		IfNotBlocked
		reached[1][10780] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10820, 10782, 10820) */
		reached[1][10782] = 1;
		;
		/* merge: .(goto)(10820, 10814, 10820) */
		reached[1][10814] = 1;
		;
		/* merge: j = (j+1)(10820, 10816, 10820) */
		reached[1][10816] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10821, 10820) */
		reached[1][10821] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4579: // STATE 10784 - mutant_1.pml:367 - [(((2==STOP)||(2==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10784] = 1;
		if (!(((2==2)||(2==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4580: // STATE 10785 - mutant_1.pml:316 - [(((STOP==START)&&(commands[j]==CONTINUE)))] (10810:0:1 - 1)
		IfNotBlocked
		reached[1][10785] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert((states[j]==READY))(10810, 10786, 10810) */
		reached[1][10786] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==13), "(states[j]==13)", II, tt, t);
		/* merge: commands[j] = START(10810, 10787, 10810) */
		reached[1][10787] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10810, 10803, 10810) */
		reached[1][10803] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4581: // STATE 10803 - mutant_1.pml:334 - [.(goto)] (0:10810:0 - 6)
		IfNotBlocked
		reached[1][10803] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4582: // STATE 10788 - mutant_1.pml:319 - [(((STOP==PAUSE)&&(commands[j]==CONTINUE)))] (10810:0:1 - 1)
		IfNotBlocked
		reached[1][10788] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==RUNNING)))(10810, 10789, 10810) */
		reached[1][10789] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)), "((states[j]==12)||(states[j]==11))", II, tt, t);
		/* merge: commands[j] = PAUSE(10810, 10790, 10810) */
		reached[1][10790] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10810, 10803, 10810) */
		reached[1][10803] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4583: // STATE 10791 - mutant_1.pml:322 - [(((STOP==CONTINUE)&&((commands[j]==START)||(commands[j]==PAUSE))))] (10810:0:1 - 1)
		IfNotBlocked
		reached[1][10791] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==9)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert(((states[j]==STARTING)||(states[j]==PAUSED)))(10810, 10792, 10810) */
		reached[1][10792] = 1;
		spin_assert(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "((states[j]==12)||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = CONTINUE(10810, 10793, 10810) */
		reached[1][10793] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10810, 10803, 10810) */
		reached[1][10803] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4584: // STATE 10794 - mutant_1.pml:325 - [(((STOP==STOP)&&((commands[j]==CONTINUE)||(commands[j]==PAUSE))))] (10810:0:1 - 1)
		IfNotBlocked
		reached[1][10794] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==8)||(now.commands[ Index(((int)((P1 *)_this)->j), 3) ]==6)))))
			continue;
		/* merge: assert((((states[j]==STARTING)||(states[j]==RUNNING))||(states[j]==PAUSED)))(10810, 10795, 10810) */
		reached[1][10795] = 1;
		spin_assert((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==12)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)), "(((states[j]==12)||(states[j]==11))||(states[j]==10))", II, tt, t);
		/* merge: commands[j] = STOP(10810, 10796, 10810) */
		reached[1][10796] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10810, 10803, 10810) */
		reached[1][10803] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4585: // STATE 10797 - mutant_1.pml:328 - [((STOP==ABORT))] (10810:0:1 - 1)
		IfNotBlocked
		reached[1][10797] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[j]!=READY))(10810, 10798, 10810) */
		reached[1][10798] = 1;
		spin_assert((now.states[ Index(((int)((P1 *)_this)->j), 3) ]!=13), "(states[j]!=13)", II, tt, t);
		/* merge: commands[j] = ABORT(10810, 10799, 10810) */
		reached[1][10799] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P1 *)_this)->j), 3) ];
		now.commands[ Index(((P1 *)_this)->j, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Supervisor:j]", now.commands[ Index(((int)((P1 *)_this)->j), 3) ]);
#endif
		;
		/* merge: .(goto)(10810, 10803, 10810) */
		reached[1][10803] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4586: // STATE 10801 - mutant_1.pml:332 - [(1)] (10810:0:0 - 1)
		IfNotBlocked
		reached[1][10801] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10810, 10803, 10810) */
		reached[1][10803] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4587: // STATE 10806 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10806] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4588: // STATE 10809 - mutant_1.pml:339 - [(1)] (10820:0:1 - 1)
		IfNotBlocked
		reached[1][10809] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(10820, 10811, 10820) */
		reached[1][10811] = 1;
		;
		/* merge: .(goto)(10820, 10814, 10820) */
		reached[1][10814] = 1;
		;
		/* merge: j = (j+1)(10820, 10816, 10820) */
		reached[1][10816] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10821, 10820) */
		reached[1][10821] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4589: // STATE 10816 - mutant_1.pml:375 - [j = (j+1)] (0:10820:1 - 13)
		IfNotBlocked
		reached[1][10816] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10821, 10820) */
		reached[1][10821] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4590: // STATE 10818 - mutant_1.pml:377 - [j = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[1][10818] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4591: // STATE 10824 - mutant_1.pml:403 - [((j<3))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10824] = 1;
		if (!((((int)((P1 *)_this)->j)<3)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4592: // STATE 10825 - mutant_1.pml:405 - [((2==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10825] = 1;
		if (!((2==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4593: // STATE 10826 - mutant_1.pml:211 - [(((((((states[j]==RUNNING)||(states[j]==PAUSED))||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10826] = 1;
		if (!(((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4594: // STATE 10828 - mutant_1.pml:407 - [((2==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10828] = 1;
		if (!((2==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4595: // STATE 10829 - mutant_1.pml:217 - [((((((states[j]==RUNNING)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10829] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==11)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4596: // STATE 10831 - mutant_1.pml:409 - [((2==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10831] = 1;
		if (!((2==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4597: // STATE 10832 - mutant_1.pml:214 - [((((((states[j]==PAUSED)||(states[j]==STOPPING))||(states[j]==STOPPED))||(states[j]==ABORTING))||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10832] = 1;
		if (!((((((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==10)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==7))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==4))||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4598: // STATE 10834 - mutant_1.pml:411 - [((2==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10834] = 1;
		if (!((2==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4599: // STATE 10835 - mutant_1.pml:220 - [(((states[j]==STOPPED)||(states[j]==ABORTED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10835] = 1;
		if (!(((now.states[ Index(((int)((P1 *)_this)->j), 3) ]==5)||(now.states[ Index(((int)((P1 *)_this)->j), 3) ]==3))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4600: // STATE 10839 - mutant_1.pml:414 - [j = (j+1)] (0:10843:1 - 5)
		IfNotBlocked
		reached[1][10839] = 1;
		(trpt+1)->bup.oval = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = (((int)((P1 *)_this)->j)+1);
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		/* merge: .(goto)(0, 10844, 10843) */
		reached[1][10844] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4601: // STATE 10841 - mutant_1.pml:416 - [j = 1] (0:0:2 - 1)
		IfNotBlocked
		reached[1][10841] = 1;
		(trpt+1)->bup.ovals = grab_ints(2);
		(trpt+1)->bup.ovals[0] = ((int)((P1 *)_this)->j);
		((P1 *)_this)->j = 1;
#ifdef VAR_RANGES
		logval("Supervisor:j", ((int)((P1 *)_this)->j));
#endif
		;
		if (TstOnly) return 1; /* TT */
		/* dead 2: j */  
#ifdef HAS_CODE
		if (!readtrail)
#endif
			((P1 *)_this)->j = 0;
		_m = 3; goto P999; /* 0 */
	case 4602: // STATE 10857 - mutant_1.pml:463 - [states[0] = 3] (0:0:1 - 41)
		IfNotBlocked
		reached[1][10857] = 1;
		(trpt+1)->bup.oval = now.states[0];
		now.states[0] = 3;
#ifdef VAR_RANGES
		logval("states[0]", now.states[0]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4603: // STATE 10860 - mutant_1.pml:545 - [assert(0)] (0:0:0 - 1)
		IfNotBlocked
		reached[1][10860] = 1;
		spin_assert(0, "0", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 4604: // STATE 10863 - mutant_1.pml:547 - [-end-] (0:0:0 - 4)
		IfNotBlocked
		reached[1][10863] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */

		 /* PROC Thread */
	case 4605: // STATE 1 - mutant_1.pml:144 - [((commands[k]==START))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][1] = 1;
		if (!((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==9)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4606: // STATE 2 - mutant_1.pml:138 - [states[k] = 12] (0:0:1 - 1)
		IfNotBlocked
		reached[0][2] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 12;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4607: // STATE 4 - mutant_1.pml:148 - [(((CONTINUE==START)&&(commands[k]==CONTINUE)))] (92:0:1 - 1)
		IfNotBlocked
		reached[0][4] = 1;
		if (!(((8==9)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert((states[k]==READY))(92, 5, 92) */
		reached[0][5] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==13), "(states[k]==13)", II, tt, t);
		/* merge: commands[k] = START(92, 6, 92) */
		reached[0][6] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(92, 22, 92) */
		reached[0][22] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4608: // STATE 22 - mutant_1.pml:166 - [.(goto)] (0:92:0 - 6)
		IfNotBlocked
		reached[0][22] = 1;
		;
		_m = 3; goto P999; /* 0 */
	case 4609: // STATE 7 - mutant_1.pml:151 - [(((CONTINUE==PAUSE)&&(commands[k]==CONTINUE)))] (92:0:1 - 1)
		IfNotBlocked
		reached[0][7] = 1;
		if (!(((8==6)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(92, 8, 92) */
		reached[0][8] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11)), "((states[k]==12)||(states[k]==11))", II, tt, t);
		/* merge: commands[k] = PAUSE(92, 9, 92) */
		reached[0][9] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(92, 22, 92) */
		reached[0][22] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4610: // STATE 10 - mutant_1.pml:154 - [(((CONTINUE==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (92:0:1 - 1)
		IfNotBlocked
		reached[0][10] = 1;
		if (!(((8==8)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==9)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(92, 11, 92) */
		reached[0][11] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "((states[k]==12)||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = CONTINUE(92, 12, 92) */
		reached[0][12] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(92, 22, 92) */
		reached[0][22] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4611: // STATE 13 - mutant_1.pml:157 - [(((CONTINUE==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (92:0:1 - 1)
		IfNotBlocked
		reached[0][13] = 1;
		if (!(((8==2)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(92, 14, 92) */
		reached[0][14] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "(((states[k]==12)||(states[k]==11))||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = STOP(92, 15, 92) */
		reached[0][15] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(92, 22, 92) */
		reached[0][22] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4612: // STATE 16 - mutant_1.pml:160 - [((CONTINUE==ABORT))] (92:0:1 - 1)
		IfNotBlocked
		reached[0][16] = 1;
		if (!((8==1)))
			continue;
		/* merge: assert((states[k]!=READY))(92, 17, 92) */
		reached[0][17] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=13), "(states[k]!=13)", II, tt, t);
		/* merge: commands[k] = ABORT(92, 18, 92) */
		reached[0][18] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(92, 22, 92) */
		reached[0][22] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4613: // STATE 20 - mutant_1.pml:164 - [(1)] (92:0:0 - 1)
		IfNotBlocked
		reached[0][20] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(92, 22, 92) */
		reached[0][22] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4614: // STATE 25 - mutant_1.pml:9 - [(((ABORT!=START)&&(commands[k]==CONTINUE)))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][25] = 1;
		if (!(((1!=9)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert((states[k]==READY))(171, 26, 171) */
		reached[0][26] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==13), "(states[k]==13)", II, tt, t);
		/* merge: commands[k] = START(171, 27, 171) */
		reached[0][27] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 43, 171) */
		reached[0][43] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4615: // STATE 43 - mutant_1.pml:27 - [.(goto)] (0:171:0 - 6)
		IfNotBlocked
		reached[0][43] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4616: // STATE 28 - mutant_1.pml:12 - [(((ABORT==PAUSE)&&(commands[k]==CONTINUE)))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][28] = 1;
		if (!(((1==6)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(171, 29, 171) */
		reached[0][29] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11)), "((states[k]==12)||(states[k]==11))", II, tt, t);
		/* merge: commands[k] = PAUSE(171, 30, 171) */
		reached[0][30] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 43, 171) */
		reached[0][43] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4617: // STATE 31 - mutant_1.pml:15 - [(((ABORT==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][31] = 1;
		if (!(((1==8)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==9)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(171, 32, 171) */
		reached[0][32] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "((states[k]==12)||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = CONTINUE(171, 33, 171) */
		reached[0][33] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 43, 171) */
		reached[0][43] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4618: // STATE 34 - mutant_1.pml:18 - [(((ABORT==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][34] = 1;
		if (!(((1==2)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(171, 35, 171) */
		reached[0][35] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "(((states[k]==12)||(states[k]==11))||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = STOP(171, 36, 171) */
		reached[0][36] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 43, 171) */
		reached[0][43] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4619: // STATE 37 - mutant_1.pml:21 - [((ABORT==ABORT))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][37] = 1;
		if (!((1==1)))
			continue;
		/* merge: assert((states[k]!=READY))(171, 38, 171) */
		reached[0][38] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=13), "(states[k]!=13)", II, tt, t);
		/* merge: commands[k] = ABORT(171, 39, 171) */
		reached[0][39] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 43, 171) */
		reached[0][43] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4620: // STATE 41 - mutant_1.pml:25 - [(1)] (171:0:0 - 1)
		IfNotBlocked
		reached[0][41] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(171, 43, 171) */
		reached[0][43] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4621: // STATE 47 - mutant_1.pml:36 - [(((PAUSE==START)&&(commands[k]==CONTINUE)))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][47] = 1;
		if (!(((6==9)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert((states[k]==READY))(171, 48, 171) */
		reached[0][48] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==13), "(states[k]==13)", II, tt, t);
		/* merge: commands[k] = START(171, 49, 171) */
		reached[0][49] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 65, 171) */
		reached[0][65] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4622: // STATE 65 - mutant_1.pml:54 - [.(goto)] (0:171:0 - 6)
		IfNotBlocked
		reached[0][65] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4623: // STATE 50 - mutant_1.pml:39 - [(((PAUSE==PAUSE)&&(commands[k]==CONTINUE)))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][50] = 1;
		if (!(((6==6)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(171, 51, 171) */
		reached[0][51] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11)), "((states[k]==12)||(states[k]==11))", II, tt, t);
		/* merge: commands[k] = PAUSE(171, 52, 171) */
		reached[0][52] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 65, 171) */
		reached[0][65] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4624: // STATE 53 - mutant_1.pml:42 - [(((PAUSE==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][53] = 1;
		if (!(((6==8)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==9)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(171, 54, 171) */
		reached[0][54] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "((states[k]==12)||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = CONTINUE(171, 55, 171) */
		reached[0][55] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 65, 171) */
		reached[0][65] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4625: // STATE 56 - mutant_1.pml:45 - [(((PAUSE==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][56] = 1;
		if (!(((6==2)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(171, 57, 171) */
		reached[0][57] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "(((states[k]==12)||(states[k]==11))||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = STOP(171, 58, 171) */
		reached[0][58] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 65, 171) */
		reached[0][65] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4626: // STATE 59 - mutant_1.pml:48 - [((PAUSE==ABORT))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][59] = 1;
		if (!((6==1)))
			continue;
		/* merge: assert((states[k]!=READY))(171, 60, 171) */
		reached[0][60] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=13), "(states[k]!=13)", II, tt, t);
		/* merge: commands[k] = ABORT(171, 61, 171) */
		reached[0][61] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 65, 171) */
		reached[0][65] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4627: // STATE 63 - mutant_1.pml:52 - [(1)] (171:0:0 - 1)
		IfNotBlocked
		reached[0][63] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(171, 65, 171) */
		reached[0][65] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4628: // STATE 68 - mutant_1.pml:58 - [(((STOP==START)&&(commands[k]==CONTINUE)))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][68] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert((states[k]==READY))(171, 69, 171) */
		reached[0][69] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==13), "(states[k]==13)", II, tt, t);
		/* merge: commands[k] = START(171, 70, 171) */
		reached[0][70] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 86, 171) */
		reached[0][86] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4629: // STATE 86 - mutant_1.pml:76 - [.(goto)] (0:171:0 - 6)
		IfNotBlocked
		reached[0][86] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4630: // STATE 71 - mutant_1.pml:61 - [(((STOP==PAUSE)&&(commands[k]==CONTINUE)))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][71] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(171, 72, 171) */
		reached[0][72] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11)), "((states[k]==12)||(states[k]==11))", II, tt, t);
		/* merge: commands[k] = PAUSE(171, 73, 171) */
		reached[0][73] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 86, 171) */
		reached[0][86] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4631: // STATE 74 - mutant_1.pml:64 - [(((STOP==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][74] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==9)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(171, 75, 171) */
		reached[0][75] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "((states[k]==12)||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = CONTINUE(171, 76, 171) */
		reached[0][76] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 86, 171) */
		reached[0][86] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4632: // STATE 77 - mutant_1.pml:67 - [(((STOP==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][77] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(171, 78, 171) */
		reached[0][78] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "(((states[k]==12)||(states[k]==11))||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = STOP(171, 79, 171) */
		reached[0][79] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 86, 171) */
		reached[0][86] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4633: // STATE 80 - mutant_1.pml:70 - [((STOP==ABORT))] (171:0:1 - 1)
		IfNotBlocked
		reached[0][80] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[k]!=READY))(171, 81, 171) */
		reached[0][81] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=13), "(states[k]!=13)", II, tt, t);
		/* merge: commands[k] = ABORT(171, 82, 171) */
		reached[0][82] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(171, 86, 171) */
		reached[0][86] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 5 */
	case 4634: // STATE 84 - mutant_1.pml:74 - [(1)] (171:0:0 - 1)
		IfNotBlocked
		reached[0][84] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(171, 86, 171) */
		reached[0][86] = 1;
		;
		/* merge: .(goto)(0, 91, 171) */
		reached[0][91] = 1;
		;
		/* merge: .(goto)(0, 172, 171) */
		reached[0][172] = 1;
		;
		_m = 3; goto P999; /* 3 */
	case 4635: // STATE 93 - mutant_1.pml:169 - [((commands[k]==CONTINUE))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][93] = 1;
		if (!((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4636: // STATE 94 - mutant_1.pml:170 - [assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][94] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "(((states[k]==12)||(states[k]==11))||(states[k]==10))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 4637: // STATE 95 - mutant_1.pml:172 - [((states[k]==STARTING))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][95] = 1;
		if (!((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4638: // STATE 96 - mutant_1.pml:138 - [states[k] = 11] (0:0:1 - 1)
		IfNotBlocked
		reached[0][96] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 11;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4639: // STATE 98 - mutant_1.pml:174 - [((states[k]==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][98] = 1;
		if (!((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4640: // STATE 99 - mutant_1.pml:138 - [states[k] = 11] (0:0:1 - 1)
		IfNotBlocked
		reached[0][99] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 11;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4641: // STATE 105 - mutant_1.pml:82 - [executing[k] = 1] (0:0:1 - 1)
		IfNotBlocked
		reached[0][105] = 1;
		(trpt+1)->bup.oval = ((int)now.executing[ Index(((int)((P0 *)_this)->k), 3) ]);
		now.executing[ Index(((P0 *)_this)->k, 3) ] = 1;
#ifdef VAR_RANGES
		logval("executing[Thread:k]", ((int)now.executing[ Index(((int)((P0 *)_this)->k), 3) ]));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4642: // STATE 107 - mutant_1.pml:9 - [(((ABORT!=START)&&(commands[k]==CONTINUE)))] (153:0:1 - 1)
		IfNotBlocked
		reached[0][107] = 1;
		if (!(((1!=9)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert((states[k]==READY))(153, 108, 153) */
		reached[0][108] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==13), "(states[k]==13)", II, tt, t);
		/* merge: commands[k] = START(153, 109, 153) */
		reached[0][109] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(153, 125, 153) */
		reached[0][125] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4643: // STATE 125 - mutant_1.pml:27 - [.(goto)] (0:153:0 - 6)
		IfNotBlocked
		reached[0][125] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4644: // STATE 110 - mutant_1.pml:12 - [(((ABORT==PAUSE)&&(commands[k]==CONTINUE)))] (153:0:1 - 1)
		IfNotBlocked
		reached[0][110] = 1;
		if (!(((1==6)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(153, 111, 153) */
		reached[0][111] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11)), "((states[k]==12)||(states[k]==11))", II, tt, t);
		/* merge: commands[k] = PAUSE(153, 112, 153) */
		reached[0][112] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(153, 125, 153) */
		reached[0][125] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4645: // STATE 113 - mutant_1.pml:15 - [(((ABORT==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (153:0:1 - 1)
		IfNotBlocked
		reached[0][113] = 1;
		if (!(((1==8)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==9)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(153, 114, 153) */
		reached[0][114] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "((states[k]==12)||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = CONTINUE(153, 115, 153) */
		reached[0][115] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(153, 125, 153) */
		reached[0][125] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4646: // STATE 116 - mutant_1.pml:18 - [(((ABORT==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (153:0:1 - 1)
		IfNotBlocked
		reached[0][116] = 1;
		if (!(((1==2)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(153, 117, 153) */
		reached[0][117] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "(((states[k]==12)||(states[k]==11))||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = STOP(153, 118, 153) */
		reached[0][118] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(153, 125, 153) */
		reached[0][125] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4647: // STATE 119 - mutant_1.pml:21 - [((ABORT==ABORT))] (153:0:1 - 1)
		IfNotBlocked
		reached[0][119] = 1;
		if (!((1==1)))
			continue;
		/* merge: assert((states[k]!=READY))(153, 120, 153) */
		reached[0][120] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=13), "(states[k]!=13)", II, tt, t);
		/* merge: commands[k] = ABORT(153, 121, 153) */
		reached[0][121] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(153, 125, 153) */
		reached[0][125] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4648: // STATE 123 - mutant_1.pml:25 - [(1)] (153:0:0 - 1)
		IfNotBlocked
		reached[0][123] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(153, 125, 153) */
		reached[0][125] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4649: // STATE 129 - mutant_1.pml:89 - [(((STOP==START)&&(commands[k]==CONTINUE)))] (153:0:1 - 1)
		IfNotBlocked
		reached[0][129] = 1;
		if (!(((2==9)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert((states[k]==READY))(153, 130, 153) */
		reached[0][130] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==13), "(states[k]==13)", II, tt, t);
		/* merge: commands[k] = START(153, 131, 153) */
		reached[0][131] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(153, 147, 153) */
		reached[0][147] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4650: // STATE 147 - mutant_1.pml:107 - [.(goto)] (0:153:0 - 6)
		IfNotBlocked
		reached[0][147] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4651: // STATE 132 - mutant_1.pml:92 - [(((STOP==PAUSE)&&(commands[k]==CONTINUE)))] (153:0:1 - 1)
		IfNotBlocked
		reached[0][132] = 1;
		if (!(((2==6)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(153, 133, 153) */
		reached[0][133] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11)), "((states[k]==12)||(states[k]==11))", II, tt, t);
		/* merge: commands[k] = PAUSE(153, 134, 153) */
		reached[0][134] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(153, 147, 153) */
		reached[0][147] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4652: // STATE 135 - mutant_1.pml:95 - [(((STOP==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (153:0:1 - 1)
		IfNotBlocked
		reached[0][135] = 1;
		if (!(((2==8)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==9)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(153, 136, 153) */
		reached[0][136] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "((states[k]==12)||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = CONTINUE(153, 137, 153) */
		reached[0][137] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(153, 147, 153) */
		reached[0][147] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4653: // STATE 138 - mutant_1.pml:98 - [(((STOP==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (153:0:1 - 1)
		IfNotBlocked
		reached[0][138] = 1;
		if (!(((2==2)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(153, 139, 153) */
		reached[0][139] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "(((states[k]==12)||(states[k]==11))||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = STOP(153, 140, 153) */
		reached[0][140] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(153, 147, 153) */
		reached[0][147] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4654: // STATE 141 - mutant_1.pml:101 - [((STOP==ABORT))] (153:0:1 - 1)
		IfNotBlocked
		reached[0][141] = 1;
		if (!((2==1)))
			continue;
		/* merge: assert((states[k]!=READY))(153, 142, 153) */
		reached[0][142] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=13), "(states[k]!=13)", II, tt, t);
		/* merge: commands[k] = ABORT(153, 143, 153) */
		reached[0][143] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(153, 147, 153) */
		reached[0][147] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4655: // STATE 145 - mutant_1.pml:105 - [(1)] (153:0:0 - 1)
		IfNotBlocked
		reached[0][145] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(153, 147, 153) */
		reached[0][147] = 1;
		;
		/* merge: .(goto)(0, 152, 153) */
		reached[0][152] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4656: // STATE 153 - mutant_1.pml:111 - [executing[k] = 0] (0:0:1 - 4)
		IfNotBlocked
		reached[0][153] = 1;
		(trpt+1)->bup.oval = ((int)now.executing[ Index(((int)((P0 *)_this)->k), 3) ]);
		now.executing[ Index(((P0 *)_this)->k, 3) ] = 0;
#ifdef VAR_RANGES
		logval("executing[Thread:k]", ((int)now.executing[ Index(((int)((P0 *)_this)->k), 3) ]));
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4657: // STATE 155 - mutant_1.pml:180 - [((commands[k]==PAUSE))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][155] = 1;
		if (!((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4658: // STATE 156 - mutant_1.pml:182 - [((states[k]==PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][156] = 1;
		if (!((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4659: // STATE 157 - mutant_1.pml:183 - [((commands[k]!=PAUSED))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][157] = 1;
		if (!((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]!=10)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4660: // STATE 159 - mutant_1.pml:185 - [assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==STARTING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][159] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)), "(((states[k]==12)||(states[k]==11))||(states[k]==12))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 4661: // STATE 160 - mutant_1.pml:187 - [(((states[k]==STARTING)||(states[k]==RUNNING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][160] = 1;
		if (!(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4662: // STATE 161 - mutant_1.pml:141 - [states[k] = 10] (0:0:1 - 1)
		IfNotBlocked
		reached[0][161] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 10;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4663: // STATE 169 - mutant_1.pml:193 - [(((commands[k]==STOP)||(commands[k]==ABORT)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][169] = 1;
		if (!(((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==2)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==1))))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4664: // STATE 174 - mutant_1.pml:197 - [((commands[k]==STOP))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][174] = 1;
		if (!((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==2)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4665: // STATE 175 - mutant_1.pml:198 - [assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][175] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "(((states[k]==12)||(states[k]==11))||(states[k]==10))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 4666: // STATE 176 - mutant_1.pml:138 - [states[k] = 7] (0:0:1 - 1)
		IfNotBlocked
		reached[0][176] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 7;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4667: // STATE 179 - mutant_1.pml:9 - [(((ABORT!=START)&&(commands[k]==CONTINUE)))] (206:0:1 - 1)
		IfNotBlocked
		reached[0][179] = 1;
		if (!(((1!=9)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert((states[k]==READY))(206, 180, 206) */
		reached[0][180] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==13), "(states[k]==13)", II, tt, t);
		/* merge: commands[k] = START(206, 181, 206) */
		reached[0][181] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 9;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(206, 197, 206) */
		reached[0][197] = 1;
		;
		/* merge: .(goto)(0, 203, 206) */
		reached[0][203] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4668: // STATE 197 - mutant_1.pml:27 - [.(goto)] (0:206:0 - 6)
		IfNotBlocked
		reached[0][197] = 1;
		;
		/* merge: .(goto)(0, 203, 206) */
		reached[0][203] = 1;
		;
		_m = 3; goto P999; /* 1 */
	case 4669: // STATE 182 - mutant_1.pml:12 - [(((ABORT==PAUSE)&&(commands[k]==CONTINUE)))] (206:0:1 - 1)
		IfNotBlocked
		reached[0][182] = 1;
		if (!(((1==6)&&(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==RUNNING)))(206, 183, 206) */
		reached[0][183] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11)), "((states[k]==12)||(states[k]==11))", II, tt, t);
		/* merge: commands[k] = PAUSE(206, 184, 206) */
		reached[0][184] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 6;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(206, 197, 206) */
		reached[0][197] = 1;
		;
		/* merge: .(goto)(0, 203, 206) */
		reached[0][203] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4670: // STATE 185 - mutant_1.pml:15 - [(((ABORT==CONTINUE)&&((commands[k]==START)||(commands[k]==PAUSE))))] (206:0:1 - 1)
		IfNotBlocked
		reached[0][185] = 1;
		if (!(((1==8)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==9)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert(((states[k]==STARTING)||(states[k]==PAUSED)))(206, 186, 206) */
		reached[0][186] = 1;
		spin_assert(((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "((states[k]==12)||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = CONTINUE(206, 187, 206) */
		reached[0][187] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 8;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(206, 197, 206) */
		reached[0][197] = 1;
		;
		/* merge: .(goto)(0, 203, 206) */
		reached[0][203] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4671: // STATE 188 - mutant_1.pml:18 - [(((ABORT==STOP)&&((commands[k]==CONTINUE)||(commands[k]==PAUSE))))] (206:0:1 - 1)
		IfNotBlocked
		reached[0][188] = 1;
		if (!(((1==2)&&((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==8)||(now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==6)))))
			continue;
		/* merge: assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==PAUSED)))(206, 189, 206) */
		reached[0][189] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==10)), "(((states[k]==12)||(states[k]==11))||(states[k]==10))", II, tt, t);
		/* merge: commands[k] = STOP(206, 190, 206) */
		reached[0][190] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 2;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(206, 197, 206) */
		reached[0][197] = 1;
		;
		/* merge: .(goto)(0, 203, 206) */
		reached[0][203] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4672: // STATE 191 - mutant_1.pml:21 - [((ABORT==ABORT))] (206:0:1 - 1)
		IfNotBlocked
		reached[0][191] = 1;
		if (!((1==1)))
			continue;
		/* merge: assert((states[k]!=READY))(206, 192, 206) */
		reached[0][192] = 1;
		spin_assert((now.states[ Index(((int)((P0 *)_this)->k), 3) ]!=13), "(states[k]!=13)", II, tt, t);
		/* merge: commands[k] = ABORT(206, 193, 206) */
		reached[0][193] = 1;
		(trpt+1)->bup.oval = now.commands[ Index(((int)((P0 *)_this)->k), 3) ];
		now.commands[ Index(((P0 *)_this)->k, 3) ] = 1;
#ifdef VAR_RANGES
		logval("commands[Thread:k]", now.commands[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		/* merge: .(goto)(206, 197, 206) */
		reached[0][197] = 1;
		;
		/* merge: .(goto)(0, 203, 206) */
		reached[0][203] = 1;
		;
		_m = 3; goto P999; /* 4 */
	case 4673: // STATE 195 - mutant_1.pml:25 - [(1)] (206:0:0 - 1)
		IfNotBlocked
		reached[0][195] = 1;
		if (!(1))
			continue;
		/* merge: .(goto)(206, 197, 206) */
		reached[0][197] = 1;
		;
		/* merge: .(goto)(0, 203, 206) */
		reached[0][203] = 1;
		;
		_m = 3; goto P999; /* 2 */
	case 4674: // STATE 205 - mutant_1.pml:141 - [states[k] = 5] (0:0:1 - 1)
		IfNotBlocked
		reached[0][205] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 5;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4675: // STATE 207 - mutant_1.pml:202 - [((commands[k]==ABORT))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][207] = 1;
		if (!((now.commands[ Index(((int)((P0 *)_this)->k), 3) ]==1)))
			continue;
		_m = 3; goto P999; /* 0 */
	case 4676: // STATE 208 - mutant_1.pml:203 - [assert((((states[k]==STARTING)||(states[k]==RUNNING))||(states[k]==STOPPING)))] (0:0:0 - 1)
		IfNotBlocked
		reached[0][208] = 1;
		spin_assert((((now.states[ Index(((int)((P0 *)_this)->k), 3) ]==12)||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==11))||(now.states[ Index(((int)((P0 *)_this)->k), 3) ]==7)), "(((states[k]==12)||(states[k]==11))||(states[k]==7))", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 4677: // STATE 209 - mutant_1.pml:138 - [states[k] = 4] (0:0:1 - 1)
		IfNotBlocked
		reached[0][209] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 4;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4678: // STATE 211 - mutant_1.pml:141 - [states[k] = 3] (0:0:1 - 1)
		IfNotBlocked
		reached[0][211] = 1;
		(trpt+1)->bup.oval = now.states[ Index(((int)((P0 *)_this)->k), 3) ];
		now.states[ Index(((P0 *)_this)->k, 3) ] = 3;
#ifdef VAR_RANGES
		logval("states[Thread:k]", now.states[ Index(((int)((P0 *)_this)->k), 3) ]);
#endif
		;
		_m = 3; goto P999; /* 0 */
	case 4679: // STATE 214 - mutant_1.pml:207 - [assert(0)] (0:0:0 - 1)
		IfNotBlocked
		reached[0][214] = 1;
		spin_assert(0, "0", II, tt, t);
		_m = 3; goto P999; /* 0 */
	case 4680: // STATE 217 - mutant_1.pml:209 - [-end-] (0:0:0 - 4)
		IfNotBlocked
		reached[0][217] = 1;
		if (!delproc(1, II)) continue;
		_m = 3; goto P999; /* 0 */
	case  _T5:	/* np_ */
		if (!((!(trpt->o_pm&4) && !(trpt->tau&128))))
			continue;
		/* else fall through */
	case  _T2:	/* true */
		_m = 3; goto P999;
#undef rand
	}

